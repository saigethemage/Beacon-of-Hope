
c:/Users/Saige/Documents/IoT/Beacon-of-Hope/beacon_code/target/2.0.0/argon/beacon_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006920  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000da940  000da940  0000a940  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000da948  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e390  000da94c  0001e390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003ec  2003e404  2003e404  0002e404  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000da9c0  000da9c0  0002a9c0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000da9e8  000da9e8  0002a9e8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00177918  00000000  00000000  0002a9ec  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00018920  00000000  00000000  001a2304  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002cb52  00000000  00000000  001bac24  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002ba8  00000000  00000000  001e7776  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007830  00000000  00000000  001ea31e  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c3ba  00000000  00000000  001f1b4e  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003db62  00000000  00000000  0022df08  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010b383  00000000  00000000  0026ba6a  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007db0  00000000  00000000  00376df0  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 f885 	bl	da140 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 f88d 	bl	da15c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e390 	.word	0x2003e390
   d404c:	000da94c 	.word	0x000da94c
   d4050:	2003e404 	.word	0x2003e404
   d4054:	2003e404 	.word	0x2003e404
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 fed5 	bl	d6e10 <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000da90c 	.word	0x000da90c
   d4080:	000da934 	.word	0x000da934

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bd16 	b.w	d4ab4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fe49 	bl	d4d20 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 be7f 	b.w	d6d94 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 b9ad 	b.w	d63f4 <malloc>

000d409a <_Znaj>:
   d409a:	f002 b9ab 	b.w	d63f4 <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 b9b1 	b.w	d6404 <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40b4:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40b6:	6984      	ldr	r4, [r0, #24]
   d40b8:	4b0a      	ldr	r3, [pc, #40]	; (d40e4 <_ZN9TCPClientD1Ev+0x30>)
   d40ba:	6003      	str	r3, [r0, #0]
   d40bc:	4605      	mov	r5, r0
   d40be:	b17c      	cbz	r4, d40e0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d40c0:	6863      	ldr	r3, [r4, #4]
   d40c2:	3b01      	subs	r3, #1
   d40c4:	6063      	str	r3, [r4, #4]
   d40c6:	b95b      	cbnz	r3, d40e0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d40c8:	6823      	ldr	r3, [r4, #0]
   d40ca:	4620      	mov	r0, r4
   d40cc:	689b      	ldr	r3, [r3, #8]
   d40ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40d0:	68a3      	ldr	r3, [r4, #8]
   d40d2:	3b01      	subs	r3, #1
   d40d4:	60a3      	str	r3, [r4, #8]
   d40d6:	b91b      	cbnz	r3, d40e0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40d8:	6823      	ldr	r3, [r4, #0]
   d40da:	4620      	mov	r0, r4
   d40dc:	68db      	ldr	r3, [r3, #12]
   d40de:	4798      	blx	r3
   d40e0:	4628      	mov	r0, r5
   d40e2:	bd38      	pop	{r3, r4, r5, pc}
   d40e4:	000da648 	.word	0x000da648

000d40e8 <_ZN15ThingSpeakClass13abortWriteRawEv.isra.0>:
		textToSearch.remove(toPosition);
		
		return textToSearch.substring(fromPosition);	
	}
	
    int abortWriteRaw()
   d40e8:	b508      	push	{r3, lr}
    {
        this->client->stop();
   d40ea:	6803      	ldr	r3, [r0, #0]
   d40ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d40ee:	4798      	blx	r3
        return ERR_UNEXPECTED_FAIL;
    }
   d40f0:	4800      	ldr	r0, [pc, #0]	; (d40f4 <_ZN15ThingSpeakClass13abortWriteRawEv.isra.0+0xc>)
   d40f2:	bd08      	pop	{r3, pc}
   d40f4:	fffffed2 	.word	0xfffffed2

000d40f8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40f8:	6803      	ldr	r3, [r0, #0]
   d40fa:	b2c9      	uxtb	r1, r1
   d40fc:	689b      	ldr	r3, [r3, #8]
   d40fe:	4718      	bx	r3

000d4100 <_ZN9TCPClientD0Ev>:
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
   d4104:	f7ff ffd6 	bl	d40b4 <_ZN9TCPClientD1Ev>
   d4108:	4620      	mov	r0, r4
   d410a:	211c      	movs	r1, #28
   d410c:	f003 fd21 	bl	d7b52 <_ZdlPvj>
   d4110:	4620      	mov	r0, r4
   d4112:	bd10      	pop	{r4, pc}

000d4114 <_ZN15ThingSpeakClass8setFieldEjf>:
    int setField(unsigned int field, float value)
   d4114:	b530      	push	{r4, r5, lr}
	};

	int convertFloatToChar(float value, char *valueString)
	{
		// Supported range is -999999000000 to 999999000000
		if(0 == isinf(value) && (value > 999999000000 || value < -999999000000))
   d4116:	eddf 7a22 	vldr	s15, [pc, #136]	; d41a0 <_ZN15ThingSpeakClass8setFieldEjf+0x8c>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }
   d411a:	eeb0 7ac0 	vabs.f32	s14, s0
   d411e:	eeb4 7a67 	vcmp.f32	s14, s15
   d4122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int setField(unsigned int field, float value)
   d4126:	b08b      	sub	sp, #44	; 0x2c
   d4128:	4605      	mov	r5, r0
   d412a:	460c      	mov	r4, r1
		if(0 == isinf(value) && (value > 999999000000 || value < -999999000000))
   d412c:	dc0d      	bgt.n	d414a <_ZN15ThingSpeakClass8setFieldEjf+0x36>
   d412e:	eddf 7a1d 	vldr	s15, [pc, #116]	; d41a4 <_ZN15ThingSpeakClass8setFieldEjf+0x90>
   d4132:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d413a:	dc2d      	bgt.n	d4198 <_ZN15ThingSpeakClass8setFieldEjf+0x84>
   d413c:	eddf 7a1a 	vldr	s15, [pc, #104]	; d41a8 <_ZN15ThingSpeakClass8setFieldEjf+0x94>
   d4140:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4148:	d426      	bmi.n	d4198 <_ZN15ThingSpeakClass8setFieldEjf+0x84>
		{
			// Out of range
			return ERR_OUT_OF_RANGE;
		}
		// Given that the resolution of Spark is 1 / 2^12, or ~0.00024 volts, assume that 5 places right of decimal should be sufficient for most applications
        sprintf(valueString, "%.5f", value);
   d414a:	ee10 0a10 	vmov	r0, s0
   d414e:	f005 f975 	bl	d943c <__aeabi_f2d>
   d4152:	4602      	mov	r2, r0
   d4154:	460b      	mov	r3, r1
   d4156:	a805      	add	r0, sp, #20
   d4158:	4914      	ldr	r1, [pc, #80]	; (d41ac <_ZN15ThingSpeakClass8setFieldEjf+0x98>)
   d415a:	f002 f963 	bl	d6424 <sprintf>
		return setField(field, String(value));
   d415e:	a905      	add	r1, sp, #20
   d4160:	a801      	add	r0, sp, #4
   d4162:	f002 fb84 	bl	d686e <_ZN6StringC1EPKc>
		if(field < FIELDNUM_MIN || field > FIELDNUM_MAX) return ERR_INVALID_FIELD_NUM;
   d4166:	1e61      	subs	r1, r4, #1
   d4168:	2907      	cmp	r1, #7
   d416a:	d80f      	bhi.n	d418c <_ZN15ThingSpeakClass8setFieldEjf+0x78>
		if(value.length() > FIELDLENGTH_MAX) return ERR_OUT_OF_RANGE;
   d416c:	9b03      	ldr	r3, [sp, #12]
   d416e:	2bff      	cmp	r3, #255	; 0xff
   d4170:	d80f      	bhi.n	d4192 <_ZN15ThingSpeakClass8setFieldEjf+0x7e>
		this->nextWriteField[field - 1] = value;
   d4172:	eb05 1001 	add.w	r0, r5, r1, lsl #4
   d4176:	3008      	adds	r0, #8
   d4178:	a901      	add	r1, sp, #4
   d417a:	f002 fba9 	bl	d68d0 <_ZN6StringaSERKS_>
		return OK_SUCCESS;
   d417e:	24c8      	movs	r4, #200	; 0xc8
		return setField(field, String(value));
   d4180:	a801      	add	r0, sp, #4
   d4182:	f002 fb29 	bl	d67d8 <_ZN6StringD1Ev>
	};
   d4186:	4620      	mov	r0, r4
   d4188:	b00b      	add	sp, #44	; 0x2c
   d418a:	bd30      	pop	{r4, r5, pc}
		if(field < FIELDNUM_MIN || field > FIELDNUM_MAX) return ERR_INVALID_FIELD_NUM;
   d418c:	f06f 04c8 	mvn.w	r4, #200	; 0xc8
   d4190:	e7f6      	b.n	d4180 <_ZN15ThingSpeakClass8setFieldEjf+0x6c>
		if(value.length() > FIELDLENGTH_MAX) return ERR_OUT_OF_RANGE;
   d4192:	f06f 0464 	mvn.w	r4, #100	; 0x64
   d4196:	e7f3      	b.n	d4180 <_ZN15ThingSpeakClass8setFieldEjf+0x6c>
			return ERR_OUT_OF_RANGE;
   d4198:	f06f 0464 	mvn.w	r4, #100	; 0x64
   d419c:	e7f3      	b.n	d4186 <_ZN15ThingSpeakClass8setFieldEjf+0x72>
   d419e:	bf00      	nop
   d41a0:	7f7fffff 	.word	0x7f7fffff
   d41a4:	5368d496 	.word	0x5368d496
   d41a8:	d368d496 	.word	0xd368d496
   d41ac:	000da348 	.word	0x000da348

000d41b0 <_ZN15ThingSpeakClass9escapeUrlE6String>:
	String escapeUrl(String message){
   d41b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d41b4:	4615      	mov	r5, r2
   d41b6:	b087      	sub	sp, #28
		char ch[] = " ";
   d41b8:	2320      	movs	r3, #32
		String result = "";
   d41ba:	4933      	ldr	r1, [pc, #204]	; (d4288 <_ZN15ThingSpeakClass9escapeUrlE6String+0xd8>)
		char ch[] = " ";
   d41bc:	f8ad 3000 	strh.w	r3, [sp]
	String escapeUrl(String message){
   d41c0:	4606      	mov	r6, r0
		String result = "";
   d41c2:	f002 fb54 	bl	d686e <_ZN6StringC1EPKc>
		unsigned int n = message.length() + 1;  // add an extra for the null
   d41c6:	68ac      	ldr	r4, [r5, #8]
			if(t == 0x22 || t == 0x25 || t == 0x26 || t == 0x2B || t == 0x3B){
   d41c8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; d428c <_ZN15ThingSpeakClass9escapeUrlE6String+0xdc>
		unsigned int n = message.length() + 1;  // add an extra for the null
   d41cc:	3401      	adds	r4, #1
		for(i = 0; i < message.length(); i++){
   d41ce:	2700      	movs	r7, #0
   d41d0:	68ab      	ldr	r3, [r5, #8]
   d41d2:	429f      	cmp	r7, r3
   d41d4:	d216      	bcs.n	d4204 <_ZN15ThingSpeakClass9escapeUrlE6String+0x54>
			t = message.charAt(i);
   d41d6:	4639      	mov	r1, r7
   d41d8:	4628      	mov	r0, r5
   d41da:	f002 fc13 	bl	d6a04 <_ZNK6String6charAtEj>
			if( (t >= 0x00 && t <= 0x1F) || t >= 0x80 ){
   d41de:	f1a0 0320 	sub.w	r3, r0, #32
   d41e2:	b2db      	uxtb	r3, r3
   d41e4:	2b5f      	cmp	r3, #95	; 0x5f
   d41e6:	d902      	bls.n	d41ee <_ZN15ThingSpeakClass9escapeUrlE6String+0x3e>
				n--;
   d41e8:	3c01      	subs	r4, #1
		for(i = 0; i < message.length(); i++){
   d41ea:	3701      	adds	r7, #1
   d41ec:	e7f0      	b.n	d41d0 <_ZN15ThingSpeakClass9escapeUrlE6String+0x20>
			if(t == 0x22 || t == 0x25 || t == 0x26 || t == 0x2B || t == 0x3B){
   d41ee:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
   d41f2:	b2db      	uxtb	r3, r3
   d41f4:	2b19      	cmp	r3, #25
   d41f6:	d8f8      	bhi.n	d41ea <_ZN15ThingSpeakClass9escapeUrlE6String+0x3a>
   d41f8:	fa28 f303 	lsr.w	r3, r8, r3
   d41fc:	07da      	lsls	r2, r3, #31
				n = n + 2;
   d41fe:	bf48      	it	mi
   d4200:	3402      	addmi	r4, #2
   d4202:	e7f2      	b.n	d41ea <_ZN15ThingSpeakClass9escapeUrlE6String+0x3a>
		encoded = (char *)malloc(sizeof(char) * n);	
   d4204:	4620      	mov	r0, r4
   d4206:	f002 f8f5 	bl	d63f4 <malloc>
		if(encoded == NULL){
   d420a:	4604      	mov	r4, r0
   d420c:	2800      	cmp	r0, #0
   d420e:	d037      	beq.n	d4280 <_ZN15ThingSpeakClass9escapeUrlE6String+0xd0>
		encoded[0] = 0;
   d4210:	2700      	movs	r7, #0
			if(t == 0x22 || t == 0x25 || t == 0x26 || t == 0x2B || t == 0x3B){
   d4212:	f8df 8078 	ldr.w	r8, [pc, #120]	; d428c <_ZN15ThingSpeakClass9escapeUrlE6String+0xdc>
				sprintf(temp, "%%%02X", t);
   d4216:	f8df 9078 	ldr.w	r9, [pc, #120]	; d4290 <_ZN15ThingSpeakClass9escapeUrlE6String+0xe0>
		encoded[0] = 0;
   d421a:	7007      	strb	r7, [r0, #0]
		for(i = 0; i < message.length(); i++){
   d421c:	68ab      	ldr	r3, [r5, #8]
   d421e:	429f      	cmp	r7, r3
   d4220:	d220      	bcs.n	d4264 <_ZN15ThingSpeakClass9escapeUrlE6String+0xb4>
			t = message.charAt(i);
   d4222:	4639      	mov	r1, r7
   d4224:	4628      	mov	r0, r5
   d4226:	f002 fbed 	bl	d6a04 <_ZNK6String6charAtEj>
			if( (t >= 0x00 && t <= 0x1F) || t >= 0x80 ){
   d422a:	f1a0 0320 	sub.w	r3, r0, #32
   d422e:	b2db      	uxtb	r3, r3
   d4230:	2b5f      	cmp	r3, #95	; 0x5f
			t = message.charAt(i);
   d4232:	4602      	mov	r2, r0
			if( (t >= 0x00 && t <= 0x1F) || t >= 0x80 ){
   d4234:	d80e      	bhi.n	d4254 <_ZN15ThingSpeakClass9escapeUrlE6String+0xa4>
			if(t == 0x22 || t == 0x25 || t == 0x26 || t == 0x2B || t == 0x3B){
   d4236:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
   d423a:	b2db      	uxtb	r3, r3
   d423c:	2b19      	cmp	r3, #25
   d423e:	d803      	bhi.n	d4248 <_ZN15ThingSpeakClass9escapeUrlE6String+0x98>
   d4240:	fa28 f303 	lsr.w	r3, r8, r3
   d4244:	07db      	lsls	r3, r3, #31
   d4246:	d407      	bmi.n	d4258 <_ZN15ThingSpeakClass9escapeUrlE6String+0xa8>
			ch[0] = t;
   d4248:	f88d 2000 	strb.w	r2, [sp]
			strcat(encoded, ch);
   d424c:	4669      	mov	r1, sp
				strcat(encoded, temp);
   d424e:	4620      	mov	r0, r4
   d4250:	f005 ffb0 	bl	da1b4 <strcat>
		for(i = 0; i < message.length(); i++){
   d4254:	3701      	adds	r7, #1
   d4256:	e7e1      	b.n	d421c <_ZN15ThingSpeakClass9escapeUrlE6String+0x6c>
				sprintf(temp, "%%%02X", t);
   d4258:	4649      	mov	r1, r9
   d425a:	a801      	add	r0, sp, #4
   d425c:	f002 f8e2 	bl	d6424 <sprintf>
				strcat(encoded, temp);
   d4260:	a901      	add	r1, sp, #4
   d4262:	e7f4      	b.n	d424e <_ZN15ThingSpeakClass9escapeUrlE6String+0x9e>
		result = String(encoded);
   d4264:	4621      	mov	r1, r4
   d4266:	a802      	add	r0, sp, #8
   d4268:	f002 fb01 	bl	d686e <_ZN6StringC1EPKc>
   d426c:	a902      	add	r1, sp, #8
   d426e:	4630      	mov	r0, r6
   d4270:	f002 fb48 	bl	d6904 <_ZN6StringaSEOS_>
   d4274:	a802      	add	r0, sp, #8
   d4276:	f002 faaf 	bl	d67d8 <_ZN6StringD1Ev>
		free(encoded);
   d427a:	4620      	mov	r0, r4
   d427c:	f002 f8c2 	bl	d6404 <free>
	}
   d4280:	4630      	mov	r0, r6
   d4282:	b007      	add	sp, #28
   d4284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4288:	000da452 	.word	0x000da452
   d428c:	02000219 	.word	0x02000219
   d4290:	000da34d 	.word	0x000da34d

000d4294 <_ZN15ThingSpeakClass15getHTTPResponseER6String>:
	int getHTTPResponse(String & response)
   d4294:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4296:	b085      	sub	sp, #20
   d4298:	4604      	mov	r4, r0
   d429a:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d429c:	f001 feb6 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
        while(client->available() == 0 && millis() - startWaitForResponseAt < TIMEOUT_MS_SERVERRESPONSE)
   d42a0:	f241 3787 	movw	r7, #4999	; 0x1387
   d42a4:	4605      	mov	r5, r0
   d42a6:	6820      	ldr	r0, [r4, #0]
   d42a8:	6803      	ldr	r3, [r0, #0]
   d42aa:	691b      	ldr	r3, [r3, #16]
   d42ac:	4798      	blx	r3
   d42ae:	b940      	cbnz	r0, d42c2 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x2e>
   d42b0:	f001 feac 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
   d42b4:	1b40      	subs	r0, r0, r5
   d42b6:	42b8      	cmp	r0, r7
   d42b8:	d803      	bhi.n	d42c2 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x2e>
            delay(100);
   d42ba:	2064      	movs	r0, #100	; 0x64
   d42bc:	f002 fd28 	bl	d6d10 <delay>
        while(client->available() == 0 && millis() - startWaitForResponseAt < TIMEOUT_MS_SERVERRESPONSE)
   d42c0:	e7f1      	b.n	d42a6 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x12>
        if(client->available() == 0)
   d42c2:	6820      	ldr	r0, [r4, #0]
   d42c4:	6803      	ldr	r3, [r0, #0]
   d42c6:	691b      	ldr	r3, [r3, #16]
   d42c8:	4798      	blx	r3
   d42ca:	b338      	cbz	r0, d431c <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x88>
		if(!client->find(const_cast<char *>("HTTP/1.1")))
   d42cc:	4914      	ldr	r1, [pc, #80]	; (d4320 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x8c>)
   d42ce:	6820      	ldr	r0, [r4, #0]
   d42d0:	f002 fcc5 	bl	d6c5e <_ZN6Stream4findEPc>
   d42d4:	b920      	cbnz	r0, d42e0 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x4c>
			return ERR_BAD_RESPONSE; // Couldn't parse response (didn't find HTTP/1.1)
   d42d6:	f46f 7597 	mvn.w	r5, #302	; 0x12e
	};
   d42da:	4628      	mov	r0, r5
   d42dc:	b005      	add	sp, #20
   d42de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		int status = client->parseInt();
   d42e0:	6820      	ldr	r0, [r4, #0]
   d42e2:	f002 fceb 	bl	d6cbc <_ZN6Stream8parseIntEv>
		if(status != OK_SUCCESS)
   d42e6:	28c8      	cmp	r0, #200	; 0xc8
		int status = client->parseInt();
   d42e8:	4605      	mov	r5, r0
		if(status != OK_SUCCESS)
   d42ea:	d1f6      	bne.n	d42da <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x46>
		if(!client->find(const_cast<char *>("\r\n")))
   d42ec:	490d      	ldr	r1, [pc, #52]	; (d4324 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x90>)
   d42ee:	6820      	ldr	r0, [r4, #0]
   d42f0:	f002 fcb5 	bl	d6c5e <_ZN6Stream4findEPc>
   d42f4:	2800      	cmp	r0, #0
   d42f6:	d0ee      	beq.n	d42d6 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x42>
		if(!client->find(const_cast<char *>("\n\r\n")))
   d42f8:	490b      	ldr	r1, [pc, #44]	; (d4328 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x94>)
   d42fa:	6820      	ldr	r0, [r4, #0]
   d42fc:	f002 fcaf 	bl	d6c5e <_ZN6Stream4findEPc>
   d4300:	2800      	cmp	r0, #0
   d4302:	d0e8      	beq.n	d42d6 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x42>
		String tempString = client->readString();
   d4304:	6821      	ldr	r1, [r4, #0]
   d4306:	4668      	mov	r0, sp
   d4308:	f002 fcdc 	bl	d6cc4 <_ZN6Stream10readStringEv>
		response = tempString;
   d430c:	4669      	mov	r1, sp
   d430e:	4630      	mov	r0, r6
   d4310:	f002 fade 	bl	d68d0 <_ZN6StringaSERKS_>
		String tempString = client->readString();
   d4314:	4668      	mov	r0, sp
   d4316:	f002 fa5f 	bl	d67d8 <_ZN6StringD1Ev>
   d431a:	e7de      	b.n	d42da <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x46>
			return ERR_TIMEOUT; // Didn't get server response in time
   d431c:	4d03      	ldr	r5, [pc, #12]	; (d432c <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x98>)
   d431e:	e7dc      	b.n	d42da <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x46>
   d4320:	000da354 	.word	0x000da354
   d4324:	000da450 	.word	0x000da450
   d4328:	000da44f 	.word	0x000da44f
   d432c:	fffffed0 	.word	0xfffffed0

000d4330 <_ZN15ThingSpeakClass8writeRawEm6StringPKc>:
	int writeRaw(unsigned long channelNumber, String postMessage, const char * writeAPIKey)
   d4330:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4332:	4605      	mov	r5, r0
		connectSuccess = client->connect(THINGSPEAK_URL, this->port);
   d4334:	6800      	ldr	r0, [r0, #0]
   d4336:	4950      	ldr	r1, [pc, #320]	; (d4478 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x148>)
	int writeRaw(unsigned long channelNumber, String postMessage, const char * writeAPIKey)
   d4338:	461e      	mov	r6, r3
		connectSuccess = client->connect(THINGSPEAK_URL, this->port);
   d433a:	6803      	ldr	r3, [r0, #0]
	int writeRaw(unsigned long channelNumber, String postMessage, const char * writeAPIKey)
   d433c:	b089      	sub	sp, #36	; 0x24
		connectSuccess = client->connect(THINGSPEAK_URL, this->port);
   d433e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	int writeRaw(unsigned long channelNumber, String postMessage, const char * writeAPIKey)
   d4340:	4614      	mov	r4, r2
		connectSuccess = client->connect(THINGSPEAK_URL, this->port);
   d4342:	2300      	movs	r3, #0
   d4344:	88aa      	ldrh	r2, [r5, #4]
   d4346:	47b8      	blx	r7
		if(!connectThingSpeak())
   d4348:	2800      	cmp	r0, #0
   d434a:	f000 8092 	beq.w	d4472 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x142>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d434e:	4621      	mov	r1, r4
   d4350:	a804      	add	r0, sp, #16
   d4352:	f002 facc 	bl	d68ee <_ZN6StringC1ERKS_>
		postMessage = postMessage + String("&headers=false");
   d4356:	4949      	ldr	r1, [pc, #292]	; (d447c <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x14c>)
   d4358:	4668      	mov	r0, sp
   d435a:	f002 fa88 	bl	d686e <_ZN6StringC1EPKc>
   d435e:	4669      	mov	r1, sp
   d4360:	a804      	add	r0, sp, #16
   d4362:	f002 fb3a 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d4366:	4601      	mov	r1, r0
   d4368:	4620      	mov	r0, r4
   d436a:	f002 fab1 	bl	d68d0 <_ZN6StringaSERKS_>
   d436e:	4668      	mov	r0, sp
   d4370:	f002 fa32 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4374:	a804      	add	r0, sp, #16
   d4376:	f002 fa2f 	bl	d67d8 <_ZN6StringD1Ev>
		if(!this->client->print("POST /update HTTP/1.1\r\n")) return abortWriteRaw();
   d437a:	4941      	ldr	r1, [pc, #260]	; (d4480 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x150>)
   d437c:	6828      	ldr	r0, [r5, #0]
   d437e:	f002 fb8d 	bl	d6a9c <_ZN5Print5printEPKc>
   d4382:	b930      	cbnz	r0, d4392 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x62>
		if(!this->client->print(postMessage)) return abortWriteRaw();
   d4384:	6828      	ldr	r0, [r5, #0]
   d4386:	f7ff feaf 	bl	d40e8 <_ZN15ThingSpeakClass13abortWriteRawEv.isra.0>
   d438a:	4604      	mov	r4, r0
	};
   d438c:	4620      	mov	r0, r4
   d438e:	b009      	add	sp, #36	; 0x24
   d4390:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!this->client->print("Host: api.thingspeak.com\r\n")) return false;
   d4392:	493c      	ldr	r1, [pc, #240]	; (d4484 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x154>)
   d4394:	6828      	ldr	r0, [r5, #0]
   d4396:	f002 fb81 	bl	d6a9c <_ZN5Print5printEPKc>
   d439a:	2800      	cmp	r0, #0
   d439c:	d0f2      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if (!this->client->print("Connection: close\r\n")) return false;
   d439e:	493a      	ldr	r1, [pc, #232]	; (d4488 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x158>)
   d43a0:	6828      	ldr	r0, [r5, #0]
   d43a2:	f002 fb7b 	bl	d6a9c <_ZN5Print5printEPKc>
   d43a6:	2800      	cmp	r0, #0
   d43a8:	d0ec      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if (!this->client->print("User-Agent: ")) return false;
   d43aa:	4938      	ldr	r1, [pc, #224]	; (d448c <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x15c>)
   d43ac:	6828      	ldr	r0, [r5, #0]
   d43ae:	f002 fb75 	bl	d6a9c <_ZN5Print5printEPKc>
   d43b2:	2800      	cmp	r0, #0
   d43b4:	d0e6      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if (!this->client->print(TS_USER_AGENT)) return false;
   d43b6:	4936      	ldr	r1, [pc, #216]	; (d4490 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x160>)
   d43b8:	6828      	ldr	r0, [r5, #0]
   d43ba:	f002 fb6f 	bl	d6a9c <_ZN5Print5printEPKc>
   d43be:	2800      	cmp	r0, #0
   d43c0:	d0e0      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if (!this->client->print("\r\n")) return false;
   d43c2:	4934      	ldr	r1, [pc, #208]	; (d4494 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x164>)
   d43c4:	6828      	ldr	r0, [r5, #0]
   d43c6:	f002 fb69 	bl	d6a9c <_ZN5Print5printEPKc>
   d43ca:	2800      	cmp	r0, #0
   d43cc:	d0da      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if(NULL != APIKey)
   d43ce:	b18e      	cbz	r6, d43f4 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
			if (!this->client->print("X-THINGSPEAKAPIKEY: ")) return false;
   d43d0:	4931      	ldr	r1, [pc, #196]	; (d4498 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x168>)
   d43d2:	6828      	ldr	r0, [r5, #0]
   d43d4:	f002 fb62 	bl	d6a9c <_ZN5Print5printEPKc>
   d43d8:	2800      	cmp	r0, #0
   d43da:	d0d3      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
			if (!this->client->print(APIKey)) return false;
   d43dc:	6828      	ldr	r0, [r5, #0]
   d43de:	4631      	mov	r1, r6
   d43e0:	f002 fb5c 	bl	d6a9c <_ZN5Print5printEPKc>
   d43e4:	2800      	cmp	r0, #0
   d43e6:	d0cd      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
			if (!this->client->print("\r\n")) return false;
   d43e8:	492a      	ldr	r1, [pc, #168]	; (d4494 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x164>)
   d43ea:	6828      	ldr	r0, [r5, #0]
   d43ec:	f002 fb56 	bl	d6a9c <_ZN5Print5printEPKc>
   d43f0:	2800      	cmp	r0, #0
   d43f2:	d0c7      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if(!this->client->print("Content-Type: application/x-www-form-urlencoded\r\n")) return abortWriteRaw();
   d43f4:	4929      	ldr	r1, [pc, #164]	; (d449c <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x16c>)
   d43f6:	6828      	ldr	r0, [r5, #0]
   d43f8:	f002 fb50 	bl	d6a9c <_ZN5Print5printEPKc>
   d43fc:	2800      	cmp	r0, #0
   d43fe:	d0c1      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if(!this->client->print("Content-Length: ")) return abortWriteRaw();
   d4400:	4927      	ldr	r1, [pc, #156]	; (d44a0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x170>)
   d4402:	6828      	ldr	r0, [r5, #0]
   d4404:	f002 fb4a 	bl	d6a9c <_ZN5Print5printEPKc>
   d4408:	2800      	cmp	r0, #0
   d440a:	d0bb      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d440c:	68a1      	ldr	r1, [r4, #8]
   d440e:	6828      	ldr	r0, [r5, #0]
   d4410:	220a      	movs	r2, #10
   d4412:	f002 fb56 	bl	d6ac2 <_ZN5Print11printNumberEmh>
		if(!this->client->print(postMessage.length())) return abortWriteRaw();
   d4416:	2800      	cmp	r0, #0
   d4418:	d0b4      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if(!this->client->print("\r\n\r\n")) return abortWriteRaw();
   d441a:	4922      	ldr	r1, [pc, #136]	; (d44a4 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x174>)
   d441c:	6828      	ldr	r0, [r5, #0]
   d441e:	f002 fb3d 	bl	d6a9c <_ZN5Print5printEPKc>
   d4422:	2800      	cmp	r0, #0
   d4424:	d0ae      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if(!this->client->print(postMessage)) return abortWriteRaw();
   d4426:	6821      	ldr	r1, [r4, #0]
   d4428:	6828      	ldr	r0, [r5, #0]
   d442a:	f002 fb37 	bl	d6a9c <_ZN5Print5printEPKc>
   d442e:	2800      	cmp	r0, #0
   d4430:	d0a8      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		String entryIDText = String();
   d4432:	491d      	ldr	r1, [pc, #116]	; (d44a8 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x178>)
   d4434:	a804      	add	r0, sp, #16
   d4436:	f002 fa1a 	bl	d686e <_ZN6StringC1EPKc>
		int status = getHTTPResponse(entryIDText);
   d443a:	a904      	add	r1, sp, #16
   d443c:	4628      	mov	r0, r5
   d443e:	f7ff ff29 	bl	d4294 <_ZN15ThingSpeakClass15getHTTPResponseER6String>
		if(status != OK_SUCCESS)
   d4442:	28c8      	cmp	r0, #200	; 0xc8
		int status = getHTTPResponse(entryIDText);
   d4444:	4604      	mov	r4, r0
		if(status != OK_SUCCESS)
   d4446:	d007      	beq.n	d4458 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x128>
			client->stop();
   d4448:	6828      	ldr	r0, [r5, #0]
   d444a:	6803      	ldr	r3, [r0, #0]
   d444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d444e:	4798      	blx	r3
		String entryIDText = String();
   d4450:	a804      	add	r0, sp, #16
   d4452:	f002 f9c1 	bl	d67d8 <_ZN6StringD1Ev>
   d4456:	e799      	b.n	d438c <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x5c>
		long entryID = entryIDText.toInt();
   d4458:	a804      	add	r0, sp, #16
   d445a:	f002 fad5 	bl	d6a08 <_ZNK6String5toIntEv>
   d445e:	4606      	mov	r6, r0
		client->stop();
   d4460:	6828      	ldr	r0, [r5, #0]
   d4462:	6803      	ldr	r3, [r0, #0]
   d4464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4466:	4798      	blx	r3
			status = ERR_NOT_INSERTED;
   d4468:	2e00      	cmp	r6, #0
   d446a:	bf08      	it	eq
   d446c:	f46f 74c8 	mvneq.w	r4, #400	; 0x190
   d4470:	e7ee      	b.n	d4450 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x120>
			return ERR_CONNECT_FAILED;
   d4472:	f46f 7496 	mvn.w	r4, #300	; 0x12c
   d4476:	e789      	b.n	d438c <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x5c>
   d4478:	000da35d 	.word	0x000da35d
   d447c:	000da370 	.word	0x000da370
   d4480:	000da37f 	.word	0x000da37f
   d4484:	000da397 	.word	0x000da397
   d4488:	000da3b2 	.word	0x000da3b2
   d448c:	000da3c6 	.word	0x000da3c6
   d4490:	000da3d3 	.word	0x000da3d3
   d4494:	000da450 	.word	0x000da450
   d4498:	000da3f6 	.word	0x000da3f6
   d449c:	000da40b 	.word	0x000da40b
   d44a0:	000da43d 	.word	0x000da43d
   d44a4:	000da44e 	.word	0x000da44e
   d44a8:	000da452 	.word	0x000da452

000d44ac <_ZN15ThingSpeakClass11writeFieldsEmPKc>:
	int writeFields(unsigned long channelNumber, const char * writeAPIKey)
   d44ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d44b0:	b09f      	sub	sp, #124	; 0x7c
   d44b2:	4604      	mov	r4, r0
   d44b4:	460e      	mov	r6, r1
		String postMessage = String("");
   d44b6:	a802      	add	r0, sp, #8
   d44b8:	49b8      	ldr	r1, [pc, #736]	; (d479c <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f0>)
				postMessage = postMessage + String("field") + String(iField + 1) + String("=") + escapeUrl(this->nextWriteField[iField]);
   d44ba:	f8df 82fc 	ldr.w	r8, [pc, #764]	; d47b8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x30c>
   d44be:	f8df 92fc 	ldr.w	r9, [pc, #764]	; d47bc <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x310>
				this->nextWriteField[iField] = "";
   d44c2:	f8df a2d8 	ldr.w	sl, [pc, #728]	; d479c <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f0>
		String postMessage = String("");
   d44c6:	2501      	movs	r5, #1
	int writeFields(unsigned long channelNumber, const char * writeAPIKey)
   d44c8:	4617      	mov	r7, r2
   d44ca:	f104 0b08 	add.w	fp, r4, #8
		String postMessage = String("");
   d44ce:	f002 f9ce 	bl	d686e <_ZN6StringC1EPKc>
		bool fFirstItem = true;
   d44d2:	462b      	mov	r3, r5
			if(this->nextWriteField[iField].length() > 0)
   d44d4:	f8db 2008 	ldr.w	r2, [fp, #8]
   d44d8:	2a00      	cmp	r2, #0
   d44da:	d061      	beq.n	d45a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0xf4>
				if(!fFirstItem)
   d44dc:	b9ab      	cbnz	r3, d450a <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x5e>
	StringSumHelper(const String &s) : String(s) {}
   d44de:	a902      	add	r1, sp, #8
   d44e0:	a81a      	add	r0, sp, #104	; 0x68
   d44e2:	f002 fa04 	bl	d68ee <_ZN6StringC1ERKS_>
					postMessage = postMessage + String("&");
   d44e6:	49ae      	ldr	r1, [pc, #696]	; (d47a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f4>)
   d44e8:	a816      	add	r0, sp, #88	; 0x58
   d44ea:	f002 f9c0 	bl	d686e <_ZN6StringC1EPKc>
   d44ee:	a916      	add	r1, sp, #88	; 0x58
   d44f0:	a81a      	add	r0, sp, #104	; 0x68
   d44f2:	f002 fa72 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d44f6:	4601      	mov	r1, r0
   d44f8:	a802      	add	r0, sp, #8
   d44fa:	f002 f9e9 	bl	d68d0 <_ZN6StringaSERKS_>
   d44fe:	a816      	add	r0, sp, #88	; 0x58
   d4500:	f002 f96a 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4504:	a81a      	add	r0, sp, #104	; 0x68
   d4506:	f002 f967 	bl	d67d8 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d450a:	a902      	add	r1, sp, #8
   d450c:	a80a      	add	r0, sp, #40	; 0x28
   d450e:	f002 f9ee 	bl	d68ee <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("field") + String(iField + 1) + String("=") + escapeUrl(this->nextWriteField[iField]);
   d4512:	4641      	mov	r1, r8
   d4514:	a806      	add	r0, sp, #24
   d4516:	f002 f9aa 	bl	d686e <_ZN6StringC1EPKc>
   d451a:	a906      	add	r1, sp, #24
   d451c:	a80a      	add	r0, sp, #40	; 0x28
   d451e:	f002 fa5c 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d4522:	220a      	movs	r2, #10
   d4524:	9001      	str	r0, [sp, #4]
   d4526:	4629      	mov	r1, r5
   d4528:	a80e      	add	r0, sp, #56	; 0x38
   d452a:	f002 fa05 	bl	d6938 <_ZN6StringC1Ejh>
   d452e:	9b01      	ldr	r3, [sp, #4]
   d4530:	a90e      	add	r1, sp, #56	; 0x38
   d4532:	4618      	mov	r0, r3
   d4534:	f002 fa51 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d4538:	4649      	mov	r1, r9
   d453a:	9001      	str	r0, [sp, #4]
   d453c:	a812      	add	r0, sp, #72	; 0x48
   d453e:	f002 f996 	bl	d686e <_ZN6StringC1EPKc>
   d4542:	9b01      	ldr	r3, [sp, #4]
   d4544:	a912      	add	r1, sp, #72	; 0x48
   d4546:	4618      	mov	r0, r3
   d4548:	f002 fa47 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d454c:	4659      	mov	r1, fp
   d454e:	9001      	str	r0, [sp, #4]
   d4550:	a816      	add	r0, sp, #88	; 0x58
   d4552:	f002 f9cc 	bl	d68ee <_ZN6StringC1ERKS_>
   d4556:	aa16      	add	r2, sp, #88	; 0x58
   d4558:	4621      	mov	r1, r4
   d455a:	a81a      	add	r0, sp, #104	; 0x68
   d455c:	f7ff fe28 	bl	d41b0 <_ZN15ThingSpeakClass9escapeUrlE6String>
   d4560:	9b01      	ldr	r3, [sp, #4]
   d4562:	a91a      	add	r1, sp, #104	; 0x68
   d4564:	4618      	mov	r0, r3
   d4566:	f002 fa38 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d456a:	4601      	mov	r1, r0
   d456c:	a802      	add	r0, sp, #8
   d456e:	f002 f9af 	bl	d68d0 <_ZN6StringaSERKS_>
   d4572:	a81a      	add	r0, sp, #104	; 0x68
   d4574:	f002 f930 	bl	d67d8 <_ZN6StringD1Ev>
   d4578:	a816      	add	r0, sp, #88	; 0x58
   d457a:	f002 f92d 	bl	d67d8 <_ZN6StringD1Ev>
   d457e:	a812      	add	r0, sp, #72	; 0x48
   d4580:	f002 f92a 	bl	d67d8 <_ZN6StringD1Ev>
   d4584:	a80e      	add	r0, sp, #56	; 0x38
   d4586:	f002 f927 	bl	d67d8 <_ZN6StringD1Ev>
   d458a:	a806      	add	r0, sp, #24
   d458c:	f002 f924 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4590:	a80a      	add	r0, sp, #40	; 0x28
   d4592:	f002 f921 	bl	d67d8 <_ZN6StringD1Ev>
				this->nextWriteField[iField] = "";
   d4596:	4651      	mov	r1, sl
   d4598:	4658      	mov	r0, fp
   d459a:	f002 f9bb 	bl	d6914 <_ZN6StringaSEPKc>
				fFirstItem = false;
   d459e:	2300      	movs	r3, #0
		for(size_t iField = 0; iField < 8; iField++)
   d45a0:	3501      	adds	r5, #1
   d45a2:	2d09      	cmp	r5, #9
   d45a4:	f10b 0b10 	add.w	fp, fp, #16
   d45a8:	d194      	bne.n	d44d4 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x28>
		if(!isnan(nextWriteLatitude))
   d45aa:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
   d45ae:	eef4 7a67 	vcmp.f32	s15, s15
   d45b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45b6:	d63e      	bvs.n	d4636 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x18a>
			if(!fFirstItem)
   d45b8:	b9ab      	cbnz	r3, d45e6 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x13a>
	StringSumHelper(const String &s) : String(s) {}
   d45ba:	a902      	add	r1, sp, #8
   d45bc:	a81a      	add	r0, sp, #104	; 0x68
   d45be:	f002 f996 	bl	d68ee <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d45c2:	4977      	ldr	r1, [pc, #476]	; (d47a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f4>)
   d45c4:	a816      	add	r0, sp, #88	; 0x58
   d45c6:	f002 f952 	bl	d686e <_ZN6StringC1EPKc>
   d45ca:	a916      	add	r1, sp, #88	; 0x58
   d45cc:	a81a      	add	r0, sp, #104	; 0x68
   d45ce:	f002 fa04 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d45d2:	4601      	mov	r1, r0
   d45d4:	a802      	add	r0, sp, #8
   d45d6:	f002 f97b 	bl	d68d0 <_ZN6StringaSERKS_>
   d45da:	a816      	add	r0, sp, #88	; 0x58
   d45dc:	f002 f8fc 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d45e0:	a81a      	add	r0, sp, #104	; 0x68
   d45e2:	f002 f8f9 	bl	d67d8 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d45e6:	a902      	add	r1, sp, #8
   d45e8:	a816      	add	r0, sp, #88	; 0x58
   d45ea:	f002 f980 	bl	d68ee <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("lat=") + String(this->nextWriteLatitude);
   d45ee:	496d      	ldr	r1, [pc, #436]	; (d47a4 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f8>)
   d45f0:	a812      	add	r0, sp, #72	; 0x48
   d45f2:	f002 f93c 	bl	d686e <_ZN6StringC1EPKc>
   d45f6:	a912      	add	r1, sp, #72	; 0x48
   d45f8:	a816      	add	r0, sp, #88	; 0x58
   d45fa:	f002 f9ee 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d45fe:	ed94 0a22 	vldr	s0, [r4, #136]	; 0x88
   d4602:	4605      	mov	r5, r0
   d4604:	2106      	movs	r1, #6
   d4606:	a81a      	add	r0, sp, #104	; 0x68
   d4608:	f002 f9a9 	bl	d695e <_ZN6StringC1Efi>
   d460c:	a91a      	add	r1, sp, #104	; 0x68
   d460e:	4628      	mov	r0, r5
   d4610:	f002 f9e3 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d4614:	4601      	mov	r1, r0
   d4616:	a802      	add	r0, sp, #8
   d4618:	f002 f95a 	bl	d68d0 <_ZN6StringaSERKS_>
   d461c:	a81a      	add	r0, sp, #104	; 0x68
   d461e:	f002 f8db 	bl	d67d8 <_ZN6StringD1Ev>
   d4622:	a812      	add	r0, sp, #72	; 0x48
   d4624:	f002 f8d8 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4628:	a816      	add	r0, sp, #88	; 0x58
   d462a:	f002 f8d5 	bl	d67d8 <_ZN6StringD1Ev>
			this->nextWriteLatitude = NAN;
   d462e:	4b5e      	ldr	r3, [pc, #376]	; (d47a8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2fc>)
   d4630:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
			fFirstItem = false;
   d4634:	2300      	movs	r3, #0
		if(!isnan(this->nextWriteLongitude))
   d4636:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
   d463a:	eef4 7a67 	vcmp.f32	s15, s15
   d463e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4642:	d63e      	bvs.n	d46c2 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x216>
			if(!fFirstItem)
   d4644:	b9ab      	cbnz	r3, d4672 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x1c6>
	StringSumHelper(const String &s) : String(s) {}
   d4646:	a902      	add	r1, sp, #8
   d4648:	a81a      	add	r0, sp, #104	; 0x68
   d464a:	f002 f950 	bl	d68ee <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d464e:	4954      	ldr	r1, [pc, #336]	; (d47a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f4>)
   d4650:	a816      	add	r0, sp, #88	; 0x58
   d4652:	f002 f90c 	bl	d686e <_ZN6StringC1EPKc>
   d4656:	a916      	add	r1, sp, #88	; 0x58
   d4658:	a81a      	add	r0, sp, #104	; 0x68
   d465a:	f002 f9be 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d465e:	4601      	mov	r1, r0
   d4660:	a802      	add	r0, sp, #8
   d4662:	f002 f935 	bl	d68d0 <_ZN6StringaSERKS_>
   d4666:	a816      	add	r0, sp, #88	; 0x58
   d4668:	f002 f8b6 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d466c:	a81a      	add	r0, sp, #104	; 0x68
   d466e:	f002 f8b3 	bl	d67d8 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d4672:	a902      	add	r1, sp, #8
   d4674:	a816      	add	r0, sp, #88	; 0x58
   d4676:	f002 f93a 	bl	d68ee <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("long=") + String(this->nextWriteLongitude);
   d467a:	494c      	ldr	r1, [pc, #304]	; (d47ac <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x300>)
   d467c:	a812      	add	r0, sp, #72	; 0x48
   d467e:	f002 f8f6 	bl	d686e <_ZN6StringC1EPKc>
   d4682:	a912      	add	r1, sp, #72	; 0x48
   d4684:	a816      	add	r0, sp, #88	; 0x58
   d4686:	f002 f9a8 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d468a:	ed94 0a23 	vldr	s0, [r4, #140]	; 0x8c
   d468e:	4605      	mov	r5, r0
   d4690:	2106      	movs	r1, #6
   d4692:	a81a      	add	r0, sp, #104	; 0x68
   d4694:	f002 f963 	bl	d695e <_ZN6StringC1Efi>
   d4698:	a91a      	add	r1, sp, #104	; 0x68
   d469a:	4628      	mov	r0, r5
   d469c:	f002 f99d 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d46a0:	4601      	mov	r1, r0
   d46a2:	a802      	add	r0, sp, #8
   d46a4:	f002 f914 	bl	d68d0 <_ZN6StringaSERKS_>
   d46a8:	a81a      	add	r0, sp, #104	; 0x68
   d46aa:	f002 f895 	bl	d67d8 <_ZN6StringD1Ev>
   d46ae:	a812      	add	r0, sp, #72	; 0x48
   d46b0:	f002 f892 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d46b4:	a816      	add	r0, sp, #88	; 0x58
   d46b6:	f002 f88f 	bl	d67d8 <_ZN6StringD1Ev>
			this->nextWriteLongitude = NAN;
   d46ba:	4b3b      	ldr	r3, [pc, #236]	; (d47a8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2fc>)
   d46bc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
			fFirstItem = false;
   d46c0:	2300      	movs	r3, #0
		if(!isnan(this->nextWriteElevation))
   d46c2:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
   d46c6:	eef4 7a67 	vcmp.f32	s15, s15
   d46ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d46ce:	d63e      	bvs.n	d474e <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2a2>
			if(!fFirstItem)
   d46d0:	b9ab      	cbnz	r3, d46fe <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x252>
	StringSumHelper(const String &s) : String(s) {}
   d46d2:	a902      	add	r1, sp, #8
   d46d4:	a81a      	add	r0, sp, #104	; 0x68
   d46d6:	f002 f90a 	bl	d68ee <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d46da:	4931      	ldr	r1, [pc, #196]	; (d47a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f4>)
   d46dc:	a816      	add	r0, sp, #88	; 0x58
   d46de:	f002 f8c6 	bl	d686e <_ZN6StringC1EPKc>
   d46e2:	a916      	add	r1, sp, #88	; 0x58
   d46e4:	a81a      	add	r0, sp, #104	; 0x68
   d46e6:	f002 f978 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d46ea:	4601      	mov	r1, r0
   d46ec:	a802      	add	r0, sp, #8
   d46ee:	f002 f8ef 	bl	d68d0 <_ZN6StringaSERKS_>
   d46f2:	a816      	add	r0, sp, #88	; 0x58
   d46f4:	f002 f870 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d46f8:	a81a      	add	r0, sp, #104	; 0x68
   d46fa:	f002 f86d 	bl	d67d8 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d46fe:	a902      	add	r1, sp, #8
   d4700:	a816      	add	r0, sp, #88	; 0x58
   d4702:	f002 f8f4 	bl	d68ee <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("elevation=") + String(this->nextWriteElevation);
   d4706:	492a      	ldr	r1, [pc, #168]	; (d47b0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x304>)
   d4708:	a812      	add	r0, sp, #72	; 0x48
   d470a:	f002 f8b0 	bl	d686e <_ZN6StringC1EPKc>
   d470e:	a912      	add	r1, sp, #72	; 0x48
   d4710:	a816      	add	r0, sp, #88	; 0x58
   d4712:	f002 f962 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d4716:	ed94 0a24 	vldr	s0, [r4, #144]	; 0x90
   d471a:	4605      	mov	r5, r0
   d471c:	2106      	movs	r1, #6
   d471e:	a81a      	add	r0, sp, #104	; 0x68
   d4720:	f002 f91d 	bl	d695e <_ZN6StringC1Efi>
   d4724:	a91a      	add	r1, sp, #104	; 0x68
   d4726:	4628      	mov	r0, r5
   d4728:	f002 f957 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d472c:	4601      	mov	r1, r0
   d472e:	a802      	add	r0, sp, #8
   d4730:	f002 f8ce 	bl	d68d0 <_ZN6StringaSERKS_>
   d4734:	a81a      	add	r0, sp, #104	; 0x68
   d4736:	f002 f84f 	bl	d67d8 <_ZN6StringD1Ev>
   d473a:	a812      	add	r0, sp, #72	; 0x48
   d473c:	f002 f84c 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4740:	a816      	add	r0, sp, #88	; 0x58
   d4742:	f002 f849 	bl	d67d8 <_ZN6StringD1Ev>
			this->nextWriteElevation = NAN;
   d4746:	4b18      	ldr	r3, [pc, #96]	; (d47a8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2fc>)
   d4748:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
			fFirstItem = false;
   d474c:	2300      	movs	r3, #0
		if(this->nextWriteStatus.length() > 0)
   d474e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d4752:	2a00      	cmp	r2, #0
   d4754:	d05b      	beq.n	d480e <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x362>
			if(!fFirstItem)
   d4756:	b9ab      	cbnz	r3, d4784 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2d8>
	StringSumHelper(const String &s) : String(s) {}
   d4758:	a902      	add	r1, sp, #8
   d475a:	a81a      	add	r0, sp, #104	; 0x68
   d475c:	f002 f8c7 	bl	d68ee <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d4760:	490f      	ldr	r1, [pc, #60]	; (d47a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f4>)
   d4762:	a816      	add	r0, sp, #88	; 0x58
   d4764:	f002 f883 	bl	d686e <_ZN6StringC1EPKc>
   d4768:	a916      	add	r1, sp, #88	; 0x58
   d476a:	a81a      	add	r0, sp, #104	; 0x68
   d476c:	f002 f935 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d4770:	4601      	mov	r1, r0
   d4772:	a802      	add	r0, sp, #8
   d4774:	f002 f8ac 	bl	d68d0 <_ZN6StringaSERKS_>
   d4778:	a816      	add	r0, sp, #88	; 0x58
   d477a:	f002 f82d 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d477e:	a81a      	add	r0, sp, #104	; 0x68
   d4780:	f002 f82a 	bl	d67d8 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d4784:	a902      	add	r1, sp, #8
   d4786:	a812      	add	r0, sp, #72	; 0x48
   d4788:	f002 f8b1 	bl	d68ee <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("status=") + escapeUrl(this->nextWriteStatus);
   d478c:	4909      	ldr	r1, [pc, #36]	; (d47b4 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x308>)
   d478e:	a80e      	add	r0, sp, #56	; 0x38
   d4790:	f002 f86d 	bl	d686e <_ZN6StringC1EPKc>
   d4794:	a90e      	add	r1, sp, #56	; 0x38
   d4796:	a812      	add	r0, sp, #72	; 0x48
   d4798:	e012      	b.n	d47c0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x314>
   d479a:	bf00      	nop
   d479c:	000da452 	.word	0x000da452
   d47a0:	000da453 	.word	0x000da453
   d47a4:	000da45b 	.word	0x000da45b
   d47a8:	7fc00000 	.word	0x7fc00000
   d47ac:	000da460 	.word	0x000da460
   d47b0:	000da466 	.word	0x000da466
   d47b4:	000da471 	.word	0x000da471
   d47b8:	000da455 	.word	0x000da455
   d47bc:	000da464 	.word	0x000da464
   d47c0:	f002 f90b 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d47c4:	f104 0598 	add.w	r5, r4, #152	; 0x98
   d47c8:	4680      	mov	r8, r0
   d47ca:	4629      	mov	r1, r5
   d47cc:	a816      	add	r0, sp, #88	; 0x58
   d47ce:	f002 f88e 	bl	d68ee <_ZN6StringC1ERKS_>
   d47d2:	aa16      	add	r2, sp, #88	; 0x58
   d47d4:	4621      	mov	r1, r4
   d47d6:	a81a      	add	r0, sp, #104	; 0x68
   d47d8:	f7ff fcea 	bl	d41b0 <_ZN15ThingSpeakClass9escapeUrlE6String>
   d47dc:	a91a      	add	r1, sp, #104	; 0x68
   d47de:	4640      	mov	r0, r8
   d47e0:	f002 f8fb 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d47e4:	4601      	mov	r1, r0
   d47e6:	a802      	add	r0, sp, #8
   d47e8:	f002 f872 	bl	d68d0 <_ZN6StringaSERKS_>
   d47ec:	a81a      	add	r0, sp, #104	; 0x68
   d47ee:	f001 fff3 	bl	d67d8 <_ZN6StringD1Ev>
   d47f2:	a816      	add	r0, sp, #88	; 0x58
   d47f4:	f001 fff0 	bl	d67d8 <_ZN6StringD1Ev>
   d47f8:	a80e      	add	r0, sp, #56	; 0x38
   d47fa:	f001 ffed 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d47fe:	a812      	add	r0, sp, #72	; 0x48
   d4800:	f001 ffea 	bl	d67d8 <_ZN6StringD1Ev>
			this->nextWriteStatus = "";
   d4804:	497c      	ldr	r1, [pc, #496]	; (d49f8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x54c>)
   d4806:	4628      	mov	r0, r5
   d4808:	f002 f884 	bl	d6914 <_ZN6StringaSEPKc>
			fFirstItem = false;
   d480c:	2300      	movs	r3, #0
		if(this->nextWriteTwitter.length() > 0)
   d480e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
   d4812:	2a00      	cmp	r2, #0
   d4814:	d047      	beq.n	d48a6 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x3fa>
			if(!fFirstItem)
   d4816:	b9ab      	cbnz	r3, d4844 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x398>
	StringSumHelper(const String &s) : String(s) {}
   d4818:	a902      	add	r1, sp, #8
   d481a:	a81a      	add	r0, sp, #104	; 0x68
   d481c:	f002 f867 	bl	d68ee <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d4820:	4976      	ldr	r1, [pc, #472]	; (d49fc <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x550>)
   d4822:	a816      	add	r0, sp, #88	; 0x58
   d4824:	f002 f823 	bl	d686e <_ZN6StringC1EPKc>
   d4828:	a916      	add	r1, sp, #88	; 0x58
   d482a:	a81a      	add	r0, sp, #104	; 0x68
   d482c:	f002 f8d5 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d4830:	4601      	mov	r1, r0
   d4832:	a802      	add	r0, sp, #8
   d4834:	f002 f84c 	bl	d68d0 <_ZN6StringaSERKS_>
   d4838:	a816      	add	r0, sp, #88	; 0x58
   d483a:	f001 ffcd 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d483e:	a81a      	add	r0, sp, #104	; 0x68
   d4840:	f001 ffca 	bl	d67d8 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d4844:	a902      	add	r1, sp, #8
   d4846:	a812      	add	r0, sp, #72	; 0x48
   d4848:	f002 f851 	bl	d68ee <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("twitter=") + escapeUrl(this->nextWriteTwitter);
   d484c:	496c      	ldr	r1, [pc, #432]	; (d4a00 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x554>)
   d484e:	a80e      	add	r0, sp, #56	; 0x38
   d4850:	f002 f80d 	bl	d686e <_ZN6StringC1EPKc>
   d4854:	a90e      	add	r1, sp, #56	; 0x38
   d4856:	a812      	add	r0, sp, #72	; 0x48
   d4858:	f002 f8bf 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d485c:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
   d4860:	4680      	mov	r8, r0
   d4862:	4629      	mov	r1, r5
   d4864:	a816      	add	r0, sp, #88	; 0x58
   d4866:	f002 f842 	bl	d68ee <_ZN6StringC1ERKS_>
   d486a:	aa16      	add	r2, sp, #88	; 0x58
   d486c:	4621      	mov	r1, r4
   d486e:	a81a      	add	r0, sp, #104	; 0x68
   d4870:	f7ff fc9e 	bl	d41b0 <_ZN15ThingSpeakClass9escapeUrlE6String>
   d4874:	a91a      	add	r1, sp, #104	; 0x68
   d4876:	4640      	mov	r0, r8
   d4878:	f002 f8af 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d487c:	4601      	mov	r1, r0
   d487e:	a802      	add	r0, sp, #8
   d4880:	f002 f826 	bl	d68d0 <_ZN6StringaSERKS_>
   d4884:	a81a      	add	r0, sp, #104	; 0x68
   d4886:	f001 ffa7 	bl	d67d8 <_ZN6StringD1Ev>
   d488a:	a816      	add	r0, sp, #88	; 0x58
   d488c:	f001 ffa4 	bl	d67d8 <_ZN6StringD1Ev>
   d4890:	a80e      	add	r0, sp, #56	; 0x38
   d4892:	f001 ffa1 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4896:	a812      	add	r0, sp, #72	; 0x48
   d4898:	f001 ff9e 	bl	d67d8 <_ZN6StringD1Ev>
			this->nextWriteTwitter = "";
   d489c:	4956      	ldr	r1, [pc, #344]	; (d49f8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x54c>)
   d489e:	4628      	mov	r0, r5
   d48a0:	f002 f838 	bl	d6914 <_ZN6StringaSEPKc>
			fFirstItem = false;
   d48a4:	2300      	movs	r3, #0
		if(this->nextWriteTweet.length() > 0)
   d48a6:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   d48aa:	2a00      	cmp	r2, #0
   d48ac:	d047      	beq.n	d493e <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x492>
			if(!fFirstItem)
   d48ae:	b9ab      	cbnz	r3, d48dc <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x430>
	StringSumHelper(const String &s) : String(s) {}
   d48b0:	a902      	add	r1, sp, #8
   d48b2:	a81a      	add	r0, sp, #104	; 0x68
   d48b4:	f002 f81b 	bl	d68ee <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d48b8:	4950      	ldr	r1, [pc, #320]	; (d49fc <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x550>)
   d48ba:	a816      	add	r0, sp, #88	; 0x58
   d48bc:	f001 ffd7 	bl	d686e <_ZN6StringC1EPKc>
   d48c0:	a916      	add	r1, sp, #88	; 0x58
   d48c2:	a81a      	add	r0, sp, #104	; 0x68
   d48c4:	f002 f889 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d48c8:	4601      	mov	r1, r0
   d48ca:	a802      	add	r0, sp, #8
   d48cc:	f002 f800 	bl	d68d0 <_ZN6StringaSERKS_>
   d48d0:	a816      	add	r0, sp, #88	; 0x58
   d48d2:	f001 ff81 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d48d6:	a81a      	add	r0, sp, #104	; 0x68
   d48d8:	f001 ff7e 	bl	d67d8 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d48dc:	a902      	add	r1, sp, #8
   d48de:	a812      	add	r0, sp, #72	; 0x48
   d48e0:	f002 f805 	bl	d68ee <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("tweet=") + escapeUrl(this->nextWriteTweet);
   d48e4:	4947      	ldr	r1, [pc, #284]	; (d4a04 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x558>)
   d48e6:	a80e      	add	r0, sp, #56	; 0x38
   d48e8:	f001 ffc1 	bl	d686e <_ZN6StringC1EPKc>
   d48ec:	a90e      	add	r1, sp, #56	; 0x38
   d48ee:	a812      	add	r0, sp, #72	; 0x48
   d48f0:	f002 f873 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d48f4:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
   d48f8:	4680      	mov	r8, r0
   d48fa:	4629      	mov	r1, r5
   d48fc:	a816      	add	r0, sp, #88	; 0x58
   d48fe:	f001 fff6 	bl	d68ee <_ZN6StringC1ERKS_>
   d4902:	aa16      	add	r2, sp, #88	; 0x58
   d4904:	4621      	mov	r1, r4
   d4906:	a81a      	add	r0, sp, #104	; 0x68
   d4908:	f7ff fc52 	bl	d41b0 <_ZN15ThingSpeakClass9escapeUrlE6String>
   d490c:	a91a      	add	r1, sp, #104	; 0x68
   d490e:	4640      	mov	r0, r8
   d4910:	f002 f863 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d4914:	4601      	mov	r1, r0
   d4916:	a802      	add	r0, sp, #8
   d4918:	f001 ffda 	bl	d68d0 <_ZN6StringaSERKS_>
   d491c:	a81a      	add	r0, sp, #104	; 0x68
   d491e:	f001 ff5b 	bl	d67d8 <_ZN6StringD1Ev>
   d4922:	a816      	add	r0, sp, #88	; 0x58
   d4924:	f001 ff58 	bl	d67d8 <_ZN6StringD1Ev>
   d4928:	a80e      	add	r0, sp, #56	; 0x38
   d492a:	f001 ff55 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d492e:	a812      	add	r0, sp, #72	; 0x48
   d4930:	f001 ff52 	bl	d67d8 <_ZN6StringD1Ev>
			this->nextWriteTweet = "";
   d4934:	4930      	ldr	r1, [pc, #192]	; (d49f8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x54c>)
   d4936:	4628      	mov	r0, r5
   d4938:	f001 ffec 	bl	d6914 <_ZN6StringaSEPKc>
			fFirstItem = false;
   d493c:	2300      	movs	r3, #0
		if(this->nextWriteCreatedAt.length() > 0)
   d493e:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
   d4942:	2a00      	cmp	r2, #0
   d4944:	d053      	beq.n	d49ee <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x542>
			if(!fFirstItem)
   d4946:	b9ab      	cbnz	r3, d4974 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x4c8>
	StringSumHelper(const String &s) : String(s) {}
   d4948:	a902      	add	r1, sp, #8
   d494a:	a81a      	add	r0, sp, #104	; 0x68
   d494c:	f001 ffcf 	bl	d68ee <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d4950:	492a      	ldr	r1, [pc, #168]	; (d49fc <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x550>)
   d4952:	a816      	add	r0, sp, #88	; 0x58
   d4954:	f001 ff8b 	bl	d686e <_ZN6StringC1EPKc>
   d4958:	a916      	add	r1, sp, #88	; 0x58
   d495a:	a81a      	add	r0, sp, #104	; 0x68
   d495c:	f002 f83d 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d4960:	4601      	mov	r1, r0
   d4962:	a802      	add	r0, sp, #8
   d4964:	f001 ffb4 	bl	d68d0 <_ZN6StringaSERKS_>
   d4968:	a816      	add	r0, sp, #88	; 0x58
   d496a:	f001 ff35 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d496e:	a81a      	add	r0, sp, #104	; 0x68
   d4970:	f001 ff32 	bl	d67d8 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d4974:	a902      	add	r1, sp, #8
   d4976:	a816      	add	r0, sp, #88	; 0x58
   d4978:	f001 ffb9 	bl	d68ee <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("created_at=") + String(this->nextWriteCreatedAt);
   d497c:	4922      	ldr	r1, [pc, #136]	; (d4a08 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x55c>)
   d497e:	a812      	add	r0, sp, #72	; 0x48
   d4980:	f001 ff75 	bl	d686e <_ZN6StringC1EPKc>
   d4984:	a912      	add	r1, sp, #72	; 0x48
   d4986:	a816      	add	r0, sp, #88	; 0x58
   d4988:	f002 f827 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d498c:	f104 08c8 	add.w	r8, r4, #200	; 0xc8
   d4990:	4605      	mov	r5, r0
   d4992:	4641      	mov	r1, r8
   d4994:	a81a      	add	r0, sp, #104	; 0x68
   d4996:	f001 ffaa 	bl	d68ee <_ZN6StringC1ERKS_>
   d499a:	a91a      	add	r1, sp, #104	; 0x68
   d499c:	4628      	mov	r0, r5
   d499e:	f002 f81c 	bl	d69da <_ZplRK15StringSumHelperRK6String>
   d49a2:	4601      	mov	r1, r0
   d49a4:	a802      	add	r0, sp, #8
   d49a6:	f001 ff93 	bl	d68d0 <_ZN6StringaSERKS_>
   d49aa:	a81a      	add	r0, sp, #104	; 0x68
   d49ac:	f001 ff14 	bl	d67d8 <_ZN6StringD1Ev>
   d49b0:	a812      	add	r0, sp, #72	; 0x48
   d49b2:	f001 ff11 	bl	d67d8 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d49b6:	a816      	add	r0, sp, #88	; 0x58
   d49b8:	f001 ff0e 	bl	d67d8 <_ZN6StringD1Ev>
			this->nextWriteCreatedAt = "";
   d49bc:	490e      	ldr	r1, [pc, #56]	; (d49f8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x54c>)
   d49be:	4640      	mov	r0, r8
   d49c0:	f001 ffa8 	bl	d6914 <_ZN6StringaSEPKc>
		return writeRaw(channelNumber, postMessage, writeAPIKey);
   d49c4:	a902      	add	r1, sp, #8
   d49c6:	a81a      	add	r0, sp, #104	; 0x68
   d49c8:	f001 ff91 	bl	d68ee <_ZN6StringC1ERKS_>
   d49cc:	4620      	mov	r0, r4
   d49ce:	463b      	mov	r3, r7
   d49d0:	aa1a      	add	r2, sp, #104	; 0x68
   d49d2:	4631      	mov	r1, r6
   d49d4:	f7ff fcac 	bl	d4330 <_ZN15ThingSpeakClass8writeRawEm6StringPKc>
   d49d8:	4604      	mov	r4, r0
   d49da:	a81a      	add	r0, sp, #104	; 0x68
   d49dc:	f001 fefc 	bl	d67d8 <_ZN6StringD1Ev>
		String postMessage = String("");
   d49e0:	a802      	add	r0, sp, #8
   d49e2:	f001 fef9 	bl	d67d8 <_ZN6StringD1Ev>
	};
   d49e6:	4620      	mov	r0, r4
   d49e8:	b01f      	add	sp, #124	; 0x7c
   d49ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(fFirstItem)
   d49ee:	2b00      	cmp	r3, #0
   d49f0:	d0e8      	beq.n	d49c4 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x518>
			return ERR_SETFIELD_NOT_CALLED;
   d49f2:	f06f 04d1 	mvn.w	r4, #209	; 0xd1
   d49f6:	e7f3      	b.n	d49e0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x534>
   d49f8:	000da452 	.word	0x000da452
   d49fc:	000da453 	.word	0x000da453
   d4a00:	000da479 	.word	0x000da479
   d4a04:	000da482 	.word	0x000da482
   d4a08:	000da489 	.word	0x000da489

000d4a0c <_Z8beginMPUv>:
      }
    }  
  }
}

void beginMPU() {
   d4a0c:	b508      	push	{r3, lr}
   *          6    | Reserved
   *          7    | Stops the clock and keeps the time
   *               | generator in reset
   */

  Wire.begin();
   d4a0e:	f003 f873 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4a12:	f002 fbf9 	bl	d7208 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(MPU_ADDRESS);
   d4a16:	f003 f86f 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4a1a:	2168      	movs	r1, #104	; 0x68
   d4a1c:	f002 fc2a 	bl	d7274 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x6B);
   d4a20:	f003 f86a 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4a24:	216b      	movs	r1, #107	; 0x6b
   d4a26:	f7ff fb67 	bl	d40f8 <_ZN7TwoWire5writeEi>
  Wire.write(0);
   d4a2a:	f003 f865 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4a2e:	2100      	movs	r1, #0
   d4a30:	f7ff fb62 	bl	d40f8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission(true);
   d4a34:	f003 f860 	bl	d7af8 <_Z19__fetch_global_Wirev>
}
   d4a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.endTransmission(true);
   d4a3c:	2101      	movs	r1, #1
   d4a3e:	f002 bc1c 	b.w	d727a <_ZN7TwoWire15endTransmissionEh>
	...

000d4a44 <_Z12configureACCi>:
   *           1    |       +- 4 g     |   8192 LSB/g
   *           2    |       +- 8 g     |   4096 LSB/g
   *           3    |       +- 16 g    |   2048 LSB/g
   */

  switch (select) {
   d4a44:	2802      	cmp	r0, #2
void configureACC(int select) {
   d4a46:	b510      	push	{r4, lr}
   d4a48:	4b19      	ldr	r3, [pc, #100]	; (d4ab0 <_Z12configureACCi+0x6c>)
  switch (select) {
   d4a4a:	d021      	beq.n	d4a90 <_Z12configureACCi+0x4c>
   d4a4c:	2803      	cmp	r0, #3
   d4a4e:	d024      	beq.n	d4a9a <_Z12configureACCi+0x56>
   d4a50:	2801      	cmp	r0, #1
   d4a52:	d127      	bne.n	d4aa4 <_Z12configureACCi+0x60>
    case 1:
      select = 0x08;
      sensitivity = 8192.0;
   d4a54:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
   d4a58:	601a      	str	r2, [r3, #0]
      select = 0x08;
   d4a5a:	2408      	movs	r4, #8
      select = 0x00;
      sensitivity = 16384.0;
      break;
  }

  Wire.begin();
   d4a5c:	f003 f84c 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4a60:	f002 fbd2 	bl	d7208 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(MPU_ADDRESS);
   d4a64:	f003 f848 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4a68:	2168      	movs	r1, #104	; 0x68
   d4a6a:	f002 fc03 	bl	d7274 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x1C);
   d4a6e:	f003 f843 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4a72:	211c      	movs	r1, #28
   d4a74:	f7ff fb40 	bl	d40f8 <_ZN7TwoWire5writeEi>
  Wire.write(select);
   d4a78:	f003 f83e 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4a7c:	4621      	mov	r1, r4
   d4a7e:	f7ff fb3b 	bl	d40f8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission(true);
   d4a82:	f003 f839 	bl	d7af8 <_Z19__fetch_global_Wirev>
}
   d4a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission(true);
   d4a8a:	2101      	movs	r1, #1
   d4a8c:	f002 bbf5 	b.w	d727a <_ZN7TwoWire15endTransmissionEh>
      sensitivity = 4096.0;
   d4a90:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
   d4a94:	601a      	str	r2, [r3, #0]
      select = 0x10;
   d4a96:	2410      	movs	r4, #16
      break;
   d4a98:	e7e0      	b.n	d4a5c <_Z12configureACCi+0x18>
      sensitivity = 2048.0;
   d4a9a:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
   d4a9e:	601a      	str	r2, [r3, #0]
      select = 0x18;
   d4aa0:	2418      	movs	r4, #24
      break;
   d4aa2:	e7db      	b.n	d4a5c <_Z12configureACCi+0x18>
      sensitivity = 16384.0;
   d4aa4:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
   d4aa8:	601a      	str	r2, [r3, #0]
      select = 0x00;
   d4aaa:	2400      	movs	r4, #0
      break;
   d4aac:	e7d6      	b.n	d4a5c <_Z12configureACCi+0x18>
   d4aae:	bf00      	nop
   d4ab0:	2003e560 	.word	0x2003e560

000d4ab4 <setup>:
void setup() {
   d4ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Serial.begin(9600);
   d4ab6:	f002 fac1 	bl	d703c <_Z16_fetch_usbserialv>
   d4aba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4abe:	f002 fab1 	bl	d7024 <_ZN9USBSerial5beginEl>
  beginMPU();
   d4ac2:	f7ff ffa3 	bl	d4a0c <_Z8beginMPUv>
  configureACC(3);
   d4ac6:	2003      	movs	r0, #3
   d4ac8:	f7ff ffbc 	bl	d4a44 <_Z12configureACCi>
  pinMode(LED, OUTPUT);
   d4acc:	2101      	movs	r1, #1
   d4ace:	200b      	movs	r0, #11
   d4ad0:	f002 ffbc 	bl	d7a4c <pinMode>
	void setClient(Client * client) {this->client = client;};
   d4ad4:	4c16      	ldr	r4, [pc, #88]	; (d4b30 <setup+0x7c>)
  bme.begin();
   d4ad6:	4817      	ldr	r0, [pc, #92]	; (d4b34 <setup+0x80>)

	void resetWriteFields()
	{
		for(size_t iField = 0; iField < 8; iField++)
		{
			this->nextWriteField[iField] = "";
   d4ad8:	4f17      	ldr	r7, [pc, #92]	; (d4b38 <setup+0x84>)
   d4ada:	f000 feee 	bl	d58ba <_ZN15Adafruit_BME2805beginEv>
	void setClient(Client * client) {this->client = client;};
   d4ade:	4b17      	ldr	r3, [pc, #92]	; (d4b3c <setup+0x88>)
   d4ae0:	6023      	str	r3, [r4, #0]
		this->port = port;
   d4ae2:	2350      	movs	r3, #80	; 0x50
   d4ae4:	6063      	str	r3, [r4, #4]
   d4ae6:	2500      	movs	r5, #0
			this->nextWriteField[iField] = "";
   d4ae8:	f104 0608 	add.w	r6, r4, #8
   d4aec:	1970      	adds	r0, r6, r5
   d4aee:	4639      	mov	r1, r7
   d4af0:	3510      	adds	r5, #16
   d4af2:	f001 ff0f 	bl	d6914 <_ZN6StringaSEPKc>
		for(size_t iField = 0; iField < 8; iField++)
   d4af6:	2d80      	cmp	r5, #128	; 0x80
   d4af8:	d1f8      	bne.n	d4aec <setup+0x38>
		}
		this->nextWriteLatitude = NAN;
   d4afa:	4b11      	ldr	r3, [pc, #68]	; (d4b40 <setup+0x8c>)
		this->nextWriteLongitude = NAN;
		this->nextWriteElevation = NAN;
		this->nextWriteStatus = "";
   d4afc:	490e      	ldr	r1, [pc, #56]	; (d4b38 <setup+0x84>)
   d4afe:	4811      	ldr	r0, [pc, #68]	; (d4b44 <setup+0x90>)
		this->nextWriteLatitude = NAN;
   d4b00:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		this->nextWriteLongitude = NAN;
   d4b04:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		this->nextWriteElevation = NAN;
   d4b08:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		this->nextWriteStatus = "";
   d4b0c:	f001 ff02 	bl	d6914 <_ZN6StringaSEPKc>
		this->nextWriteTwitter = "";
   d4b10:	4909      	ldr	r1, [pc, #36]	; (d4b38 <setup+0x84>)
   d4b12:	480d      	ldr	r0, [pc, #52]	; (d4b48 <setup+0x94>)
   d4b14:	f001 fefe 	bl	d6914 <_ZN6StringaSEPKc>
		this->nextWriteTweet = "";
   d4b18:	4907      	ldr	r1, [pc, #28]	; (d4b38 <setup+0x84>)
   d4b1a:	480c      	ldr	r0, [pc, #48]	; (d4b4c <setup+0x98>)
   d4b1c:	f001 fefa 	bl	d6914 <_ZN6StringaSEPKc>
		this->nextWriteCreatedAt = "";
   d4b20:	4905      	ldr	r1, [pc, #20]	; (d4b38 <setup+0x84>)
   d4b22:	480b      	ldr	r0, [pc, #44]	; (d4b50 <setup+0x9c>)
   d4b24:	f001 fef6 	bl	d6914 <_ZN6StringaSEPKc>
		this->lastReadStatus = OK_SUCCESS;
   d4b28:	23c8      	movs	r3, #200	; 0xc8
   d4b2a:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
   d4b2e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4b30:	2003e578 	.word	0x2003e578
   d4b34:	2003e410 	.word	0x2003e410
   d4b38:	000da452 	.word	0x000da452
   d4b3c:	2003e454 	.word	0x2003e454
   d4b40:	7fc00000 	.word	0x7fc00000
   d4b44:	2003e610 	.word	0x2003e610
   d4b48:	2003e620 	.word	0x2003e620
   d4b4c:	2003e630 	.word	0x2003e630
   d4b50:	2003e640 	.word	0x2003e640

000d4b54 <_Z7readACCv>:

bool readACC() {
   d4b54:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4b58:	ed2d 8b02 	vpush	{d8}
   d4b5c:	b083      	sub	sp, #12

  int16_t xRaw, yRaw, zRaw;
  float xCal, yCal, zCal, accel;

  // Request most recent accelerometer measurements.
  Wire.beginTransmission(MPU_ADDRESS);
   d4b5e:	f002 ffcb 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4b62:	2168      	movs	r1, #104	; 0x68
   d4b64:	f002 fb86 	bl	d7274 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x3B); // Start at 0x3B ACCEL_XOUT[15:8]
   d4b68:	f002 ffc6 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4b6c:	213b      	movs	r1, #59	; 0x3b
   d4b6e:	f7ff fac3 	bl	d40f8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission(false);
   d4b72:	f002 ffc1 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4b76:	2100      	movs	r1, #0
   d4b78:	f002 fb7f 	bl	d727a <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPU_ADDRESS, 6, true); // Read six registers.
   d4b7c:	f002 ffbc 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4b80:	2206      	movs	r2, #6
   d4b82:	2168      	movs	r1, #104	; 0x68
   d4b84:	2301      	movs	r3, #1
   d4b86:	f002 fb5c 	bl	d7242 <_ZN7TwoWire11requestFromEhjh>

  // Shift bits.
  xRaw = Wire.read() << 8 | Wire.read(); // 0x3B ACCEL_XOUT[15:8] & 0x3C ACCEL_XOUT[7:0]
   d4b8a:	f002 ffb5 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4b8e:	6803      	ldr	r3, [r0, #0]
   d4b90:	695b      	ldr	r3, [r3, #20]
   d4b92:	4798      	blx	r3
   d4b94:	4604      	mov	r4, r0
   d4b96:	f002 ffaf 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4b9a:	6803      	ldr	r3, [r0, #0]
   d4b9c:	695b      	ldr	r3, [r3, #20]
   d4b9e:	4798      	blx	r3
   d4ba0:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4ba4:	b206      	sxth	r6, r0
  yRaw = Wire.read() << 8 | Wire.read(); // 0x3D ACCEL_YOUT[15:8] & 0x3E ACCEL_YOUT[7:0]
   d4ba6:	f002 ffa7 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4baa:	6803      	ldr	r3, [r0, #0]
   d4bac:	695b      	ldr	r3, [r3, #20]
   d4bae:	4798      	blx	r3
   d4bb0:	4604      	mov	r4, r0
   d4bb2:	f002 ffa1 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4bb6:	6803      	ldr	r3, [r0, #0]
   d4bb8:	695b      	ldr	r3, [r3, #20]
   d4bba:	4798      	blx	r3
   d4bbc:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4bc0:	b205      	sxth	r5, r0
  zRaw = Wire.read() << 8 | Wire.read(); // 0x3F ACCEL_ZOUT[15:8] & 0x40 ACCEL_ZOUT[7:0]
   d4bc2:	f002 ff99 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4bc6:	6803      	ldr	r3, [r0, #0]
   d4bc8:	695b      	ldr	r3, [r3, #20]
   d4bca:	4798      	blx	r3
   d4bcc:	4680      	mov	r8, r0
   d4bce:	f002 ff93 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d4bd2:	6803      	ldr	r3, [r0, #0]
   d4bd4:	695b      	ldr	r3, [r3, #20]
   d4bd6:	4798      	blx	r3
  
  // Calibrate measurements to least significant bit sensitivity.
  xCal = xRaw / sensitivity * (-1);
   d4bd8:	4b36      	ldr	r3, [pc, #216]	; (d4cb4 <_Z7readACCv+0x160>)
   d4bda:	ee07 6a90 	vmov	s15, r6
   d4bde:	ed93 8a00 	vldr	s16, [r3]
   d4be2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  zRaw = Wire.read() << 8 | Wire.read(); // 0x3F ACCEL_ZOUT[15:8] & 0x40 ACCEL_ZOUT[7:0]
   d4be6:	4604      	mov	r4, r0
  xCal = xRaw / sensitivity * (-1);
   d4be8:	ee87 7a88 	vdiv.f32	s14, s15, s16
  zRaw = Wire.read() << 8 | Wire.read(); // 0x3F ACCEL_ZOUT[15:8] & 0x40 ACCEL_ZOUT[7:0]
   d4bec:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
  yCal = yRaw / sensitivity * (-1);
  zCal = zRaw / sensitivity * (-1);
   d4bf0:	b224      	sxth	r4, r4
      return pow(__type(__x), __type(__y));
   d4bf2:	eef1 7a47 	vneg.f32	s15, s14
   d4bf6:	ee17 0a90 	vmov	r0, s15
   d4bfa:	f004 fc1f 	bl	d943c <__aeabi_f2d>
  yCal = yRaw / sensitivity * (-1);
   d4bfe:	ee07 5a90 	vmov	s15, r5
   d4c02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4c06:	4602      	mov	r2, r0
   d4c08:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d4c0c:	460b      	mov	r3, r1
   d4c0e:	e9cd 2300 	strd	r2, r3, [sp]
   d4c12:	eef1 7a47 	vneg.f32	s15, s14
   d4c16:	ee17 0a90 	vmov	r0, s15
   d4c1a:	f004 fc0f 	bl	d943c <__aeabi_f2d>
  zCal = zRaw / sensitivity * (-1);
   d4c1e:	ee07 4a90 	vmov	s15, r4
   d4c22:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4c26:	4606      	mov	r6, r0
   d4c28:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d4c2c:	460f      	mov	r7, r1
   d4c2e:	eef1 7a47 	vneg.f32	s15, s14
   d4c32:	ee17 0a90 	vmov	r0, s15
   d4c36:	f004 fc01 	bl	d943c <__aeabi_f2d>
   d4c3a:	e9dd 2300 	ldrd	r2, r3, [sp]
   d4c3e:	4604      	mov	r4, r0
   d4c40:	460d      	mov	r5, r1
   d4c42:	4610      	mov	r0, r2
   d4c44:	4619      	mov	r1, r3
   d4c46:	f004 fc51 	bl	d94ec <__aeabi_dmul>
   d4c4a:	4632      	mov	r2, r6
   d4c4c:	4680      	mov	r8, r0
   d4c4e:	4689      	mov	r9, r1
   d4c50:	463b      	mov	r3, r7
   d4c52:	4630      	mov	r0, r6
   d4c54:	4639      	mov	r1, r7
   d4c56:	f004 fc49 	bl	d94ec <__aeabi_dmul>
   d4c5a:	4602      	mov	r2, r0
   d4c5c:	460b      	mov	r3, r1

  // Calculate total acceleration.
  accel = sqrt(pow(xCal, 2) + pow(yCal, 2) + pow(zCal, 2));
   d4c5e:	4640      	mov	r0, r8
   d4c60:	4649      	mov	r1, r9
   d4c62:	f004 fa8d 	bl	d9180 <__adddf3>
   d4c66:	4622      	mov	r2, r4
   d4c68:	4606      	mov	r6, r0
   d4c6a:	460f      	mov	r7, r1
   d4c6c:	462b      	mov	r3, r5
   d4c6e:	4620      	mov	r0, r4
   d4c70:	4629      	mov	r1, r5
   d4c72:	f004 fc3b 	bl	d94ec <__aeabi_dmul>
   d4c76:	4602      	mov	r2, r0
   d4c78:	460b      	mov	r3, r1
   d4c7a:	4630      	mov	r0, r6
   d4c7c:	4639      	mov	r1, r7
   d4c7e:	f004 fa7f 	bl	d9180 <__adddf3>
   d4c82:	ec41 0b10 	vmov	d0, r0, r1
   d4c86:	f003 fa31 	bl	d80ec <sqrt>
   d4c8a:	ec51 0b10 	vmov	r0, r1, d0
   d4c8e:	f004 fefd 	bl	d9a8c <__aeabi_d2f>
  
  if(accel > 2) {
   d4c92:	ee07 0a10 	vmov	s14, r0
   d4c96:	eef0 7a00 	vmov.f32	s15, #0	; 0x40000000  2.0
   d4c9a:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4c9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return true;
  }
  else {
    return false;
  }
}
   d4ca2:	bfcc      	ite	gt
   d4ca4:	2001      	movgt	r0, #1
   d4ca6:	2000      	movle	r0, #0
   d4ca8:	b003      	add	sp, #12
   d4caa:	ecbd 8b02 	vpop	{d8}
   d4cae:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4cb2:	bf00      	nop
   d4cb4:	2003e560 	.word	0x2003e560

000d4cb8 <_Z5flashi>:

void flash(int duration) {
   d4cb8:	b510      	push	{r4, lr}
  /*
   * This function switches on and off a light-emitting diode (LED).
   */

  digitalWrite(LED, HIGH);
   d4cba:	2101      	movs	r1, #1
void flash(int duration) {
   d4cbc:	4604      	mov	r4, r0
  digitalWrite(LED, HIGH);
   d4cbe:	200b      	movs	r0, #11
   d4cc0:	f002 fed5 	bl	d7a6e <digitalWrite>
  delay(duration);
   d4cc4:	4620      	mov	r0, r4
   d4cc6:	f002 f823 	bl	d6d10 <delay>
  digitalWrite(LED, LOW);
   d4cca:	200b      	movs	r0, #11
   d4ccc:	2100      	movs	r1, #0
   d4cce:	f002 fece 	bl	d7a6e <digitalWrite>
  delay(duration);
   d4cd2:	4620      	mov	r0, r4
}
   d4cd4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(duration);
   d4cd8:	f002 b81a 	b.w	d6d10 <delay>

000d4cdc <_Z8flashSOSv>:

void flashSOS() {
   d4cdc:	b508      	push	{r3, lr}
   * in an SOS pattern: 3 short flashes, 3 long flashes, and 3 short flashes.  
   */

  for(int i=1; i<5; i+=2) {
    for(int j=0; j<3; j++) {
      flash(200*i);
   d4cde:	20c8      	movs	r0, #200	; 0xc8
   d4ce0:	f7ff ffea 	bl	d4cb8 <_Z5flashi>
   d4ce4:	20c8      	movs	r0, #200	; 0xc8
   d4ce6:	f7ff ffe7 	bl	d4cb8 <_Z5flashi>
   d4cea:	20c8      	movs	r0, #200	; 0xc8
   d4cec:	f7ff ffe4 	bl	d4cb8 <_Z5flashi>
    }
    delay(400);
   d4cf0:	f44f 70c8 	mov.w	r0, #400	; 0x190
   d4cf4:	f002 f80c 	bl	d6d10 <delay>
      flash(200*i);
   d4cf8:	f44f 7016 	mov.w	r0, #600	; 0x258
   d4cfc:	f7ff ffdc 	bl	d4cb8 <_Z5flashi>
   d4d00:	f44f 7016 	mov.w	r0, #600	; 0x258
   d4d04:	f7ff ffd8 	bl	d4cb8 <_Z5flashi>
   d4d08:	f44f 7016 	mov.w	r0, #600	; 0x258
   d4d0c:	f7ff ffd4 	bl	d4cb8 <_Z5flashi>
  }
   d4d10:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(400);
   d4d14:	f44f 70c8 	mov.w	r0, #400	; 0x190
   d4d18:	f001 bffa 	b.w	d6d10 <delay>
   d4d1c:	0000      	movs	r0, r0
	...

000d4d20 <loop>:
void loop() {
   d4d20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  accelState = readACC();
   d4d24:	f7ff ff16 	bl	d4b54 <_Z7readACCv>
   d4d28:	4b61      	ldr	r3, [pc, #388]	; (d4eb0 <loop+0x190>)
   d4d2a:	7018      	strb	r0, [r3, #0]
  if(accelState != accelStateOld) {
   d4d2c:	4b61      	ldr	r3, [pc, #388]	; (d4eb4 <loop+0x194>)
   d4d2e:	781a      	ldrb	r2, [r3, #0]
   d4d30:	4282      	cmp	r2, r0
   d4d32:	4a61      	ldr	r2, [pc, #388]	; (d4eb8 <loop+0x198>)
   d4d34:	d005      	beq.n	d4d42 <loop+0x22>
    if(accelState) {
   d4d36:	b118      	cbz	r0, d4d40 <loop+0x20>
      systemState = !systemState;
   d4d38:	7811      	ldrb	r1, [r2, #0]
   d4d3a:	f081 0101 	eor.w	r1, r1, #1
   d4d3e:	7011      	strb	r1, [r2, #0]
    accelStateOld = accelState;
   d4d40:	7018      	strb	r0, [r3, #0]
  if(systemState) {
   d4d42:	7813      	ldrb	r3, [r2, #0]
   d4d44:	2b00      	cmp	r3, #0
   d4d46:	f000 80a7 	beq.w	d4e98 <loop+0x178>
    flashSOS();
   d4d4a:	f7ff ffc7 	bl	d4cdc <_Z8flashSOSv>
   d4d4e:	f001 f95d 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   d4d52:	4d5a      	ldr	r5, [pc, #360]	; (d4ebc <loop+0x19c>)
   d4d54:	6028      	str	r0, [r5, #0]
    while(Serial1.available() > 0) {
   d4d56:	f002 f9ef 	bl	d7138 <_Z22__fetch_global_Serial1v>
   d4d5a:	6803      	ldr	r3, [r0, #0]
   d4d5c:	691b      	ldr	r3, [r3, #16]
   d4d5e:	4798      	blx	r3
   d4d60:	2800      	cmp	r0, #0
   d4d62:	f340 8099 	ble.w	d4e98 <loop+0x178>
      if(gps.encode(Serial1.read())) {
   d4d66:	f002 f9e7 	bl	d7138 <_Z22__fetch_global_Serial1v>
   d4d6a:	6803      	ldr	r3, [r0, #0]
   d4d6c:	4c54      	ldr	r4, [pc, #336]	; (d4ec0 <loop+0x1a0>)
   d4d6e:	695b      	ldr	r3, [r3, #20]
   d4d70:	4798      	blx	r3
   d4d72:	b2c1      	uxtb	r1, r0
   d4d74:	4620      	mov	r0, r4
   d4d76:	f001 f8b5 	bl	d5ee4 <_ZN11TinyGPSPlus6encodeEc>
   d4d7a:	2800      	cmp	r0, #0
   d4d7c:	d0eb      	beq.n	d4d56 <loop+0x36>
        if(gps.location.isValid()) {
   d4d7e:	7823      	ldrb	r3, [r4, #0]
   d4d80:	2b00      	cmp	r3, #0
   d4d82:	d0e8      	beq.n	d4d56 <loop+0x36>
          if((currentTime-previousTime) > 15000) {
   d4d84:	4e4f      	ldr	r6, [pc, #316]	; (d4ec4 <loop+0x1a4>)
   d4d86:	682b      	ldr	r3, [r5, #0]
   d4d88:	6832      	ldr	r2, [r6, #0]
   d4d8a:	1a9b      	subs	r3, r3, r2
   d4d8c:	f643 2298 	movw	r2, #15000	; 0x3a98
   d4d90:	4293      	cmp	r3, r2
   d4d92:	dde0      	ble.n	d4d56 <loop+0x36>
            Serial.print(".");
   d4d94:	f002 f952 	bl	d703c <_Z16_fetch_usbserialv>
   d4d98:	494b      	ldr	r1, [pc, #300]	; (d4ec8 <loop+0x1a8>)
            altitude = bme.readAltitude(1013.25) * 3.28;
   d4d9a:	f8df a154 	ldr.w	sl, [pc, #340]	; d4ef0 <loop+0x1d0>
            pressure = bme.readPressure() / 100.0F;
   d4d9e:	f8df 9154 	ldr.w	r9, [pc, #340]	; d4ef4 <loop+0x1d4>
            temperature = bme.readTemperature() * 1.8 + 32.0;
   d4da2:	f8df 8154 	ldr.w	r8, [pc, #340]	; d4ef8 <loop+0x1d8>
            humidity = bme.readHumidity();
   d4da6:	f8df b154 	ldr.w	fp, [pc, #340]	; d4efc <loop+0x1dc>
            latitude = gps.location.lat();
   d4daa:	4f48      	ldr	r7, [pc, #288]	; (d4ecc <loop+0x1ac>)
            Serial.print(".");
   d4dac:	f001 fe76 	bl	d6a9c <_ZN5Print5printEPKc>
            altitude = bme.readAltitude(1013.25) * 3.28;
   d4db0:	4847      	ldr	r0, [pc, #284]	; (d4ed0 <loop+0x1b0>)
   d4db2:	ed9f 0a48 	vldr	s0, [pc, #288]	; d4ed4 <loop+0x1b4>
   d4db6:	f000 fadb 	bl	d5370 <_ZN15Adafruit_BME28012readAltitudeEf>
   d4dba:	ee10 0a10 	vmov	r0, s0
   d4dbe:	f004 fb3d 	bl	d943c <__aeabi_f2d>
   d4dc2:	a337      	add	r3, pc, #220	; (adr r3, d4ea0 <loop+0x180>)
   d4dc4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4dc8:	f004 fb90 	bl	d94ec <__aeabi_dmul>
   d4dcc:	f004 fe5e 	bl	d9a8c <__aeabi_d2f>
   d4dd0:	f8ca 0000 	str.w	r0, [sl]
            pressure = bme.readPressure() / 100.0F;
   d4dd4:	483e      	ldr	r0, [pc, #248]	; (d4ed0 <loop+0x1b0>)
   d4dd6:	f000 f9ef 	bl	d51b8 <_ZN15Adafruit_BME28012readPressureEv>
   d4dda:	ed9f 7a3f 	vldr	s14, [pc, #252]	; d4ed8 <loop+0x1b8>
            temperature = bme.readTemperature() * 1.8 + 32.0;
   d4dde:	483c      	ldr	r0, [pc, #240]	; (d4ed0 <loop+0x1b0>)
            pressure = bme.readPressure() / 100.0F;
   d4de0:	eec0 7a07 	vdiv.f32	s15, s0, s14
   d4de4:	edc9 7a00 	vstr	s15, [r9]
            temperature = bme.readTemperature() * 1.8 + 32.0;
   d4de8:	f000 f9b8 	bl	d515c <_ZN15Adafruit_BME28015readTemperatureEv>
   d4dec:	ee10 0a10 	vmov	r0, s0
   d4df0:	f004 fb24 	bl	d943c <__aeabi_f2d>
   d4df4:	a32c      	add	r3, pc, #176	; (adr r3, d4ea8 <loop+0x188>)
   d4df6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4dfa:	f004 fb77 	bl	d94ec <__aeabi_dmul>
   d4dfe:	4b37      	ldr	r3, [pc, #220]	; (d4edc <loop+0x1bc>)
   d4e00:	2200      	movs	r2, #0
   d4e02:	f004 f9bd 	bl	d9180 <__adddf3>
   d4e06:	f004 fe41 	bl	d9a8c <__aeabi_d2f>
   d4e0a:	f8c8 0000 	str.w	r0, [r8]
            humidity = bme.readHumidity();
   d4e0e:	4830      	ldr	r0, [pc, #192]	; (d4ed0 <loop+0x1b0>)
   d4e10:	f000 fb4e 	bl	d54b0 <_ZN15Adafruit_BME28012readHumidityEv>
            latitude = gps.location.lat();
   d4e14:	4620      	mov	r0, r4
            humidity = bme.readHumidity();
   d4e16:	ed8b 0a00 	vstr	s0, [fp]
            latitude = gps.location.lat();
   d4e1a:	f000 fea1 	bl	d5b60 <_ZN15TinyGPSLocation3latEv>
   d4e1e:	ec51 0b10 	vmov	r0, r1, d0
   d4e22:	f004 fe33 	bl	d9a8c <__aeabi_d2f>
   d4e26:	6038      	str	r0, [r7, #0]
            longitude = gps.location.lng();
   d4e28:	4620      	mov	r0, r4
   d4e2a:	f000 febd 	bl	d5ba8 <_ZN15TinyGPSLocation3lngEv>
   d4e2e:	ec51 0b10 	vmov	r0, r1, d0
   d4e32:	f004 fe2b 	bl	d9a8c <__aeabi_d2f>
   d4e36:	4c2a      	ldr	r4, [pc, #168]	; (d4ee0 <loop+0x1c0>)
            ThingSpeak.setField(1, altitude);
   d4e38:	ed9a 0a00 	vldr	s0, [sl]
            longitude = gps.location.lng();
   d4e3c:	6020      	str	r0, [r4, #0]
            ThingSpeak.setField(1, altitude);
   d4e3e:	2101      	movs	r1, #1
   d4e40:	4828      	ldr	r0, [pc, #160]	; (d4ee4 <loop+0x1c4>)
   d4e42:	f7ff f967 	bl	d4114 <_ZN15ThingSpeakClass8setFieldEjf>
            ThingSpeak.setField(2, pressure);
   d4e46:	ed99 0a00 	vldr	s0, [r9]
   d4e4a:	4826      	ldr	r0, [pc, #152]	; (d4ee4 <loop+0x1c4>)
   d4e4c:	2102      	movs	r1, #2
   d4e4e:	f7ff f961 	bl	d4114 <_ZN15ThingSpeakClass8setFieldEjf>
            ThingSpeak.setField(3, temperature);
   d4e52:	ed98 0a00 	vldr	s0, [r8]
   d4e56:	4823      	ldr	r0, [pc, #140]	; (d4ee4 <loop+0x1c4>)
   d4e58:	2103      	movs	r1, #3
   d4e5a:	f7ff f95b 	bl	d4114 <_ZN15ThingSpeakClass8setFieldEjf>
            ThingSpeak.setField(4, humidity);
   d4e5e:	ed9b 0a00 	vldr	s0, [fp]
   d4e62:	4820      	ldr	r0, [pc, #128]	; (d4ee4 <loop+0x1c4>)
   d4e64:	2104      	movs	r1, #4
   d4e66:	f7ff f955 	bl	d4114 <_ZN15ThingSpeakClass8setFieldEjf>
            ThingSpeak.setField(5, latitude);
   d4e6a:	ed97 0a00 	vldr	s0, [r7]
   d4e6e:	481d      	ldr	r0, [pc, #116]	; (d4ee4 <loop+0x1c4>)
   d4e70:	2105      	movs	r1, #5
   d4e72:	f7ff f94f 	bl	d4114 <_ZN15ThingSpeakClass8setFieldEjf>
            ThingSpeak.setField(6, longitude);
   d4e76:	ed94 0a00 	vldr	s0, [r4]
   d4e7a:	481a      	ldr	r0, [pc, #104]	; (d4ee4 <loop+0x1c4>)
   d4e7c:	2106      	movs	r1, #6
   d4e7e:	f7ff f949 	bl	d4114 <_ZN15ThingSpeakClass8setFieldEjf>
            ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
   d4e82:	4b19      	ldr	r3, [pc, #100]	; (d4ee8 <loop+0x1c8>)
   d4e84:	4817      	ldr	r0, [pc, #92]	; (d4ee4 <loop+0x1c4>)
   d4e86:	681a      	ldr	r2, [r3, #0]
   d4e88:	4b18      	ldr	r3, [pc, #96]	; (d4eec <loop+0x1cc>)
   d4e8a:	6819      	ldr	r1, [r3, #0]
   d4e8c:	f7ff fb0e 	bl	d44ac <_ZN15ThingSpeakClass11writeFieldsEmPKc>
   d4e90:	f001 f8bc 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
            previousTime = millis();
   d4e94:	6030      	str	r0, [r6, #0]
   d4e96:	e75e      	b.n	d4d56 <loop+0x36>
}
   d4e98:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4e9c:	f3af 8000 	nop.w
   d4ea0:	a3d70a3d 	.word	0xa3d70a3d
   d4ea4:	400a3d70 	.word	0x400a3d70
   d4ea8:	cccccccd 	.word	0xcccccccd
   d4eac:	3ffccccc 	.word	0x3ffccccc
   d4eb0:	2003e408 	.word	0x2003e408
   d4eb4:	2003e409 	.word	0x2003e409
   d4eb8:	2003e564 	.word	0x2003e564
   d4ebc:	2003e470 	.word	0x2003e470
   d4ec0:	2003e474 	.word	0x2003e474
   d4ec4:	2003e55c 	.word	0x2003e55c
   d4ec8:	000da495 	.word	0x000da495
   d4ecc:	2003e550 	.word	0x2003e550
   d4ed0:	2003e410 	.word	0x2003e410
   d4ed4:	447d5000 	.word	0x447d5000
   d4ed8:	42c80000 	.word	0x42c80000
   d4edc:	40400000 	.word	0x40400000
   d4ee0:	2003e554 	.word	0x2003e554
   d4ee4:	2003e578 	.word	0x2003e578
   d4ee8:	2003e394 	.word	0x2003e394
   d4eec:	2003e390 	.word	0x2003e390
   d4ef0:	2003e40c 	.word	0x2003e40c
   d4ef4:	2003e558 	.word	0x2003e558
   d4ef8:	2003e568 	.word	0x2003e568
   d4efc:	2003e54c 	.word	0x2003e54c

000d4f00 <_GLOBAL__sub_I_sensitivity>:
   d4f00:	b510      	push	{r4, lr}
Adafruit_BME280 bme;
   d4f02:	4808      	ldr	r0, [pc, #32]	; (d4f24 <_GLOBAL__sub_I_sensitivity+0x24>)
TCPClient client;
   d4f04:	4c08      	ldr	r4, [pc, #32]	; (d4f28 <_GLOBAL__sub_I_sensitivity+0x28>)
Adafruit_BME280 bme;
   d4f06:	f000 f857 	bl	d4fb8 <_ZN15Adafruit_BME280C1Ev>
TinyGPSPlus gps;
   d4f0a:	4808      	ldr	r0, [pc, #32]	; (d4f2c <_GLOBAL__sub_I_sensitivity+0x2c>)
   d4f0c:	f000 fd6e 	bl	d59ec <_ZN11TinyGPSPlusC1Ev>
TCPClient client;
   d4f10:	4620      	mov	r0, r4
   d4f12:	f002 fc63 	bl	d77dc <_ZN9TCPClientC1Ev>
   d4f16:	4620      	mov	r0, r4
   d4f18:	4a05      	ldr	r2, [pc, #20]	; (d4f30 <_GLOBAL__sub_I_sensitivity+0x30>)
   d4f1a:	4906      	ldr	r1, [pc, #24]	; (d4f34 <_GLOBAL__sub_I_sensitivity+0x34>)
   d4f1c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
TCPClient client;
   d4f20:	f002 be12 	b.w	d7b48 <__aeabi_atexit>
   d4f24:	2003e410 	.word	0x2003e410
   d4f28:	2003e454 	.word	0x2003e454
   d4f2c:	2003e474 	.word	0x2003e474
   d4f30:	2003e404 	.word	0x2003e404
   d4f34:	000d40b5 	.word	0x000d40b5

000d4f38 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4f38:	4770      	bx	lr

000d4f3a <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4f3a:	b510      	push	{r4, lr}
  }
   d4f3c:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4f3e:	4604      	mov	r4, r0
  }
   d4f40:	f002 fe07 	bl	d7b52 <_ZdlPvj>
   d4f44:	4620      	mov	r0, r4
   d4f46:	bd10      	pop	{r4, pc}

000d4f48 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4f48:	b40e      	push	{r1, r2, r3}
   d4f4a:	b503      	push	{r0, r1, lr}
   d4f4c:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d4f4e:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4f50:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4f54:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4f56:	f001 fdd2 	bl	d6afe <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d4f5a:	b002      	add	sp, #8
   d4f5c:	f85d eb04 	ldr.w	lr, [sp], #4
   d4f60:	b003      	add	sp, #12
   d4f62:	4770      	bx	lr

000d4f64 <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4f64:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4f66:	4604      	mov	r4, r0
   d4f68:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4f6a:	7922      	ldrb	r2, [r4, #4]
   d4f6c:	68a3      	ldr	r3, [r4, #8]
   d4f6e:	b132      	cbz	r2, d4f7e <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4f70:	b9a3      	cbnz	r3, d4f9c <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4f72:	490b      	ldr	r1, [pc, #44]	; (d4fa0 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4f74:	b002      	add	sp, #8
   d4f76:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4f7a:	f001 bd8f 	b.w	d6a9c <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4f7e:	4a09      	ldr	r2, [pc, #36]	; (d4fa4 <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4f80:	7b26      	ldrb	r6, [r4, #12]
   d4f82:	4d09      	ldr	r5, [pc, #36]	; (d4fa8 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4f84:	4909      	ldr	r1, [pc, #36]	; (d4fac <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4f86:	7b64      	ldrb	r4, [r4, #13]
   d4f88:	2e01      	cmp	r6, #1
   d4f8a:	bf18      	it	ne
   d4f8c:	4629      	movne	r1, r5
   d4f8e:	e9cd 1400 	strd	r1, r4, [sp]
   d4f92:	4907      	ldr	r1, [pc, #28]	; (d4fb0 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4f94:	f7ff ffd8 	bl	d4f48 <_ZN5Print6printfEPKcz>
  }
   d4f98:	b002      	add	sp, #8
   d4f9a:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4f9c:	4a05      	ldr	r2, [pc, #20]	; (d4fb4 <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4f9e:	e7ef      	b.n	d4f80 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4fa0:	000da4b9 	.word	0x000da4b9
   d4fa4:	000da452 	.word	0x000da452
   d4fa8:	000da4b5 	.word	0x000da4b5
   d4fac:	000da4b1 	.word	0x000da4b1
   d4fb0:	000da4cf 	.word	0x000da4cf
   d4fb4:	000da4a8 	.word	0x000da4a8

000d4fb8 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4fb8:	f04f 33ff 	mov.w	r3, #4294967295
   d4fbc:	6103      	str	r3, [r0, #16]
{ }
   d4fbe:	4770      	bx	lr

000d4fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4fc0:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4fc2:	4c0b      	ldr	r4, [pc, #44]	; (d4ff0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4fc4:	7821      	ldrb	r1, [r4, #0]
   d4fc6:	f3bf 8f5b 	dmb	ish
   d4fca:	f011 0101 	ands.w	r1, r1, #1
   d4fce:	d10b      	bne.n	d4fe8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4fd0:	4620      	mov	r0, r4
   d4fd2:	9101      	str	r1, [sp, #4]
   d4fd4:	f7ff f865 	bl	d40a2 <__cxa_guard_acquire>
   d4fd8:	9901      	ldr	r1, [sp, #4]
   d4fda:	b128      	cbz	r0, d4fe8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4fdc:	4805      	ldr	r0, [pc, #20]	; (d4ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4fde:	f001 fa85 	bl	d64ec <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4fe2:	4620      	mov	r0, r4
   d4fe4:	f7ff f862 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d4fe8:	4802      	ldr	r0, [pc, #8]	; (d4ff4 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4fea:	b002      	add	sp, #8
   d4fec:	bd10      	pop	{r4, pc}
   d4fee:	bf00      	nop
   d4ff0:	2003e56c 	.word	0x2003e56c
   d4ff4:	2003e570 	.word	0x2003e570

000d4ff8 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4ff8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4ffc:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5000:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5002:	4605      	mov	r5, r0
   d5004:	460f      	mov	r7, r1
    if (_sck == -1)
   d5006:	d106      	bne.n	d5016 <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5008:	f7ff ffda 	bl	d4fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d500c:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d500e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d5012:	f001 bb0d 	b.w	d6630 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d5016:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d5018:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d501a:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d501e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d5022:	2100      	movs	r1, #0
   d5024:	b280      	uxth	r0, r0
   d5026:	f002 fd22 	bl	d7a6e <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d502a:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d502e:	fa08 f106 	lsl.w	r1, r8, r6
   d5032:	4039      	ands	r1, r7
   d5034:	b280      	uxth	r0, r0
   d5036:	f002 fd1a 	bl	d7a6e <digitalWrite>
        digitalWrite(_sck, HIGH);
   d503a:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d503e:	2101      	movs	r1, #1
   d5040:	b280      	uxth	r0, r0
   d5042:	f002 fd14 	bl	d7a6e <digitalWrite>
        if (digitalRead(_miso))
   d5046:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d504a:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d504c:	b280      	uxth	r0, r0
        reply <<= 1;
   d504e:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d5050:	f002 fd26 	bl	d7aa0 <digitalRead>
   d5054:	b108      	cbz	r0, d505a <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d5056:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d505a:	3e01      	subs	r6, #1
   d505c:	d2df      	bcs.n	d501e <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d505e:	4620      	mov	r0, r4
   d5060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d5064 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d5064:	b508      	push	{r3, lr}
        instance().endTransaction();
   d5066:	f7ff ffab 	bl	d4fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d506a:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d506e:	f001 ba58 	b.w	d6522 <_ZN8SPIClass14endTransactionEv>

000d5072 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d5072:	b507      	push	{r0, r1, r2, lr}
   d5074:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d5076:	f7ff ffa3 	bl	d4fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d507a:	9901      	ldr	r1, [sp, #4]
    }
   d507c:	b003      	add	sp, #12
   d507e:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d5082:	f001 ba67 	b.w	d6554 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d5088 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d5088:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d508a:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d508e:	3301      	adds	r3, #1
{
   d5090:	b085      	sub	sp, #20
   d5092:	4604      	mov	r4, r0
   d5094:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5096:	d123      	bne.n	d50e0 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5098:	7901      	ldrb	r1, [r0, #4]
   d509a:	6800      	ldr	r0, [r0, #0]
   d509c:	f002 f8e6 	bl	d726c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d50a0:	6820      	ldr	r0, [r4, #0]
   d50a2:	6803      	ldr	r3, [r0, #0]
   d50a4:	4629      	mov	r1, r5
   d50a6:	689b      	ldr	r3, [r3, #8]
   d50a8:	4798      	blx	r3
        _wire -> endTransmission();
   d50aa:	6820      	ldr	r0, [r4, #0]
   d50ac:	f002 f8e9 	bl	d7282 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d50b0:	7921      	ldrb	r1, [r4, #4]
   d50b2:	6820      	ldr	r0, [r4, #0]
   d50b4:	2203      	movs	r2, #3
   d50b6:	f002 f8d6 	bl	d7266 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d50ba:	6820      	ldr	r0, [r4, #0]
   d50bc:	6803      	ldr	r3, [r0, #0]
   d50be:	695b      	ldr	r3, [r3, #20]
   d50c0:	4798      	blx	r3
        value <<= 8;
   d50c2:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d50c4:	6820      	ldr	r0, [r4, #0]
   d50c6:	6803      	ldr	r3, [r0, #0]
   d50c8:	695b      	ldr	r3, [r3, #20]
   d50ca:	4798      	blx	r3
   d50cc:	4328      	orrs	r0, r5
        value <<= 8;
   d50ce:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d50d0:	6820      	ldr	r0, [r4, #0]
   d50d2:	6803      	ldr	r3, [r0, #0]
   d50d4:	695b      	ldr	r3, [r3, #20]
   d50d6:	4798      	blx	r3
   d50d8:	4305      	orrs	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d50da:	4628      	mov	r0, r5
   d50dc:	b005      	add	sp, #20
   d50de:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d50e0:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d50e4:	3301      	adds	r3, #1
   d50e6:	d10c      	bne.n	d5102 <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d50e8:	4b1a      	ldr	r3, [pc, #104]	; (d5154 <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d50ea:	9300      	str	r3, [sp, #0]
   d50ec:	2300      	movs	r3, #0
   d50ee:	f88d 3004 	strb.w	r3, [sp, #4]
   d50f2:	4b19      	ldr	r3, [pc, #100]	; (d5158 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d50f4:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d50f6:	4668      	mov	r0, sp
   d50f8:	2301      	movs	r3, #1
   d50fa:	f8ad 300c 	strh.w	r3, [sp, #12]
   d50fe:	f7ff ffb8 	bl	d5072 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5102:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5106:	2100      	movs	r1, #0
   d5108:	b280      	uxth	r0, r0
   d510a:	f002 fcb0 	bl	d7a6e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d510e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5112:	4620      	mov	r0, r4
   d5114:	f7ff ff70 	bl	d4ff8 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5118:	2100      	movs	r1, #0
   d511a:	4620      	mov	r0, r4
   d511c:	f7ff ff6c 	bl	d4ff8 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d5120:	2100      	movs	r1, #0
        value <<= 8;
   d5122:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5124:	4620      	mov	r0, r4
   d5126:	f7ff ff67 	bl	d4ff8 <_ZN15Adafruit_BME2807spixferEh>
   d512a:	4328      	orrs	r0, r5
        value <<= 8;
   d512c:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d512e:	2100      	movs	r1, #0
   d5130:	4620      	mov	r0, r4
   d5132:	f7ff ff61 	bl	d4ff8 <_ZN15Adafruit_BME2807spixferEh>
   d5136:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d5138:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d513c:	2101      	movs	r1, #1
   d513e:	b280      	uxth	r0, r0
   d5140:	f002 fc95 	bl	d7a6e <digitalWrite>
        if (_sck == -1)
   d5144:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5148:	3301      	adds	r3, #1
   d514a:	d1c6      	bne.n	d50da <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d514c:	f7ff ff8a 	bl	d5064 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d5150:	e7c3      	b.n	d50da <_ZN15Adafruit_BME2806read24Eh+0x52>
   d5152:	bf00      	nop
   d5154:	000da4f4 	.word	0x000da4f4
   d5158:	0007a120 	.word	0x0007a120

000d515c <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d515c:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d515e:	21fa      	movs	r1, #250	; 0xfa
{
   d5160:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5162:	f7ff ff91 	bl	d5088 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d5166:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d516a:	d01e      	beq.n	d51aa <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d516c:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d516e:	ed9f 7a10 	vldr	s14, [pc, #64]	; d51b0 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5172:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5174:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5178:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d517c:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5180:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5182:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d5184:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d5188:	1312      	asrs	r2, r2, #12
   d518a:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d518c:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d518e:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d5192:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d5194:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5198:	3380      	adds	r3, #128	; 0x80
   d519a:	121b      	asrs	r3, r3, #8
   d519c:	ee07 3a90 	vmov	s15, r3
   d51a0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d51a4:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d51a8:	bd10      	pop	{r4, pc}
        return NAN;
   d51aa:	ed9f 0a02 	vldr	s0, [pc, #8]	; d51b4 <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d51ae:	e7fb      	b.n	d51a8 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d51b0:	42c80000 	.word	0x42c80000
   d51b4:	7fc00000 	.word	0x7fc00000

000d51b8 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d51b8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d51bc:	4604      	mov	r4, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d51be:	f7ff ffcd 	bl	d515c <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d51c2:	21f7      	movs	r1, #247	; 0xf7
   d51c4:	4620      	mov	r0, r4
   d51c6:	f7ff ff5f 	bl	d5088 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d51ca:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d51ce:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d51d0:	f000 80bf 	beq.w	d5352 <_ZN15Adafruit_BME28012readPressureEv+0x19a>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d51d4:	68e0      	ldr	r0, [r4, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d51d6:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d51da:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d51de:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d51e2:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d51e6:	fba3 8903 	umull	r8, r9, r3, r3
   d51ea:	fb03 f102 	mul.w	r1, r3, r2
   d51ee:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d51f2:	17f7      	asrs	r7, r6, #31
   d51f4:	fb06 f102 	mul.w	r1, r6, r2
   d51f8:	fb03 1107 	mla	r1, r3, r7, r1
   d51fc:	fba6 6703 	umull	r6, r7, r6, r3
   d5200:	440f      	add	r7, r1
   d5202:	0339      	lsls	r1, r7, #12
   d5204:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d5208:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d520a:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d520e:	17f7      	asrs	r7, r6, #31
   d5210:	fb06 fc09 	mul.w	ip, r6, r9
   d5214:	fb08 cc07 	mla	ip, r8, r7, ip
   d5218:	fba6 6708 	umull	r6, r7, r6, r8
   d521c:	4467      	add	r7, ip
   d521e:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d5222:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5226:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5228:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d522c:	eb1c 0000 	adds.w	r0, ip, r0
   d5230:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d5234:	3000      	adds	r0, #0
   d5236:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d523a:	fba0 0106 	umull	r0, r1, r0, r6
   d523e:	fb06 110e 	mla	r1, r6, lr, r1
   d5242:	104e      	asrs	r6, r1, #1
   d5244:	17cf      	asrs	r7, r1, #31

    if (var1 == 0) {
   d5246:	ea56 0107 	orrs.w	r1, r6, r7
   d524a:	f000 8085 	beq.w	d5358 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d524e:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d5252:	fb00 fc09 	mul.w	ip, r0, r9
   d5256:	17c1      	asrs	r1, r0, #31
   d5258:	fb08 cc01 	mla	ip, r8, r1, ip
   d525c:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5260:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d5264:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d5268:	fb08 f202 	mul.w	r2, r8, r2
   d526c:	fb03 2209 	mla	r2, r3, r9, r2
   d5270:	fba8 8903 	umull	r8, r9, r8, r3
   d5274:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5276:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5278:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d527c:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d5280:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5282:	1812      	adds	r2, r2, r0
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
   d5284:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5288:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d528c:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5290:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5294:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d5296:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5298:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d529a:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d529e:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d52a2:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d52a6:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d52aa:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d52ae:	1ac0      	subs	r0, r0, r3
   d52b0:	f640 4335 	movw	r3, #3125	; 0xc35
   d52b4:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d52b8:	fba0 0103 	umull	r0, r1, r0, r3
   d52bc:	fb03 110e 	mla	r1, r3, lr, r1
   d52c0:	4632      	mov	r2, r6
   d52c2:	463b      	mov	r3, r7
   d52c4:	f004 fd40 	bl	d9d48 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d52c8:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d52cc:	134d      	asrs	r5, r1, #13
   d52ce:	0b46      	lsrs	r6, r0, #13
   d52d0:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d52d4:	fb02 f705 	mul.w	r7, r2, r5
   d52d8:	17d3      	asrs	r3, r2, #31
   d52da:	fb06 7703 	mla	r7, r6, r3, r7
   d52de:	fba2 2306 	umull	r2, r3, r2, r6
   d52e2:	443b      	add	r3, r7
   d52e4:	4355      	muls	r5, r2
   d52e6:	fb06 5503 	mla	r5, r6, r3, r5
   d52ea:	fba2 2306 	umull	r2, r3, r2, r6
   d52ee:	442b      	add	r3, r5
   d52f0:	0e55      	lsrs	r5, r2, #25
   d52f2:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d52f6:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d52fa:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d52fe:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5300:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5304:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5308:	17d3      	asrs	r3, r2, #31
   d530a:	4351      	muls	r1, r2
   d530c:	fb00 1103 	mla	r1, r0, r3, r1
   d5310:	fba2 2300 	umull	r2, r3, r2, r0
   d5314:	440b      	add	r3, r1
   d5316:	0cd1      	lsrs	r1, r2, #19
   d5318:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d531c:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d531e:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5322:	eb46 0300 	adc.w	r3, r6, r0
   d5326:	0a2a      	lsrs	r2, r5, #8
   d5328:	17e5      	asrs	r5, r4, #31
   d532a:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d532e:	1219      	asrs	r1, r3, #8
   d5330:	0120      	lsls	r0, r4, #4
   d5332:	012b      	lsls	r3, r5, #4
   d5334:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d5338:	1880      	adds	r0, r0, r2
   d533a:	eb43 0101 	adc.w	r1, r3, r1
   d533e:	f004 fcc5 	bl	d9ccc <__aeabi_l2f>
   d5342:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5360 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d5346:	ee07 0a90 	vmov	s15, r0
   d534a:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d534e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d5352:	ed9f 0a04 	vldr	s0, [pc, #16]	; d5364 <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d5356:	e7fa      	b.n	d534e <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d5358:	ed9f 0a03 	vldr	s0, [pc, #12]	; d5368 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d535c:	e7f7      	b.n	d534e <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d535e:	bf00      	nop
   d5360:	3b800000 	.word	0x3b800000
   d5364:	7fc00000 	.word	0x7fc00000
	...

000d5370 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   d5370:	b508      	push	{r3, lr}
   d5372:	ed2d 8b02 	vpush	{d8}
   d5376:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   d537a:	f7ff ff1d 	bl	d51b8 <_ZN15Adafruit_BME28012readPressureEv>
   d537e:	ed9f 7a16 	vldr	s14, [pc, #88]	; d53d8 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d5382:	eec0 7a07 	vdiv.f32	s15, s0, s14
   d5386:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d538a:	ee17 0a90 	vmov	r0, s15
   d538e:	f004 f855 	bl	d943c <__aeabi_f2d>
   d5392:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d53c8 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d5396:	ec41 0b10 	vmov	d0, r0, r1
   d539a:	f002 fcf1 	bl	d7d80 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d539e:	490f      	ldr	r1, [pc, #60]	; (d53dc <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d53a0:	ec53 2b10 	vmov	r2, r3, d0
   d53a4:	2000      	movs	r0, #0
   d53a6:	f003 fee9 	bl	d917c <__aeabi_dsub>
   d53aa:	a309      	add	r3, pc, #36	; (adr r3, d53d0 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d53ac:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53b0:	f004 f89c 	bl	d94ec <__aeabi_dmul>
   d53b4:	f004 fb6a 	bl	d9a8c <__aeabi_d2f>
}
   d53b8:	ecbd 8b02 	vpop	{d8}
   d53bc:	ee00 0a10 	vmov	s0, r0
   d53c0:	bd08      	pop	{r3, pc}
   d53c2:	bf00      	nop
   d53c4:	f3af 8000 	nop.w
   d53c8:	1a36e2eb 	.word	0x1a36e2eb
   d53cc:	3fc85bc0 	.word	0x3fc85bc0
   d53d0:	00000000 	.word	0x00000000
   d53d4:	40e5a540 	.word	0x40e5a540
   d53d8:	42c80000 	.word	0x42c80000
   d53dc:	3ff00000 	.word	0x3ff00000

000d53e0 <_ZN15Adafruit_BME2806read16Eh>:
{
   d53e0:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d53e2:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d53e6:	3301      	adds	r3, #1
{
   d53e8:	b085      	sub	sp, #20
   d53ea:	4604      	mov	r4, r0
   d53ec:	460d      	mov	r5, r1
    if (_cs == -1) {
   d53ee:	d11f      	bne.n	d5430 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d53f0:	7901      	ldrb	r1, [r0, #4]
   d53f2:	6800      	ldr	r0, [r0, #0]
   d53f4:	f001 ff3a 	bl	d726c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d53f8:	6820      	ldr	r0, [r4, #0]
   d53fa:	6803      	ldr	r3, [r0, #0]
   d53fc:	4629      	mov	r1, r5
   d53fe:	689b      	ldr	r3, [r3, #8]
   d5400:	4798      	blx	r3
        _wire -> endTransmission();
   d5402:	6820      	ldr	r0, [r4, #0]
   d5404:	f001 ff3d 	bl	d7282 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5408:	7921      	ldrb	r1, [r4, #4]
   d540a:	6820      	ldr	r0, [r4, #0]
   d540c:	2202      	movs	r2, #2
   d540e:	f001 ff2a 	bl	d7266 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d5412:	6820      	ldr	r0, [r4, #0]
   d5414:	6803      	ldr	r3, [r0, #0]
   d5416:	695b      	ldr	r3, [r3, #20]
   d5418:	4798      	blx	r3
   d541a:	4605      	mov	r5, r0
   d541c:	6820      	ldr	r0, [r4, #0]
   d541e:	6803      	ldr	r3, [r0, #0]
   d5420:	695b      	ldr	r3, [r3, #20]
   d5422:	4798      	blx	r3
   d5424:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5428:	b285      	uxth	r5, r0
}
   d542a:	4628      	mov	r0, r5
   d542c:	b005      	add	sp, #20
   d542e:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5430:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5434:	3301      	adds	r3, #1
   d5436:	d10c      	bne.n	d5452 <_ZN15Adafruit_BME2806read16Eh+0x72>
   d5438:	4b18      	ldr	r3, [pc, #96]	; (d549c <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d543a:	9300      	str	r3, [sp, #0]
   d543c:	2300      	movs	r3, #0
   d543e:	f88d 3004 	strb.w	r3, [sp, #4]
   d5442:	4b17      	ldr	r3, [pc, #92]	; (d54a0 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d5444:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5446:	4668      	mov	r0, sp
   d5448:	2301      	movs	r3, #1
   d544a:	f8ad 300c 	strh.w	r3, [sp, #12]
   d544e:	f7ff fe10 	bl	d5072 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5452:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5456:	2100      	movs	r1, #0
   d5458:	b280      	uxth	r0, r0
   d545a:	f002 fb08 	bl	d7a6e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d545e:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d5462:	4620      	mov	r0, r4
   d5464:	f7ff fdc8 	bl	d4ff8 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5468:	2100      	movs	r1, #0
   d546a:	4620      	mov	r0, r4
   d546c:	f7ff fdc4 	bl	d4ff8 <_ZN15Adafruit_BME2807spixferEh>
   d5470:	2100      	movs	r1, #0
   d5472:	4605      	mov	r5, r0
   d5474:	4620      	mov	r0, r4
   d5476:	f7ff fdbf 	bl	d4ff8 <_ZN15Adafruit_BME2807spixferEh>
   d547a:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d547e:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d5480:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5484:	2101      	movs	r1, #1
   d5486:	b280      	uxth	r0, r0
   d5488:	f002 faf1 	bl	d7a6e <digitalWrite>
        if (_sck == -1)
   d548c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5490:	3301      	adds	r3, #1
   d5492:	d1ca      	bne.n	d542a <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d5494:	f7ff fde6 	bl	d5064 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d5498:	e7c7      	b.n	d542a <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d549a:	bf00      	nop
   d549c:	000da4f4 	.word	0x000da4f4
   d54a0:	0007a120 	.word	0x0007a120

000d54a4 <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d54a4:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d54a6:	f7ff ff9b 	bl	d53e0 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d54aa:	ba40      	rev16	r0, r0
}
   d54ac:	b280      	uxth	r0, r0
   d54ae:	bd08      	pop	{r3, pc}

000d54b0 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   d54b0:	b538      	push	{r3, r4, r5, lr}
   d54b2:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d54b4:	f7ff fe52 	bl	d515c <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d54b8:	21fd      	movs	r1, #253	; 0xfd
   d54ba:	4620      	mov	r0, r4
   d54bc:	f7ff ff90 	bl	d53e0 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d54c0:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d54c4:	d038      	beq.n	d5538 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d54c6:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d54ca:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d54cc:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d54d0:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d54d2:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d54d6:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d54da:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d54de:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d54e2:	13d9      	asrs	r1, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d54e4:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d54e8:	4353      	muls	r3, r2
   d54ea:	12db      	asrs	r3, r3, #11
   d54ec:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d54f0:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d54f4:	4353      	muls	r3, r2
   d54f6:	129b      	asrs	r3, r3, #10
   d54f8:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d54fa:	129b      	asrs	r3, r3, #10
   d54fc:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5500:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d5504:	4353      	muls	r3, r2
   d5506:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d550a:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d550c:	434b      	muls	r3, r1
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d550e:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d5510:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5514:	4352      	muls	r2, r2
   d5516:	11d2      	asrs	r2, r2, #7
   d5518:	434a      	muls	r2, r1
   d551a:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d551e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d5522:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d5526:	bfa8      	it	ge
   d5528:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d552c:	131b      	asrs	r3, r3, #12
   d552e:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d5532:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d5536:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d5538:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5540 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d553c:	e7fb      	b.n	d5536 <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d553e:	bf00      	nop
   d5540:	7fc00000 	.word	0x7fc00000

000d5544 <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d5544:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d5546:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d554a:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d554c:	b085      	sub	sp, #20
   d554e:	4604      	mov	r4, r0
   d5550:	460d      	mov	r5, r1
    if (_cs == -1) {
   d5552:	d118      	bne.n	d5586 <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d5554:	7901      	ldrb	r1, [r0, #4]
   d5556:	6800      	ldr	r0, [r0, #0]
   d5558:	f001 fe88 	bl	d726c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d555c:	6820      	ldr	r0, [r4, #0]
   d555e:	6803      	ldr	r3, [r0, #0]
   d5560:	4629      	mov	r1, r5
   d5562:	689b      	ldr	r3, [r3, #8]
   d5564:	4798      	blx	r3
        _wire -> endTransmission();
   d5566:	6820      	ldr	r0, [r4, #0]
   d5568:	f001 fe8b 	bl	d7282 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d556c:	7921      	ldrb	r1, [r4, #4]
   d556e:	6820      	ldr	r0, [r4, #0]
   d5570:	2201      	movs	r2, #1
   d5572:	f001 fe78 	bl	d7266 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d5576:	6820      	ldr	r0, [r4, #0]
   d5578:	6803      	ldr	r3, [r0, #0]
   d557a:	695b      	ldr	r3, [r3, #20]
   d557c:	4798      	blx	r3
   d557e:	b2c5      	uxtb	r5, r0
}
   d5580:	4628      	mov	r0, r5
   d5582:	b005      	add	sp, #20
   d5584:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5586:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d558a:	3301      	adds	r3, #1
   d558c:	d10c      	bne.n	d55a8 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d558e:	4b15      	ldr	r3, [pc, #84]	; (d55e4 <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d5590:	9300      	str	r3, [sp, #0]
   d5592:	2300      	movs	r3, #0
   d5594:	f88d 3004 	strb.w	r3, [sp, #4]
   d5598:	4b13      	ldr	r3, [pc, #76]	; (d55e8 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d559a:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d559c:	4668      	mov	r0, sp
   d559e:	2301      	movs	r3, #1
   d55a0:	f8ad 300c 	strh.w	r3, [sp, #12]
   d55a4:	f7ff fd65 	bl	d5072 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d55a8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d55ac:	2100      	movs	r1, #0
   d55ae:	b280      	uxth	r0, r0
   d55b0:	f002 fa5d 	bl	d7a6e <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d55b4:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d55b8:	4620      	mov	r0, r4
   d55ba:	f7ff fd1d 	bl	d4ff8 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d55be:	2100      	movs	r1, #0
   d55c0:	4620      	mov	r0, r4
   d55c2:	f7ff fd19 	bl	d4ff8 <_ZN15Adafruit_BME2807spixferEh>
   d55c6:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d55c8:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d55cc:	2101      	movs	r1, #1
   d55ce:	b280      	uxth	r0, r0
   d55d0:	f002 fa4d 	bl	d7a6e <digitalWrite>
        if (_sck == -1)
   d55d4:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d55d8:	3301      	adds	r3, #1
   d55da:	d1d1      	bne.n	d5580 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d55dc:	f7ff fd42 	bl	d5064 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d55e0:	e7ce      	b.n	d5580 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d55e2:	bf00      	nop
   d55e4:	000da4f4 	.word	0x000da4f4
   d55e8:	0007a120 	.word	0x0007a120

000d55ec <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d55ec:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d55ee:	21f3      	movs	r1, #243	; 0xf3
   d55f0:	f7ff ffa8 	bl	d5544 <_ZN15Adafruit_BME2805read8Eh>
}
   d55f4:	f000 0001 	and.w	r0, r0, #1
   d55f8:	bd08      	pop	{r3, pc}

000d55fa <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d55fa:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d55fc:	2188      	movs	r1, #136	; 0x88
{
   d55fe:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5600:	f7ff ff50 	bl	d54a4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5604:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5606:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d5608:	4620      	mov	r0, r4
   d560a:	f7ff ff4b 	bl	d54a4 <_ZN15Adafruit_BME2809read16_LEEh>
   d560e:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5610:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d5612:	4620      	mov	r0, r4
   d5614:	f7ff ff46 	bl	d54a4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5618:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d561a:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d561c:	4620      	mov	r0, r4
   d561e:	f7ff ff41 	bl	d54a4 <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d5622:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5624:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d5626:	4620      	mov	r0, r4
   d5628:	f7ff ff3c 	bl	d54a4 <_ZN15Adafruit_BME2809read16_LEEh>
   d562c:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d562e:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d5630:	4620      	mov	r0, r4
   d5632:	f7ff ff37 	bl	d54a4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5636:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5638:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d563a:	4620      	mov	r0, r4
   d563c:	f7ff ff32 	bl	d54a4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5640:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d5642:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d5644:	4620      	mov	r0, r4
   d5646:	f7ff ff2d 	bl	d54a4 <_ZN15Adafruit_BME2809read16_LEEh>
   d564a:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d564c:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d564e:	4620      	mov	r0, r4
   d5650:	f7ff ff28 	bl	d54a4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5654:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d5656:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d5658:	4620      	mov	r0, r4
   d565a:	f7ff ff23 	bl	d54a4 <_ZN15Adafruit_BME2809read16_LEEh>
   d565e:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d5660:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d5662:	4620      	mov	r0, r4
   d5664:	f7ff ff1e 	bl	d54a4 <_ZN15Adafruit_BME2809read16_LEEh>
   d5668:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d566a:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d566c:	4620      	mov	r0, r4
   d566e:	f7ff ff19 	bl	d54a4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5672:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d5674:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5676:	4620      	mov	r0, r4
   d5678:	f7ff ff64 	bl	d5544 <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d567c:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d567e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d5682:	4620      	mov	r0, r4
   d5684:	f7ff ff0e 	bl	d54a4 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5688:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d568a:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d568c:	4620      	mov	r0, r4
   d568e:	f7ff ff59 	bl	d5544 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5692:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5694:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d5698:	4620      	mov	r0, r4
   d569a:	f7ff ff53 	bl	d5544 <_ZN15Adafruit_BME2805read8Eh>
   d569e:	21e5      	movs	r1, #229	; 0xe5
   d56a0:	4605      	mov	r5, r0
   d56a2:	4620      	mov	r0, r4
   d56a4:	f7ff ff4e 	bl	d5544 <_ZN15Adafruit_BME2805read8Eh>
   d56a8:	f000 030f 	and.w	r3, r0, #15
   d56ac:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d56b0:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d56b2:	21e6      	movs	r1, #230	; 0xe6
   d56b4:	4620      	mov	r0, r4
   d56b6:	f7ff ff45 	bl	d5544 <_ZN15Adafruit_BME2805read8Eh>
   d56ba:	21e5      	movs	r1, #229	; 0xe5
   d56bc:	4605      	mov	r5, r0
   d56be:	4620      	mov	r0, r4
   d56c0:	f7ff ff40 	bl	d5544 <_ZN15Adafruit_BME2805read8Eh>
   d56c4:	1103      	asrs	r3, r0, #4
   d56c6:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d56ca:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d56cc:	21e7      	movs	r1, #231	; 0xe7
   d56ce:	4620      	mov	r0, r4
   d56d0:	f7ff ff38 	bl	d5544 <_ZN15Adafruit_BME2805read8Eh>
   d56d4:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d56d8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d56dc <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d56dc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d56de:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d56e2:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d56e4:	4604      	mov	r4, r0
   d56e6:	460e      	mov	r6, r1
   d56e8:	4615      	mov	r5, r2
    if (_cs == -1) {
   d56ea:	d112      	bne.n	d5712 <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d56ec:	7901      	ldrb	r1, [r0, #4]
   d56ee:	6800      	ldr	r0, [r0, #0]
   d56f0:	f001 fdbc 	bl	d726c <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d56f4:	6820      	ldr	r0, [r4, #0]
   d56f6:	6803      	ldr	r3, [r0, #0]
   d56f8:	4631      	mov	r1, r6
   d56fa:	689b      	ldr	r3, [r3, #8]
   d56fc:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d56fe:	6820      	ldr	r0, [r4, #0]
   d5700:	6803      	ldr	r3, [r0, #0]
   d5702:	4629      	mov	r1, r5
   d5704:	689b      	ldr	r3, [r3, #8]
   d5706:	4798      	blx	r3
        _wire -> endTransmission();
   d5708:	6820      	ldr	r0, [r4, #0]
   d570a:	f001 fdba 	bl	d7282 <_ZN7TwoWire15endTransmissionEv>
}
   d570e:	b004      	add	sp, #16
   d5710:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d5712:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5716:	3301      	adds	r3, #1
   d5718:	d10c      	bne.n	d5734 <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d571a:	4b14      	ldr	r3, [pc, #80]	; (d576c <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d571c:	9300      	str	r3, [sp, #0]
   d571e:	2300      	movs	r3, #0
   d5720:	f88d 3004 	strb.w	r3, [sp, #4]
   d5724:	4b12      	ldr	r3, [pc, #72]	; (d5770 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d5726:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5728:	4668      	mov	r0, sp
   d572a:	2301      	movs	r3, #1
   d572c:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5730:	f7ff fc9f 	bl	d5072 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d5734:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5738:	2100      	movs	r1, #0
   d573a:	b280      	uxth	r0, r0
   d573c:	f002 f997 	bl	d7a6e <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d5740:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d5744:	4620      	mov	r0, r4
   d5746:	f7ff fc57 	bl	d4ff8 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d574a:	4629      	mov	r1, r5
   d574c:	4620      	mov	r0, r4
   d574e:	f7ff fc53 	bl	d4ff8 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d5752:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5756:	2101      	movs	r1, #1
   d5758:	b280      	uxth	r0, r0
   d575a:	f002 f988 	bl	d7a6e <digitalWrite>
    if (_sck == -1)
   d575e:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5762:	3301      	adds	r3, #1
   d5764:	d1d3      	bne.n	d570e <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d5766:	f7ff fc7d 	bl	d5064 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d576a:	e7d0      	b.n	d570e <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d576c:	000da4f4 	.word	0x000da4f4
   d5770:	0007a120 	.word	0x0007a120

000d5774 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d5774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d5776:	00db      	lsls	r3, r3, #3
   d5778:	f002 0207 	and.w	r2, r2, #7
   d577c:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d5780:	4313      	orrs	r3, r2
   d5782:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d5786:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d578a:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d578e:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d5792:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d5796:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d579a:	f366 1347 	bfi	r3, r6, #5, #3
   d579e:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d57a2:	00ed      	lsls	r5, r5, #3
   d57a4:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d57a8:	f007 0707 	and.w	r7, r7, #7
   d57ac:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d57b0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d57b4:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d57b6:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d57b8:	431d      	orrs	r5, r3
   d57ba:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d57be:	f006 0207 	and.w	r2, r6, #7
   d57c2:	21f2      	movs	r1, #242	; 0xf2
   d57c4:	f7ff ff8a 	bl	d56dc <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d57c8:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d57cc:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d57d0:	f002 0107 	and.w	r1, r2, #7
   d57d4:	009b      	lsls	r3, r3, #2
   d57d6:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d57da:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d57de:	4620      	mov	r0, r4
   d57e0:	21f5      	movs	r1, #245	; 0xf5
   d57e2:	f7ff ff7b 	bl	d56dc <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d57e6:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d57ea:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d57ee:	f002 0107 	and.w	r1, r2, #7
   d57f2:	009b      	lsls	r3, r3, #2
   d57f4:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d57f8:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d57fc:	4620      	mov	r0, r4
   d57fe:	21f4      	movs	r1, #244	; 0xf4
}
   d5800:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5804:	f7ff bf6a 	b.w	d56dc <_ZN15Adafruit_BME2806write8Ehh>

000d5808 <_ZN15Adafruit_BME2804initEv>:
{
   d5808:	b530      	push	{r4, r5, lr}
   d580a:	4604      	mov	r4, r0
    if (_cs == -1) {
   d580c:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d5810:	1c42      	adds	r2, r0, #1
{
   d5812:	b085      	sub	sp, #20
    if (_cs == -1) {
   d5814:	d119      	bne.n	d584a <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d5816:	6820      	ldr	r0, [r4, #0]
   d5818:	f001 fcf6 	bl	d7208 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d581c:	21d0      	movs	r1, #208	; 0xd0
   d581e:	4620      	mov	r0, r4
   d5820:	f7ff fe90 	bl	d5544 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d5824:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5826:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d5828:	d145      	bne.n	d58b6 <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d582a:	4620      	mov	r0, r4
   d582c:	22b6      	movs	r2, #182	; 0xb6
   d582e:	21e0      	movs	r1, #224	; 0xe0
   d5830:	f7ff ff54 	bl	d56dc <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d5834:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5838:	f001 fa6a 	bl	d6d10 <delay>
    while (isReadingCalibration())
   d583c:	4620      	mov	r0, r4
   d583e:	f7ff fed5 	bl	d55ec <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d5842:	4605      	mov	r5, r0
   d5844:	b328      	cbz	r0, d5892 <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d5846:	2064      	movs	r0, #100	; 0x64
   d5848:	e7f6      	b.n	d5838 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d584a:	2101      	movs	r1, #1
   d584c:	b280      	uxth	r0, r0
   d584e:	f002 f90e 	bl	d7a6e <digitalWrite>
        pinMode(_cs, OUTPUT);
   d5852:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5856:	2101      	movs	r1, #1
   d5858:	b280      	uxth	r0, r0
   d585a:	f002 f8f7 	bl	d7a4c <pinMode>
        if (_sck == -1) {
   d585e:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d5862:	1c43      	adds	r3, r0, #1
   d5864:	d104      	bne.n	d5870 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d5866:	f7ff fbab 	bl	d4fc0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d586a:	f000 fe49 	bl	d6500 <_ZN8SPIClass5beginEv>
    }
   d586e:	e7d5      	b.n	d581c <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d5870:	2101      	movs	r1, #1
   d5872:	b280      	uxth	r0, r0
   d5874:	f002 f8ea 	bl	d7a4c <pinMode>
            pinMode(_mosi, OUTPUT);
   d5878:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d587c:	2101      	movs	r1, #1
   d587e:	b280      	uxth	r0, r0
   d5880:	f002 f8e4 	bl	d7a4c <pinMode>
            pinMode(_miso, INPUT);
   d5884:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d5888:	2100      	movs	r1, #0
   d588a:	b280      	uxth	r0, r0
   d588c:	f002 f8de 	bl	d7a4c <pinMode>
   d5890:	e7c4      	b.n	d581c <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d5892:	4620      	mov	r0, r4
   d5894:	f7ff feb1 	bl	d55fa <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d5898:	2305      	movs	r3, #5
   d589a:	9300      	str	r3, [sp, #0]
   d589c:	461a      	mov	r2, r3
   d589e:	2103      	movs	r1, #3
   d58a0:	4620      	mov	r0, r4
   d58a2:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d58a6:	f7ff ff65 	bl	d5774 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d58aa:	2064      	movs	r0, #100	; 0x64
   d58ac:	f001 fa30 	bl	d6d10 <delay>
   d58b0:	2001      	movs	r0, #1
}
   d58b2:	b005      	add	sp, #20
   d58b4:	bd30      	pop	{r4, r5, pc}
        return false;
   d58b6:	2000      	movs	r0, #0
   d58b8:	e7fb      	b.n	d58b2 <_ZN15Adafruit_BME2804initEv+0xaa>

000d58ba <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d58ba:	2377      	movs	r3, #119	; 0x77
{
   d58bc:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d58be:	7103      	strb	r3, [r0, #4]
{
   d58c0:	4604      	mov	r4, r0
	_wire = &Wire;
   d58c2:	f002 f919 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d58c6:	6020      	str	r0, [r4, #0]
	status = init();
   d58c8:	4620      	mov	r0, r4
   d58ca:	f7ff ff9d 	bl	d5808 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d58ce:	b930      	cbnz	r0, d58de <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d58d0:	2376      	movs	r3, #118	; 0x76
   d58d2:	7123      	strb	r3, [r4, #4]
 		status = init();
   d58d4:	4620      	mov	r0, r4
}
   d58d6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d58da:	f7ff bf95 	b.w	d5808 <_ZN15Adafruit_BME2804initEv>
}
   d58de:	bd10      	pop	{r4, pc}

000d58e0 <_ZN15ThingSpeakClassD1Ev>:
class ThingSpeakClass
   d58e0:	b570      	push	{r4, r5, r6, lr}
   d58e2:	4604      	mov	r4, r0
   d58e4:	30c8      	adds	r0, #200	; 0xc8
   d58e6:	f000 ff77 	bl	d67d8 <_ZN6StringD1Ev>
   d58ea:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d58ee:	f000 ff73 	bl	d67d8 <_ZN6StringD1Ev>
   d58f2:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   d58f6:	f000 ff6f 	bl	d67d8 <_ZN6StringD1Ev>
   d58fa:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d58fe:	f000 ff6b 	bl	d67d8 <_ZN6StringD1Ev>
   d5902:	f104 0588 	add.w	r5, r4, #136	; 0x88
   d5906:	f104 0608 	add.w	r6, r4, #8
   d590a:	42b5      	cmp	r5, r6
   d590c:	d004      	beq.n	d5918 <_ZN15ThingSpeakClassD1Ev+0x38>
   d590e:	3d10      	subs	r5, #16
   d5910:	4628      	mov	r0, r5
   d5912:	f000 ff61 	bl	d67d8 <_ZN6StringD1Ev>
   d5916:	e7f8      	b.n	d590a <_ZN15ThingSpeakClassD1Ev+0x2a>
   d5918:	4620      	mov	r0, r4
   d591a:	bd70      	pop	{r4, r5, r6, pc}

000d591c <_ZN15ThingSpeakClassC1Ev>:
	ThingSpeakClass()
   d591c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	{
   d5920:	2200      	movs	r2, #0
   d5922:	2350      	movs	r3, #80	; 0x50
   d5924:	e9c0 2300 	strd	r2, r3, [r0]
   d5928:	f100 0508 	add.w	r5, r0, #8
   d592c:	4f24      	ldr	r7, [pc, #144]	; (d59c0 <_ZN15ThingSpeakClassC1Ev+0xa4>)
	ThingSpeakClass()
   d592e:	4604      	mov	r4, r0
   d5930:	f100 0a88 	add.w	sl, r0, #136	; 0x88
	{
   d5934:	462e      	mov	r6, r5
   d5936:	4630      	mov	r0, r6
   d5938:	4639      	mov	r1, r7
   d593a:	3610      	adds	r6, #16
   d593c:	f000 ff97 	bl	d686e <_ZN6StringC1EPKc>
   d5940:	4556      	cmp	r6, sl
   d5942:	d1f8      	bne.n	d5936 <_ZN15ThingSpeakClassC1Ev+0x1a>
   d5944:	f104 0998 	add.w	r9, r4, #152	; 0x98
   d5948:	491d      	ldr	r1, [pc, #116]	; (d59c0 <_ZN15ThingSpeakClassC1Ev+0xa4>)
			this->nextWriteField[iField] = "";
   d594a:	f8df b074 	ldr.w	fp, [pc, #116]	; d59c0 <_ZN15ThingSpeakClassC1Ev+0xa4>
	{
   d594e:	4648      	mov	r0, r9
   d5950:	f104 08a8 	add.w	r8, r4, #168	; 0xa8
   d5954:	f000 ff8b 	bl	d686e <_ZN6StringC1EPKc>
   d5958:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d595c:	4918      	ldr	r1, [pc, #96]	; (d59c0 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d595e:	4640      	mov	r0, r8
   d5960:	f000 ff85 	bl	d686e <_ZN6StringC1EPKc>
   d5964:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
   d5968:	4915      	ldr	r1, [pc, #84]	; (d59c0 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d596a:	4638      	mov	r0, r7
   d596c:	f000 ff7f 	bl	d686e <_ZN6StringC1EPKc>
   d5970:	4913      	ldr	r1, [pc, #76]	; (d59c0 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d5972:	4630      	mov	r0, r6
   d5974:	f000 ff7b 	bl	d686e <_ZN6StringC1EPKc>
			this->nextWriteField[iField] = "";
   d5978:	4628      	mov	r0, r5
   d597a:	4659      	mov	r1, fp
   d597c:	3510      	adds	r5, #16
   d597e:	f000 ffc9 	bl	d6914 <_ZN6StringaSEPKc>
		for(size_t iField = 0; iField < 8; iField++)
   d5982:	4555      	cmp	r5, sl
   d5984:	d1f8      	bne.n	d5978 <_ZN15ThingSpeakClassC1Ev+0x5c>
		this->nextWriteLatitude = NAN;
   d5986:	4b0f      	ldr	r3, [pc, #60]	; (d59c4 <_ZN15ThingSpeakClassC1Ev+0xa8>)
   d5988:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		this->nextWriteLongitude = NAN;
   d598c:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		this->nextWriteElevation = NAN;
   d5990:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		this->nextWriteStatus = "";
   d5994:	490a      	ldr	r1, [pc, #40]	; (d59c0 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d5996:	4648      	mov	r0, r9
   d5998:	f000 ffbc 	bl	d6914 <_ZN6StringaSEPKc>
		this->nextWriteTwitter = "";
   d599c:	4908      	ldr	r1, [pc, #32]	; (d59c0 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d599e:	4640      	mov	r0, r8
   d59a0:	f000 ffb8 	bl	d6914 <_ZN6StringaSEPKc>
		this->nextWriteTweet = "";
   d59a4:	4906      	ldr	r1, [pc, #24]	; (d59c0 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d59a6:	4638      	mov	r0, r7
   d59a8:	f000 ffb4 	bl	d6914 <_ZN6StringaSEPKc>
		this->nextWriteCreatedAt = "";
   d59ac:	4904      	ldr	r1, [pc, #16]	; (d59c0 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d59ae:	4630      	mov	r0, r6
   d59b0:	f000 ffb0 	bl	d6914 <_ZN6StringaSEPKc>
	    this->lastReadStatus = OK_SUCCESS;
   d59b4:	23c8      	movs	r3, #200	; 0xc8
   d59b6:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	};
   d59ba:	4620      	mov	r0, r4
   d59bc:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d59c0:	000da452 	.word	0x000da452
   d59c4:	7fc00000 	.word	0x7fc00000

000d59c8 <_GLOBAL__sub_I_ThingSpeak>:
 
  See the accompaning licence file for licensing information.
*/

#include "ThingSpeak.h"
ThingSpeakClass ThingSpeak;
   d59c8:	b510      	push	{r4, lr}
   d59ca:	4c05      	ldr	r4, [pc, #20]	; (d59e0 <_GLOBAL__sub_I_ThingSpeak+0x18>)
   d59cc:	4620      	mov	r0, r4
   d59ce:	f7ff ffa5 	bl	d591c <_ZN15ThingSpeakClassC1Ev>
   d59d2:	4620      	mov	r0, r4
   d59d4:	4a03      	ldr	r2, [pc, #12]	; (d59e4 <_GLOBAL__sub_I_ThingSpeak+0x1c>)
   d59d6:	4904      	ldr	r1, [pc, #16]	; (d59e8 <_GLOBAL__sub_I_ThingSpeak+0x20>)
   d59d8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d59dc:	f002 b8b4 	b.w	d7b48 <__aeabi_atexit>
   d59e0:	2003e578 	.word	0x2003e578
   d59e4:	2003e404 	.word	0x2003e404
   d59e8:	000d58e1 	.word	0x000d58e1

000d59ec <_ZN11TinyGPSPlusC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
   d59ec:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d59ee:	2102      	movs	r1, #2
   d59f0:	e9c0 2230 	strd	r2, r2, [r0, #192]	; 0xc0
   d59f4:	8002      	strh	r2, [r0, #0]
   RawDegrees() : deg(0), billionths(0), negative(false)
   d59f6:	8082      	strh	r2, [r0, #4]
   d59f8:	6082      	str	r2, [r0, #8]
   d59fa:	7302      	strb	r2, [r0, #12]
   d59fc:	8202      	strh	r2, [r0, #16]
   d59fe:	6142      	str	r2, [r0, #20]
   d5a00:	7602      	strb	r2, [r0, #24]
   d5a02:	8382      	strh	r2, [r0, #28]
   d5a04:	6202      	str	r2, [r0, #32]
   d5a06:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d5a0a:	8502      	strh	r2, [r0, #40]	; 0x28
   d5a0c:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5a0e:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
   d5a12:	8702      	strh	r2, [r0, #56]	; 0x38
   d5a14:	63c2      	str	r2, [r0, #60]	; 0x3c
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
   d5a16:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   d5a1a:	64c2      	str	r2, [r0, #76]	; 0x4c
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d5a1c:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   d5a20:	6602      	str	r2, [r0, #96]	; 0x60
   d5a22:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   d5a26:	6702      	str	r2, [r0, #112]	; 0x70
   d5a28:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   d5a2c:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
   d5a30:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   d5a34:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d5a38:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   d5a3c:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d5a40:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d5a44:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
   d5a48:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d5a4c:	e9c0 2232 	strd	r2, r2, [r0, #200]	; 0xc8
   d5a50:	e9c0 2234 	strd	r2, r2, [r0, #208]	; 0xd0
   d5a54:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
{
  term[0] = '\0';
   d5a58:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d5a5c:	4770      	bx	lr

000d5a5e <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d5a5e:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d5a62:	2b05      	cmp	r3, #5
   d5a64:	d802      	bhi.n	d5a6c <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d5a66:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d5a6a:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d5a6c:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d5a70:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d5a72:	bf94      	ite	ls
   d5a74:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d5a78:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d5a7c:	4770      	bx	lr

000d5a7e <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d5a7e:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d5a80:	7805      	ldrb	r5, [r0, #0]
{
   d5a82:	4604      	mov	r4, r0
  if (negative) ++term;
   d5a84:	2d2d      	cmp	r5, #45	; 0x2d
   d5a86:	bf08      	it	eq
   d5a88:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d5a8a:	4620      	mov	r0, r4
   d5a8c:	f004 fb46 	bl	da11c <atol>
   d5a90:	2364      	movs	r3, #100	; 0x64
   d5a92:	4358      	muls	r0, r3
   d5a94:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d5a96:	f814 3b01 	ldrb.w	r3, [r4], #1
   d5a9a:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d5a9e:	2909      	cmp	r1, #9
   d5aa0:	d9f8      	bls.n	d5a94 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d5aa2:	2b2e      	cmp	r3, #46	; 0x2e
   d5aa4:	d10b      	bne.n	d5abe <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d5aa6:	7853      	ldrb	r3, [r2, #1]
   d5aa8:	3b30      	subs	r3, #48	; 0x30
   d5aaa:	2b09      	cmp	r3, #9
   d5aac:	d807      	bhi.n	d5abe <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d5aae:	210a      	movs	r1, #10
   d5ab0:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d5ab4:	7893      	ldrb	r3, [r2, #2]
   d5ab6:	3b30      	subs	r3, #48	; 0x30
   d5ab8:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d5aba:	bf98      	it	ls
   d5abc:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d5abe:	2d2d      	cmp	r5, #45	; 0x2d
   d5ac0:	bf08      	it	eq
   d5ac2:	4240      	negeq	r0, r0
}
   d5ac4:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5ac8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d5ac8:	b538      	push	{r3, r4, r5, lr}
   d5aca:	460d      	mov	r5, r1
   d5acc:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d5ace:	f004 fb25 	bl	da11c <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d5ad2:	2264      	movs	r2, #100	; 0x64
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d5ad4:	4b13      	ldr	r3, [pc, #76]	; (d5b24 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d5ad6:	fbb0 f1f2 	udiv	r1, r0, r2
   d5ada:	fb02 0011 	mls	r0, r2, r1, r0
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d5ade:	4343      	muls	r3, r0

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d5ae0:	8029      	strh	r1, [r5, #0]
   d5ae2:	4620      	mov	r0, r4

  while (isdigit(*term))
   d5ae4:	7802      	ldrb	r2, [r0, #0]
   d5ae6:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   d5aea:	2c09      	cmp	r4, #9
   d5aec:	4601      	mov	r1, r0
   d5aee:	f100 0001 	add.w	r0, r0, #1
   d5af2:	d9f7      	bls.n	d5ae4 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d5af4:	2a2e      	cmp	r2, #46	; 0x2e
   d5af6:	d10b      	bne.n	d5b10 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   d5af8:	480a      	ldr	r0, [pc, #40]	; (d5b24 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d5afa:	240a      	movs	r4, #10
    while (isdigit(*++term))
   d5afc:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d5b00:	3a30      	subs	r2, #48	; 0x30
   d5b02:	2a09      	cmp	r2, #9
   d5b04:	d804      	bhi.n	d5b10 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   d5b06:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d5b0a:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   d5b0e:	e7f5      	b.n	d5afc <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d5b10:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5b14:	3301      	adds	r3, #1
   d5b16:	2203      	movs	r2, #3
   d5b18:	fbb3 f3f2 	udiv	r3, r3, r2
   d5b1c:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d5b1e:	2300      	movs	r3, #0
   d5b20:	722b      	strb	r3, [r5, #8]
}
   d5b22:	bd38      	pop	{r3, r4, r5, pc}
   d5b24:	00989680 	.word	0x00989680

000d5b28 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d5b28:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d5b2a:	4603      	mov	r3, r0
{
   d5b2c:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d5b2e:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d5b32:	6042      	str	r2, [r0, #4]
   d5b34:	685a      	ldr	r2, [r3, #4]
   d5b36:	6082      	str	r2, [r0, #8]
   d5b38:	7a1b      	ldrb	r3, [r3, #8]
   d5b3a:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d5b3c:	4603      	mov	r3, r0
   d5b3e:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d5b42:	6102      	str	r2, [r0, #16]
   d5b44:	685a      	ldr	r2, [r3, #4]
   d5b46:	6142      	str	r2, [r0, #20]
   d5b48:	7a1b      	ldrb	r3, [r3, #8]
   d5b4a:	7603      	strb	r3, [r0, #24]
   d5b4c:	f000 fa5e 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5b50:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5b54:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d5b56:	8023      	strh	r3, [r4, #0]
}
   d5b58:	bd10      	pop	{r4, pc}
   d5b5a:	0000      	movs	r0, r0
   d5b5c:	0000      	movs	r0, r0
	...

000d5b60 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d5b60:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5b62:	2300      	movs	r3, #0
{
   d5b64:	4604      	mov	r4, r0
   updated = false;
   d5b66:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d5b68:	6880      	ldr	r0, [r0, #8]
   d5b6a:	f003 fc45 	bl	d93f8 <__aeabi_ui2d>
   d5b6e:	a30c      	add	r3, pc, #48	; (adr r3, d5ba0 <_ZN15TinyGPSLocation3latEv+0x40>)
   d5b70:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b74:	f003 fde4 	bl	d9740 <__aeabi_ddiv>
   d5b78:	4606      	mov	r6, r0
   d5b7a:	88a0      	ldrh	r0, [r4, #4]
   d5b7c:	460f      	mov	r7, r1
   d5b7e:	f003 fc4b 	bl	d9418 <__aeabi_i2d>
   d5b82:	460b      	mov	r3, r1
   d5b84:	4602      	mov	r2, r0
   d5b86:	4639      	mov	r1, r7
   d5b88:	4630      	mov	r0, r6
   d5b8a:	f003 faf9 	bl	d9180 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d5b8e:	7b23      	ldrb	r3, [r4, #12]
   d5b90:	b113      	cbz	r3, d5b98 <_ZN15TinyGPSLocation3latEv+0x38>
   d5b92:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5b96:	4619      	mov	r1, r3
}
   d5b98:	ec41 0b10 	vmov	d0, r0, r1
   d5b9c:	bdd0      	pop	{r4, r6, r7, pc}
   d5b9e:	bf00      	nop
   d5ba0:	00000000 	.word	0x00000000
   d5ba4:	41cdcd65 	.word	0x41cdcd65

000d5ba8 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d5ba8:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5baa:	2300      	movs	r3, #0
{
   d5bac:	4604      	mov	r4, r0
   updated = false;
   d5bae:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d5bb0:	6940      	ldr	r0, [r0, #20]
   d5bb2:	f003 fc21 	bl	d93f8 <__aeabi_ui2d>
   d5bb6:	a30c      	add	r3, pc, #48	; (adr r3, d5be8 <_ZN15TinyGPSLocation3lngEv+0x40>)
   d5bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5bbc:	f003 fdc0 	bl	d9740 <__aeabi_ddiv>
   d5bc0:	4606      	mov	r6, r0
   d5bc2:	8a20      	ldrh	r0, [r4, #16]
   d5bc4:	460f      	mov	r7, r1
   d5bc6:	f003 fc27 	bl	d9418 <__aeabi_i2d>
   d5bca:	460b      	mov	r3, r1
   d5bcc:	4602      	mov	r2, r0
   d5bce:	4639      	mov	r1, r7
   d5bd0:	4630      	mov	r0, r6
   d5bd2:	f003 fad5 	bl	d9180 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d5bd6:	7e23      	ldrb	r3, [r4, #24]
   d5bd8:	b113      	cbz	r3, d5be0 <_ZN15TinyGPSLocation3lngEv+0x38>
   d5bda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5bde:	4619      	mov	r1, r3
}
   d5be0:	ec41 0b10 	vmov	d0, r0, r1
   d5be4:	bdd0      	pop	{r4, r6, r7, pc}
   d5be6:	bf00      	nop
   d5be8:	00000000 	.word	0x00000000
   d5bec:	41cdcd65 	.word	0x41cdcd65

000d5bf0 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d5bf0:	b510      	push	{r4, lr}
   date = newDate;
   d5bf2:	6883      	ldr	r3, [r0, #8]
   d5bf4:	6043      	str	r3, [r0, #4]
{
   d5bf6:	4604      	mov	r4, r0
   d5bf8:	f000 fa08 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5bfc:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5c00:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d5c02:	8023      	strh	r3, [r4, #0]
}
   d5c04:	bd10      	pop	{r4, pc}

000d5c06 <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   d5c06:	b510      	push	{r4, lr}
   time = newTime;
   d5c08:	6883      	ldr	r3, [r0, #8]
   d5c0a:	6043      	str	r3, [r0, #4]
{
   d5c0c:	4604      	mov	r4, r0
   d5c0e:	f000 f9fd 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5c12:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5c16:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d5c18:	8023      	strh	r3, [r4, #0]
}
   d5c1a:	bd10      	pop	{r4, pc}

000d5c1c <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   d5c1c:	b510      	push	{r4, lr}
   d5c1e:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d5c20:	4608      	mov	r0, r1
   d5c22:	f7ff ff2c 	bl	d5a7e <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d5c26:	60a0      	str	r0, [r4, #8]
}
   d5c28:	bd10      	pop	{r4, pc}

000d5c2a <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   d5c2a:	b510      	push	{r4, lr}
   d5c2c:	4604      	mov	r4, r0
   newDate = atol(term);
   d5c2e:	4608      	mov	r0, r1
   d5c30:	f004 fa74 	bl	da11c <atol>
   d5c34:	60a0      	str	r0, [r4, #8]
}
   d5c36:	bd10      	pop	{r4, pc}

000d5c38 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d5c38:	b510      	push	{r4, lr}
   val = newval;
   d5c3a:	68c3      	ldr	r3, [r0, #12]
   d5c3c:	6083      	str	r3, [r0, #8]
{
   d5c3e:	4604      	mov	r4, r0
   d5c40:	f000 f9e4 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5c44:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5c48:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d5c4a:	8023      	strh	r3, [r4, #0]
}
   d5c4c:	bd10      	pop	{r4, pc}

000d5c4e <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   d5c4e:	b510      	push	{r4, lr}
   d5c50:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d5c52:	4608      	mov	r0, r1
   d5c54:	f7ff ff13 	bl	d5a7e <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d5c58:	60e0      	str	r0, [r4, #12]
}
   d5c5a:	bd10      	pop	{r4, pc}

000d5c5c <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   d5c5c:	b510      	push	{r4, lr}
   val = newval;
   d5c5e:	68c3      	ldr	r3, [r0, #12]
   d5c60:	6083      	str	r3, [r0, #8]
{
   d5c62:	4604      	mov	r4, r0
   d5c64:	f000 f9d2 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5c68:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5c6c:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d5c6e:	8023      	strh	r3, [r4, #0]
}
   d5c70:	bd10      	pop	{r4, pc}

000d5c72 <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   d5c72:	b510      	push	{r4, lr}
   d5c74:	4604      	mov	r4, r0
   newval = atol(term);
   d5c76:	4608      	mov	r0, r1
   d5c78:	f004 fa50 	bl	da11c <atol>
   d5c7c:	60e0      	str	r0, [r4, #12]
}
   d5c7e:	bd10      	pop	{r4, pc}

000d5c80 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d5c80:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d5c82:	4601      	mov	r1, r0
{
   d5c84:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d5c86:	3010      	adds	r0, #16
   d5c88:	f004 faad 	bl	da1e6 <strcpy>
   d5c8c:	f000 f9be 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5c90:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5c94:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d5c96:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d5c98:	bd10      	pop	{r4, pc}

000d5c9a <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d5c9a:	2210      	movs	r2, #16
   d5c9c:	f004 bab3 	b.w	da206 <strncpy>

000d5ca0 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   d5ca0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   d5ca2:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
{
   d5ca6:	4604      	mov	r4, r0
  if (isChecksumTerm)
   d5ca8:	2d00      	cmp	r5, #0
   d5caa:	d064      	beq.n	d5d76 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d5cac:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d5cb0:	f7ff fed5 	bl	d5a5e <_ZN11TinyGPSPlus7fromHexEc>
   d5cb4:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d5cb8:	4602      	mov	r2, r0
   d5cba:	4620      	mov	r0, r4
   d5cbc:	f7ff fecf 	bl	d5a5e <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d5cc0:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d5cc4:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   d5cc8:	b2c0      	uxtb	r0, r0
   d5cca:	4283      	cmp	r3, r0
   d5ccc:	d14b      	bne.n	d5d66 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
      passedChecksumCount++;
   d5cce:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d5cd2:	3301      	adds	r3, #1
   d5cd4:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d5cd8:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d5cdc:	b123      	cbz	r3, d5ce8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d5cde:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d5ce2:	3301      	adds	r3, #1
   d5ce4:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
      switch(curSentenceType)
   d5ce8:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d5cec:	b333      	cbz	r3, d5d3c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x9c>
   d5cee:	2b01      	cmp	r3, #1
   d5cf0:	d115      	bne.n	d5d1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        date.commit();
   d5cf2:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5cf6:	f7ff ff7b 	bl	d5bf0 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d5cfa:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5cfe:	f7ff ff82 	bl	d5c06 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d5d02:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d5d06:	b153      	cbz	r3, d5d1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
           location.commit();
   d5d08:	4620      	mov	r0, r4
   d5d0a:	f7ff ff0d 	bl	d5b28 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d5d0e:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d5d12:	f7ff ff91 	bl	d5c38 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d5d16:	f104 0068 	add.w	r0, r4, #104	; 0x68
        hdop.commit();
   d5d1a:	f7ff ff8d 	bl	d5c38 <_ZN14TinyGPSDecimal6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d5d1e:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d5d22:	b336      	cbz	r6, d5d72 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d5d24:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d5d28:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d5d2a:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d5d2c:	f004 fa51 	bl	da1d2 <strcmp>
   d5d30:	b9f8      	cbnz	r0, d5d72 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
         p->commit();
   d5d32:	4630      	mov	r0, r6
   d5d34:	f7ff ffa4 	bl	d5c80 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d5d38:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d5d3a:	e7f2      	b.n	d5d22 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        time.commit();
   d5d3c:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5d40:	f7ff ff61 	bl	d5c06 <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d5d44:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d5d48:	b133      	cbz	r3, d5d58 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb8>
          location.commit();
   d5d4a:	4620      	mov	r0, r4
   d5d4c:	f7ff feec 	bl	d5b28 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d5d50:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d5d54:	f7ff ff70 	bl	d5c38 <_ZN14TinyGPSDecimal6commitEv>
        satellites.commit();
   d5d58:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d5d5c:	f7ff ff7e 	bl	d5c5c <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d5d60:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d5d64:	e7d9      	b.n	d5d1a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7a>
      ++failedChecksumCount;
   d5d66:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d5d6a:	3301      	adds	r3, #1
   d5d6c:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    return false;
   d5d70:	2500      	movs	r5, #0
}
   d5d72:	4628      	mov	r0, r5
   d5d74:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   d5d76:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d5d7a:	bb22      	cbnz	r2, d5dc6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x126>
    if (!strcmp(term, _GPRMCterm))
   d5d7c:	f100 07aa 	add.w	r7, r0, #170	; 0xaa
   d5d80:	4956      	ldr	r1, [pc, #344]	; (d5edc <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>)
   d5d82:	4638      	mov	r0, r7
   d5d84:	f004 fa25 	bl	da1d2 <strcmp>
   d5d88:	b918      	cbnz	r0, d5d92 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf2>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d5d8a:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   d5d8c:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
   d5d90:	e006      	b.n	d5da0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x100>
    else if (!strcmp(term, _GPGGAterm))
   d5d92:	4953      	ldr	r1, [pc, #332]	; (d5ee0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>)
   d5d94:	4638      	mov	r0, r7
   d5d96:	f004 fa1c 	bl	da1d2 <strcmp>
   d5d9a:	b990      	cbnz	r0, d5dc2 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x122>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d5d9c:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d5da0:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d5da4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d5da8:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d5dac:	2e00      	cmp	r6, #0
   d5dae:	d0e0      	beq.n	d5d72 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d5db0:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d5db2:	4639      	mov	r1, r7
   d5db4:	f004 fa0d 	bl	da1d2 <strcmp>
   d5db8:	2800      	cmp	r0, #0
   d5dba:	f280 8088 	bge.w	d5ece <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22e>
   d5dbe:	6b33      	ldr	r3, [r6, #48]	; 0x30
   d5dc0:	e7f0      	b.n	d5da4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      curSentenceType = GPS_SENTENCE_OTHER;
   d5dc2:	2302      	movs	r3, #2
   d5dc4:	e7e2      	b.n	d5d8c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xec>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d5dc6:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d5dca:	2902      	cmp	r1, #2
   d5dcc:	d023      	beq.n	d5e16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
   d5dce:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d5dd2:	b303      	cbz	r3, d5e16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
    switch(COMBINE(curSentenceType, curTermNumber))
   d5dd4:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d5dd8:	3a01      	subs	r2, #1
   d5dda:	2a28      	cmp	r2, #40	; 0x28
   d5ddc:	d81b      	bhi.n	d5e16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
   d5dde:	e8df f002 	tbb	[pc, r2]
   d5de2:	3b15      	.short	0x3b15
   d5de4:	634c4942 	.word	0x634c4942
   d5de8:	1a726e68 	.word	0x1a726e68
   d5dec:	1a1a1a1a 	.word	0x1a1a1a1a
   d5df0:	1a1a1a1a 	.word	0x1a1a1a1a
   d5df4:	1a1a1a1a 	.word	0x1a1a1a1a
   d5df8:	1a1a1a1a 	.word	0x1a1a1a1a
   d5dfc:	1a1a1a1a 	.word	0x1a1a1a1a
   d5e00:	34151a1a 	.word	0x34151a1a
   d5e04:	4c49423b 	.word	0x4c49423b
   d5e08:	5953      	.short	0x5953
   d5e0a:	5d          	.byte	0x5d
   d5e0b:	00          	.byte	0x00
      time.setTime(term);
   d5e0c:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5e10:	3048      	adds	r0, #72	; 0x48
   d5e12:	f7ff ff03 	bl	d5c1c <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d5e16:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
         p->set(term);
   d5e1a:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d5e1e:	2e00      	cmp	r6, #0
   d5e20:	d0a7      	beq.n	d5d72 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d5e22:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d5e26:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d5e28:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d5e2a:	f004 f9d2 	bl	da1d2 <strcmp>
   d5e2e:	2800      	cmp	r0, #0
   d5e30:	d19f      	bne.n	d5d72 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d5e32:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d5e34:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d5e38:	429a      	cmp	r2, r3
   d5e3a:	dc9a      	bgt.n	d5d72 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
    if (p->termNumber == curTermNumber)
   d5e3c:	d103      	bne.n	d5e46 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a6>
         p->set(term);
   d5e3e:	4639      	mov	r1, r7
   d5e40:	4630      	mov	r0, r6
   d5e42:	f7ff ff2a 	bl	d5c9a <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d5e46:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d5e48:	e7e9      	b.n	d5e1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x17e>
      sentenceHasFix = term[0] == 'A';
   d5e4a:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d5e4e:	4243      	negs	r3, r0
   d5e50:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   d5e52:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d5e56:	e7de      	b.n	d5e16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d5e58:	f100 011c 	add.w	r1, r0, #28
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d5e5c:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d5e60:	f7ff fe32 	bl	d5ac8 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   d5e64:	e7d7      	b.n	d5e16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      location.rawNewLatData.negative = term[0] == 'S';
   d5e66:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d5e6a:	424b      	negs	r3, r1
   d5e6c:	414b      	adcs	r3, r1
   d5e6e:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d5e72:	e7d0      	b.n	d5e16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d5e74:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d5e78:	e7f0      	b.n	d5e5c <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1bc>
      location.rawNewLngData.negative = term[0] == 'W';
   d5e7a:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d5e7e:	4253      	negs	r3, r2
   d5e80:	4153      	adcs	r3, r2
   d5e82:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d5e86:	e7c6      	b.n	d5e16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      speed.set(term);
   d5e88:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5e8c:	3058      	adds	r0, #88	; 0x58
      altitude.set(term);
   d5e8e:	f7ff fede 	bl	d5c4e <_ZN14TinyGPSDecimal3setEPKc>
      break;
   d5e92:	e7c0      	b.n	d5e16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      course.set(term);
   d5e94:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5e98:	3068      	adds	r0, #104	; 0x68
   d5e9a:	e7f8      	b.n	d5e8e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ee>
      date.setDate(term);
   d5e9c:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5ea0:	3038      	adds	r0, #56	; 0x38
   d5ea2:	f7ff fec2 	bl	d5c2a <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d5ea6:	e7b6      	b.n	d5e16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      sentenceHasFix = term[0] > '0';
   d5ea8:	2b30      	cmp	r3, #48	; 0x30
   d5eaa:	bf94      	ite	ls
   d5eac:	2300      	movls	r3, #0
   d5eae:	2301      	movhi	r3, #1
   d5eb0:	e7cf      	b.n	d5e52 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b2>
      satellites.set(term);
   d5eb2:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5eb6:	3088      	adds	r0, #136	; 0x88
   d5eb8:	f7ff fedb 	bl	d5c72 <_ZN14TinyGPSInteger3setEPKc>
      break;
   d5ebc:	e7ab      	b.n	d5e16 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      hdop.set(term);
   d5ebe:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5ec2:	3098      	adds	r0, #152	; 0x98
   d5ec4:	e7e3      	b.n	d5e8e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ee>
      altitude.set(term);
   d5ec6:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5eca:	3078      	adds	r0, #120	; 0x78
   d5ecc:	e7df      	b.n	d5e8e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ee>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d5ece:	f43f af50 	beq.w	d5d72 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
       customCandidates = NULL;
   d5ed2:	2300      	movs	r3, #0
   d5ed4:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d5ed8:	e74b      	b.n	d5d72 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d5eda:	bf00      	nop
   d5edc:	000da500 	.word	0x000da500
   d5ee0:	000da506 	.word	0x000da506

000d5ee4 <_ZN11TinyGPSPlus6encodeEc>:
{
   d5ee4:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d5ee6:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d5eea:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   d5eec:	f103 0301 	add.w	r3, r3, #1
{
   d5ef0:	4604      	mov	r4, r0
   d5ef2:	460d      	mov	r5, r1
  ++encodedCharCount;
   d5ef4:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d5ef8:	d03a      	beq.n	d5f70 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   d5efa:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d5efe:	d814      	bhi.n	d5f2a <_ZN11TinyGPSPlus6encodeEc+0x46>
   d5f00:	290a      	cmp	r1, #10
   d5f02:	d01c      	beq.n	d5f3e <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d5f04:	290d      	cmp	r1, #13
   d5f06:	d01a      	beq.n	d5f3e <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   d5f08:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d5f0a:	bf9f      	itttt	ls
   d5f0c:	1c5a      	addls	r2, r3, #1
   d5f0e:	191b      	addls	r3, r3, r4
   d5f10:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d5f14:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d5f18:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d5f1c:	bb98      	cbnz	r0, d5f86 <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   d5f1e:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d5f22:	404d      	eors	r5, r1
   d5f24:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d5f28:	e021      	b.n	d5f6e <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   d5f2a:	292a      	cmp	r1, #42	; 0x2a
   d5f2c:	d007      	beq.n	d5f3e <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d5f2e:	292c      	cmp	r1, #44	; 0x2c
   d5f30:	d1ea      	bne.n	d5f08 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   d5f32:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d5f36:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d5f3a:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
      if (curTermOffset < sizeof(term))
   d5f3e:	2b0e      	cmp	r3, #14
   d5f40:	f04f 0000 	mov.w	r0, #0
   d5f44:	d805      	bhi.n	d5f52 <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   d5f46:	4423      	add	r3, r4
   d5f48:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d5f4c:	4620      	mov	r0, r4
   d5f4e:	f7ff fea7 	bl	d5ca0 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   d5f52:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d5f56:	3301      	adds	r3, #1
   d5f58:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d5f5c:	2300      	movs	r3, #0
   d5f5e:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d5f62:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d5f66:	425d      	negs	r5, r3
   d5f68:	415d      	adcs	r5, r3
   d5f6a:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
}
   d5f6e:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   d5f70:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   d5f72:	2302      	movs	r3, #2
    parity = 0;
   d5f74:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d5f78:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    curTermNumber = curTermOffset = 0;
   d5f7c:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    sentenceHasFix = false;
   d5f80:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d5f84:	e7f3      	b.n	d5f6e <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   d5f86:	2000      	movs	r0, #0
   d5f88:	e7f1      	b.n	d5f6e <_ZN11TinyGPSPlus6encodeEc+0x8a>
	...

000d5f8c <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5f8c:	b508      	push	{r3, lr}
   d5f8e:	4b02      	ldr	r3, [pc, #8]	; (d5f98 <netdb_freeaddrinfo+0xc>)
   d5f90:	681b      	ldr	r3, [r3, #0]
   d5f92:	689b      	ldr	r3, [r3, #8]
   d5f94:	9301      	str	r3, [sp, #4]
   d5f96:	bd08      	pop	{r3, pc}
   d5f98:	00030268 	.word	0x00030268

000d5f9c <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5f9c:	b508      	push	{r3, lr}
   d5f9e:	4b02      	ldr	r3, [pc, #8]	; (d5fa8 <netdb_getaddrinfo+0xc>)
   d5fa0:	681b      	ldr	r3, [r3, #0]
   d5fa2:	68db      	ldr	r3, [r3, #12]
   d5fa4:	9301      	str	r3, [sp, #4]
   d5fa6:	bd08      	pop	{r3, pc}
   d5fa8:	00030268 	.word	0x00030268

000d5fac <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5fac:	b508      	push	{r3, lr}
   d5fae:	4b02      	ldr	r3, [pc, #8]	; (d5fb8 <HAL_Pin_Mode+0xc>)
   d5fb0:	681b      	ldr	r3, [r3, #0]
   d5fb2:	689b      	ldr	r3, [r3, #8]
   d5fb4:	9301      	str	r3, [sp, #4]
   d5fb6:	bd08      	pop	{r3, pc}
   d5fb8:	0003022c 	.word	0x0003022c

000d5fbc <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5fbc:	b508      	push	{r3, lr}
   d5fbe:	4b02      	ldr	r3, [pc, #8]	; (d5fc8 <HAL_Get_Pin_Mode+0xc>)
   d5fc0:	681b      	ldr	r3, [r3, #0]
   d5fc2:	68db      	ldr	r3, [r3, #12]
   d5fc4:	9301      	str	r3, [sp, #4]
   d5fc6:	bd08      	pop	{r3, pc}
   d5fc8:	0003022c 	.word	0x0003022c

000d5fcc <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5fcc:	b508      	push	{r3, lr}
   d5fce:	4b02      	ldr	r3, [pc, #8]	; (d5fd8 <HAL_GPIO_Write+0xc>)
   d5fd0:	681b      	ldr	r3, [r3, #0]
   d5fd2:	691b      	ldr	r3, [r3, #16]
   d5fd4:	9301      	str	r3, [sp, #4]
   d5fd6:	bd08      	pop	{r3, pc}
   d5fd8:	0003022c 	.word	0x0003022c

000d5fdc <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5fdc:	b508      	push	{r3, lr}
   d5fde:	4b02      	ldr	r3, [pc, #8]	; (d5fe8 <HAL_GPIO_Read+0xc>)
   d5fe0:	681b      	ldr	r3, [r3, #0]
   d5fe2:	695b      	ldr	r3, [r3, #20]
   d5fe4:	9301      	str	r3, [sp, #4]
   d5fe6:	bd08      	pop	{r3, pc}
   d5fe8:	0003022c 	.word	0x0003022c

000d5fec <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5fec:	b508      	push	{r3, lr}
   d5fee:	4b02      	ldr	r3, [pc, #8]	; (d5ff8 <if_index_to_name+0xc>)
   d5ff0:	681b      	ldr	r3, [r3, #0]
   d5ff2:	695b      	ldr	r3, [r3, #20]
   d5ff4:	9301      	str	r3, [sp, #4]
   d5ff6:	bd08      	pop	{r3, pc}
   d5ff8:	0003026c 	.word	0x0003026c

000d5ffc <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d5ffc:	b508      	push	{r3, lr}
   d5ffe:	4b02      	ldr	r3, [pc, #8]	; (d6008 <HAL_RNG_GetRandomNumber+0xc>)
   d6000:	681b      	ldr	r3, [r3, #0]
   d6002:	685b      	ldr	r3, [r3, #4]
   d6004:	9301      	str	r3, [sp, #4]
   d6006:	bd08      	pop	{r3, pc}
   d6008:	00030218 	.word	0x00030218

000d600c <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d600c:	b508      	push	{r3, lr}
   d600e:	4b02      	ldr	r3, [pc, #8]	; (d6018 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6010:	681b      	ldr	r3, [r3, #0]
   d6012:	695b      	ldr	r3, [r3, #20]
   d6014:	9301      	str	r3, [sp, #4]
   d6016:	bd08      	pop	{r3, pc}
   d6018:	00030218 	.word	0x00030218

000d601c <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d601c:	b508      	push	{r3, lr}
   d601e:	4b02      	ldr	r3, [pc, #8]	; (d6028 <os_mutex_recursive_create+0xc>)
   d6020:	681b      	ldr	r3, [r3, #0]
   d6022:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6024:	9301      	str	r3, [sp, #4]
   d6026:	bd08      	pop	{r3, pc}
   d6028:	00030248 	.word	0x00030248

000d602c <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d602c:	b508      	push	{r3, lr}
   d602e:	4b02      	ldr	r3, [pc, #8]	; (d6038 <os_mutex_recursive_destroy+0xc>)
   d6030:	681b      	ldr	r3, [r3, #0]
   d6032:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d6034:	9301      	str	r3, [sp, #4]
   d6036:	bd08      	pop	{r3, pc}
   d6038:	00030248 	.word	0x00030248

000d603c <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d603c:	b508      	push	{r3, lr}
   d603e:	4b02      	ldr	r3, [pc, #8]	; (d6048 <inet_inet_ntop+0xc>)
   d6040:	681b      	ldr	r3, [r3, #0]
   d6042:	695b      	ldr	r3, [r3, #20]
   d6044:	9301      	str	r3, [sp, #4]
   d6046:	bd08      	pop	{r3, pc}
   d6048:	00030264 	.word	0x00030264

000d604c <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d604c:	b508      	push	{r3, lr}
   d604e:	4b02      	ldr	r3, [pc, #8]	; (d6058 <inet_htonl+0xc>)
   d6050:	681b      	ldr	r3, [r3, #0]
   d6052:	6a1b      	ldr	r3, [r3, #32]
   d6054:	9301      	str	r3, [sp, #4]
   d6056:	bd08      	pop	{r3, pc}
   d6058:	00030264 	.word	0x00030264

000d605c <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d605c:	b508      	push	{r3, lr}
   d605e:	4b02      	ldr	r3, [pc, #8]	; (d6068 <inet_htons+0xc>)
   d6060:	681b      	ldr	r3, [r3, #0]
   d6062:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6064:	9301      	str	r3, [sp, #4]
   d6066:	bd08      	pop	{r3, pc}
   d6068:	00030264 	.word	0x00030264

000d606c <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d606c:	b508      	push	{r3, lr}
   d606e:	4b02      	ldr	r3, [pc, #8]	; (d6078 <hal_usart_init+0xc>)
   d6070:	681b      	ldr	r3, [r3, #0]
   d6072:	681b      	ldr	r3, [r3, #0]
   d6074:	9301      	str	r3, [sp, #4]
   d6076:	bd08      	pop	{r3, pc}
   d6078:	0003023c 	.word	0x0003023c

000d607c <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d607c:	b508      	push	{r3, lr}
   d607e:	4b02      	ldr	r3, [pc, #8]	; (d6088 <hal_usart_write+0xc>)
   d6080:	681b      	ldr	r3, [r3, #0]
   d6082:	68db      	ldr	r3, [r3, #12]
   d6084:	9301      	str	r3, [sp, #4]
   d6086:	bd08      	pop	{r3, pc}
   d6088:	0003023c 	.word	0x0003023c

000d608c <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d608c:	b508      	push	{r3, lr}
   d608e:	4b02      	ldr	r3, [pc, #8]	; (d6098 <hal_usart_available+0xc>)
   d6090:	681b      	ldr	r3, [r3, #0]
   d6092:	691b      	ldr	r3, [r3, #16]
   d6094:	9301      	str	r3, [sp, #4]
   d6096:	bd08      	pop	{r3, pc}
   d6098:	0003023c 	.word	0x0003023c

000d609c <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d609c:	b508      	push	{r3, lr}
   d609e:	4b02      	ldr	r3, [pc, #8]	; (d60a8 <hal_usart_read+0xc>)
   d60a0:	681b      	ldr	r3, [r3, #0]
   d60a2:	695b      	ldr	r3, [r3, #20]
   d60a4:	9301      	str	r3, [sp, #4]
   d60a6:	bd08      	pop	{r3, pc}
   d60a8:	0003023c 	.word	0x0003023c

000d60ac <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d60ac:	b508      	push	{r3, lr}
   d60ae:	4b02      	ldr	r3, [pc, #8]	; (d60b8 <hal_usart_peek+0xc>)
   d60b0:	681b      	ldr	r3, [r3, #0]
   d60b2:	699b      	ldr	r3, [r3, #24]
   d60b4:	9301      	str	r3, [sp, #4]
   d60b6:	bd08      	pop	{r3, pc}
   d60b8:	0003023c 	.word	0x0003023c

000d60bc <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d60bc:	b508      	push	{r3, lr}
   d60be:	4b02      	ldr	r3, [pc, #8]	; (d60c8 <hal_usart_flush+0xc>)
   d60c0:	681b      	ldr	r3, [r3, #0]
   d60c2:	69db      	ldr	r3, [r3, #28]
   d60c4:	9301      	str	r3, [sp, #4]
   d60c6:	bd08      	pop	{r3, pc}
   d60c8:	0003023c 	.word	0x0003023c

000d60cc <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d60cc:	b508      	push	{r3, lr}
   d60ce:	4b02      	ldr	r3, [pc, #8]	; (d60d8 <hal_usart_is_enabled+0xc>)
   d60d0:	681b      	ldr	r3, [r3, #0]
   d60d2:	6a1b      	ldr	r3, [r3, #32]
   d60d4:	9301      	str	r3, [sp, #4]
   d60d6:	bd08      	pop	{r3, pc}
   d60d8:	0003023c 	.word	0x0003023c

000d60dc <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d60dc:	b508      	push	{r3, lr}
   d60de:	4b02      	ldr	r3, [pc, #8]	; (d60e8 <hal_usart_available_data_for_write+0xc>)
   d60e0:	681b      	ldr	r3, [r3, #0]
   d60e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d60e4:	9301      	str	r3, [sp, #4]
   d60e6:	bd08      	pop	{r3, pc}
   d60e8:	0003023c 	.word	0x0003023c

000d60ec <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d60ec:	b508      	push	{r3, lr}
   d60ee:	4b02      	ldr	r3, [pc, #8]	; (d60f8 <hal_i2c_begin+0xc>)
   d60f0:	681b      	ldr	r3, [r3, #0]
   d60f2:	68db      	ldr	r3, [r3, #12]
   d60f4:	9301      	str	r3, [sp, #4]
   d60f6:	bd08      	pop	{r3, pc}
   d60f8:	00030228 	.word	0x00030228

000d60fc <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d60fc:	b508      	push	{r3, lr}
   d60fe:	4b02      	ldr	r3, [pc, #8]	; (d6108 <hal_i2c_begin_transmission+0xc>)
   d6100:	681b      	ldr	r3, [r3, #0]
   d6102:	699b      	ldr	r3, [r3, #24]
   d6104:	9301      	str	r3, [sp, #4]
   d6106:	bd08      	pop	{r3, pc}
   d6108:	00030228 	.word	0x00030228

000d610c <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d610c:	b508      	push	{r3, lr}
   d610e:	4b02      	ldr	r3, [pc, #8]	; (d6118 <hal_i2c_end_transmission+0xc>)
   d6110:	681b      	ldr	r3, [r3, #0]
   d6112:	69db      	ldr	r3, [r3, #28]
   d6114:	9301      	str	r3, [sp, #4]
   d6116:	bd08      	pop	{r3, pc}
   d6118:	00030228 	.word	0x00030228

000d611c <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d611c:	b508      	push	{r3, lr}
   d611e:	4b02      	ldr	r3, [pc, #8]	; (d6128 <hal_i2c_write+0xc>)
   d6120:	681b      	ldr	r3, [r3, #0]
   d6122:	6a1b      	ldr	r3, [r3, #32]
   d6124:	9301      	str	r3, [sp, #4]
   d6126:	bd08      	pop	{r3, pc}
   d6128:	00030228 	.word	0x00030228

000d612c <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d612c:	b508      	push	{r3, lr}
   d612e:	4b02      	ldr	r3, [pc, #8]	; (d6138 <hal_i2c_available+0xc>)
   d6130:	681b      	ldr	r3, [r3, #0]
   d6132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6134:	9301      	str	r3, [sp, #4]
   d6136:	bd08      	pop	{r3, pc}
   d6138:	00030228 	.word	0x00030228

000d613c <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d613c:	b508      	push	{r3, lr}
   d613e:	4b02      	ldr	r3, [pc, #8]	; (d6148 <hal_i2c_read+0xc>)
   d6140:	681b      	ldr	r3, [r3, #0]
   d6142:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d6144:	9301      	str	r3, [sp, #4]
   d6146:	bd08      	pop	{r3, pc}
   d6148:	00030228 	.word	0x00030228

000d614c <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d614c:	b508      	push	{r3, lr}
   d614e:	4b02      	ldr	r3, [pc, #8]	; (d6158 <hal_i2c_peek+0xc>)
   d6150:	681b      	ldr	r3, [r3, #0]
   d6152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d6154:	9301      	str	r3, [sp, #4]
   d6156:	bd08      	pop	{r3, pc}
   d6158:	00030228 	.word	0x00030228

000d615c <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d615c:	b508      	push	{r3, lr}
   d615e:	4b02      	ldr	r3, [pc, #8]	; (d6168 <hal_i2c_flush+0xc>)
   d6160:	681b      	ldr	r3, [r3, #0]
   d6162:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d6164:	9301      	str	r3, [sp, #4]
   d6166:	bd08      	pop	{r3, pc}
   d6168:	00030228 	.word	0x00030228

000d616c <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d616c:	b508      	push	{r3, lr}
   d616e:	4b02      	ldr	r3, [pc, #8]	; (d6178 <hal_i2c_is_enabled+0xc>)
   d6170:	681b      	ldr	r3, [r3, #0]
   d6172:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d6174:	9301      	str	r3, [sp, #4]
   d6176:	bd08      	pop	{r3, pc}
   d6178:	00030228 	.word	0x00030228

000d617c <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d617c:	b508      	push	{r3, lr}
   d617e:	4b02      	ldr	r3, [pc, #8]	; (d6188 <hal_i2c_init+0xc>)
   d6180:	681b      	ldr	r3, [r3, #0]
   d6182:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6184:	9301      	str	r3, [sp, #4]
   d6186:	bd08      	pop	{r3, pc}
   d6188:	00030228 	.word	0x00030228

000d618c <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d618c:	b508      	push	{r3, lr}
   d618e:	4b02      	ldr	r3, [pc, #8]	; (d6198 <hal_i2c_request_ex+0xc>)
   d6190:	681b      	ldr	r3, [r3, #0]
   d6192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d6194:	9301      	str	r3, [sp, #4]
   d6196:	bd08      	pop	{r3, pc}
   d6198:	00030228 	.word	0x00030228

000d619c <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d619c:	b508      	push	{r3, lr}
   d619e:	4b02      	ldr	r3, [pc, #8]	; (d61a8 <sock_setsockopt+0xc>)
   d61a0:	681b      	ldr	r3, [r3, #0]
   d61a2:	699b      	ldr	r3, [r3, #24]
   d61a4:	9301      	str	r3, [sp, #4]
   d61a6:	bd08      	pop	{r3, pc}
   d61a8:	00030238 	.word	0x00030238

000d61ac <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d61ac:	b508      	push	{r3, lr}
   d61ae:	4b02      	ldr	r3, [pc, #8]	; (d61b8 <sock_close+0xc>)
   d61b0:	681b      	ldr	r3, [r3, #0]
   d61b2:	69db      	ldr	r3, [r3, #28]
   d61b4:	9301      	str	r3, [sp, #4]
   d61b6:	bd08      	pop	{r3, pc}
   d61b8:	00030238 	.word	0x00030238

000d61bc <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d61bc:	b508      	push	{r3, lr}
   d61be:	4b02      	ldr	r3, [pc, #8]	; (d61c8 <sock_connect+0xc>)
   d61c0:	681b      	ldr	r3, [r3, #0]
   d61c2:	6a1b      	ldr	r3, [r3, #32]
   d61c4:	9301      	str	r3, [sp, #4]
   d61c6:	bd08      	pop	{r3, pc}
   d61c8:	00030238 	.word	0x00030238

000d61cc <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d61cc:	b508      	push	{r3, lr}
   d61ce:	4b02      	ldr	r3, [pc, #8]	; (d61d8 <sock_recv+0xc>)
   d61d0:	681b      	ldr	r3, [r3, #0]
   d61d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d61d4:	9301      	str	r3, [sp, #4]
   d61d6:	bd08      	pop	{r3, pc}
   d61d8:	00030238 	.word	0x00030238

000d61dc <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d61dc:	b508      	push	{r3, lr}
   d61de:	4b02      	ldr	r3, [pc, #8]	; (d61e8 <sock_send+0xc>)
   d61e0:	681b      	ldr	r3, [r3, #0]
   d61e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61e4:	9301      	str	r3, [sp, #4]
   d61e6:	bd08      	pop	{r3, pc}
   d61e8:	00030238 	.word	0x00030238

000d61ec <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d61ec:	b508      	push	{r3, lr}
   d61ee:	4b02      	ldr	r3, [pc, #8]	; (d61f8 <sock_socket+0xc>)
   d61f0:	681b      	ldr	r3, [r3, #0]
   d61f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d61f4:	9301      	str	r3, [sp, #4]
   d61f6:	bd08      	pop	{r3, pc}
   d61f8:	00030238 	.word	0x00030238

000d61fc <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d61fc:	b508      	push	{r3, lr}
   d61fe:	4b02      	ldr	r3, [pc, #8]	; (d6208 <hal_spi_begin+0xc>)
   d6200:	681b      	ldr	r3, [r3, #0]
   d6202:	681b      	ldr	r3, [r3, #0]
   d6204:	9301      	str	r3, [sp, #4]
   d6206:	bd08      	pop	{r3, pc}
   d6208:	00030230 	.word	0x00030230

000d620c <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d620c:	b508      	push	{r3, lr}
   d620e:	4b02      	ldr	r3, [pc, #8]	; (d6218 <hal_spi_transfer+0xc>)
   d6210:	681b      	ldr	r3, [r3, #0]
   d6212:	695b      	ldr	r3, [r3, #20]
   d6214:	9301      	str	r3, [sp, #4]
   d6216:	bd08      	pop	{r3, pc}
   d6218:	00030230 	.word	0x00030230

000d621c <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d621c:	b508      	push	{r3, lr}
   d621e:	4b02      	ldr	r3, [pc, #8]	; (d6228 <hal_spi_init+0xc>)
   d6220:	681b      	ldr	r3, [r3, #0]
   d6222:	69db      	ldr	r3, [r3, #28]
   d6224:	9301      	str	r3, [sp, #4]
   d6226:	bd08      	pop	{r3, pc}
   d6228:	00030230 	.word	0x00030230

000d622c <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d622c:	b508      	push	{r3, lr}
   d622e:	4b02      	ldr	r3, [pc, #8]	; (d6238 <hal_spi_is_enabled+0xc>)
   d6230:	681b      	ldr	r3, [r3, #0]
   d6232:	6a1b      	ldr	r3, [r3, #32]
   d6234:	9301      	str	r3, [sp, #4]
   d6236:	bd08      	pop	{r3, pc}
   d6238:	00030230 	.word	0x00030230

000d623c <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d623c:	b508      	push	{r3, lr}
   d623e:	4b02      	ldr	r3, [pc, #8]	; (d6248 <hal_spi_info+0xc>)
   d6240:	681b      	ldr	r3, [r3, #0]
   d6242:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6244:	9301      	str	r3, [sp, #4]
   d6246:	bd08      	pop	{r3, pc}
   d6248:	00030230 	.word	0x00030230

000d624c <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d624c:	b508      	push	{r3, lr}
   d624e:	4b02      	ldr	r3, [pc, #8]	; (d6258 <hal_spi_set_settings+0xc>)
   d6250:	681b      	ldr	r3, [r3, #0]
   d6252:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6254:	9301      	str	r3, [sp, #4]
   d6256:	bd08      	pop	{r3, pc}
   d6258:	00030230 	.word	0x00030230

000d625c <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d625c:	b508      	push	{r3, lr}
   d625e:	4b02      	ldr	r3, [pc, #8]	; (d6268 <hal_spi_acquire+0xc>)
   d6260:	681b      	ldr	r3, [r3, #0]
   d6262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d6264:	9301      	str	r3, [sp, #4]
   d6266:	bd08      	pop	{r3, pc}
   d6268:	00030230 	.word	0x00030230

000d626c <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d626c:	b508      	push	{r3, lr}
   d626e:	4b02      	ldr	r3, [pc, #8]	; (d6278 <hal_spi_release+0xc>)
   d6270:	681b      	ldr	r3, [r3, #0]
   d6272:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6274:	9301      	str	r3, [sp, #4]
   d6276:	bd08      	pop	{r3, pc}
   d6278:	00030230 	.word	0x00030230

000d627c <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d627c:	b508      	push	{r3, lr}
   d627e:	4b02      	ldr	r3, [pc, #8]	; (d6288 <HAL_USB_USART_Init+0xc>)
   d6280:	681b      	ldr	r3, [r3, #0]
   d6282:	681b      	ldr	r3, [r3, #0]
   d6284:	9301      	str	r3, [sp, #4]
   d6286:	bd08      	pop	{r3, pc}
   d6288:	0003024c 	.word	0x0003024c

000d628c <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d628c:	b508      	push	{r3, lr}
   d628e:	4b02      	ldr	r3, [pc, #8]	; (d6298 <HAL_USB_USART_Begin+0xc>)
   d6290:	681b      	ldr	r3, [r3, #0]
   d6292:	685b      	ldr	r3, [r3, #4]
   d6294:	9301      	str	r3, [sp, #4]
   d6296:	bd08      	pop	{r3, pc}
   d6298:	0003024c 	.word	0x0003024c

000d629c <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d629c:	b508      	push	{r3, lr}
   d629e:	4b02      	ldr	r3, [pc, #8]	; (d62a8 <HAL_USB_USART_Available_Data+0xc>)
   d62a0:	681b      	ldr	r3, [r3, #0]
   d62a2:	691b      	ldr	r3, [r3, #16]
   d62a4:	9301      	str	r3, [sp, #4]
   d62a6:	bd08      	pop	{r3, pc}
   d62a8:	0003024c 	.word	0x0003024c

000d62ac <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d62ac:	b508      	push	{r3, lr}
   d62ae:	4b02      	ldr	r3, [pc, #8]	; (d62b8 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d62b0:	681b      	ldr	r3, [r3, #0]
   d62b2:	695b      	ldr	r3, [r3, #20]
   d62b4:	9301      	str	r3, [sp, #4]
   d62b6:	bd08      	pop	{r3, pc}
   d62b8:	0003024c 	.word	0x0003024c

000d62bc <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d62bc:	b508      	push	{r3, lr}
   d62be:	4b02      	ldr	r3, [pc, #8]	; (d62c8 <HAL_USB_USART_Receive_Data+0xc>)
   d62c0:	681b      	ldr	r3, [r3, #0]
   d62c2:	699b      	ldr	r3, [r3, #24]
   d62c4:	9301      	str	r3, [sp, #4]
   d62c6:	bd08      	pop	{r3, pc}
   d62c8:	0003024c 	.word	0x0003024c

000d62cc <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d62cc:	b508      	push	{r3, lr}
   d62ce:	4b02      	ldr	r3, [pc, #8]	; (d62d8 <HAL_USB_USART_Send_Data+0xc>)
   d62d0:	681b      	ldr	r3, [r3, #0]
   d62d2:	69db      	ldr	r3, [r3, #28]
   d62d4:	9301      	str	r3, [sp, #4]
   d62d6:	bd08      	pop	{r3, pc}
   d62d8:	0003024c 	.word	0x0003024c

000d62dc <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d62dc:	b508      	push	{r3, lr}
   d62de:	4b02      	ldr	r3, [pc, #8]	; (d62e8 <HAL_USB_USART_Flush_Data+0xc>)
   d62e0:	681b      	ldr	r3, [r3, #0]
   d62e2:	6a1b      	ldr	r3, [r3, #32]
   d62e4:	9301      	str	r3, [sp, #4]
   d62e6:	bd08      	pop	{r3, pc}
   d62e8:	0003024c 	.word	0x0003024c

000d62ec <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d62ec:	b508      	push	{r3, lr}
   d62ee:	4b02      	ldr	r3, [pc, #8]	; (d62f8 <log_message+0xc>)
   d62f0:	681b      	ldr	r3, [r3, #0]
   d62f2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d62f4:	9301      	str	r3, [sp, #4]
   d62f6:	bd08      	pop	{r3, pc}
   d62f8:	00030260 	.word	0x00030260

000d62fc <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d62fc:	b508      	push	{r3, lr}
   d62fe:	4b02      	ldr	r3, [pc, #8]	; (d6308 <set_system_mode+0xc>)
   d6300:	681b      	ldr	r3, [r3, #0]
   d6302:	685b      	ldr	r3, [r3, #4]
   d6304:	9301      	str	r3, [sp, #4]
   d6306:	bd08      	pop	{r3, pc}
   d6308:	00030220 	.word	0x00030220

000d630c <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d630c:	b508      	push	{r3, lr}
   d630e:	4b02      	ldr	r3, [pc, #8]	; (d6318 <system_delay_ms+0xc>)
   d6310:	681b      	ldr	r3, [r3, #0]
   d6312:	695b      	ldr	r3, [r3, #20]
   d6314:	9301      	str	r3, [sp, #4]
   d6316:	bd08      	pop	{r3, pc}
   d6318:	00030220 	.word	0x00030220

000d631c <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d631c:	b508      	push	{r3, lr}
   d631e:	4b03      	ldr	r3, [pc, #12]	; (d632c <system_ctrl_set_app_request_handler+0x10>)
   d6320:	681b      	ldr	r3, [r3, #0]
   d6322:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d6326:	9301      	str	r3, [sp, #4]
   d6328:	bd08      	pop	{r3, pc}
   d632a:	0000      	.short	0x0000
   d632c:	00030220 	.word	0x00030220

000d6330 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6330:	b508      	push	{r3, lr}
   d6332:	4b03      	ldr	r3, [pc, #12]	; (d6340 <system_ctrl_set_result+0x10>)
   d6334:	681b      	ldr	r3, [r3, #0]
   d6336:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d633a:	9301      	str	r3, [sp, #4]
   d633c:	bd08      	pop	{r3, pc}
   d633e:	0000      	.short	0x0000
   d6340:	00030220 	.word	0x00030220

000d6344 <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d6344:	b508      	push	{r3, lr}
   d6346:	4b02      	ldr	r3, [pc, #8]	; (d6350 <network_connect+0xc>)
   d6348:	681b      	ldr	r3, [r3, #0]
   d634a:	685b      	ldr	r3, [r3, #4]
   d634c:	9301      	str	r3, [sp, #4]
   d634e:	bd08      	pop	{r3, pc}
   d6350:	00030240 	.word	0x00030240

000d6354 <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d6354:	b508      	push	{r3, lr}
   d6356:	4b02      	ldr	r3, [pc, #8]	; (d6360 <network_connecting+0xc>)
   d6358:	681b      	ldr	r3, [r3, #0]
   d635a:	689b      	ldr	r3, [r3, #8]
   d635c:	9301      	str	r3, [sp, #4]
   d635e:	bd08      	pop	{r3, pc}
   d6360:	00030240 	.word	0x00030240

000d6364 <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d6364:	b508      	push	{r3, lr}
   d6366:	4b02      	ldr	r3, [pc, #8]	; (d6370 <network_disconnect+0xc>)
   d6368:	681b      	ldr	r3, [r3, #0]
   d636a:	68db      	ldr	r3, [r3, #12]
   d636c:	9301      	str	r3, [sp, #4]
   d636e:	bd08      	pop	{r3, pc}
   d6370:	00030240 	.word	0x00030240

000d6374 <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d6374:	b508      	push	{r3, lr}
   d6376:	4b02      	ldr	r3, [pc, #8]	; (d6380 <network_ready+0xc>)
   d6378:	681b      	ldr	r3, [r3, #0]
   d637a:	691b      	ldr	r3, [r3, #16]
   d637c:	9301      	str	r3, [sp, #4]
   d637e:	bd08      	pop	{r3, pc}
   d6380:	00030240 	.word	0x00030240

000d6384 <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d6384:	b508      	push	{r3, lr}
   d6386:	4b02      	ldr	r3, [pc, #8]	; (d6390 <network_on+0xc>)
   d6388:	681b      	ldr	r3, [r3, #0]
   d638a:	695b      	ldr	r3, [r3, #20]
   d638c:	9301      	str	r3, [sp, #4]
   d638e:	bd08      	pop	{r3, pc}
   d6390:	00030240 	.word	0x00030240

000d6394 <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d6394:	b508      	push	{r3, lr}
   d6396:	4b02      	ldr	r3, [pc, #8]	; (d63a0 <network_off+0xc>)
   d6398:	681b      	ldr	r3, [r3, #0]
   d639a:	699b      	ldr	r3, [r3, #24]
   d639c:	9301      	str	r3, [sp, #4]
   d639e:	bd08      	pop	{r3, pc}
   d63a0:	00030240 	.word	0x00030240

000d63a4 <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d63a4:	b508      	push	{r3, lr}
   d63a6:	4b02      	ldr	r3, [pc, #8]	; (d63b0 <network_listen+0xc>)
   d63a8:	681b      	ldr	r3, [r3, #0]
   d63aa:	69db      	ldr	r3, [r3, #28]
   d63ac:	9301      	str	r3, [sp, #4]
   d63ae:	bd08      	pop	{r3, pc}
   d63b0:	00030240 	.word	0x00030240

000d63b4 <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d63b4:	b508      	push	{r3, lr}
   d63b6:	4b02      	ldr	r3, [pc, #8]	; (d63c0 <network_listening+0xc>)
   d63b8:	681b      	ldr	r3, [r3, #0]
   d63ba:	6a1b      	ldr	r3, [r3, #32]
   d63bc:	9301      	str	r3, [sp, #4]
   d63be:	bd08      	pop	{r3, pc}
   d63c0:	00030240 	.word	0x00030240

000d63c4 <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d63c4:	b508      	push	{r3, lr}
   d63c6:	4b02      	ldr	r3, [pc, #8]	; (d63d0 <network_set_listen_timeout+0xc>)
   d63c8:	681b      	ldr	r3, [r3, #0]
   d63ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d63cc:	9301      	str	r3, [sp, #4]
   d63ce:	bd08      	pop	{r3, pc}
   d63d0:	00030240 	.word	0x00030240

000d63d4 <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d63d4:	b508      	push	{r3, lr}
   d63d6:	4b02      	ldr	r3, [pc, #8]	; (d63e0 <network_get_listen_timeout+0xc>)
   d63d8:	681b      	ldr	r3, [r3, #0]
   d63da:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d63dc:	9301      	str	r3, [sp, #4]
   d63de:	bd08      	pop	{r3, pc}
   d63e0:	00030240 	.word	0x00030240

000d63e4 <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d63e4:	b508      	push	{r3, lr}
   d63e6:	4b02      	ldr	r3, [pc, #8]	; (d63f0 <spark_set_random_seed_from_cloud_handler+0xc>)
   d63e8:	681b      	ldr	r3, [r3, #0]
   d63ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d63ec:	9301      	str	r3, [sp, #4]
   d63ee:	bd08      	pop	{r3, pc}
   d63f0:	00030244 	.word	0x00030244

000d63f4 <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d63f4:	b508      	push	{r3, lr}
   d63f6:	4b02      	ldr	r3, [pc, #8]	; (d6400 <malloc+0xc>)
   d63f8:	681b      	ldr	r3, [r3, #0]
   d63fa:	681b      	ldr	r3, [r3, #0]
   d63fc:	9301      	str	r3, [sp, #4]
   d63fe:	bd08      	pop	{r3, pc}
   d6400:	0003021c 	.word	0x0003021c

000d6404 <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d6404:	b508      	push	{r3, lr}
   d6406:	4b02      	ldr	r3, [pc, #8]	; (d6410 <free+0xc>)
   d6408:	681b      	ldr	r3, [r3, #0]
   d640a:	685b      	ldr	r3, [r3, #4]
   d640c:	9301      	str	r3, [sp, #4]
   d640e:	bd08      	pop	{r3, pc}
   d6410:	0003021c 	.word	0x0003021c

000d6414 <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d6414:	b508      	push	{r3, lr}
   d6416:	4b02      	ldr	r3, [pc, #8]	; (d6420 <realloc+0xc>)
   d6418:	681b      	ldr	r3, [r3, #0]
   d641a:	689b      	ldr	r3, [r3, #8]
   d641c:	9301      	str	r3, [sp, #4]
   d641e:	bd08      	pop	{r3, pc}
   d6420:	0003021c 	.word	0x0003021c

000d6424 <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d6424:	b508      	push	{r3, lr}
   d6426:	4b02      	ldr	r3, [pc, #8]	; (d6430 <sprintf+0xc>)
   d6428:	681b      	ldr	r3, [r3, #0]
   d642a:	68db      	ldr	r3, [r3, #12]
   d642c:	9301      	str	r3, [sp, #4]
   d642e:	bd08      	pop	{r3, pc}
   d6430:	0003021c 	.word	0x0003021c

000d6434 <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d6434:	b508      	push	{r3, lr}
   d6436:	4b02      	ldr	r3, [pc, #8]	; (d6440 <vsnprintf+0xc>)
   d6438:	681b      	ldr	r3, [r3, #0]
   d643a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d643c:	9301      	str	r3, [sp, #4]
   d643e:	bd08      	pop	{r3, pc}
   d6440:	0003021c 	.word	0x0003021c

000d6444 <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d6444:	b508      	push	{r3, lr}
   d6446:	4b02      	ldr	r3, [pc, #8]	; (d6450 <__errno+0xc>)
   d6448:	681b      	ldr	r3, [r3, #0]
   d644a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d644c:	9301      	str	r3, [sp, #4]
   d644e:	bd08      	pop	{r3, pc}
   d6450:	0003021c 	.word	0x0003021c

000d6454 <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d6454:	b508      	push	{r3, lr}
   d6456:	4b02      	ldr	r3, [pc, #8]	; (d6460 <newlib_impure_ptr_callback+0xc>)
   d6458:	681b      	ldr	r3, [r3, #0]
   d645a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d645c:	9301      	str	r3, [sp, #4]
   d645e:	bd08      	pop	{r3, pc}
   d6460:	0003021c 	.word	0x0003021c

000d6464 <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d6464:	2200      	movs	r2, #0
   d6466:	6840      	ldr	r0, [r0, #4]
   d6468:	4611      	mov	r1, r2
   d646a:	f7ff bfa3 	b.w	d63b4 <network_listening>

000d646e <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d646e:	2200      	movs	r2, #0
   d6470:	6840      	ldr	r0, [r0, #4]
   d6472:	4611      	mov	r1, r2
   d6474:	f7ff bfae 	b.w	d63d4 <network_get_listen_timeout>

000d6478 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6478:	6840      	ldr	r0, [r0, #4]
   d647a:	2200      	movs	r2, #0
   d647c:	f7ff bfa2 	b.w	d63c4 <network_set_listen_timeout>

000d6480 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6480:	6840      	ldr	r0, [r0, #4]
   d6482:	2200      	movs	r2, #0
   d6484:	f081 0101 	eor.w	r1, r1, #1
   d6488:	f7ff bf8c 	b.w	d63a4 <network_listen>

000d648c <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d648c:	2300      	movs	r3, #0
   d648e:	6840      	ldr	r0, [r0, #4]
   d6490:	461a      	mov	r2, r3
   d6492:	4619      	mov	r1, r3
   d6494:	f7ff bf7e 	b.w	d6394 <network_off>

000d6498 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d6498:	2300      	movs	r3, #0
   d649a:	6840      	ldr	r0, [r0, #4]
   d649c:	461a      	mov	r2, r3
   d649e:	4619      	mov	r1, r3
   d64a0:	f7ff bf70 	b.w	d6384 <network_on>

000d64a4 <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d64a4:	2200      	movs	r2, #0
   d64a6:	6840      	ldr	r0, [r0, #4]
   d64a8:	4611      	mov	r1, r2
   d64aa:	f7ff bf63 	b.w	d6374 <network_ready>

000d64ae <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d64ae:	2200      	movs	r2, #0
   d64b0:	6840      	ldr	r0, [r0, #4]
   d64b2:	4611      	mov	r1, r2
   d64b4:	f7ff bf4e 	b.w	d6354 <network_connecting>

000d64b8 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d64b8:	6840      	ldr	r0, [r0, #4]
   d64ba:	2200      	movs	r2, #0
   d64bc:	2102      	movs	r1, #2
   d64be:	f7ff bf51 	b.w	d6364 <network_disconnect>

000d64c2 <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d64c2:	2300      	movs	r3, #0
   d64c4:	6840      	ldr	r0, [r0, #4]
   d64c6:	461a      	mov	r2, r3
   d64c8:	f7ff bf3c 	b.w	d6344 <network_connect>

000d64cc <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d64cc:	4b02      	ldr	r3, [pc, #8]	; (d64d8 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d64ce:	2203      	movs	r2, #3
   d64d0:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d64d2:	4a02      	ldr	r2, [pc, #8]	; (d64dc <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d64d4:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d64d6:	4770      	bx	lr
   d64d8:	2003e650 	.word	0x2003e650
   d64dc:	000da514 	.word	0x000da514

000d64e0 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d64e0:	2100      	movs	r1, #0
   d64e2:	f7ff bebb 	b.w	d625c <hal_spi_acquire>

000d64e6 <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d64e6:	2100      	movs	r1, #0
   d64e8:	f7ff bec0 	b.w	d626c <hal_spi_release>

000d64ec <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d64ec:	b510      	push	{r4, lr}
   d64ee:	4604      	mov	r4, r0
   d64f0:	4608      	mov	r0, r1
{
    _spi = spi;
   d64f2:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d64f4:	f7ff fe92 	bl	d621c <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d64f8:	2300      	movs	r3, #0
   d64fa:	6063      	str	r3, [r4, #4]
}
   d64fc:	4620      	mov	r0, r4
   d64fe:	bd10      	pop	{r4, pc}

000d6500 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6500:	b510      	push	{r4, lr}
   d6502:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d6504:	7800      	ldrb	r0, [r0, #0]
   d6506:	f7ff ffeb 	bl	d64e0 <_ZN8SPIClass4lockEv.isra.0>
   d650a:	b948      	cbnz	r0, d6520 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d650c:	7820      	ldrb	r0, [r4, #0]
   d650e:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d6512:	f7ff fe73 	bl	d61fc <hal_spi_begin>
        unlock();
   d6516:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6518:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d651c:	f7ff bfe3 	b.w	d64e6 <_ZN8SPIClass6unlockEv.isra.0>
}
   d6520:	bd10      	pop	{r4, pc}

000d6522 <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d6522:	7800      	ldrb	r0, [r0, #0]
   d6524:	f7ff bfdf 	b.w	d64e6 <_ZN8SPIClass6unlockEv.isra.0>

000d6528 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6528:	0840      	lsrs	r0, r0, #1
{
   d652a:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d652c:	6018      	str	r0, [r3, #0]
   d652e:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6530:	6818      	ldr	r0, [r3, #0]
   d6532:	4288      	cmp	r0, r1
   d6534:	b2e5      	uxtb	r5, r4
   d6536:	d906      	bls.n	d6546 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6538:	3401      	adds	r4, #1
   d653a:	2c08      	cmp	r4, #8
   d653c:	d002      	beq.n	d6544 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d653e:	0840      	lsrs	r0, r0, #1
   d6540:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d6542:	e7f5      	b.n	d6530 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d6544:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d6546:	4b02      	ldr	r3, [pc, #8]	; (d6550 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6548:	5d5b      	ldrb	r3, [r3, r5]
   d654a:	7013      	strb	r3, [r2, #0]
}
   d654c:	bd30      	pop	{r4, r5, pc}
   d654e:	bf00      	nop
   d6550:	000da540 	.word	0x000da540

000d6554 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d6554:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6558:	4606      	mov	r6, r0
   d655a:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d655c:	7800      	ldrb	r0, [r0, #0]
{
   d655e:	460d      	mov	r5, r1
    CHECK(lock());
   d6560:	f7ff ffbe 	bl	d64e0 <_ZN8SPIClass4lockEv.isra.0>
   d6564:	2800      	cmp	r0, #0
   d6566:	db1b      	blt.n	d65a0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d6568:	7834      	ldrb	r4, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d656a:	2214      	movs	r2, #20
   d656c:	2100      	movs	r1, #0
   d656e:	a809      	add	r0, sp, #36	; 0x24
   d6570:	f003 fdf4 	bl	da15c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d6574:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d6576:	2200      	movs	r2, #0
   d6578:	a909      	add	r1, sp, #36	; 0x24
   d657a:	4620      	mov	r0, r4
    info->version = HAL_SPI_INFO_VERSION_1;
   d657c:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d6580:	f7ff fe5c 	bl	d623c <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d6584:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d6588:	b113      	cbz	r3, d6590 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d658a:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d658e:	b154      	cbz	r4, d65a6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d6590:	2700      	movs	r7, #0
   d6592:	46b9      	mov	r9, r7
   d6594:	46b8      	mov	r8, r7
   d6596:	2401      	movs	r4, #1
    if (default_ && other.default_)
   d6598:	792b      	ldrb	r3, [r5, #4]
   d659a:	b15c      	cbz	r4, d65b4 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d659c:	b1c3      	cbz	r3, d65d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d659e:	2000      	movs	r0, #0
}
   d65a0:	b00f      	add	sp, #60	; 0x3c
   d65a2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d65a6:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d65aa:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d65ae:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d65b2:	e7f1      	b.n	d6598 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d65b4:	2b00      	cmp	r3, #0
   d65b6:	d135      	bne.n	d6624 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d65b8:	68ab      	ldr	r3, [r5, #8]
   d65ba:	4543      	cmp	r3, r8
   d65bc:	d108      	bne.n	d65d0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d65be:	f88d 9020 	strb.w	r9, [sp, #32]
   d65c2:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d65c6:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d65ca:	89ab      	ldrh	r3, [r5, #12]
   d65cc:	429a      	cmp	r2, r3
   d65ce:	d0e6      	beq.n	d659e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d65d0:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d65d2:	68a9      	ldr	r1, [r5, #8]
            uint8_t divisor = 0;
   d65d4:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d65d8:	980a      	ldr	r0, [sp, #40]	; 0x28
   d65da:	ab04      	add	r3, sp, #16
   d65dc:	f10d 020f 	add.w	r2, sp, #15
   d65e0:	f7ff ffa2 	bl	d6528 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d65e4:	7929      	ldrb	r1, [r5, #4]
   d65e6:	b984      	cbnz	r4, d660a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d65e8:	b989      	cbnz	r1, d660e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d65ea:	68ab      	ldr	r3, [r5, #8]
   d65ec:	4543      	cmp	r3, r8
   d65ee:	d30e      	bcc.n	d660e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d65f0:	f88d 9020 	strb.w	r9, [sp, #32]
   d65f4:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d65f8:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d65fc:	89ab      	ldrh	r3, [r5, #12]
   d65fe:	429a      	cmp	r2, r3
   d6600:	d105      	bne.n	d660e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d6602:	9b04      	ldr	r3, [sp, #16]
   d6604:	4543      	cmp	r3, r8
   d6606:	d102      	bne.n	d660e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6608:	e7c9      	b.n	d659e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d660a:	2900      	cmp	r1, #0
   d660c:	d1f9      	bne.n	d6602 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d660e:	2300      	movs	r3, #0
   d6610:	9301      	str	r3, [sp, #4]
   d6612:	7b6b      	ldrb	r3, [r5, #13]
   d6614:	9300      	str	r3, [sp, #0]
   d6616:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d661a:	7b2b      	ldrb	r3, [r5, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d661c:	7830      	ldrb	r0, [r6, #0]
   d661e:	f7ff fe15 	bl	d624c <hal_spi_set_settings>
   d6622:	e7bc      	b.n	d659e <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d6624:	e9cd 4400 	strd	r4, r4, [sp]
   d6628:	4623      	mov	r3, r4
   d662a:	4622      	mov	r2, r4
   d662c:	2101      	movs	r1, #1
   d662e:	e7f5      	b.n	d661c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d6630 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6630:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d6632:	7800      	ldrb	r0, [r0, #0]
   d6634:	f7ff fdea 	bl	d620c <hal_spi_transfer>
}
   d6638:	b2c0      	uxtb	r0, r0
   d663a:	bd08      	pop	{r3, pc}

000d663c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d663c:	b510      	push	{r4, lr}
   d663e:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6640:	6800      	ldr	r0, [r0, #0]
   d6642:	b118      	cbz	r0, d664c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d6644:	f7ff fede 	bl	d6404 <free>
            wakeupSource_ = nullptr;
   d6648:	2300      	movs	r3, #0
   d664a:	6023      	str	r3, [r4, #0]
        }
    }
   d664c:	bd10      	pop	{r4, pc}

000d664e <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d664e:	b510      	push	{r4, lr}
   d6650:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d6652:	f7ff fff3 	bl	d663c <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d6656:	4620      	mov	r0, r4
   d6658:	bd10      	pop	{r4, pc}
	...

000d665c <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d665c:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d665e:	4b09      	ldr	r3, [pc, #36]	; (d6684 <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6660:	4c09      	ldr	r4, [pc, #36]	; (d6688 <_GLOBAL__sub_I_System+0x2c>)
   d6662:	2202      	movs	r2, #2
   d6664:	2000      	movs	r0, #0
   d6666:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6668:	4b08      	ldr	r3, [pc, #32]	; (d668c <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d666a:	6020      	str	r0, [r4, #0]
   d666c:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d666e:	71a0      	strb	r0, [r4, #6]
   d6670:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d6672:	f7ff fe43 	bl	d62fc <set_system_mode>
SystemClass System;
   d6676:	4620      	mov	r0, r4
   d6678:	4a05      	ldr	r2, [pc, #20]	; (d6690 <_GLOBAL__sub_I_System+0x34>)
   d667a:	4906      	ldr	r1, [pc, #24]	; (d6694 <_GLOBAL__sub_I_System+0x38>)
   d667c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6680:	f001 ba62 	b.w	d7b48 <__aeabi_atexit>
   d6684:	2003e664 	.word	0x2003e664
   d6688:	2003e658 	.word	0x2003e658
   d668c:	ffff0000 	.word	0xffff0000
   d6690:	2003e404 	.word	0x2003e404
   d6694:	000d664f 	.word	0x000d664f

000d6698 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d6698:	b510      	push	{r4, lr}
   d669a:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d669c:	f003 fdab 	bl	da1f6 <strlen>
   d66a0:	3801      	subs	r0, #1
   d66a2:	1823      	adds	r3, r4, r0
   d66a4:	4620      	mov	r0, r4
	while(i<j){
   d66a6:	4283      	cmp	r3, r0
   d66a8:	d906      	bls.n	d66b8 <_Z11str_reversePc+0x20>
		c = *i;
   d66aa:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d66ac:	7819      	ldrb	r1, [r3, #0]
   d66ae:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d66b2:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d66b6:	e7f6      	b.n	d66a6 <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d66b8:	bd10      	pop	{r4, pc}

000d66ba <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d66ba:	b570      	push	{r4, r5, r6, lr}
   d66bc:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d66be:	1e91      	subs	r1, r2, #2
   d66c0:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d66c2:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d66c4:	d822      	bhi.n	d670c <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d66c6:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d66c8:	b16d      	cbz	r5, d66e6 <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d66ca:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d66ce:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d66d2:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d66d4:	2d09      	cmp	r5, #9
                *ptr += '0';
   d66d6:	bf94      	ite	ls
   d66d8:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d66da:	3157      	addhi	r1, #87	; 0x57
   d66dc:	b2c9      	uxtb	r1, r1
   d66de:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d66e2:	4635      	mov	r5, r6
	while(a){
   d66e4:	e7f0      	b.n	d66c8 <ultoa+0xe>
   d66e6:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d66e8:	4423      	add	r3, r4
            *ptr++ = '0';
   d66ea:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d66ec:	4293      	cmp	r3, r2
   d66ee:	d902      	bls.n	d66f6 <ultoa+0x3c>
            *ptr++ = '0';
   d66f0:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d66f4:	e7fa      	b.n	d66ec <ultoa+0x32>
   d66f6:	1a1a      	subs	r2, r3, r0
   d66f8:	4283      	cmp	r3, r0
   d66fa:	bf38      	it	cc
   d66fc:	2200      	movcc	r2, #0

	*ptr = '\0';
   d66fe:	2300      	movs	r3, #0
   d6700:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d6702:	4620      	mov	r0, r4
   d6704:	f7ff ffc8 	bl	d6698 <_Z11str_reversePc>
	return buffer;
   d6708:	4620      	mov	r0, r4
}
   d670a:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d670c:	2000      	movs	r0, #0
   d670e:	e7fc      	b.n	d670a <ultoa+0x50>

000d6710 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d6710:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d6712:	2301      	movs	r3, #1
   d6714:	f7ff ffd1 	bl	d66ba <ultoa>
}
   d6718:	bd08      	pop	{r3, pc}
	...

000d671c <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d671c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6720:	ec57 6b10 	vmov	r6, r7, d0
   d6724:	4680      	mov	r8, r0
   d6726:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d6728:	ee10 0a10 	vmov	r0, s0
   d672c:	2200      	movs	r2, #0
   d672e:	2300      	movs	r3, #0
   d6730:	4639      	mov	r1, r7
   d6732:	f003 f94d 	bl	d99d0 <__aeabi_dcmplt>
   d6736:	b128      	cbz	r0, d6744 <_Z4dtoadhPc+0x28>
        val = -val;
   d6738:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d673c:	461f      	mov	r7, r3
        *sout++ = '-';
   d673e:	232d      	movs	r3, #45	; 0x2d
   d6740:	f804 3b01 	strb.w	r3, [r4], #1
   d6744:	2300      	movs	r3, #0
    }
    long scale = 1;
   d6746:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d674a:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d674c:	b2d9      	uxtb	r1, r3
   d674e:	4588      	cmp	r8, r1
   d6750:	d903      	bls.n	d675a <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d6752:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d6756:	3301      	adds	r3, #1
   d6758:	e7f8      	b.n	d674c <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d675a:	4648      	mov	r0, r9
   d675c:	f002 fe5c 	bl	d9418 <__aeabi_i2d>
   d6760:	4632      	mov	r2, r6
   d6762:	463b      	mov	r3, r7
   d6764:	f002 fec2 	bl	d94ec <__aeabi_dmul>
   d6768:	4606      	mov	r6, r0
   d676a:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d676c:	f003 fb54 	bl	d9e18 <__aeabi_d2ulz>
   d6770:	4605      	mov	r5, r0
   d6772:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d6774:	f002 fe84 	bl	d9480 <__aeabi_ul2d>
   d6778:	4602      	mov	r2, r0
   d677a:	460b      	mov	r3, r1
   d677c:	4630      	mov	r0, r6
   d677e:	4639      	mov	r1, r7
   d6780:	f002 fcfc 	bl	d917c <__aeabi_dsub>
   d6784:	4b13      	ldr	r3, [pc, #76]	; (d67d4 <_Z4dtoadhPc+0xb8>)
   d6786:	2200      	movs	r2, #0
   d6788:	f003 f936 	bl	d99f8 <__aeabi_dcmpge>
   d678c:	b110      	cbz	r0, d6794 <_Z4dtoadhPc+0x78>
        fixed++;
   d678e:	3501      	adds	r5, #1
   d6790:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d6794:	464a      	mov	r2, r9
   d6796:	4628      	mov	r0, r5
   d6798:	17d3      	asrs	r3, r2, #31
   d679a:	4651      	mov	r1, sl
   d679c:	f003 fb24 	bl	d9de8 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d67a0:	2301      	movs	r3, #1
   d67a2:	4615      	mov	r5, r2
   d67a4:	4621      	mov	r1, r4
   d67a6:	220a      	movs	r2, #10
   d67a8:	f7ff ff87 	bl	d66ba <ultoa>
    if (prec) {
   d67ac:	f1b8 0f00 	cmp.w	r8, #0
   d67b0:	d00d      	beq.n	d67ce <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d67b2:	4620      	mov	r0, r4
   d67b4:	f003 fd1f 	bl	da1f6 <strlen>
        *sout++ = '.';
   d67b8:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d67ba:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d67bc:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d67be:	220a      	movs	r2, #10
   d67c0:	4643      	mov	r3, r8
   d67c2:	4628      	mov	r0, r5
   d67c4:	3101      	adds	r1, #1
    }
}
   d67c6:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d67ca:	f7ff bf76 	b.w	d66ba <ultoa>
}
   d67ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67d2:	bf00      	nop
   d67d4:	3fe00000 	.word	0x3fe00000

000d67d8 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d67d8:	b510      	push	{r4, lr}
   d67da:	4604      	mov	r4, r0
{
	free(buffer);
   d67dc:	6800      	ldr	r0, [r0, #0]
   d67de:	f7ff fe11 	bl	d6404 <free>
}
   d67e2:	4620      	mov	r0, r4
   d67e4:	bd10      	pop	{r4, pc}

000d67e6 <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d67e6:	b510      	push	{r4, lr}
   d67e8:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d67ea:	6800      	ldr	r0, [r0, #0]
   d67ec:	b108      	cbz	r0, d67f2 <_ZN6String10invalidateEv+0xc>
   d67ee:	f7ff fe09 	bl	d6404 <free>
	buffer = NULL;
   d67f2:	2300      	movs	r3, #0
	capacity = len = 0;
   d67f4:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d67f8:	6023      	str	r3, [r4, #0]
}
   d67fa:	bd10      	pop	{r4, pc}

000d67fc <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d67fc:	b538      	push	{r3, r4, r5, lr}
   d67fe:	4604      	mov	r4, r0
   d6800:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d6802:	6800      	ldr	r0, [r0, #0]
   d6804:	3101      	adds	r1, #1
   d6806:	f7ff fe05 	bl	d6414 <realloc>
	if (newbuffer) {
   d680a:	b110      	cbz	r0, d6812 <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d680c:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6810:	2001      	movs	r0, #1
	}
	return 0;
}
   d6812:	bd38      	pop	{r3, r4, r5, pc}

000d6814 <_ZN6String7reserveEj>:
{
   d6814:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d6816:	6803      	ldr	r3, [r0, #0]
{
   d6818:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d681a:	b123      	cbz	r3, d6826 <_ZN6String7reserveEj+0x12>
   d681c:	6843      	ldr	r3, [r0, #4]
   d681e:	428b      	cmp	r3, r1
   d6820:	d301      	bcc.n	d6826 <_ZN6String7reserveEj+0x12>
   d6822:	2001      	movs	r0, #1
}
   d6824:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d6826:	4620      	mov	r0, r4
   d6828:	f7ff ffe8 	bl	d67fc <_ZN6String12changeBufferEj>
   d682c:	2800      	cmp	r0, #0
   d682e:	d0f9      	beq.n	d6824 <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6830:	68a3      	ldr	r3, [r4, #8]
   d6832:	2b00      	cmp	r3, #0
   d6834:	d1f5      	bne.n	d6822 <_ZN6String7reserveEj+0xe>
   d6836:	6822      	ldr	r2, [r4, #0]
   d6838:	7013      	strb	r3, [r2, #0]
   d683a:	e7f2      	b.n	d6822 <_ZN6String7reserveEj+0xe>

000d683c <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d683c:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d683e:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6840:	4611      	mov	r1, r2
   d6842:	9201      	str	r2, [sp, #4]
{
   d6844:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d6846:	f7ff ffe5 	bl	d6814 <_ZN6String7reserveEj>
   d684a:	9a01      	ldr	r2, [sp, #4]
   d684c:	b928      	cbnz	r0, d685a <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d684e:	4620      	mov	r0, r4
   d6850:	f7ff ffc9 	bl	d67e6 <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d6854:	4620      	mov	r0, r4
   d6856:	b003      	add	sp, #12
   d6858:	bd30      	pop	{r4, r5, pc}
	len = length;
   d685a:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d685c:	4629      	mov	r1, r5
   d685e:	6820      	ldr	r0, [r4, #0]
   d6860:	f003 fc6e 	bl	da140 <memcpy>
	buffer[len] = 0;
   d6864:	6822      	ldr	r2, [r4, #0]
   d6866:	68a3      	ldr	r3, [r4, #8]
   d6868:	2100      	movs	r1, #0
   d686a:	54d1      	strb	r1, [r2, r3]
	return *this;
   d686c:	e7f2      	b.n	d6854 <_ZN6String4copyEPKcj+0x18>

000d686e <_ZN6StringC1EPKc>:
	buffer = NULL;
   d686e:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6870:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d6872:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d6876:	4604      	mov	r4, r0
	len = 0;
   d6878:	6083      	str	r3, [r0, #8]
	flags = 0;
   d687a:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d687c:	b141      	cbz	r1, d6890 <_ZN6StringC1EPKc+0x22>
   d687e:	4608      	mov	r0, r1
   d6880:	9101      	str	r1, [sp, #4]
   d6882:	f003 fcb8 	bl	da1f6 <strlen>
   d6886:	9901      	ldr	r1, [sp, #4]
   d6888:	4602      	mov	r2, r0
   d688a:	4620      	mov	r0, r4
   d688c:	f7ff ffd6 	bl	d683c <_ZN6String4copyEPKcj>
}
   d6890:	4620      	mov	r0, r4
   d6892:	b002      	add	sp, #8
   d6894:	bd10      	pop	{r4, pc}

000d6896 <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d6896:	b538      	push	{r3, r4, r5, lr}
   d6898:	4605      	mov	r5, r0
	if (buffer) {
   d689a:	6800      	ldr	r0, [r0, #0]
{
   d689c:	460c      	mov	r4, r1
	if (buffer) {
   d689e:	b168      	cbz	r0, d68bc <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d68a0:	686a      	ldr	r2, [r5, #4]
   d68a2:	688b      	ldr	r3, [r1, #8]
   d68a4:	429a      	cmp	r2, r3
   d68a6:	d307      	bcc.n	d68b8 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d68a8:	6809      	ldr	r1, [r1, #0]
   d68aa:	f003 fc9c 	bl	da1e6 <strcpy>
			len = rhs.len;
   d68ae:	68a3      	ldr	r3, [r4, #8]
   d68b0:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d68b2:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d68b4:	60a3      	str	r3, [r4, #8]
}
   d68b6:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d68b8:	f7ff fda4 	bl	d6404 <free>
	buffer = rhs.buffer;
   d68bc:	6823      	ldr	r3, [r4, #0]
   d68be:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d68c0:	6863      	ldr	r3, [r4, #4]
   d68c2:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d68c4:	68a3      	ldr	r3, [r4, #8]
   d68c6:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d68c8:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d68ca:	e9c4 3300 	strd	r3, r3, [r4]
   d68ce:	e7f1      	b.n	d68b4 <_ZN6String4moveERS_+0x1e>

000d68d0 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d68d0:	4288      	cmp	r0, r1
{
   d68d2:	b510      	push	{r4, lr}
   d68d4:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d68d6:	d005      	beq.n	d68e4 <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d68d8:	680b      	ldr	r3, [r1, #0]
   d68da:	b12b      	cbz	r3, d68e8 <_ZN6StringaSERKS_+0x18>
   d68dc:	688a      	ldr	r2, [r1, #8]
   d68de:	4619      	mov	r1, r3
   d68e0:	f7ff ffac 	bl	d683c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d68e4:	4620      	mov	r0, r4
   d68e6:	bd10      	pop	{r4, pc}
	else invalidate();
   d68e8:	f7ff ff7d 	bl	d67e6 <_ZN6String10invalidateEv>
   d68ec:	e7fa      	b.n	d68e4 <_ZN6StringaSERKS_+0x14>

000d68ee <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d68ee:	b510      	push	{r4, lr}
	buffer = NULL;
   d68f0:	2300      	movs	r3, #0
String::String(const String &value)
   d68f2:	4604      	mov	r4, r0
	capacity = 0;
   d68f4:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d68f8:	6083      	str	r3, [r0, #8]
	flags = 0;
   d68fa:	7303      	strb	r3, [r0, #12]
	*this = value;
   d68fc:	f7ff ffe8 	bl	d68d0 <_ZN6StringaSERKS_>
}
   d6900:	4620      	mov	r0, r4
   d6902:	bd10      	pop	{r4, pc}

000d6904 <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d6904:	4288      	cmp	r0, r1
{
   d6906:	b510      	push	{r4, lr}
   d6908:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d690a:	d001      	beq.n	d6910 <_ZN6StringaSEOS_+0xc>
   d690c:	f7ff ffc3 	bl	d6896 <_ZN6String4moveERS_>
	return *this;
}
   d6910:	4620      	mov	r0, r4
   d6912:	bd10      	pop	{r4, pc}

000d6914 <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d6914:	b513      	push	{r0, r1, r4, lr}
   d6916:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6918:	b159      	cbz	r1, d6932 <_ZN6StringaSEPKc+0x1e>
   d691a:	4608      	mov	r0, r1
   d691c:	9101      	str	r1, [sp, #4]
   d691e:	f003 fc6a 	bl	da1f6 <strlen>
   d6922:	9901      	ldr	r1, [sp, #4]
   d6924:	4602      	mov	r2, r0
   d6926:	4620      	mov	r0, r4
   d6928:	f7ff ff88 	bl	d683c <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d692c:	4620      	mov	r0, r4
   d692e:	b002      	add	sp, #8
   d6930:	bd10      	pop	{r4, pc}
	else invalidate();
   d6932:	f7ff ff58 	bl	d67e6 <_ZN6String10invalidateEv>
   d6936:	e7f9      	b.n	d692c <_ZN6StringaSEPKc+0x18>

000d6938 <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
   d6938:	b510      	push	{r4, lr}
   d693a:	4604      	mov	r4, r0
   d693c:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d693e:	2300      	movs	r3, #0
	capacity = 0;
   d6940:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6944:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6946:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
   d6948:	4608      	mov	r0, r1
	utoa(value, buf, base);
   d694a:	a901      	add	r1, sp, #4
   d694c:	f7ff fee0 	bl	d6710 <utoa>
	*this = buf;
   d6950:	a901      	add	r1, sp, #4
   d6952:	4620      	mov	r0, r4
   d6954:	f7ff ffde 	bl	d6914 <_ZN6StringaSEPKc>
}
   d6958:	4620      	mov	r0, r4
   d695a:	b00a      	add	sp, #40	; 0x28
   d695c:	bd10      	pop	{r4, pc}

000d695e <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d695e:	b530      	push	{r4, r5, lr}
   d6960:	4604      	mov	r4, r0
	buffer = NULL;
   d6962:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d6964:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d6966:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d696a:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d696c:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d696e:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d6972:	b2cd      	uxtb	r5, r1
   d6974:	f002 fd62 	bl	d943c <__aeabi_f2d>
   d6978:	ec41 0b10 	vmov	d0, r0, r1
   d697c:	a901      	add	r1, sp, #4
   d697e:	4628      	mov	r0, r5
   d6980:	f7ff fecc 	bl	d671c <_Z4dtoadhPc>
        *this = buf;
   d6984:	a901      	add	r1, sp, #4
   d6986:	4620      	mov	r0, r4
   d6988:	f7ff ffc4 	bl	d6914 <_ZN6StringaSEPKc>
}
   d698c:	4620      	mov	r0, r4
   d698e:	b00b      	add	sp, #44	; 0x2c
   d6990:	bd30      	pop	{r4, r5, pc}

000d6992 <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d6992:	b570      	push	{r4, r5, r6, lr}
   d6994:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d6996:	460e      	mov	r6, r1
   d6998:	b909      	cbnz	r1, d699e <_ZN6String6concatEPKcj+0xc>
   d699a:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d699c:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d699e:	b16a      	cbz	r2, d69bc <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d69a0:	6884      	ldr	r4, [r0, #8]
   d69a2:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d69a4:	4621      	mov	r1, r4
   d69a6:	f7ff ff35 	bl	d6814 <_ZN6String7reserveEj>
   d69aa:	2800      	cmp	r0, #0
   d69ac:	d0f5      	beq.n	d699a <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d69ae:	6828      	ldr	r0, [r5, #0]
   d69b0:	68ab      	ldr	r3, [r5, #8]
   d69b2:	4631      	mov	r1, r6
   d69b4:	4418      	add	r0, r3
   d69b6:	f003 fc16 	bl	da1e6 <strcpy>
	len = newlen;
   d69ba:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d69bc:	2001      	movs	r0, #1
   d69be:	e7ed      	b.n	d699c <_ZN6String6concatEPKcj+0xa>

000d69c0 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d69c0:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d69c2:	2300      	movs	r3, #0
	buf[0] = c;
   d69c4:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d69c8:	2201      	movs	r2, #1
   d69ca:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d69cc:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d69d0:	f7ff ffdf 	bl	d6992 <_ZN6String6concatEPKcj>
}
   d69d4:	b003      	add	sp, #12
   d69d6:	f85d fb04 	ldr.w	pc, [sp], #4

000d69da <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d69da:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d69dc:	688a      	ldr	r2, [r1, #8]
   d69de:	6809      	ldr	r1, [r1, #0]
{
   d69e0:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d69e2:	f7ff ffd6 	bl	d6992 <_ZN6String6concatEPKcj>
   d69e6:	b910      	cbnz	r0, d69ee <_ZplRK15StringSumHelperRK6String+0x14>
   d69e8:	4620      	mov	r0, r4
   d69ea:	f7ff fefc 	bl	d67e6 <_ZN6String10invalidateEv>
	return a;
}
   d69ee:	4620      	mov	r0, r4
   d69f0:	bd10      	pop	{r4, pc}

000d69f2 <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d69f2:	6883      	ldr	r3, [r0, #8]
   d69f4:	428b      	cmp	r3, r1
   d69f6:	d903      	bls.n	d6a00 <_ZNK6StringixEj+0xe>
   d69f8:	6800      	ldr	r0, [r0, #0]
   d69fa:	b110      	cbz	r0, d6a02 <_ZNK6StringixEj+0x10>
	return buffer[index];
   d69fc:	5c40      	ldrb	r0, [r0, r1]
   d69fe:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   d6a00:	2000      	movs	r0, #0
}
   d6a02:	4770      	bx	lr

000d6a04 <_ZNK6String6charAtEj>:
	return operator[](loc);
   d6a04:	f7ff bff5 	b.w	d69f2 <_ZNK6StringixEj>

000d6a08 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d6a08:	6800      	ldr	r0, [r0, #0]
   d6a0a:	b108      	cbz	r0, d6a10 <_ZNK6String5toIntEv+0x8>
   d6a0c:	f003 bb86 	b.w	da11c <atol>
	return 0;
}
   d6a10:	4770      	bx	lr

000d6a12 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6a12:	b510      	push	{r4, lr}
   d6a14:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6a16:	6800      	ldr	r0, [r0, #0]
   d6a18:	b108      	cbz	r0, d6a1e <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6a1a:	f7ff fb07 	bl	d602c <os_mutex_recursive_destroy>
    }
   d6a1e:	4620      	mov	r0, r4
   d6a20:	bd10      	pop	{r4, pc}
	...

000d6a24 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6a24:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6a26:	4c06      	ldr	r4, [pc, #24]	; (d6a40 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6a28:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6a2a:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6a2c:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6a2e:	f7ff faf5 	bl	d601c <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6a32:	4620      	mov	r0, r4
   d6a34:	4a03      	ldr	r2, [pc, #12]	; (d6a44 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6a36:	4904      	ldr	r1, [pc, #16]	; (d6a48 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6a3c:	f001 b884 	b.w	d7b48 <__aeabi_atexit>
   d6a40:	2003e668 	.word	0x2003e668
   d6a44:	2003e404 	.word	0x2003e404
   d6a48:	000d6a13 	.word	0x000d6a13

000d6a4c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6a4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a4e:	4606      	mov	r6, r0
   d6a50:	460d      	mov	r5, r1
  size_t n = 0;
   d6a52:	188f      	adds	r7, r1, r2
   d6a54:	2400      	movs	r4, #0
  while (size--) {
   d6a56:	42bd      	cmp	r5, r7
   d6a58:	d00c      	beq.n	d6a74 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6a5a:	6833      	ldr	r3, [r6, #0]
   d6a5c:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6a60:	689b      	ldr	r3, [r3, #8]
   d6a62:	4630      	mov	r0, r6
   d6a64:	4798      	blx	r3
     if (chunk>=0)
   d6a66:	1e03      	subs	r3, r0, #0
   d6a68:	db01      	blt.n	d6a6e <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6a6a:	441c      	add	r4, r3
  while (size--) {
   d6a6c:	e7f3      	b.n	d6a56 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6a6e:	2c00      	cmp	r4, #0
   d6a70:	bf08      	it	eq
   d6a72:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6a74:	4620      	mov	r0, r4
   d6a76:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a78 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6a78:	b513      	push	{r0, r1, r4, lr}
   d6a7a:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d6a7c:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6a7e:	b159      	cbz	r1, d6a98 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6a80:	9101      	str	r1, [sp, #4]
   d6a82:	f003 fbb8 	bl	da1f6 <strlen>
   d6a86:	6823      	ldr	r3, [r4, #0]
   d6a88:	9901      	ldr	r1, [sp, #4]
   d6a8a:	68db      	ldr	r3, [r3, #12]
   d6a8c:	4602      	mov	r2, r0
   d6a8e:	4620      	mov	r0, r4
    }
   d6a90:	b002      	add	sp, #8
   d6a92:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6a96:	4718      	bx	r3
    }
   d6a98:	b002      	add	sp, #8
   d6a9a:	bd10      	pop	{r4, pc}

000d6a9c <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d6a9c:	b508      	push	{r3, lr}
  return write(str);
   d6a9e:	f7ff ffeb 	bl	d6a78 <_ZN5Print5writeEPKc>
}
   d6aa2:	bd08      	pop	{r3, pc}

000d6aa4 <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d6aa4:	6803      	ldr	r3, [r0, #0]
   d6aa6:	689b      	ldr	r3, [r3, #8]
   d6aa8:	4718      	bx	r3

000d6aaa <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6aaa:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6aac:	210d      	movs	r1, #13
{
   d6aae:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6ab0:	f7ff fff8 	bl	d6aa4 <_ZN5Print5printEc>
  n += print('\n');
   d6ab4:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6ab6:	4604      	mov	r4, r0
  n += print('\n');
   d6ab8:	4628      	mov	r0, r5
   d6aba:	f7ff fff3 	bl	d6aa4 <_ZN5Print5printEc>
  return n;
}
   d6abe:	4420      	add	r0, r4
   d6ac0:	bd38      	pop	{r3, r4, r5, pc}

000d6ac2 <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6ac2:	b530      	push	{r4, r5, lr}
   d6ac4:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6ac6:	2300      	movs	r3, #0
   d6ac8:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6acc:	2a01      	cmp	r2, #1
   d6ace:	bf98      	it	ls
   d6ad0:	220a      	movls	r2, #10
   d6ad2:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6ad4:	460d      	mov	r5, r1
   d6ad6:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6ada:	fb01 5312 	mls	r3, r1, r2, r5
   d6ade:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6ae2:	2b09      	cmp	r3, #9
   d6ae4:	bf94      	ite	ls
   d6ae6:	3330      	addls	r3, #48	; 0x30
   d6ae8:	3337      	addhi	r3, #55	; 0x37
   d6aea:	b2db      	uxtb	r3, r3
  } while(n);
   d6aec:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6aee:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6af2:	d9ef      	bls.n	d6ad4 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6af4:	4621      	mov	r1, r4
   d6af6:	f7ff ffbf 	bl	d6a78 <_ZN5Print5writeEPKc>
}
   d6afa:	b00b      	add	sp, #44	; 0x2c
   d6afc:	bd30      	pop	{r4, r5, pc}

000d6afe <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d6afe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b02:	b086      	sub	sp, #24
   d6b04:	af00      	add	r7, sp, #0
   d6b06:	4605      	mov	r5, r0
   d6b08:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d6b0a:	1d38      	adds	r0, r7, #4
   d6b0c:	2114      	movs	r1, #20
{
   d6b0e:	4614      	mov	r4, r2
    va_copy(args2, args);
   d6b10:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d6b12:	f7ff fc8f 	bl	d6434 <vsnprintf>

    if (n<bufsize)
   d6b16:	2813      	cmp	r0, #19
   d6b18:	d80e      	bhi.n	d6b38 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d6b1a:	1d39      	adds	r1, r7, #4
   d6b1c:	4628      	mov	r0, r5
   d6b1e:	f7ff ffab 	bl	d6a78 <_ZN5Print5writeEPKc>
   d6b22:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d6b24:	b11e      	cbz	r6, d6b2e <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d6b26:	4628      	mov	r0, r5
   d6b28:	f7ff ffbf 	bl	d6aaa <_ZN5Print7printlnEv>
   d6b2c:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d6b2e:	4620      	mov	r0, r4
   d6b30:	3718      	adds	r7, #24
   d6b32:	46bd      	mov	sp, r7
   d6b34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6b38:	f100 0308 	add.w	r3, r0, #8
   d6b3c:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6b40:	46e8      	mov	r8, sp
        char bigger[n+1];
   d6b42:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d6b46:	4622      	mov	r2, r4
   d6b48:	1c41      	adds	r1, r0, #1
   d6b4a:	683b      	ldr	r3, [r7, #0]
   d6b4c:	4668      	mov	r0, sp
   d6b4e:	f7ff fc71 	bl	d6434 <vsnprintf>
  return write(str);
   d6b52:	4669      	mov	r1, sp
   d6b54:	4628      	mov	r0, r5
   d6b56:	f7ff ff8f 	bl	d6a78 <_ZN5Print5writeEPKc>
   d6b5a:	4604      	mov	r4, r0
   d6b5c:	46c5      	mov	sp, r8
   d6b5e:	e7e1      	b.n	d6b24 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6b60 <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6b60:	b510      	push	{r4, lr}
   d6b62:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6b64:	f7ff fa52 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6b68:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d6b6a:	6823      	ldr	r3, [r4, #0]
   d6b6c:	4620      	mov	r0, r4
   d6b6e:	695b      	ldr	r3, [r3, #20]
   d6b70:	4798      	blx	r3
    if (c >= 0) return c;
   d6b72:	2800      	cmp	r0, #0
   d6b74:	da08      	bge.n	d6b88 <_ZN6Stream9timedReadEv+0x28>
   d6b76:	f7ff fa49 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d6b7a:	68e3      	ldr	r3, [r4, #12]
   d6b7c:	1ac0      	subs	r0, r0, r3
   d6b7e:	68a3      	ldr	r3, [r4, #8]
   d6b80:	4298      	cmp	r0, r3
   d6b82:	d3f2      	bcc.n	d6b6a <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d6b84:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6b88:	bd10      	pop	{r4, pc}

000d6b8a <_ZN6Stream9timedPeekEv>:

// private method to peek stream with timeout
int Stream::timedPeek()
{
   d6b8a:	b510      	push	{r4, lr}
   d6b8c:	4604      	mov	r4, r0
   d6b8e:	f7ff fa3d 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6b92:	60e0      	str	r0, [r4, #12]
  do {
    c = peek();
   d6b94:	6823      	ldr	r3, [r4, #0]
   d6b96:	4620      	mov	r0, r4
   d6b98:	699b      	ldr	r3, [r3, #24]
   d6b9a:	4798      	blx	r3
    if (c >= 0) return c;
   d6b9c:	2800      	cmp	r0, #0
   d6b9e:	da08      	bge.n	d6bb2 <_ZN6Stream9timedPeekEv+0x28>
   d6ba0:	f7ff fa34 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d6ba4:	68e3      	ldr	r3, [r4, #12]
   d6ba6:	1ac0      	subs	r0, r0, r3
   d6ba8:	68a3      	ldr	r3, [r4, #8]
   d6baa:	4298      	cmp	r0, r3
   d6bac:	d3f2      	bcc.n	d6b94 <_ZN6Stream9timedPeekEv+0xa>
  return -1;     // -1 indicates timeout
   d6bae:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6bb2:	bd10      	pop	{r4, pc}

000d6bb4 <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
   d6bb4:	b510      	push	{r4, lr}
   d6bb6:	4604      	mov	r4, r0
  int c = -1;
  while (1) {
    c = timedPeek();
   d6bb8:	4620      	mov	r0, r4
   d6bba:	f7ff ffe6 	bl	d6b8a <_ZN6Stream9timedPeekEv>
    // timeout
    if ((c < 0) || (c == '-') || (c >= '0' && c <= '9'))
   d6bbe:	2800      	cmp	r0, #0
   d6bc0:	db0a      	blt.n	d6bd8 <_ZN6Stream13peekNextDigitEv+0x24>
   d6bc2:	282d      	cmp	r0, #45	; 0x2d
   d6bc4:	d008      	beq.n	d6bd8 <_ZN6Stream13peekNextDigitEv+0x24>
   d6bc6:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6bca:	2b09      	cmp	r3, #9
   d6bcc:	d904      	bls.n	d6bd8 <_ZN6Stream13peekNextDigitEv+0x24>
    {
        break;
    }
    read();  // discard non-numeric
   d6bce:	6823      	ldr	r3, [r4, #0]
   d6bd0:	4620      	mov	r0, r4
   d6bd2:	695b      	ldr	r3, [r3, #20]
   d6bd4:	4798      	blx	r3
    c = timedPeek();
   d6bd6:	e7ef      	b.n	d6bb8 <_ZN6Stream13peekNextDigitEv+0x4>
  }
  return c;
}
   d6bd8:	bd10      	pop	{r4, pc}

000d6bda <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
   d6bda:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6bde:	469b      	mov	fp, r3
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
   d6be0:	780b      	ldrb	r3, [r1, #0]
{
   d6be2:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   d6be6:	4681      	mov	r9, r0
   d6be8:	460f      	mov	r7, r1
   d6bea:	4692      	mov	sl, r2
  if( *target == 0)
   d6bec:	b9fb      	cbnz	r3, d6c2e <_ZN6Stream9findUntilEPcjS0_j+0x54>
    return true;   // return true if target is a null string
   d6bee:	2001      	movs	r0, #1
    }
    else
      termIndex = 0;
  }
  return false;
}
   d6bf0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      termIndex = 0;
   d6bf4:	2400      	movs	r4, #0
  while( (c = timedRead()) > 0){
   d6bf6:	4648      	mov	r0, r9
   d6bf8:	f7ff ffb2 	bl	d6b60 <_ZN6Stream9timedReadEv>
   d6bfc:	1e06      	subs	r6, r0, #0
   d6bfe:	dd14      	ble.n	d6c2a <_ZN6Stream9findUntilEPcjS0_j+0x50>
    if(c != target[index])
   d6c00:	5d7b      	ldrb	r3, [r7, r5]
   d6c02:	429e      	cmp	r6, r3
   d6c04:	d004      	beq.n	d6c10 <_ZN6Stream9findUntilEPcjS0_j+0x36>
    if( c == target[index]){
   d6c06:	783b      	ldrb	r3, [r7, #0]
   d6c08:	429e      	cmp	r6, r3
      index = 0; // reset index if any char does not match
   d6c0a:	f04f 0500 	mov.w	r5, #0
    if( c == target[index]){
   d6c0e:	d102      	bne.n	d6c16 <_ZN6Stream9findUntilEPcjS0_j+0x3c>
      if(++index >= targetLen){ // return true if all chars in the target match
   d6c10:	3501      	adds	r5, #1
   d6c12:	45aa      	cmp	sl, r5
   d6c14:	d9eb      	bls.n	d6bee <_ZN6Stream9findUntilEPcjS0_j+0x14>
    if(termLen > 0 && c == terminator[termIndex]){
   d6c16:	f1b8 0f00 	cmp.w	r8, #0
   d6c1a:	d0eb      	beq.n	d6bf4 <_ZN6Stream9findUntilEPcjS0_j+0x1a>
   d6c1c:	f81b 3004 	ldrb.w	r3, [fp, r4]
   d6c20:	429e      	cmp	r6, r3
   d6c22:	d1e7      	bne.n	d6bf4 <_ZN6Stream9findUntilEPcjS0_j+0x1a>
      if(++termIndex >= termLen)
   d6c24:	3401      	adds	r4, #1
   d6c26:	45a0      	cmp	r8, r4
   d6c28:	d8e5      	bhi.n	d6bf6 <_ZN6Stream9findUntilEPcjS0_j+0x1c>
  return false;
   d6c2a:	2000      	movs	r0, #0
   d6c2c:	e7e0      	b.n	d6bf0 <_ZN6Stream9findUntilEPcjS0_j+0x16>
  size_t termIndex = 0;
   d6c2e:	2400      	movs	r4, #0
  size_t index = 0;  // maximum target string length is 64k bytes!
   d6c30:	4625      	mov	r5, r4
   d6c32:	e7e0      	b.n	d6bf6 <_ZN6Stream9findUntilEPcjS0_j+0x1c>

000d6c34 <_ZN6Stream9findUntilEPcS0_>:
{
   d6c34:	b530      	push	{r4, r5, lr}
   d6c36:	b085      	sub	sp, #20
   d6c38:	4605      	mov	r5, r0
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   d6c3a:	4608      	mov	r0, r1
{
   d6c3c:	4614      	mov	r4, r2
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   d6c3e:	9103      	str	r1, [sp, #12]
   d6c40:	f003 fad9 	bl	da1f6 <strlen>
   d6c44:	9002      	str	r0, [sp, #8]
   d6c46:	4620      	mov	r0, r4
   d6c48:	f003 fad5 	bl	da1f6 <strlen>
   d6c4c:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   d6c50:	9000      	str	r0, [sp, #0]
   d6c52:	4623      	mov	r3, r4
   d6c54:	4628      	mov	r0, r5
   d6c56:	f7ff ffc0 	bl	d6bda <_ZN6Stream9findUntilEPcjS0_j>
}
   d6c5a:	b005      	add	sp, #20
   d6c5c:	bd30      	pop	{r4, r5, pc}

000d6c5e <_ZN6Stream4findEPc>:
  return findUntil(target, NULL);
   d6c5e:	2200      	movs	r2, #0
   d6c60:	f7ff bfe8 	b.w	d6c34 <_ZN6Stream9findUntilEPcS0_>

000d6c64 <_ZN6Stream8parseIntEc>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
   d6c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c68:	4605      	mov	r5, r0
   d6c6a:	460e      	mov	r6, r1
  bool isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
   d6c6c:	f7ff ffa2 	bl	d6bb4 <_ZN6Stream13peekNextDigitEv>
  // ignore non numeric leading characters
  if(c < 0)
   d6c70:	2800      	cmp	r0, #0
    return 0; // zero returned if timeout
   d6c72:	f04f 0400 	mov.w	r4, #0
  if(c < 0)
   d6c76:	db1c      	blt.n	d6cb2 <_ZN6Stream8parseIntEc+0x4e>
  bool isNegative = false;
   d6c78:	4627      	mov	r7, r4
    if(c == skipChar) {
      // ignore this charactor
    } else if(c == '-') {
      isNegative = true;
    } else if(c >= '0' && c <= '9') {        // is c a digit?
      value = value * 10 + c - '0';
   d6c7a:	f04f 080a 	mov.w	r8, #10
    if(c == skipChar) {
   d6c7e:	4286      	cmp	r6, r0
   d6c80:	d008      	beq.n	d6c94 <_ZN6Stream8parseIntEc+0x30>
    } else if(c == '-') {
   d6c82:	282d      	cmp	r0, #45	; 0x2d
   d6c84:	d018      	beq.n	d6cb8 <_ZN6Stream8parseIntEc+0x54>
    } else if(c >= '0' && c <= '9') {        // is c a digit?
   d6c86:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6c8a:	2b09      	cmp	r3, #9
   d6c8c:	d802      	bhi.n	d6c94 <_ZN6Stream8parseIntEc+0x30>
      value = value * 10 + c - '0';
   d6c8e:	fb08 0404 	mla	r4, r8, r4, r0
   d6c92:	3c30      	subs	r4, #48	; 0x30
    }
    read();  // consume the character we got with peek
   d6c94:	682b      	ldr	r3, [r5, #0]
   d6c96:	4628      	mov	r0, r5
   d6c98:	695b      	ldr	r3, [r3, #20]
   d6c9a:	4798      	blx	r3
    c = timedPeek();
   d6c9c:	4628      	mov	r0, r5
   d6c9e:	f7ff ff74 	bl	d6b8a <_ZN6Stream9timedPeekEv>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
   d6ca2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6ca6:	2b09      	cmp	r3, #9
   d6ca8:	d9e9      	bls.n	d6c7e <_ZN6Stream8parseIntEc+0x1a>
   d6caa:	4286      	cmp	r6, r0
   d6cac:	d0f2      	beq.n	d6c94 <_ZN6Stream8parseIntEc+0x30>

  if(isNegative)
   d6cae:	b107      	cbz	r7, d6cb2 <_ZN6Stream8parseIntEc+0x4e>
    value = -value;
   d6cb0:	4264      	negs	r4, r4
  return value;
}
   d6cb2:	4620      	mov	r0, r4
   d6cb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      isNegative = true;
   d6cb8:	2701      	movs	r7, #1
   d6cba:	e7eb      	b.n	d6c94 <_ZN6Stream8parseIntEc+0x30>

000d6cbc <_ZN6Stream8parseIntEv>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
   d6cbc:	2101      	movs	r1, #1
   d6cbe:	f7ff bfd1 	b.w	d6c64 <_ZN6Stream8parseIntEc>
	...

000d6cc4 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   d6cc4:	b538      	push	{r3, r4, r5, lr}
   d6cc6:	460d      	mov	r5, r1
  String ret;
   d6cc8:	4907      	ldr	r1, [pc, #28]	; (d6ce8 <_ZN6Stream10readStringEv+0x24>)
{
   d6cca:	4604      	mov	r4, r0
  String ret;
   d6ccc:	f7ff fdcf 	bl	d686e <_ZN6StringC1EPKc>
  int c = timedRead();
   d6cd0:	4628      	mov	r0, r5
   d6cd2:	f7ff ff45 	bl	d6b60 <_ZN6Stream9timedReadEv>
  while (c >= 0)
   d6cd6:	2800      	cmp	r0, #0
   d6cd8:	db04      	blt.n	d6ce4 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d6cda:	b2c1      	uxtb	r1, r0
   d6cdc:	4620      	mov	r0, r4
   d6cde:	f7ff fe6f 	bl	d69c0 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   d6ce2:	e7f5      	b.n	d6cd0 <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   d6ce4:	4620      	mov	r0, r4
   d6ce6:	bd38      	pop	{r3, r4, r5, pc}
   d6ce8:	000da452 	.word	0x000da452

000d6cec <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6cec:	4b01      	ldr	r3, [pc, #4]	; (d6cf4 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6cee:	4a02      	ldr	r2, [pc, #8]	; (d6cf8 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6cf0:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6cf2:	4770      	bx	lr
   d6cf4:	2003e66c 	.word	0x2003e66c
   d6cf8:	000da550 	.word	0x000da550

000d6cfc <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6cfc:	4b02      	ldr	r3, [pc, #8]	; (d6d08 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6cfe:	681a      	ldr	r2, [r3, #0]
   d6d00:	4b02      	ldr	r3, [pc, #8]	; (d6d0c <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6d02:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6d04:	4770      	bx	lr
   d6d06:	bf00      	nop
   d6d08:	2003e398 	.word	0x2003e398
   d6d0c:	2003e670 	.word	0x2003e670

000d6d10 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6d10:	2100      	movs	r1, #0
   d6d12:	f7ff bafb 	b.w	d630c <system_delay_ms>

000d6d16 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6d16:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6d18:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6d1a:	4604      	mov	r4, r0
      if (_M_manager)
   d6d1c:	b113      	cbz	r3, d6d24 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6d1e:	2203      	movs	r2, #3
   d6d20:	4601      	mov	r1, r0
   d6d22:	4798      	blx	r3
    }
   d6d24:	4620      	mov	r0, r4
   d6d26:	bd10      	pop	{r4, pc}

000d6d28 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6d28:	b510      	push	{r4, lr}
   d6d2a:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6d2c:	f7ff fff3 	bl	d6d16 <_ZNSt14_Function_baseD1Ev>
   d6d30:	4620      	mov	r0, r4
   d6d32:	bd10      	pop	{r4, pc}

000d6d34 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6d34:	4803      	ldr	r0, [pc, #12]	; (d6d44 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6d36:	4a04      	ldr	r2, [pc, #16]	; (d6d48 <_GLOBAL__sub_I_RGB+0x14>)
   d6d38:	4904      	ldr	r1, [pc, #16]	; (d6d4c <_GLOBAL__sub_I_RGB+0x18>)
   d6d3a:	2300      	movs	r3, #0
   d6d3c:	6083      	str	r3, [r0, #8]
   d6d3e:	f000 bf03 	b.w	d7b48 <__aeabi_atexit>
   d6d42:	bf00      	nop
   d6d44:	2003e674 	.word	0x2003e674
   d6d48:	2003e404 	.word	0x2003e404
   d6d4c:	000d6d29 	.word	0x000d6d29

000d6d50 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6d50:	4b01      	ldr	r3, [pc, #4]	; (d6d58 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6d52:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6d54:	4770      	bx	lr
   d6d56:	bf00      	nop
   d6d58:	2003e3a0 	.word	0x2003e3a0

000d6d5c <serialEventRun>:
{
   d6d5c:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6d5e:	4b0b      	ldr	r3, [pc, #44]	; (d6d8c <serialEventRun+0x30>)
   d6d60:	b143      	cbz	r3, d6d74 <serialEventRun+0x18>
   d6d62:	f000 f96b 	bl	d703c <_Z16_fetch_usbserialv>
   d6d66:	6803      	ldr	r3, [r0, #0]
   d6d68:	691b      	ldr	r3, [r3, #16]
   d6d6a:	4798      	blx	r3
   d6d6c:	2800      	cmp	r0, #0
   d6d6e:	dd01      	ble.n	d6d74 <serialEventRun+0x18>
        serialEvent();
   d6d70:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6d74:	4b06      	ldr	r3, [pc, #24]	; (d6d90 <serialEventRun+0x34>)
   d6d76:	b143      	cbz	r3, d6d8a <serialEventRun+0x2e>
   d6d78:	f000 f9de 	bl	d7138 <_Z22__fetch_global_Serial1v>
   d6d7c:	6803      	ldr	r3, [r0, #0]
   d6d7e:	691b      	ldr	r3, [r3, #16]
   d6d80:	4798      	blx	r3
   d6d82:	2800      	cmp	r0, #0
   d6d84:	dd01      	ble.n	d6d8a <serialEventRun+0x2e>
        serialEvent1();
   d6d86:	f3af 8000 	nop.w
}
   d6d8a:	bd08      	pop	{r3, pc}
	...

000d6d94 <_post_loop>:
{
   d6d94:	b508      	push	{r3, lr}
	serialEventRun();
   d6d96:	f7ff ffe1 	bl	d6d5c <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6d9a:	f7ff f937 	bl	d600c <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6d9e:	4b01      	ldr	r3, [pc, #4]	; (d6da4 <_post_loop+0x10>)
   d6da0:	6018      	str	r0, [r3, #0]
}
   d6da2:	bd08      	pop	{r3, pc}
   d6da4:	2003e7d4 	.word	0x2003e7d4

000d6da8 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6da8:	4802      	ldr	r0, [pc, #8]	; (d6db4 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6daa:	4a03      	ldr	r2, [pc, #12]	; (d6db8 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6dac:	4903      	ldr	r1, [pc, #12]	; (d6dbc <_Z33system_initialize_user_backup_ramv+0x14>)
   d6dae:	1a12      	subs	r2, r2, r0
   d6db0:	f003 b9c6 	b.w	da140 <memcpy>
   d6db4:	2003f400 	.word	0x2003f400
   d6db8:	2003f404 	.word	0x2003f404
   d6dbc:	000da948 	.word	0x000da948

000d6dc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6dc0:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6dc2:	2300      	movs	r3, #0
   d6dc4:	9300      	str	r3, [sp, #0]
   d6dc6:	461a      	mov	r2, r3
   d6dc8:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6dcc:	f7ff fab0 	bl	d6330 <system_ctrl_set_result>
}
   d6dd0:	b003      	add	sp, #12
   d6dd2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6dd8 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6dd8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6dda:	8843      	ldrh	r3, [r0, #2]
   d6ddc:	2b0a      	cmp	r3, #10
   d6dde:	d008      	beq.n	d6df2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6de0:	2b50      	cmp	r3, #80	; 0x50
   d6de2:	d10b      	bne.n	d6dfc <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6de4:	4b09      	ldr	r3, [pc, #36]	; (d6e0c <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6de6:	681b      	ldr	r3, [r3, #0]
   d6de8:	b14b      	cbz	r3, d6dfe <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6dea:	b003      	add	sp, #12
   d6dec:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6df0:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6df2:	f7ff ffe5 	bl	d6dc0 <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6df6:	b003      	add	sp, #12
   d6df8:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6dfc:	2300      	movs	r3, #0
   d6dfe:	9300      	str	r3, [sp, #0]
   d6e00:	461a      	mov	r2, r3
   d6e02:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6e06:	f7ff fa93 	bl	d6330 <system_ctrl_set_result>
}
   d6e0a:	e7f4      	b.n	d6df6 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6e0c:	2003e688 	.word	0x2003e688

000d6e10 <module_user_init_hook>:
{
   d6e10:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6e12:	4c12      	ldr	r4, [pc, #72]	; (d6e5c <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6e14:	4812      	ldr	r0, [pc, #72]	; (d6e60 <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6e16:	4d13      	ldr	r5, [pc, #76]	; (d6e64 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6e18:	2100      	movs	r1, #0
   d6e1a:	f7ff fb1b 	bl	d6454 <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6e1e:	6823      	ldr	r3, [r4, #0]
   d6e20:	42ab      	cmp	r3, r5
   d6e22:	4b11      	ldr	r3, [pc, #68]	; (d6e68 <module_user_init_hook+0x58>)
   d6e24:	bf0c      	ite	eq
   d6e26:	2201      	moveq	r2, #1
   d6e28:	2200      	movne	r2, #0
   d6e2a:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6e2c:	d002      	beq.n	d6e34 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6e2e:	f7ff ffbb 	bl	d6da8 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6e32:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6e34:	f7ff f8e2 	bl	d5ffc <HAL_RNG_GetRandomNumber>
   d6e38:	4604      	mov	r4, r0
    srand(seed);
   d6e3a:	f003 f997 	bl	da16c <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6e3e:	4b0b      	ldr	r3, [pc, #44]	; (d6e6c <module_user_init_hook+0x5c>)
   d6e40:	b113      	cbz	r3, d6e48 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6e42:	4620      	mov	r0, r4
   d6e44:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6e48:	2100      	movs	r1, #0
   d6e4a:	4808      	ldr	r0, [pc, #32]	; (d6e6c <module_user_init_hook+0x5c>)
   d6e4c:	f7ff faca 	bl	d63e4 <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6e50:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e54:	4806      	ldr	r0, [pc, #24]	; (d6e70 <module_user_init_hook+0x60>)
   d6e56:	2100      	movs	r1, #0
   d6e58:	f7ff ba60 	b.w	d631c <system_ctrl_set_app_request_handler>
   d6e5c:	2003f400 	.word	0x2003f400
   d6e60:	000d6d51 	.word	0x000d6d51
   d6e64:	9a271c1e 	.word	0x9a271c1e
   d6e68:	2003e684 	.word	0x2003e684
   d6e6c:	00000000 	.word	0x00000000
   d6e70:	000d6dd9 	.word	0x000d6dd9

000d6e74 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6e74:	4770      	bx	lr

000d6e76 <_ZN9IPAddressD0Ev>:
   d6e76:	b510      	push	{r4, lr}
   d6e78:	2118      	movs	r1, #24
   d6e7a:	4604      	mov	r4, r0
   d6e7c:	f000 fe69 	bl	d7b52 <_ZdlPvj>
   d6e80:	4620      	mov	r0, r4
   d6e82:	bd10      	pop	{r4, pc}

000d6e84 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6e84:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6e86:	7d03      	ldrb	r3, [r0, #20]
   d6e88:	2b06      	cmp	r3, #6
{
   d6e8a:	b08d      	sub	sp, #52	; 0x34
   d6e8c:	460e      	mov	r6, r1
   d6e8e:	f100 0704 	add.w	r7, r0, #4
   d6e92:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6e96:	d012      	beq.n	d6ebe <_ZNK9IPAddress7printToER5Print+0x3a>
   d6e98:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6e9c:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6ea0:	220a      	movs	r2, #10
   d6ea2:	4630      	mov	r0, r6
   d6ea4:	f7ff fe0d 	bl	d6ac2 <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6ea8:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6eaa:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6eac:	d019      	beq.n	d6ee2 <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6eae:	2c00      	cmp	r4, #0
   d6eb0:	d0f4      	beq.n	d6e9c <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6eb2:	212e      	movs	r1, #46	; 0x2e
   d6eb4:	4630      	mov	r0, r6
   d6eb6:	f7ff fdf5 	bl	d6aa4 <_ZN5Print5printEc>
   d6eba:	4404      	add	r4, r0
   d6ebc:	e7ee      	b.n	d6e9c <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6ebe:	232f      	movs	r3, #47	; 0x2f
   d6ec0:	466a      	mov	r2, sp
   d6ec2:	4639      	mov	r1, r7
   d6ec4:	200a      	movs	r0, #10
		buf[0] = 0;
   d6ec6:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6eca:	f7ff f8b7 	bl	d603c <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6ece:	4668      	mov	r0, sp
   d6ed0:	f003 f991 	bl	da1f6 <strlen>
   d6ed4:	6833      	ldr	r3, [r6, #0]
   d6ed6:	4602      	mov	r2, r0
   d6ed8:	68db      	ldr	r3, [r3, #12]
   d6eda:	4669      	mov	r1, sp
   d6edc:	4630      	mov	r0, r6
   d6ede:	4798      	blx	r3
   d6ee0:	4604      	mov	r4, r0
    }
    return n;
}
   d6ee2:	4620      	mov	r0, r4
   d6ee4:	b00d      	add	sp, #52	; 0x34
   d6ee6:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6ee8 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6ee8:	b510      	push	{r4, lr}
   d6eea:	4b05      	ldr	r3, [pc, #20]	; (d6f00 <_ZN9IPAddressC1Ev+0x18>)
   d6eec:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6eee:	2211      	movs	r2, #17
   d6ef0:	f840 3b04 	str.w	r3, [r0], #4
   d6ef4:	2100      	movs	r1, #0
   d6ef6:	f003 f931 	bl	da15c <memset>
}
   d6efa:	4620      	mov	r0, r4
   d6efc:	bd10      	pop	{r4, pc}
   d6efe:	bf00      	nop
   d6f00:	000da578 	.word	0x000da578

000d6f04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6f04:	4603      	mov	r3, r0
   d6f06:	4a07      	ldr	r2, [pc, #28]	; (d6f24 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6f08:	b510      	push	{r4, lr}
   d6f0a:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6f0e:	f101 0210 	add.w	r2, r1, #16
   d6f12:	f851 4b04 	ldr.w	r4, [r1], #4
   d6f16:	f843 4b04 	str.w	r4, [r3], #4
   d6f1a:	4291      	cmp	r1, r2
   d6f1c:	d1f9      	bne.n	d6f12 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6f1e:	780a      	ldrb	r2, [r1, #0]
   d6f20:	701a      	strb	r2, [r3, #0]
}
   d6f22:	bd10      	pop	{r4, pc}
   d6f24:	000da578 	.word	0x000da578

000d6f28 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d6f28:	7d03      	ldrb	r3, [r0, #20]
   d6f2a:	2b04      	cmp	r3, #4
   d6f2c:	d104      	bne.n	d6f38 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d6f2e:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6f30:	3800      	subs	r0, #0
   d6f32:	bf18      	it	ne
   d6f34:	2001      	movne	r0, #1
   d6f36:	4770      	bx	lr
    } else if (version() == 6) {
   d6f38:	2b06      	cmp	r3, #6
   d6f3a:	d107      	bne.n	d6f4c <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6f3c:	6843      	ldr	r3, [r0, #4]
   d6f3e:	b93b      	cbnz	r3, d6f50 <_ZNK9IPAddresscvbEv+0x28>
   d6f40:	6883      	ldr	r3, [r0, #8]
   d6f42:	b92b      	cbnz	r3, d6f50 <_ZNK9IPAddresscvbEv+0x28>
   d6f44:	68c3      	ldr	r3, [r0, #12]
   d6f46:	b91b      	cbnz	r3, d6f50 <_ZNK9IPAddresscvbEv+0x28>
   d6f48:	6900      	ldr	r0, [r0, #16]
   d6f4a:	e7f1      	b.n	d6f30 <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d6f4c:	2000      	movs	r0, #0
   d6f4e:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6f50:	2001      	movs	r0, #1
}
   d6f52:	4770      	bx	lr

000d6f54 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6f54:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6f56:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6f5a:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6f5e:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6f62:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6f66:	2304      	movs	r3, #4
   d6f68:	6041      	str	r1, [r0, #4]
   d6f6a:	7503      	strb	r3, [r0, #20]
}
   d6f6c:	bd10      	pop	{r4, pc}

000d6f6e <_ZN9IPAddressaSEPKh>:
{
   d6f6e:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6f70:	78cb      	ldrb	r3, [r1, #3]
   d6f72:	9300      	str	r3, [sp, #0]
   d6f74:	788b      	ldrb	r3, [r1, #2]
   d6f76:	784a      	ldrb	r2, [r1, #1]
   d6f78:	7809      	ldrb	r1, [r1, #0]
   d6f7a:	f7ff ffeb 	bl	d6f54 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6f7e:	b002      	add	sp, #8
   d6f80:	bd10      	pop	{r4, pc}

000d6f82 <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6f82:	7441      	strb	r1, [r0, #17]
}
   d6f84:	4770      	bx	lr

000d6f86 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6f86:	4770      	bx	lr

000d6f88 <_ZN9USBSerial4readEv>:
{
   d6f88:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6f8a:	2100      	movs	r1, #0
   d6f8c:	7c00      	ldrb	r0, [r0, #16]
   d6f8e:	f7ff f995 	bl	d62bc <HAL_USB_USART_Receive_Data>
}
   d6f92:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6f96:	bd08      	pop	{r3, pc}

000d6f98 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6f98:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6f9a:	2101      	movs	r1, #1
   d6f9c:	7c00      	ldrb	r0, [r0, #16]
   d6f9e:	f7ff f98d 	bl	d62bc <HAL_USB_USART_Receive_Data>
}
   d6fa2:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6fa6:	bd08      	pop	{r3, pc}

000d6fa8 <_ZN9USBSerial17availableForWriteEv>:
{
   d6fa8:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6faa:	7c00      	ldrb	r0, [r0, #16]
   d6fac:	f7ff f97e 	bl	d62ac <HAL_USB_USART_Available_Data_For_Write>
}
   d6fb0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6fb4:	bd08      	pop	{r3, pc}

000d6fb6 <_ZN9USBSerial9availableEv>:
{
   d6fb6:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6fb8:	7c00      	ldrb	r0, [r0, #16]
   d6fba:	f7ff f96f 	bl	d629c <HAL_USB_USART_Available_Data>
}
   d6fbe:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6fc2:	bd08      	pop	{r3, pc}

000d6fc4 <_ZN9USBSerial5writeEh>:
{
   d6fc4:	b513      	push	{r0, r1, r4, lr}
   d6fc6:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6fc8:	7c00      	ldrb	r0, [r0, #16]
{
   d6fca:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6fcc:	f7ff f96e 	bl	d62ac <HAL_USB_USART_Available_Data_For_Write>
   d6fd0:	2800      	cmp	r0, #0
   d6fd2:	9901      	ldr	r1, [sp, #4]
   d6fd4:	dc01      	bgt.n	d6fda <_ZN9USBSerial5writeEh+0x16>
   d6fd6:	7c60      	ldrb	r0, [r4, #17]
   d6fd8:	b120      	cbz	r0, d6fe4 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d6fda:	7c20      	ldrb	r0, [r4, #16]
   d6fdc:	f7ff f976 	bl	d62cc <HAL_USB_USART_Send_Data>
   d6fe0:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d6fe4:	b002      	add	sp, #8
   d6fe6:	bd10      	pop	{r4, pc}

000d6fe8 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d6fe8:	7c00      	ldrb	r0, [r0, #16]
   d6fea:	f7ff b977 	b.w	d62dc <HAL_USB_USART_Flush_Data>

000d6fee <_ZN9USBSerialD0Ev>:
   d6fee:	b510      	push	{r4, lr}
   d6ff0:	2114      	movs	r1, #20
   d6ff2:	4604      	mov	r4, r0
   d6ff4:	f000 fdad 	bl	d7b52 <_ZdlPvj>
   d6ff8:	4620      	mov	r0, r4
   d6ffa:	bd10      	pop	{r4, pc}

000d6ffc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d6ffc:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d6ffe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7002:	4604      	mov	r4, r0
   d7004:	4608      	mov	r0, r1
   d7006:	2100      	movs	r1, #0
   d7008:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d700c:	4b04      	ldr	r3, [pc, #16]	; (d7020 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d700e:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d7010:	2301      	movs	r3, #1
  _serial = serial;
   d7012:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7014:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7016:	4611      	mov	r1, r2
   d7018:	f7ff f930 	bl	d627c <HAL_USB_USART_Init>
}
   d701c:	4620      	mov	r0, r4
   d701e:	bd10      	pop	{r4, pc}
   d7020:	000da58c 	.word	0x000da58c

000d7024 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7024:	7c00      	ldrb	r0, [r0, #16]
   d7026:	2200      	movs	r2, #0
   d7028:	f7ff b930 	b.w	d628c <HAL_USB_USART_Begin>

000d702c <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d702c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d702e:	2214      	movs	r2, #20
{
   d7030:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d7032:	2100      	movs	r1, #0
   d7034:	f003 f892 	bl	da15c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7038:	4620      	mov	r0, r4
   d703a:	bd10      	pop	{r4, pc}

000d703c <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d703c:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d703e:	4c10      	ldr	r4, [pc, #64]	; (d7080 <_Z16_fetch_usbserialv+0x44>)
{
   d7040:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d7042:	a803      	add	r0, sp, #12
   d7044:	f7ff fff2 	bl	d702c <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7048:	7821      	ldrb	r1, [r4, #0]
   d704a:	f3bf 8f5b 	dmb	ish
   d704e:	f011 0101 	ands.w	r1, r1, #1
   d7052:	d111      	bne.n	d7078 <_Z16_fetch_usbserialv+0x3c>
   d7054:	4620      	mov	r0, r4
   d7056:	9101      	str	r1, [sp, #4]
   d7058:	f7fd f823 	bl	d40a2 <__cxa_guard_acquire>
   d705c:	9901      	ldr	r1, [sp, #4]
   d705e:	b158      	cbz	r0, d7078 <_Z16_fetch_usbserialv+0x3c>
   d7060:	aa03      	add	r2, sp, #12
   d7062:	4808      	ldr	r0, [pc, #32]	; (d7084 <_Z16_fetch_usbserialv+0x48>)
   d7064:	f7ff ffca 	bl	d6ffc <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7068:	4620      	mov	r0, r4
   d706a:	f7fd f81f 	bl	d40ac <__cxa_guard_release>
   d706e:	4a06      	ldr	r2, [pc, #24]	; (d7088 <_Z16_fetch_usbserialv+0x4c>)
   d7070:	4906      	ldr	r1, [pc, #24]	; (d708c <_Z16_fetch_usbserialv+0x50>)
   d7072:	4804      	ldr	r0, [pc, #16]	; (d7084 <_Z16_fetch_usbserialv+0x48>)
   d7074:	f000 fd68 	bl	d7b48 <__aeabi_atexit>
	return _usbserial;
}
   d7078:	4802      	ldr	r0, [pc, #8]	; (d7084 <_Z16_fetch_usbserialv+0x48>)
   d707a:	b008      	add	sp, #32
   d707c:	bd10      	pop	{r4, pc}
   d707e:	bf00      	nop
   d7080:	2003e68c 	.word	0x2003e68c
   d7084:	2003e690 	.word	0x2003e690
   d7088:	2003e404 	.word	0x2003e404
   d708c:	000d6f87 	.word	0x000d6f87

000d7090 <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d7090:	4770      	bx	lr

000d7092 <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d7092:	7441      	strb	r1, [r0, #17]
}
   d7094:	4770      	bx	lr

000d7096 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d7096:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d7098:	7c00      	ldrb	r0, [r0, #16]
   d709a:	f7ff f81f 	bl	d60dc <hal_usart_available_data_for_write>
}
   d709e:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d70a2:	bd08      	pop	{r3, pc}

000d70a4 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d70a4:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d70a6:	7c00      	ldrb	r0, [r0, #16]
   d70a8:	f7fe fff0 	bl	d608c <hal_usart_available>
}
   d70ac:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d70b0:	bd08      	pop	{r3, pc}

000d70b2 <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d70b2:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d70b4:	7c00      	ldrb	r0, [r0, #16]
   d70b6:	f7fe fff9 	bl	d60ac <hal_usart_peek>
}
   d70ba:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d70be:	bd08      	pop	{r3, pc}

000d70c0 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d70c0:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d70c2:	7c00      	ldrb	r0, [r0, #16]
   d70c4:	f7fe ffea 	bl	d609c <hal_usart_read>
}
   d70c8:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d70cc:	bd08      	pop	{r3, pc}

000d70ce <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d70ce:	7c00      	ldrb	r0, [r0, #16]
   d70d0:	f7fe bff4 	b.w	d60bc <hal_usart_flush>

000d70d4 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d70d4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d70d6:	7c45      	ldrb	r5, [r0, #17]
{
   d70d8:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d70da:	b12d      	cbz	r5, d70e8 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d70dc:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d70de:	b003      	add	sp, #12
   d70e0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d70e4:	f7fe bfca 	b.w	d607c <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d70e8:	7c00      	ldrb	r0, [r0, #16]
   d70ea:	9101      	str	r1, [sp, #4]
   d70ec:	f7fe fff6 	bl	d60dc <hal_usart_available_data_for_write>
   d70f0:	2800      	cmp	r0, #0
   d70f2:	9901      	ldr	r1, [sp, #4]
   d70f4:	dcf2      	bgt.n	d70dc <_ZN11USARTSerial5writeEh+0x8>
}
   d70f6:	4628      	mov	r0, r5
   d70f8:	b003      	add	sp, #12
   d70fa:	bd30      	pop	{r4, r5, pc}

000d70fc <_ZN11USARTSerialD0Ev>:
   d70fc:	b510      	push	{r4, lr}
   d70fe:	2114      	movs	r1, #20
   d7100:	4604      	mov	r4, r0
   d7102:	f000 fd26 	bl	d7b52 <_ZdlPvj>
   d7106:	4620      	mov	r0, r4
   d7108:	bd10      	pop	{r4, pc}
	...

000d710c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d710c:	b510      	push	{r4, lr}
   d710e:	f04f 0c00 	mov.w	ip, #0
   d7112:	4604      	mov	r4, r0
   d7114:	4608      	mov	r0, r1
   d7116:	4611      	mov	r1, r2
   d7118:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d711c:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d7120:	4a04      	ldr	r2, [pc, #16]	; (d7134 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d7122:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7124:	2201      	movs	r2, #1
  _serial = serial;
   d7126:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7128:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d712a:	461a      	mov	r2, r3
   d712c:	f7fe ff9e 	bl	d606c <hal_usart_init>
}
   d7130:	4620      	mov	r0, r4
   d7132:	bd10      	pop	{r4, pc}
   d7134:	000da5bc 	.word	0x000da5bc

000d7138 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7138:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d713a:	4c0e      	ldr	r4, [pc, #56]	; (d7174 <_Z22__fetch_global_Serial1v+0x3c>)
   d713c:	7821      	ldrb	r1, [r4, #0]
   d713e:	f3bf 8f5b 	dmb	ish
   d7142:	f011 0101 	ands.w	r1, r1, #1
   d7146:	d112      	bne.n	d716e <_Z22__fetch_global_Serial1v+0x36>
   d7148:	4620      	mov	r0, r4
   d714a:	9101      	str	r1, [sp, #4]
   d714c:	f7fc ffa9 	bl	d40a2 <__cxa_guard_acquire>
   d7150:	9901      	ldr	r1, [sp, #4]
   d7152:	b160      	cbz	r0, d716e <_Z22__fetch_global_Serial1v+0x36>
   d7154:	4a08      	ldr	r2, [pc, #32]	; (d7178 <_Z22__fetch_global_Serial1v+0x40>)
   d7156:	4b09      	ldr	r3, [pc, #36]	; (d717c <_Z22__fetch_global_Serial1v+0x44>)
   d7158:	4809      	ldr	r0, [pc, #36]	; (d7180 <_Z22__fetch_global_Serial1v+0x48>)
   d715a:	f7ff ffd7 	bl	d710c <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d715e:	4620      	mov	r0, r4
   d7160:	f7fc ffa4 	bl	d40ac <__cxa_guard_release>
   d7164:	4a07      	ldr	r2, [pc, #28]	; (d7184 <_Z22__fetch_global_Serial1v+0x4c>)
   d7166:	4908      	ldr	r1, [pc, #32]	; (d7188 <_Z22__fetch_global_Serial1v+0x50>)
   d7168:	4805      	ldr	r0, [pc, #20]	; (d7180 <_Z22__fetch_global_Serial1v+0x48>)
   d716a:	f000 fced 	bl	d7b48 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d716e:	4804      	ldr	r0, [pc, #16]	; (d7180 <_Z22__fetch_global_Serial1v+0x48>)
   d7170:	b002      	add	sp, #8
   d7172:	bd10      	pop	{r4, pc}
   d7174:	2003e6a4 	.word	0x2003e6a4
   d7178:	2003e6a8 	.word	0x2003e6a8
   d717c:	2003e72c 	.word	0x2003e72c
   d7180:	2003e7b0 	.word	0x2003e7b0
   d7184:	2003e404 	.word	0x2003e404
   d7188:	000d7091 	.word	0x000d7091

000d718c <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d718c:	4770      	bx	lr

000d718e <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d718e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7190:	4606      	mov	r6, r0
   d7192:	4615      	mov	r5, r2
   d7194:	460c      	mov	r4, r1
   d7196:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d7198:	42bc      	cmp	r4, r7
   d719a:	d006      	beq.n	d71aa <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d719c:	6833      	ldr	r3, [r6, #0]
   d719e:	f814 1b01 	ldrb.w	r1, [r4], #1
   d71a2:	689b      	ldr	r3, [r3, #8]
   d71a4:	4630      	mov	r0, r6
   d71a6:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d71a8:	e7f6      	b.n	d7198 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d71aa:	4628      	mov	r0, r5
   d71ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d71ae <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d71ae:	7c00      	ldrb	r0, [r0, #16]
   d71b0:	2200      	movs	r2, #0
   d71b2:	f7fe bfb3 	b.w	d611c <hal_i2c_write>

000d71b6 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d71b6:	7c00      	ldrb	r0, [r0, #16]
   d71b8:	2100      	movs	r1, #0
   d71ba:	f7fe bfb7 	b.w	d612c <hal_i2c_available>

000d71be <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d71be:	7c00      	ldrb	r0, [r0, #16]
   d71c0:	2100      	movs	r1, #0
   d71c2:	f7fe bfbb 	b.w	d613c <hal_i2c_read>

000d71c6 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d71c6:	7c00      	ldrb	r0, [r0, #16]
   d71c8:	2100      	movs	r1, #0
   d71ca:	f7fe bfbf 	b.w	d614c <hal_i2c_peek>

000d71ce <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d71ce:	7c00      	ldrb	r0, [r0, #16]
   d71d0:	2100      	movs	r1, #0
   d71d2:	f7fe bfc3 	b.w	d615c <hal_i2c_flush>

000d71d6 <_ZN7TwoWireD0Ev>:
   d71d6:	b510      	push	{r4, lr}
   d71d8:	2114      	movs	r1, #20
   d71da:	4604      	mov	r4, r0
   d71dc:	f000 fcb9 	bl	d7b52 <_ZdlPvj>
   d71e0:	4620      	mov	r0, r4
   d71e2:	bd10      	pop	{r4, pc}

000d71e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d71e4:	b510      	push	{r4, lr}
   d71e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d71ea:	4604      	mov	r4, r0
   d71ec:	4608      	mov	r0, r1
   d71ee:	2100      	movs	r1, #0
   d71f0:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d71f4:	4b03      	ldr	r3, [pc, #12]	; (d7204 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d71f6:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d71f8:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d71fa:	4611      	mov	r1, r2
   d71fc:	f7fe ffbe 	bl	d617c <hal_i2c_init>
}
   d7200:	4620      	mov	r0, r4
   d7202:	bd10      	pop	{r4, pc}
   d7204:	000da5ec 	.word	0x000da5ec

000d7208 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7208:	2300      	movs	r3, #0
   d720a:	7c00      	ldrb	r0, [r0, #16]
   d720c:	461a      	mov	r2, r3
   d720e:	4619      	mov	r1, r3
   d7210:	f7fe bf6c 	b.w	d60ec <hal_i2c_begin>

000d7214 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7214:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7216:	2200      	movs	r2, #0
   d7218:	2314      	movs	r3, #20
   d721a:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d721e:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d7222:	780b      	ldrb	r3, [r1, #0]
   d7224:	f88d 3008 	strb.w	r3, [sp, #8]
   d7228:	684b      	ldr	r3, [r1, #4]
   d722a:	9303      	str	r3, [sp, #12]
   d722c:	68cb      	ldr	r3, [r1, #12]
   d722e:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d7230:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d7232:	7a0b      	ldrb	r3, [r1, #8]
   d7234:	9305      	str	r3, [sp, #20]
   d7236:	a901      	add	r1, sp, #4
   d7238:	f7fe ffa8 	bl	d618c <hal_i2c_request_ex>
}
   d723c:	b007      	add	sp, #28
   d723e:	f85d fb04 	ldr.w	pc, [sp], #4

000d7242 <_ZN7TwoWire11requestFromEhjh>:
{
   d7242:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7244:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7246:	f88d 1000 	strb.w	r1, [sp]
   d724a:	f04f 0164 	mov.w	r1, #100	; 0x64
   d724e:	9103      	str	r1, [sp, #12]
   d7250:	bf18      	it	ne
   d7252:	2301      	movne	r3, #1
   d7254:	4669      	mov	r1, sp
    size_ = size;
   d7256:	9201      	str	r2, [sp, #4]
   d7258:	f88d 3008 	strb.w	r3, [sp, #8]
   d725c:	f7ff ffda 	bl	d7214 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d7260:	b005      	add	sp, #20
   d7262:	f85d fb04 	ldr.w	pc, [sp], #4

000d7266 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d7266:	2301      	movs	r3, #1
   d7268:	f7ff bfeb 	b.w	d7242 <_ZN7TwoWire11requestFromEhjh>

000d726c <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d726c:	7c00      	ldrb	r0, [r0, #16]
   d726e:	2200      	movs	r2, #0
   d7270:	f7fe bf44 	b.w	d60fc <hal_i2c_begin_transmission>

000d7274 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d7274:	b2c9      	uxtb	r1, r1
   d7276:	f7ff bff9 	b.w	d726c <_ZN7TwoWire17beginTransmissionEh>

000d727a <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d727a:	7c00      	ldrb	r0, [r0, #16]
   d727c:	2200      	movs	r2, #0
   d727e:	f7fe bf45 	b.w	d610c <hal_i2c_end_transmission>

000d7282 <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d7282:	2101      	movs	r1, #1
   d7284:	f7ff bff9 	b.w	d727a <_ZN7TwoWire15endTransmissionEh>

000d7288 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d7288:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d728a:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d728c:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d7290:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d7292:	2201      	movs	r2, #1
   d7294:	f04f 33ff 	mov.w	r3, #4294967295
   d7298:	f10d 0107 	add.w	r1, sp, #7
   d729c:	47a0      	blx	r4
}
   d729e:	b002      	add	sp, #8
   d72a0:	bd10      	pop	{r4, pc}

000d72a2 <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d72a2:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d72a4:	6803      	ldr	r3, [r0, #0]
   d72a6:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d72a8:	f04f 33ff 	mov.w	r3, #4294967295
   d72ac:	46a4      	mov	ip, r4
}
   d72ae:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d72b2:	4760      	bx	ip

000d72b4 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d72b4:	b513      	push	{r0, r1, r4, lr}
   d72b6:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d72b8:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d72ba:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d72be:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d72c0:	f10d 0107 	add.w	r1, sp, #7
   d72c4:	2201      	movs	r2, #1
   d72c6:	47a0      	blx	r4
}
   d72c8:	b002      	add	sp, #8
   d72ca:	bd10      	pop	{r4, pc}

000d72cc <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d72cc:	4770      	bx	lr

000d72ce <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d72ce:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d72d0:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d72d2:	681a      	ldr	r2, [r3, #0]
   d72d4:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d72d6:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d72d8:	da10      	bge.n	d72fc <_ZN9TCPClient9connectedEv+0x2e>
   d72da:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d72de:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d72e2:	429a      	cmp	r2, r3
   d72e4:	d10a      	bne.n	d72fc <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d72e6:	6803      	ldr	r3, [r0, #0]
   d72e8:	691b      	ldr	r3, [r3, #16]
   d72ea:	4798      	blx	r3
        if (!rv) {
   d72ec:	4604      	mov	r4, r0
   d72ee:	b928      	cbnz	r0, d72fc <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d72f0:	682b      	ldr	r3, [r5, #0]
   d72f2:	4628      	mov	r0, r5
   d72f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d72f6:	4798      	blx	r3
        rv = available();
   d72f8:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d72fa:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d72fc:	2001      	movs	r0, #1
   d72fe:	e7fc      	b.n	d72fa <_ZN9TCPClient9connectedEv+0x2c>

000d7300 <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d7300:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d7302:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d7304:	43c0      	mvns	r0, r0
   d7306:	0fc0      	lsrs	r0, r0, #31
   d7308:	4770      	bx	lr

000d730a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d730a:	4770      	bx	lr

000d730c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d730c:	4b06      	ldr	r3, [pc, #24]	; (d7328 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d730e:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d7310:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d7312:	f100 040c 	add.w	r4, r0, #12
	    ||
   d7316:	d005      	beq.n	d7324 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d7318:	4608      	mov	r0, r1
   d731a:	f000 fc1f 	bl	d7b5c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d731e:	2800      	cmp	r0, #0
	return nullptr;
   d7320:	bf08      	it	eq
   d7322:	2400      	moveq	r4, #0
      }
   d7324:	4620      	mov	r0, r4
   d7326:	bd10      	pop	{r4, pc}
   d7328:	000da548 	.word	0x000da548

000d732c <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d732c:	b510      	push	{r4, lr}
   d732e:	21ac      	movs	r1, #172	; 0xac
   d7330:	4604      	mov	r4, r0
   d7332:	f000 fc0e 	bl	d7b52 <_ZdlPvj>
   d7336:	4620      	mov	r0, r4
   d7338:	bd10      	pop	{r4, pc}

000d733a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d733a:	f7fc beb0 	b.w	d409e <_ZdlPv>

000d733e <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d733e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d7342:	f04f 0800 	mov.w	r8, #0
   d7346:	b086      	sub	sp, #24
   d7348:	461d      	mov	r5, r3
   d734a:	f8c0 8004 	str.w	r8, [r0, #4]
   d734e:	4604      	mov	r4, r0
   d7350:	460e      	mov	r6, r1
   d7352:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7354:	4641      	mov	r1, r8
   d7356:	2210      	movs	r2, #16
   d7358:	a802      	add	r0, sp, #8
   d735a:	f002 feff 	bl	da15c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d735e:	1c6b      	adds	r3, r5, #1
   d7360:	d009      	beq.n	d7376 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d7362:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d7366:	fbb5 f3f0 	udiv	r3, r5, r0
   d736a:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d736e:	fb00 5313 	mls	r3, r0, r3, r5
   d7372:	4358      	muls	r0, r3
   d7374:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d7376:	6960      	ldr	r0, [r4, #20]
   d7378:	2310      	movs	r3, #16
   d737a:	9300      	str	r3, [sp, #0]
   d737c:	6800      	ldr	r0, [r0, #0]
   d737e:	ab02      	add	r3, sp, #8
   d7380:	f241 0205 	movw	r2, #4101	; 0x1005
   d7384:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7388:	f7fe ff08 	bl	d619c <sock_setsockopt>
    if (ret < 0) {
   d738c:	2800      	cmp	r0, #0
   d738e:	da07      	bge.n	d73a0 <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d7390:	f7ff f858 	bl	d6444 <__errno>
   d7394:	6803      	ldr	r3, [r0, #0]
   d7396:	6063      	str	r3, [r4, #4]
        return 0;
   d7398:	2000      	movs	r0, #0
}
   d739a:	b006      	add	sp, #24
   d739c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d73a0:	6960      	ldr	r0, [r4, #20]
   d73a2:	2300      	movs	r3, #0
   d73a4:	6800      	ldr	r0, [r0, #0]
   d73a6:	463a      	mov	r2, r7
   d73a8:	4631      	mov	r1, r6
   d73aa:	f7fe ff17 	bl	d61dc <sock_send>
    if (ret < 0) {
   d73ae:	1e03      	subs	r3, r0, #0
   d73b0:	dbee      	blt.n	d7390 <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d73b2:	4618      	mov	r0, r3
   d73b4:	e7f1      	b.n	d739a <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d73b8 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d73b8:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d73ba:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d73bc:	4b05      	ldr	r3, [pc, #20]	; (d73d4 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d73be:	4604      	mov	r4, r0
   d73c0:	358c      	adds	r5, #140	; 0x8c
   d73c2:	f844 3b04 	str.w	r3, [r4], #4
   d73c6:	4606      	mov	r6, r0
   d73c8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d73ca:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d73cc:	682b      	ldr	r3, [r5, #0]
   d73ce:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d73d0:	4630      	mov	r0, r6
   d73d2:	bd70      	pop	{r4, r5, r6, pc}
   d73d4:	000da578 	.word	0x000da578

000d73d8 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d73d8:	b510      	push	{r4, lr}
   d73da:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d73dc:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d73e0:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d73e4:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d73e6:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d73e8:	d005      	beq.n	d73f6 <_ZN9TCPClient4peekEv+0x1e>
   d73ea:	6963      	ldr	r3, [r4, #20]
   d73ec:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d73f0:	4413      	add	r3, r2
   d73f2:	7918      	ldrb	r0, [r3, #4]
}
   d73f4:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d73f6:	6803      	ldr	r3, [r0, #0]
   d73f8:	691b      	ldr	r3, [r3, #16]
   d73fa:	4798      	blx	r3
   d73fc:	2800      	cmp	r0, #0
   d73fe:	d1f4      	bne.n	d73ea <_ZN9TCPClient4peekEv+0x12>
   d7400:	f04f 30ff 	mov.w	r0, #4294967295
   d7404:	e7f6      	b.n	d73f4 <_ZN9TCPClient4peekEv+0x1c>

000d7406 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d7406:	b510      	push	{r4, lr}
   d7408:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d740a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d740e:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7412:	429a      	cmp	r2, r3
int TCPClient::read() {
   d7414:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7416:	d008      	beq.n	d742a <_ZN9TCPClient4readEv+0x24>
   d7418:	6963      	ldr	r3, [r4, #20]
   d741a:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d741e:	1c51      	adds	r1, r2, #1
   d7420:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d7424:	4413      	add	r3, r2
   d7426:	7918      	ldrb	r0, [r3, #4]
}
   d7428:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d742a:	6803      	ldr	r3, [r0, #0]
   d742c:	691b      	ldr	r3, [r3, #16]
   d742e:	4798      	blx	r3
   d7430:	2800      	cmp	r0, #0
   d7432:	d1f1      	bne.n	d7418 <_ZN9TCPClient4readEv+0x12>
   d7434:	f04f 30ff 	mov.w	r0, #4294967295
   d7438:	e7f6      	b.n	d7428 <_ZN9TCPClient4readEv+0x22>

000d743a <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d743a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d743c:	6943      	ldr	r3, [r0, #20]
   d743e:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d7440:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7444:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7448:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d744a:	4605      	mov	r5, r0
   d744c:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d744e:	d016      	beq.n	d747e <_ZN9TCPClient4readEPhj+0x44>
   d7450:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d7452:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7456:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d745a:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d745c:	42bc      	cmp	r4, r7
   d745e:	bf28      	it	cs
   d7460:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d7462:	3304      	adds	r3, #4
   d7464:	4622      	mov	r2, r4
   d7466:	4419      	add	r1, r3
   d7468:	4630      	mov	r0, r6
   d746a:	f002 fe69 	bl	da140 <memcpy>
   d746e:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d7470:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d7474:	4423      	add	r3, r4
   d7476:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d747a:	4620      	mov	r0, r4
   d747c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d747e:	6803      	ldr	r3, [r0, #0]
   d7480:	691b      	ldr	r3, [r3, #16]
   d7482:	4798      	blx	r3
   d7484:	2800      	cmp	r0, #0
   d7486:	d1e3      	bne.n	d7450 <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d7488:	f04f 34ff 	mov.w	r4, #4294967295
   d748c:	e7f5      	b.n	d747a <_ZN9TCPClient4readEPhj+0x40>
	...

000d7490 <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7490:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d7494:	4698      	mov	r8, r3
    stop();
   d7496:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d7498:	b093      	sub	sp, #76	; 0x4c
   d749a:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d749c:	2400      	movs	r4, #0
    stop();
   d749e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d74a0:	4606      	mov	r6, r0
   d74a2:	4617      	mov	r7, r2
    stop();
   d74a4:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d74a6:	4628      	mov	r0, r5
   d74a8:	466b      	mov	r3, sp
   d74aa:	4622      	mov	r2, r4
   d74ac:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d74ae:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d74b0:	f7fe fd74 	bl	d5f9c <netdb_getaddrinfo>
   d74b4:	4605      	mov	r5, r0
   d74b6:	2800      	cmp	r0, #0
   d74b8:	d163      	bne.n	d7582 <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d74ba:	9b00      	ldr	r3, [sp, #0]
   d74bc:	2b00      	cmp	r3, #0
   d74be:	d04b      	beq.n	d7558 <_ZN9TCPClient7connectEPKctm+0xc8>
   d74c0:	695b      	ldr	r3, [r3, #20]
   d74c2:	2b00      	cmp	r3, #0
   d74c4:	d048      	beq.n	d7558 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d74c6:	a806      	add	r0, sp, #24
   d74c8:	f7ff fd0e 	bl	d6ee8 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d74cc:	9b00      	ldr	r3, [sp, #0]
   d74ce:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d74d0:	7863      	ldrb	r3, [r4, #1]
   d74d2:	2b02      	cmp	r3, #2
   d74d4:	d104      	bne.n	d74e0 <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d74d6:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d74d8:	a806      	add	r0, sp, #24
   d74da:	f7ff fd48 	bl	d6f6e <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   d74de:	e026      	b.n	d752e <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d74e0:	2b0a      	cmp	r3, #10
   d74e2:	d124      	bne.n	d752e <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d74e4:	2211      	movs	r2, #17
   d74e6:	4629      	mov	r1, r5
   d74e8:	a801      	add	r0, sp, #4
   d74ea:	f002 fe37 	bl	da15c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d74ee:	68a3      	ldr	r3, [r4, #8]
   d74f0:	2b00      	cmp	r3, #0
   d74f2:	d038      	beq.n	d7566 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d74f4:	f104 0308 	add.w	r3, r4, #8
   d74f8:	f10d 0c04 	add.w	ip, sp, #4
   d74fc:	3418      	adds	r4, #24
   d74fe:	6818      	ldr	r0, [r3, #0]
   d7500:	6859      	ldr	r1, [r3, #4]
   d7502:	4662      	mov	r2, ip
   d7504:	c203      	stmia	r2!, {r0, r1}
   d7506:	3308      	adds	r3, #8
   d7508:	42a3      	cmp	r3, r4
   d750a:	4694      	mov	ip, r2
   d750c:	d1f7      	bne.n	d74fe <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d750e:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d7510:	a901      	add	r1, sp, #4
   d7512:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d7514:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7518:	f7ff fcf4 	bl	d6f04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d751c:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d7520:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7524:	ac07      	add	r4, sp, #28
   d7526:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7528:	f8dc 3000 	ldr.w	r3, [ip]
   d752c:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d752e:	a806      	add	r0, sp, #24
   d7530:	f7ff fcfa 	bl	d6f28 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7534:	b180      	cbz	r0, d7558 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d7536:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d7538:	ad07      	add	r5, sp, #28
   d753a:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d753e:	4b12      	ldr	r3, [pc, #72]	; (d7588 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d7540:	930c      	str	r3, [sp, #48]	; 0x30
   d7542:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7544:	ac0d      	add	r4, sp, #52	; 0x34
   d7546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7548:	682b      	ldr	r3, [r5, #0]
   d754a:	7023      	strb	r3, [r4, #0]
   d754c:	463a      	mov	r2, r7
   d754e:	4643      	mov	r3, r8
   d7550:	a90c      	add	r1, sp, #48	; 0x30
   d7552:	4630      	mov	r0, r6
   d7554:	47c8      	blx	r9
   d7556:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d7558:	9800      	ldr	r0, [sp, #0]
   d755a:	f7fe fd17 	bl	d5f8c <netdb_freeaddrinfo>
}
   d755e:	4628      	mov	r0, r5
   d7560:	b013      	add	sp, #76	; 0x4c
   d7562:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d7566:	68e3      	ldr	r3, [r4, #12]
   d7568:	2b00      	cmp	r3, #0
   d756a:	d1c3      	bne.n	d74f4 <_ZN9TCPClient7connectEPKctm+0x64>
   d756c:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d7570:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d7574:	f7fe fd6a 	bl	d604c <inet_htonl>
   d7578:	4581      	cmp	r9, r0
   d757a:	d1bb      	bne.n	d74f4 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d757c:	f104 0114 	add.w	r1, r4, #20
   d7580:	e7aa      	b.n	d74d8 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d7582:	4625      	mov	r5, r4
   d7584:	e7e8      	b.n	d7558 <_ZN9TCPClient7connectEPKctm+0xc8>
   d7586:	bf00      	nop
   d7588:	000da578 	.word	0x000da578

000d758c <_ZN9TCPClient12flush_bufferEv>:
   d758c:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d758e:	2300      	movs	r3, #0
   d7590:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d7594:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d7596:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d759a:	4770      	bx	lr

000d759c <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d759c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d75a0:	461f      	mov	r7, r3
    stop();
   d75a2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d75a4:	460c      	mov	r4, r1
    stop();
   d75a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d75a8:	b08a      	sub	sp, #40	; 0x28
   d75aa:	4605      	mov	r5, r0
   d75ac:	4616      	mov	r6, r2
    stop();
   d75ae:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d75b0:	7d23      	ldrb	r3, [r4, #20]
   d75b2:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d75b6:	2b04      	cmp	r3, #4
   d75b8:	bf0c      	ite	eq
   d75ba:	2002      	moveq	r0, #2
   d75bc:	200a      	movne	r0, #10
   d75be:	2206      	movs	r2, #6
   d75c0:	2101      	movs	r1, #1
   d75c2:	f7fe fe13 	bl	d61ec <sock_socket>
   d75c6:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d75ca:	696b      	ldr	r3, [r5, #20]
   d75cc:	681b      	ldr	r3, [r3, #0]
   d75ce:	2b00      	cmp	r3, #0
   d75d0:	da08      	bge.n	d75e4 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d75d2:	682b      	ldr	r3, [r5, #0]
   d75d4:	4628      	mov	r0, r5
   d75d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d75d8:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d75da:	4798      	blx	r3
}
   d75dc:	4620      	mov	r0, r4
   d75de:	b00a      	add	sp, #40	; 0x28
   d75e0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d75e4:	4628      	mov	r0, r5
   d75e6:	f7ff ffd1 	bl	d758c <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d75ea:	b1b7      	cbz	r7, d761a <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d75ec:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d75ee:	a903      	add	r1, sp, #12
   d75f0:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d75f2:	9303      	str	r3, [sp, #12]
   d75f4:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d75f8:	f7fe fcf8 	bl	d5fec <if_index_to_name>
   d75fc:	2800      	cmp	r0, #0
   d75fe:	d1e8      	bne.n	d75d2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d7600:	6968      	ldr	r0, [r5, #20]
   d7602:	2306      	movs	r3, #6
   d7604:	9300      	str	r3, [sp, #0]
   d7606:	6800      	ldr	r0, [r0, #0]
   d7608:	ab03      	add	r3, sp, #12
   d760a:	f241 020b 	movw	r2, #4107	; 0x100b
   d760e:	f640 71ff 	movw	r1, #4095	; 0xfff
   d7612:	f7fe fdc3 	bl	d619c <sock_setsockopt>
   d7616:	2800      	cmp	r0, #0
   d7618:	d1db      	bne.n	d75d2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d761a:	221c      	movs	r2, #28
   d761c:	2100      	movs	r1, #0
   d761e:	a803      	add	r0, sp, #12
   d7620:	f002 fd9c 	bl	da15c <memset>
    if (ip.version() == 4) {
   d7624:	7d23      	ldrb	r3, [r4, #20]
   d7626:	2b04      	cmp	r3, #4
   d7628:	d11d      	bne.n	d7666 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d762a:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d762e:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d7630:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d7634:	f7fe fd12 	bl	d605c <inet_htons>
   d7638:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d763c:	6860      	ldr	r0, [r4, #4]
   d763e:	f7fe fd05 	bl	d604c <inet_htonl>
   d7642:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7644:	696b      	ldr	r3, [r5, #20]
   d7646:	221c      	movs	r2, #28
   d7648:	6818      	ldr	r0, [r3, #0]
   d764a:	a903      	add	r1, sp, #12
   d764c:	f7fe fdb6 	bl	d61bc <sock_connect>
   d7650:	2800      	cmp	r0, #0
   d7652:	d1be      	bne.n	d75d2 <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d7654:	3404      	adds	r4, #4
   d7656:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7658:	696d      	ldr	r5, [r5, #20]
   d765a:	358c      	adds	r5, #140	; 0x8c
   d765c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d765e:	6823      	ldr	r3, [r4, #0]
   d7660:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d7662:	2401      	movs	r4, #1
   d7664:	e7ba      	b.n	d75dc <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d7666:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d766a:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d766c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d7670:	f7fe fcf4 	bl	d605c <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d7674:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d7676:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d767a:	1d23      	adds	r3, r4, #4
   d767c:	f104 0714 	add.w	r7, r4, #20
   d7680:	6818      	ldr	r0, [r3, #0]
   d7682:	6859      	ldr	r1, [r3, #4]
   d7684:	4632      	mov	r2, r6
   d7686:	c203      	stmia	r2!, {r0, r1}
   d7688:	3308      	adds	r3, #8
   d768a:	42bb      	cmp	r3, r7
   d768c:	4616      	mov	r6, r2
   d768e:	d1f7      	bne.n	d7680 <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d7690:	e7d8      	b.n	d7644 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000d7694 <_ZN9TCPClient9availableEv>:
{
   d7694:	b530      	push	{r4, r5, lr}
   d7696:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d7698:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d769c:	b08b      	sub	sp, #44	; 0x2c
   d769e:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d76a0:	b12b      	cbz	r3, d76ae <_ZN9TCPClient9availableEv+0x1a>
   d76a2:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d76a6:	429a      	cmp	r2, r3
   d76a8:	d101      	bne.n	d76ae <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d76aa:	f7ff ff6f 	bl	d758c <_ZN9TCPClient12flush_bufferEv>
   d76ae:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d76b0:	6808      	ldr	r0, [r1, #0]
   d76b2:	2800      	cmp	r0, #0
   d76b4:	db18      	blt.n	d76e8 <_ZN9TCPClient9availableEv+0x54>
   d76b6:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d76ba:	2d7f      	cmp	r5, #127	; 0x7f
   d76bc:	d814      	bhi.n	d76e8 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d76be:	3104      	adds	r1, #4
   d76c0:	2308      	movs	r3, #8
   d76c2:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d76c6:	4429      	add	r1, r5
   d76c8:	f7fe fd80 	bl	d61cc <sock_recv>
            if (ret > 0) {
   d76cc:	2800      	cmp	r0, #0
   d76ce:	dd13      	ble.n	d76f8 <_ZN9TCPClient9availableEv+0x64>
   d76d0:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d76d2:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d76d6:	b90a      	cbnz	r2, d76dc <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d76d8:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d76dc:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d76de:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d76e2:	4410      	add	r0, r2
   d76e4:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d76e8:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d76ea:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d76ee:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d76f2:	1ac0      	subs	r0, r0, r3
   d76f4:	b00b      	add	sp, #44	; 0x2c
   d76f6:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d76f8:	f7fe fea4 	bl	d6444 <__errno>
   d76fc:	6803      	ldr	r3, [r0, #0]
   d76fe:	2b0b      	cmp	r3, #11
   d7700:	d0f2      	beq.n	d76e8 <_ZN9TCPClient9availableEv+0x54>
   d7702:	f7fe fe9f 	bl	d6444 <__errno>
   d7706:	6803      	ldr	r3, [r0, #0]
   d7708:	2b0b      	cmp	r3, #11
   d770a:	d0ed      	beq.n	d76e8 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d770c:	2320      	movs	r3, #32
   d770e:	2500      	movs	r5, #0
   d7710:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d7714:	f7fe fe96 	bl	d6444 <__errno>
   d7718:	6803      	ldr	r3, [r0, #0]
   d771a:	9301      	str	r3, [sp, #4]
   d771c:	4b08      	ldr	r3, [pc, #32]	; (d7740 <_ZN9TCPClient9availableEv+0xac>)
   d771e:	4909      	ldr	r1, [pc, #36]	; (d7744 <_ZN9TCPClient9availableEv+0xb0>)
   d7720:	9300      	str	r3, [sp, #0]
   d7722:	aa02      	add	r2, sp, #8
   d7724:	462b      	mov	r3, r5
   d7726:	2032      	movs	r0, #50	; 0x32
   d7728:	f7fe fde0 	bl	d62ec <log_message>
                    sock_close(d_->sock);
   d772c:	6963      	ldr	r3, [r4, #20]
   d772e:	6818      	ldr	r0, [r3, #0]
   d7730:	f7fe fd3c 	bl	d61ac <sock_close>
   d7734:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7736:	f04f 32ff 	mov.w	r2, #4294967295
   d773a:	601a      	str	r2, [r3, #0]
   d773c:	e7d4      	b.n	d76e8 <_ZN9TCPClient9availableEv+0x54>
   d773e:	bf00      	nop
   d7740:	000da613 	.word	0x000da613
   d7744:	000da60c 	.word	0x000da60c

000d7748 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d7748:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d774a:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d774c:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d774e:	6818      	ldr	r0, [r3, #0]
   d7750:	2800      	cmp	r0, #0
   d7752:	db01      	blt.n	d7758 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7754:	f7fe fd2a 	bl	d61ac <sock_close>
   d7758:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d775a:	f04f 32ff 	mov.w	r2, #4294967295
   d775e:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d7760:	6960      	ldr	r0, [r4, #20]
   d7762:	2211      	movs	r2, #17
   d7764:	2100      	movs	r1, #0
   d7766:	308c      	adds	r0, #140	; 0x8c
   d7768:	f002 fcf8 	bl	da15c <memset>
    flush_buffer();
   d776c:	4620      	mov	r0, r4
}
   d776e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d7772:	f7ff bf0b 	b.w	d758c <_ZN9TCPClient12flush_bufferEv>

000d7776 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d7776:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d7778:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d777a:	4604      	mov	r4, r0
          total(0) {
   d777c:	6001      	str	r1, [r0, #0]
   d777e:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d7782:	3088      	adds	r0, #136	; 0x88
   d7784:	f7ff fbb0 	bl	d6ee8 <_ZN9IPAddressC1Ev>
}
   d7788:	4620      	mov	r0, r4
   d778a:	bd10      	pop	{r4, pc}

000d778c <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d778c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d778e:	2300      	movs	r3, #0
   d7790:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7794:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d7798:	4a0e      	ldr	r2, [pc, #56]	; (d77d4 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d779a:	6103      	str	r3, [r0, #16]
   d779c:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d779e:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d77a0:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d77a2:	20ac      	movs	r0, #172	; 0xac
   d77a4:	9101      	str	r1, [sp, #4]
   d77a6:	f7fc fc76 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d77aa:	1e05      	subs	r5, r0, #0
   d77ac:	f105 060c 	add.w	r6, r5, #12
   d77b0:	d008      	beq.n	d77c4 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d77b2:	2301      	movs	r3, #1
   d77b4:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d77b8:	4b07      	ldr	r3, [pc, #28]	; (d77d8 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d77ba:	9901      	ldr	r1, [sp, #4]
   d77bc:	602b      	str	r3, [r5, #0]
   d77be:	4630      	mov	r0, r6
   d77c0:	f7ff ffd9 	bl	d7776 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d77c4:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d77c6:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d77ca:	f7ff fedf 	bl	d758c <_ZN9TCPClient12flush_bufferEv>
}
   d77ce:	b002      	add	sp, #8
   d77d0:	bd70      	pop	{r4, r5, r6, pc}
   d77d2:	bf00      	nop
   d77d4:	000da648 	.word	0x000da648
   d77d8:	000da62c 	.word	0x000da62c

000d77dc <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d77dc:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d77de:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d77e2:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d77e4:	f7ff ffd2 	bl	d778c <_ZN9TCPClientC1Ei>
}
   d77e8:	4620      	mov	r0, r4
   d77ea:	bd10      	pop	{r4, pc}

000d77ec <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d77ec:	b510      	push	{r4, lr}
   d77ee:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d77f0:	6800      	ldr	r0, [r0, #0]
   d77f2:	2800      	cmp	r0, #0
   d77f4:	db01      	blt.n	d77fa <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d77f6:	f7fe fcd9 	bl	d61ac <sock_close>
    }
}
   d77fa:	4620      	mov	r0, r4
   d77fc:	bd10      	pop	{r4, pc}

000d77fe <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d77fe:	300c      	adds	r0, #12
   d7800:	f7ff bff4 	b.w	d77ec <_ZN9TCPClient4DataD1Ev>

000d7804 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7804:	2200      	movs	r2, #0
   d7806:	6840      	ldr	r0, [r0, #4]
   d7808:	4611      	mov	r1, r2
   d780a:	f7fe bdb3 	b.w	d6374 <network_ready>

000d780e <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d780e:	2200      	movs	r2, #0
   d7810:	6840      	ldr	r0, [r0, #4]
   d7812:	4611      	mov	r1, r2
   d7814:	f7fe bdce 	b.w	d63b4 <network_listening>

000d7818 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7818:	2200      	movs	r2, #0
   d781a:	6840      	ldr	r0, [r0, #4]
   d781c:	4611      	mov	r1, r2
   d781e:	f7fe bdd9 	b.w	d63d4 <network_get_listen_timeout>

000d7822 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d7822:	6840      	ldr	r0, [r0, #4]
   d7824:	2200      	movs	r2, #0
   d7826:	f7fe bdcd 	b.w	d63c4 <network_set_listen_timeout>

000d782a <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d782a:	6840      	ldr	r0, [r0, #4]
   d782c:	2200      	movs	r2, #0
   d782e:	f081 0101 	eor.w	r1, r1, #1
   d7832:	f7fe bdb7 	b.w	d63a4 <network_listen>

000d7836 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7836:	2300      	movs	r3, #0
   d7838:	6840      	ldr	r0, [r0, #4]
   d783a:	461a      	mov	r2, r3
   d783c:	4619      	mov	r1, r3
   d783e:	f7fe bda9 	b.w	d6394 <network_off>

000d7842 <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d7842:	2300      	movs	r3, #0
   d7844:	6840      	ldr	r0, [r0, #4]
   d7846:	461a      	mov	r2, r3
   d7848:	4619      	mov	r1, r3
   d784a:	f7fe bd9b 	b.w	d6384 <network_on>

000d784e <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d784e:	2200      	movs	r2, #0
   d7850:	6840      	ldr	r0, [r0, #4]
   d7852:	4611      	mov	r1, r2
   d7854:	f7fe bd7e 	b.w	d6354 <network_connecting>

000d7858 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7858:	6840      	ldr	r0, [r0, #4]
   d785a:	2200      	movs	r2, #0
   d785c:	2102      	movs	r1, #2
   d785e:	f7fe bd81 	b.w	d6364 <network_disconnect>

000d7862 <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d7862:	2300      	movs	r3, #0
   d7864:	6840      	ldr	r0, [r0, #4]
   d7866:	461a      	mov	r2, r3
   d7868:	f7fe bd6c 	b.w	d6344 <network_connect>

000d786c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d786c:	4b02      	ldr	r3, [pc, #8]	; (d7878 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d786e:	2204      	movs	r2, #4
   d7870:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d7872:	4a02      	ldr	r2, [pc, #8]	; (d787c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d7874:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d7876:	4770      	bx	lr
   d7878:	2003e7c4 	.word	0x2003e7c4
   d787c:	000da694 	.word	0x000da694

000d7880 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d7880:	2300      	movs	r3, #0
   d7882:	6840      	ldr	r0, [r0, #4]
   d7884:	461a      	mov	r2, r3
   d7886:	f7fe bd5d 	b.w	d6344 <network_connect>

000d788a <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d788a:	6840      	ldr	r0, [r0, #4]
   d788c:	2200      	movs	r2, #0
   d788e:	2102      	movs	r1, #2
   d7890:	f7fe bd68 	b.w	d6364 <network_disconnect>

000d7894 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d7894:	2200      	movs	r2, #0
   d7896:	6840      	ldr	r0, [r0, #4]
   d7898:	4611      	mov	r1, r2
   d789a:	f7fe bd5b 	b.w	d6354 <network_connecting>

000d789e <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d789e:	2200      	movs	r2, #0
   d78a0:	6840      	ldr	r0, [r0, #4]
   d78a2:	4611      	mov	r1, r2
   d78a4:	f7fe bd66 	b.w	d6374 <network_ready>

000d78a8 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d78a8:	2300      	movs	r3, #0
   d78aa:	6840      	ldr	r0, [r0, #4]
   d78ac:	461a      	mov	r2, r3
   d78ae:	4619      	mov	r1, r3
   d78b0:	f7fe bd68 	b.w	d6384 <network_on>

000d78b4 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d78b4:	2300      	movs	r3, #0
   d78b6:	6840      	ldr	r0, [r0, #4]
   d78b8:	461a      	mov	r2, r3
   d78ba:	4619      	mov	r1, r3
   d78bc:	f7fe bd6a 	b.w	d6394 <network_off>

000d78c0 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d78c0:	6840      	ldr	r0, [r0, #4]
   d78c2:	2200      	movs	r2, #0
   d78c4:	f081 0101 	eor.w	r1, r1, #1
   d78c8:	f7fe bd6c 	b.w	d63a4 <network_listen>

000d78cc <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d78cc:	6840      	ldr	r0, [r0, #4]
   d78ce:	2200      	movs	r2, #0
   d78d0:	f7fe bd78 	b.w	d63c4 <network_set_listen_timeout>

000d78d4 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d78d4:	2200      	movs	r2, #0
   d78d6:	6840      	ldr	r0, [r0, #4]
   d78d8:	4611      	mov	r1, r2
   d78da:	f7fe bd7b 	b.w	d63d4 <network_get_listen_timeout>

000d78de <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d78de:	2200      	movs	r2, #0
   d78e0:	6840      	ldr	r0, [r0, #4]
   d78e2:	4611      	mov	r1, r2
   d78e4:	f7fe bd66 	b.w	d63b4 <network_listening>

000d78e8 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d78e8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d78ec:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d78ee:	b095      	sub	sp, #84	; 0x54
   d78f0:	4616      	mov	r6, r2
   d78f2:	460d      	mov	r5, r1
   d78f4:	4607      	mov	r7, r0
    IPAddress addr;
   d78f6:	f7ff faf7 	bl	d6ee8 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d78fa:	4621      	mov	r1, r4
   d78fc:	2218      	movs	r2, #24
   d78fe:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d7900:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d7902:	f002 fc2b 	bl	da15c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7906:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7908:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d790c:	4621      	mov	r1, r4
   d790e:	466b      	mov	r3, sp
   d7910:	aa0c      	add	r2, sp, #48	; 0x30
   d7912:	4630      	mov	r0, r6
   d7914:	f7fe fb42 	bl	d5f9c <netdb_getaddrinfo>
    if (!r) {
   d7918:	4604      	mov	r4, r0
   d791a:	2800      	cmp	r0, #0
   d791c:	d146      	bne.n	d79ac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d791e:	4602      	mov	r2, r0
   d7920:	2101      	movs	r1, #1
   d7922:	6868      	ldr	r0, [r5, #4]
   d7924:	f7fe fd26 	bl	d6374 <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7928:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d792a:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d792c:	4622      	mov	r2, r4
   d792e:	6868      	ldr	r0, [r5, #4]
   d7930:	f7fe fd20 	bl	d6374 <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7934:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7936:	4681      	mov	r9, r0
        bool ok = false;
   d7938:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d793a:	2e00      	cmp	r6, #0
   d793c:	d036      	beq.n	d79ac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d793e:	2900      	cmp	r1, #0
   d7940:	d134      	bne.n	d79ac <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d7942:	6873      	ldr	r3, [r6, #4]
   d7944:	2b02      	cmp	r3, #2
   d7946:	d003      	beq.n	d7950 <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7948:	2b0a      	cmp	r3, #10
   d794a:	d00b      	beq.n	d7964 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d794c:	69f6      	ldr	r6, [r6, #28]
   d794e:	e7f4      	b.n	d793a <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d7950:	f1b8 0f00 	cmp.w	r8, #0
   d7954:	d004      	beq.n	d7960 <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7956:	6971      	ldr	r1, [r6, #20]
   d7958:	4638      	mov	r0, r7
   d795a:	3104      	adds	r1, #4
   d795c:	f7ff fb07 	bl	d6f6e <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d7960:	4641      	mov	r1, r8
   d7962:	e7f3      	b.n	d794c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d7964:	f1b9 0f00 	cmp.w	r9, #0
   d7968:	d101      	bne.n	d796e <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d796a:	4649      	mov	r1, r9
   d796c:	e7ee      	b.n	d794c <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d796e:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d7970:	2210      	movs	r2, #16
   d7972:	a801      	add	r0, sp, #4
   d7974:	f002 fbf2 	bl	da15c <memset>
                    a.v = 6;
   d7978:	2306      	movs	r3, #6
   d797a:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d797e:	ad01      	add	r5, sp, #4
   d7980:	f104 0308 	add.w	r3, r4, #8
   d7984:	3418      	adds	r4, #24
   d7986:	6818      	ldr	r0, [r3, #0]
   d7988:	6859      	ldr	r1, [r3, #4]
   d798a:	462a      	mov	r2, r5
   d798c:	c203      	stmia	r2!, {r0, r1}
   d798e:	3308      	adds	r3, #8
   d7990:	42a3      	cmp	r3, r4
   d7992:	4615      	mov	r5, r2
   d7994:	d1f7      	bne.n	d7986 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d7996:	a901      	add	r1, sp, #4
   d7998:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d799a:	ad07      	add	r5, sp, #28
   d799c:	f7ff fab2 	bl	d6f04 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d79a0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d79a2:	1d3c      	adds	r4, r7, #4
   d79a4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d79a6:	682b      	ldr	r3, [r5, #0]
   d79a8:	7023      	strb	r3, [r4, #0]
   d79aa:	e7de      	b.n	d796a <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d79ac:	9800      	ldr	r0, [sp, #0]
   d79ae:	f7fe faed 	bl	d5f8c <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d79b2:	4638      	mov	r0, r7
   d79b4:	b015      	add	sp, #84	; 0x54
   d79b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d79bc <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d79bc:	4b02      	ldr	r3, [pc, #8]	; (d79c8 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d79be:	4a03      	ldr	r2, [pc, #12]	; (d79cc <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d79c0:	601a      	str	r2, [r3, #0]
   d79c2:	2200      	movs	r2, #0
   d79c4:	605a      	str	r2, [r3, #4]

} // spark
   d79c6:	4770      	bx	lr
   d79c8:	2003e7cc 	.word	0x2003e7cc
   d79cc:	000da6c8 	.word	0x000da6c8

000d79d0 <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d79d0:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d79d2:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d79d4:	d902      	bls.n	d79dc <pinAvailable+0xc>
    return false;
   d79d6:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d79d8:	b002      	add	sp, #8
   d79da:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d79dc:	f1a0 030b 	sub.w	r3, r0, #11
   d79e0:	2b02      	cmp	r3, #2
   d79e2:	d81a      	bhi.n	d7a1a <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d79e4:	4c17      	ldr	r4, [pc, #92]	; (d7a44 <pinAvailable+0x74>)
   d79e6:	7821      	ldrb	r1, [r4, #0]
   d79e8:	f3bf 8f5b 	dmb	ish
   d79ec:	f011 0101 	ands.w	r1, r1, #1
   d79f0:	d10b      	bne.n	d7a0a <pinAvailable+0x3a>
   d79f2:	4620      	mov	r0, r4
   d79f4:	9101      	str	r1, [sp, #4]
   d79f6:	f7fc fb54 	bl	d40a2 <__cxa_guard_acquire>
   d79fa:	9901      	ldr	r1, [sp, #4]
   d79fc:	b128      	cbz	r0, d7a0a <pinAvailable+0x3a>
   d79fe:	4812      	ldr	r0, [pc, #72]	; (d7a48 <pinAvailable+0x78>)
   d7a00:	f7fe fd74 	bl	d64ec <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7a04:	4620      	mov	r0, r4
   d7a06:	f7fc fb51 	bl	d40ac <__cxa_guard_release>
   d7a0a:	4b0f      	ldr	r3, [pc, #60]	; (d7a48 <pinAvailable+0x78>)
   d7a0c:	7818      	ldrb	r0, [r3, #0]
   d7a0e:	f7fe fc0d 	bl	d622c <hal_spi_is_enabled>
   d7a12:	2800      	cmp	r0, #0
   d7a14:	d1df      	bne.n	d79d6 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7a16:	2001      	movs	r0, #1
   d7a18:	e7de      	b.n	d79d8 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7a1a:	2801      	cmp	r0, #1
   d7a1c:	d809      	bhi.n	d7a32 <pinAvailable+0x62>
   d7a1e:	f000 f86b 	bl	d7af8 <_Z19__fetch_global_Wirev>
   d7a22:	2100      	movs	r1, #0
   d7a24:	7c00      	ldrb	r0, [r0, #16]
   d7a26:	f7fe fba1 	bl	d616c <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7a2a:	f080 0001 	eor.w	r0, r0, #1
   d7a2e:	b2c0      	uxtb	r0, r0
   d7a30:	e7d2      	b.n	d79d8 <pinAvailable+0x8>
   d7a32:	3809      	subs	r0, #9
   d7a34:	2801      	cmp	r0, #1
   d7a36:	d8ee      	bhi.n	d7a16 <pinAvailable+0x46>
   d7a38:	f7ff fb7e 	bl	d7138 <_Z22__fetch_global_Serial1v>
   d7a3c:	7c00      	ldrb	r0, [r0, #16]
   d7a3e:	f7fe fb45 	bl	d60cc <hal_usart_is_enabled>
   d7a42:	e7f2      	b.n	d7a2a <pinAvailable+0x5a>
   d7a44:	2003e56c 	.word	0x2003e56c
   d7a48:	2003e570 	.word	0x2003e570

000d7a4c <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7a4c:	2823      	cmp	r0, #35	; 0x23
{
   d7a4e:	b538      	push	{r3, r4, r5, lr}
   d7a50:	4604      	mov	r4, r0
   d7a52:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7a54:	d80a      	bhi.n	d7a6c <pinMode+0x20>
   d7a56:	29ff      	cmp	r1, #255	; 0xff
   d7a58:	d008      	beq.n	d7a6c <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7a5a:	f7ff ffb9 	bl	d79d0 <pinAvailable>
   d7a5e:	b128      	cbz	r0, d7a6c <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7a60:	4629      	mov	r1, r5
   d7a62:	4620      	mov	r0, r4
}
   d7a64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7a68:	f7fe baa0 	b.w	d5fac <HAL_Pin_Mode>
}
   d7a6c:	bd38      	pop	{r3, r4, r5, pc}

000d7a6e <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7a6e:	b538      	push	{r3, r4, r5, lr}
   d7a70:	4604      	mov	r4, r0
   d7a72:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7a74:	f7fe faa2 	bl	d5fbc <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7a78:	28ff      	cmp	r0, #255	; 0xff
   d7a7a:	d010      	beq.n	d7a9e <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7a7c:	2806      	cmp	r0, #6
   d7a7e:	d804      	bhi.n	d7a8a <digitalWrite+0x1c>
   d7a80:	234d      	movs	r3, #77	; 0x4d
   d7a82:	fa23 f000 	lsr.w	r0, r3, r0
   d7a86:	07c3      	lsls	r3, r0, #31
   d7a88:	d409      	bmi.n	d7a9e <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7a8a:	4620      	mov	r0, r4
   d7a8c:	f7ff ffa0 	bl	d79d0 <pinAvailable>
   d7a90:	b128      	cbz	r0, d7a9e <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7a92:	4629      	mov	r1, r5
   d7a94:	4620      	mov	r0, r4
}
   d7a96:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7a9a:	f7fe ba97 	b.w	d5fcc <HAL_GPIO_Write>
}
   d7a9e:	bd38      	pop	{r3, r4, r5, pc}

000d7aa0 <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7aa0:	b510      	push	{r4, lr}
   d7aa2:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7aa4:	f7fe fa8a 	bl	d5fbc <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7aa8:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7aaa:	b2db      	uxtb	r3, r3
   d7aac:	2b01      	cmp	r3, #1
   d7aae:	d908      	bls.n	d7ac2 <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7ab0:	4620      	mov	r0, r4
   d7ab2:	f7ff ff8d 	bl	d79d0 <pinAvailable>
   d7ab6:	b120      	cbz	r0, d7ac2 <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7ab8:	4620      	mov	r0, r4
}
   d7aba:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7abe:	f7fe ba8d 	b.w	d5fdc <HAL_GPIO_Read>
}
   d7ac2:	2000      	movs	r0, #0
   d7ac4:	bd10      	pop	{r4, pc}
	...

000d7ac8 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7ac8:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7aca:	2300      	movs	r3, #0
   d7acc:	2520      	movs	r5, #32
   d7ace:	8043      	strh	r3, [r0, #2]
   d7ad0:	2314      	movs	r3, #20
{
   d7ad2:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7ad4:	8003      	strh	r3, [r0, #0]
   d7ad6:	6085      	str	r5, [r0, #8]
   d7ad8:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7ada:	4906      	ldr	r1, [pc, #24]	; (d7af4 <_Z17acquireWireBufferv+0x2c>)
   d7adc:	4628      	mov	r0, r5
   d7ade:	f000 f83a 	bl	d7b56 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7ae2:	4904      	ldr	r1, [pc, #16]	; (d7af4 <_Z17acquireWireBufferv+0x2c>)
	};
   d7ae4:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7ae6:	4628      	mov	r0, r5
   d7ae8:	f000 f835 	bl	d7b56 <_ZnajRKSt9nothrow_t>
	};
   d7aec:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7aee:	4620      	mov	r0, r4
   d7af0:	bd38      	pop	{r3, r4, r5, pc}
   d7af2:	bf00      	nop
   d7af4:	000da6f4 	.word	0x000da6f4

000d7af8 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7af8:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7afa:	4d0f      	ldr	r5, [pc, #60]	; (d7b38 <_Z19__fetch_global_Wirev+0x40>)
   d7afc:	7829      	ldrb	r1, [r5, #0]
   d7afe:	f3bf 8f5b 	dmb	ish
   d7b02:	f011 0401 	ands.w	r4, r1, #1
{
   d7b06:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7b08:	d113      	bne.n	d7b32 <_Z19__fetch_global_Wirev+0x3a>
   d7b0a:	4628      	mov	r0, r5
   d7b0c:	f7fc fac9 	bl	d40a2 <__cxa_guard_acquire>
   d7b10:	b178      	cbz	r0, d7b32 <_Z19__fetch_global_Wirev+0x3a>
   d7b12:	a801      	add	r0, sp, #4
   d7b14:	f7ff ffd8 	bl	d7ac8 <_Z17acquireWireBufferv>
   d7b18:	aa01      	add	r2, sp, #4
   d7b1a:	4621      	mov	r1, r4
   d7b1c:	4807      	ldr	r0, [pc, #28]	; (d7b3c <_Z19__fetch_global_Wirev+0x44>)
   d7b1e:	f7ff fb61 	bl	d71e4 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7b22:	4628      	mov	r0, r5
   d7b24:	f7fc fac2 	bl	d40ac <__cxa_guard_release>
   d7b28:	4a05      	ldr	r2, [pc, #20]	; (d7b40 <_Z19__fetch_global_Wirev+0x48>)
   d7b2a:	4906      	ldr	r1, [pc, #24]	; (d7b44 <_Z19__fetch_global_Wirev+0x4c>)
   d7b2c:	4803      	ldr	r0, [pc, #12]	; (d7b3c <_Z19__fetch_global_Wirev+0x44>)
   d7b2e:	f000 f80b 	bl	d7b48 <__aeabi_atexit>
	return wire;
}
   d7b32:	4802      	ldr	r0, [pc, #8]	; (d7b3c <_Z19__fetch_global_Wirev+0x44>)
   d7b34:	b007      	add	sp, #28
   d7b36:	bd30      	pop	{r4, r5, pc}
   d7b38:	2003e7d8 	.word	0x2003e7d8
   d7b3c:	2003e7dc 	.word	0x2003e7dc
   d7b40:	2003e404 	.word	0x2003e404
   d7b44:	000d718d 	.word	0x000d718d

000d7b48 <__aeabi_atexit>:
   d7b48:	460b      	mov	r3, r1
   d7b4a:	4601      	mov	r1, r0
   d7b4c:	4618      	mov	r0, r3
   d7b4e:	f002 bae9 	b.w	da124 <__cxa_atexit>

000d7b52 <_ZdlPvj>:
   d7b52:	f7fc baa4 	b.w	d409e <_ZdlPv>

000d7b56 <_ZnajRKSt9nothrow_t>:
   d7b56:	f7fc baa0 	b.w	d409a <_Znaj>
	...

000d7b5c <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d7b5c:	4901      	ldr	r1, [pc, #4]	; (d7b64 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d7b5e:	f000 b8f9 	b.w	d7d54 <_ZNKSt9type_infoeqERKS_>
   d7b62:	bf00      	nop
   d7b64:	000da710 	.word	0x000da710

000d7b68 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7b68:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7b6a:	2400      	movs	r4, #0
   d7b6c:	2310      	movs	r3, #16
   d7b6e:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d7b72:	6803      	ldr	r3, [r0, #0]
   d7b74:	9400      	str	r4, [sp, #0]
   d7b76:	699e      	ldr	r6, [r3, #24]
   d7b78:	f88d 4004 	strb.w	r4, [sp, #4]
   d7b7c:	4615      	mov	r5, r2
   d7b7e:	466b      	mov	r3, sp
   d7b80:	6812      	ldr	r2, [r2, #0]
   d7b82:	47b0      	blx	r6
   d7b84:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d7b88:	f003 0306 	and.w	r3, r3, #6
   d7b8c:	2b06      	cmp	r3, #6
   d7b8e:	bf03      	ittte	eq
   d7b90:	9b00      	ldreq	r3, [sp, #0]
   d7b92:	602b      	streq	r3, [r5, #0]
   d7b94:	2001      	moveq	r0, #1
   d7b96:	4620      	movne	r0, r4
   d7b98:	b004      	add	sp, #16
   d7b9a:	bd70      	pop	{r4, r5, r6, pc}

000d7b9c <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d7b9c:	9800      	ldr	r0, [sp, #0]
   d7b9e:	4290      	cmp	r0, r2
   d7ba0:	bf14      	ite	ne
   d7ba2:	2001      	movne	r0, #1
   d7ba4:	2006      	moveq	r0, #6
   d7ba6:	4770      	bx	lr

000d7ba8 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d7ba8:	b510      	push	{r4, lr}
   d7baa:	4b03      	ldr	r3, [pc, #12]	; (d7bb8 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7bac:	6003      	str	r3, [r0, #0]
   d7bae:	4604      	mov	r4, r0
   d7bb0:	f000 f8cd 	bl	d7d4e <_ZNSt9type_infoD1Ev>
   d7bb4:	4620      	mov	r0, r4
   d7bb6:	bd10      	pop	{r4, pc}
   d7bb8:	000da750 	.word	0x000da750

000d7bbc <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7bbc:	b510      	push	{r4, lr}
   d7bbe:	4604      	mov	r4, r0
   d7bc0:	f7ff fff2 	bl	d7ba8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7bc4:	4620      	mov	r0, r4
   d7bc6:	2108      	movs	r1, #8
   d7bc8:	f7ff ffc3 	bl	d7b52 <_ZdlPvj>
   d7bcc:	4620      	mov	r0, r4
   d7bce:	bd10      	pop	{r4, pc}

000d7bd0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7bd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7bd4:	461f      	mov	r7, r3
   d7bd6:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d7bda:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d7bde:	4598      	cmp	r8, r3
   d7be0:	4606      	mov	r6, r0
   d7be2:	4615      	mov	r5, r2
   d7be4:	d107      	bne.n	d7bf6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7be6:	9907      	ldr	r1, [sp, #28]
   d7be8:	f000 f8b4 	bl	d7d54 <_ZNKSt9type_infoeqERKS_>
   d7bec:	b118      	cbz	r0, d7bf6 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7bee:	7165      	strb	r5, [r4, #5]
   d7bf0:	2000      	movs	r0, #0
   d7bf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7bf6:	4639      	mov	r1, r7
   d7bf8:	4630      	mov	r0, r6
   d7bfa:	f000 f8ab 	bl	d7d54 <_ZNKSt9type_infoeqERKS_>
   d7bfe:	2800      	cmp	r0, #0
   d7c00:	d0f6      	beq.n	d7bf0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7c02:	2301      	movs	r3, #1
   d7c04:	f8c4 8000 	str.w	r8, [r4]
   d7c08:	7125      	strb	r5, [r4, #4]
   d7c0a:	71a3      	strb	r3, [r4, #6]
   d7c0c:	e7f0      	b.n	d7bf0 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7c0e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7c0e:	b538      	push	{r3, r4, r5, lr}
   d7c10:	4615      	mov	r5, r2
   d7c12:	461c      	mov	r4, r3
   d7c14:	f000 f89e 	bl	d7d54 <_ZNKSt9type_infoeqERKS_>
   d7c18:	b120      	cbz	r0, d7c24 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d7c1a:	2308      	movs	r3, #8
   d7c1c:	60e3      	str	r3, [r4, #12]
   d7c1e:	2306      	movs	r3, #6
   d7c20:	6025      	str	r5, [r4, #0]
   d7c22:	7123      	strb	r3, [r4, #4]
   d7c24:	bd38      	pop	{r3, r4, r5, pc}

000d7c26 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7c26:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7c28:	4605      	mov	r5, r0
   d7c2a:	460c      	mov	r4, r1
   d7c2c:	9201      	str	r2, [sp, #4]
   d7c2e:	461e      	mov	r6, r3
   d7c30:	f000 f890 	bl	d7d54 <_ZNKSt9type_infoeqERKS_>
   d7c34:	b950      	cbnz	r0, d7c4c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7c36:	2e03      	cmp	r6, #3
   d7c38:	d808      	bhi.n	d7c4c <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7c3a:	6823      	ldr	r3, [r4, #0]
   d7c3c:	9a01      	ldr	r2, [sp, #4]
   d7c3e:	695b      	ldr	r3, [r3, #20]
   d7c40:	4629      	mov	r1, r5
   d7c42:	4620      	mov	r0, r4
   d7c44:	b002      	add	sp, #8
   d7c46:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7c4a:	4718      	bx	r3
   d7c4c:	b002      	add	sp, #8
   d7c4e:	bd70      	pop	{r4, r5, r6, pc}

000d7c50 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7c50:	b510      	push	{r4, lr}
   d7c52:	4b03      	ldr	r3, [pc, #12]	; (d7c60 <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7c54:	6003      	str	r3, [r0, #0]
   d7c56:	4604      	mov	r4, r0
   d7c58:	f7ff ffa6 	bl	d7ba8 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7c5c:	4620      	mov	r0, r4
   d7c5e:	bd10      	pop	{r4, pc}
   d7c60:	000da7b0 	.word	0x000da7b0

000d7c64 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7c64:	b510      	push	{r4, lr}
   d7c66:	4604      	mov	r4, r0
   d7c68:	f7ff fff2 	bl	d7c50 <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d7c6c:	4620      	mov	r0, r4
   d7c6e:	210c      	movs	r1, #12
   d7c70:	f7ff ff6f 	bl	d7b52 <_ZdlPvj>
   d7c74:	4620      	mov	r0, r4
   d7c76:	bd10      	pop	{r4, pc}

000d7c78 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7c78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7c7a:	9f08      	ldr	r7, [sp, #32]
   d7c7c:	4297      	cmp	r7, r2
   d7c7e:	4605      	mov	r5, r0
   d7c80:	460e      	mov	r6, r1
   d7c82:	4614      	mov	r4, r2
   d7c84:	d00a      	beq.n	d7c9c <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d7c86:	68a8      	ldr	r0, [r5, #8]
   d7c88:	6802      	ldr	r2, [r0, #0]
   d7c8a:	9708      	str	r7, [sp, #32]
   d7c8c:	6a15      	ldr	r5, [r2, #32]
   d7c8e:	4631      	mov	r1, r6
   d7c90:	4622      	mov	r2, r4
   d7c92:	46ac      	mov	ip, r5
   d7c94:	b003      	add	sp, #12
   d7c96:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7c9a:	4760      	bx	ip
   d7c9c:	4619      	mov	r1, r3
   d7c9e:	9301      	str	r3, [sp, #4]
   d7ca0:	f000 f858 	bl	d7d54 <_ZNKSt9type_infoeqERKS_>
   d7ca4:	9b01      	ldr	r3, [sp, #4]
   d7ca6:	2800      	cmp	r0, #0
   d7ca8:	d0ed      	beq.n	d7c86 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d7caa:	2006      	movs	r0, #6
   d7cac:	b003      	add	sp, #12
   d7cae:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7cb0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7cb0:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7cb4:	460d      	mov	r5, r1
   d7cb6:	4619      	mov	r1, r3
   d7cb8:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7cbc:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d7cc0:	4681      	mov	r9, r0
   d7cc2:	4617      	mov	r7, r2
   d7cc4:	4698      	mov	r8, r3
   d7cc6:	f000 f845 	bl	d7d54 <_ZNKSt9type_infoeqERKS_>
   d7cca:	b190      	cbz	r0, d7cf2 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d7ccc:	2d00      	cmp	r5, #0
   d7cce:	6034      	str	r4, [r6, #0]
   d7cd0:	7137      	strb	r7, [r6, #4]
   d7cd2:	db09      	blt.n	d7ce8 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7cd4:	1961      	adds	r1, r4, r5
   d7cd6:	458a      	cmp	sl, r1
   d7cd8:	bf0c      	ite	eq
   d7cda:	2106      	moveq	r1, #6
   d7cdc:	2101      	movne	r1, #1
   d7cde:	71b1      	strb	r1, [r6, #6]
   d7ce0:	2000      	movs	r0, #0
   d7ce2:	b001      	add	sp, #4
   d7ce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7ce8:	3502      	adds	r5, #2
   d7cea:	d1f9      	bne.n	d7ce0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7cec:	2301      	movs	r3, #1
   d7cee:	71b3      	strb	r3, [r6, #6]
   d7cf0:	e7f6      	b.n	d7ce0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7cf2:	4554      	cmp	r4, sl
   d7cf4:	d106      	bne.n	d7d04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7cf6:	4659      	mov	r1, fp
   d7cf8:	4648      	mov	r0, r9
   d7cfa:	f000 f82b 	bl	d7d54 <_ZNKSt9type_infoeqERKS_>
   d7cfe:	b108      	cbz	r0, d7d04 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7d00:	7177      	strb	r7, [r6, #5]
   d7d02:	e7ed      	b.n	d7ce0 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7d04:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7d08:	6803      	ldr	r3, [r0, #0]
   d7d0a:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7d0e:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d7d12:	69dc      	ldr	r4, [r3, #28]
   d7d14:	463a      	mov	r2, r7
   d7d16:	4643      	mov	r3, r8
   d7d18:	4629      	mov	r1, r5
   d7d1a:	46a4      	mov	ip, r4
   d7d1c:	b001      	add	sp, #4
   d7d1e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d22:	4760      	bx	ip

000d7d24 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7d24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7d28:	4607      	mov	r7, r0
   d7d2a:	460c      	mov	r4, r1
   d7d2c:	4615      	mov	r5, r2
   d7d2e:	461e      	mov	r6, r3
   d7d30:	f7ff ff6d 	bl	d7c0e <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7d34:	b948      	cbnz	r0, d7d4a <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d7d36:	68b8      	ldr	r0, [r7, #8]
   d7d38:	6803      	ldr	r3, [r0, #0]
   d7d3a:	699f      	ldr	r7, [r3, #24]
   d7d3c:	462a      	mov	r2, r5
   d7d3e:	4633      	mov	r3, r6
   d7d40:	4621      	mov	r1, r4
   d7d42:	46bc      	mov	ip, r7
   d7d44:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7d48:	4760      	bx	ip
   d7d4a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7d4e <_ZNSt9type_infoD1Ev>:
   d7d4e:	4770      	bx	lr

000d7d50 <_ZNKSt9type_info14__is_pointer_pEv>:
   d7d50:	2000      	movs	r0, #0
   d7d52:	4770      	bx	lr

000d7d54 <_ZNKSt9type_infoeqERKS_>:
   d7d54:	4281      	cmp	r1, r0
   d7d56:	b508      	push	{r3, lr}
   d7d58:	d00e      	beq.n	d7d78 <_ZNKSt9type_infoeqERKS_+0x24>
   d7d5a:	6840      	ldr	r0, [r0, #4]
   d7d5c:	7803      	ldrb	r3, [r0, #0]
   d7d5e:	2b2a      	cmp	r3, #42	; 0x2a
   d7d60:	d00c      	beq.n	d7d7c <_ZNKSt9type_infoeqERKS_+0x28>
   d7d62:	6849      	ldr	r1, [r1, #4]
   d7d64:	780b      	ldrb	r3, [r1, #0]
   d7d66:	2b2a      	cmp	r3, #42	; 0x2a
   d7d68:	bf08      	it	eq
   d7d6a:	3101      	addeq	r1, #1
   d7d6c:	f002 fa31 	bl	da1d2 <strcmp>
   d7d70:	fab0 f080 	clz	r0, r0
   d7d74:	0940      	lsrs	r0, r0, #5
   d7d76:	bd08      	pop	{r3, pc}
   d7d78:	2001      	movs	r0, #1
   d7d7a:	e7fc      	b.n	d7d76 <_ZNKSt9type_infoeqERKS_+0x22>
   d7d7c:	2000      	movs	r0, #0
   d7d7e:	e7fa      	b.n	d7d76 <_ZNKSt9type_infoeqERKS_+0x22>

000d7d80 <pow>:
   d7d80:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d84:	ed2d 8b02 	vpush	{d8}
   d7d88:	b08d      	sub	sp, #52	; 0x34
   d7d8a:	ec57 6b10 	vmov	r6, r7, d0
   d7d8e:	ec55 4b11 	vmov	r4, r5, d1
   d7d92:	f000 fa09 	bl	d81a8 <__ieee754_pow>
   d7d96:	4bae      	ldr	r3, [pc, #696]	; (d8050 <pow+0x2d0>)
   d7d98:	eeb0 8a40 	vmov.f32	s16, s0
   d7d9c:	eef0 8a60 	vmov.f32	s17, s1
   d7da0:	f993 9000 	ldrsb.w	r9, [r3]
   d7da4:	f1b9 3fff 	cmp.w	r9, #4294967295
   d7da8:	d037      	beq.n	d7e1a <pow+0x9a>
   d7daa:	4622      	mov	r2, r4
   d7dac:	462b      	mov	r3, r5
   d7dae:	4620      	mov	r0, r4
   d7db0:	4629      	mov	r1, r5
   d7db2:	f001 fe35 	bl	d9a20 <__aeabi_dcmpun>
   d7db6:	4683      	mov	fp, r0
   d7db8:	bb78      	cbnz	r0, d7e1a <pow+0x9a>
   d7dba:	4632      	mov	r2, r6
   d7dbc:	463b      	mov	r3, r7
   d7dbe:	4630      	mov	r0, r6
   d7dc0:	4639      	mov	r1, r7
   d7dc2:	f001 fe2d 	bl	d9a20 <__aeabi_dcmpun>
   d7dc6:	4680      	mov	r8, r0
   d7dc8:	2800      	cmp	r0, #0
   d7dca:	f040 8093 	bne.w	d7ef4 <pow+0x174>
   d7dce:	f04f 0a00 	mov.w	sl, #0
   d7dd2:	f04f 0b00 	mov.w	fp, #0
   d7dd6:	4630      	mov	r0, r6
   d7dd8:	4639      	mov	r1, r7
   d7dda:	4652      	mov	r2, sl
   d7ddc:	465b      	mov	r3, fp
   d7dde:	f001 fded 	bl	d99bc <__aeabi_dcmpeq>
   d7de2:	b318      	cbz	r0, d7e2c <pow+0xac>
   d7de4:	4652      	mov	r2, sl
   d7de6:	465b      	mov	r3, fp
   d7de8:	4620      	mov	r0, r4
   d7dea:	4629      	mov	r1, r5
   d7dec:	f001 fde6 	bl	d99bc <__aeabi_dcmpeq>
   d7df0:	9000      	str	r0, [sp, #0]
   d7df2:	2800      	cmp	r0, #0
   d7df4:	d057      	beq.n	d7ea6 <pow+0x126>
   d7df6:	4b97      	ldr	r3, [pc, #604]	; (d8054 <pow+0x2d4>)
   d7df8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d7dfc:	2201      	movs	r2, #1
   d7dfe:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7e02:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7e06:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7e0a:	9202      	str	r2, [sp, #8]
   d7e0c:	9303      	str	r3, [sp, #12]
   d7e0e:	f1b9 0f00 	cmp.w	r9, #0
   d7e12:	f000 8089 	beq.w	d7f28 <pow+0x1a8>
   d7e16:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d8040 <pow+0x2c0>
   d7e1a:	eeb0 0a48 	vmov.f32	s0, s16
   d7e1e:	eef0 0a68 	vmov.f32	s1, s17
   d7e22:	b00d      	add	sp, #52	; 0x34
   d7e24:	ecbd 8b02 	vpop	{d8}
   d7e28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7e2c:	eeb0 0a48 	vmov.f32	s0, s16
   d7e30:	eef0 0a68 	vmov.f32	s1, s17
   d7e34:	f001 f860 	bl	d8ef8 <finite>
   d7e38:	4680      	mov	r8, r0
   d7e3a:	2800      	cmp	r0, #0
   d7e3c:	f000 8082 	beq.w	d7f44 <pow+0x1c4>
   d7e40:	f04f 0800 	mov.w	r8, #0
   d7e44:	f04f 0900 	mov.w	r9, #0
   d7e48:	ec51 0b18 	vmov	r0, r1, d8
   d7e4c:	4642      	mov	r2, r8
   d7e4e:	464b      	mov	r3, r9
   d7e50:	f001 fdb4 	bl	d99bc <__aeabi_dcmpeq>
   d7e54:	2800      	cmp	r0, #0
   d7e56:	d0e0      	beq.n	d7e1a <pow+0x9a>
   d7e58:	ec47 6b10 	vmov	d0, r6, r7
   d7e5c:	f001 f84c 	bl	d8ef8 <finite>
   d7e60:	2800      	cmp	r0, #0
   d7e62:	d0da      	beq.n	d7e1a <pow+0x9a>
   d7e64:	ec45 4b10 	vmov	d0, r4, r5
   d7e68:	f001 f846 	bl	d8ef8 <finite>
   d7e6c:	2800      	cmp	r0, #0
   d7e6e:	d0d4      	beq.n	d7e1a <pow+0x9a>
   d7e70:	4b77      	ldr	r3, [pc, #476]	; (d8050 <pow+0x2d0>)
   d7e72:	4a78      	ldr	r2, [pc, #480]	; (d8054 <pow+0x2d4>)
   d7e74:	f993 3000 	ldrsb.w	r3, [r3]
   d7e78:	9203      	str	r2, [sp, #12]
   d7e7a:	2104      	movs	r1, #4
   d7e7c:	2200      	movs	r2, #0
   d7e7e:	2b02      	cmp	r3, #2
   d7e80:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7e84:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7e88:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d7e8c:	9102      	str	r1, [sp, #8]
   d7e8e:	920a      	str	r2, [sp, #40]	; 0x28
   d7e90:	d004      	beq.n	d7e9c <pow+0x11c>
   d7e92:	a802      	add	r0, sp, #8
   d7e94:	f001 f83c 	bl	d8f10 <matherr>
   d7e98:	2800      	cmp	r0, #0
   d7e9a:	d14a      	bne.n	d7f32 <pow+0x1b2>
   d7e9c:	f7fe fad2 	bl	d6444 <__errno>
   d7ea0:	2322      	movs	r3, #34	; 0x22
   d7ea2:	6003      	str	r3, [r0, #0]
   d7ea4:	e045      	b.n	d7f32 <pow+0x1b2>
   d7ea6:	ec45 4b10 	vmov	d0, r4, r5
   d7eaa:	f001 f825 	bl	d8ef8 <finite>
   d7eae:	2800      	cmp	r0, #0
   d7eb0:	d0b3      	beq.n	d7e1a <pow+0x9a>
   d7eb2:	4652      	mov	r2, sl
   d7eb4:	465b      	mov	r3, fp
   d7eb6:	4620      	mov	r0, r4
   d7eb8:	4629      	mov	r1, r5
   d7eba:	f001 fd89 	bl	d99d0 <__aeabi_dcmplt>
   d7ebe:	2800      	cmp	r0, #0
   d7ec0:	d0ab      	beq.n	d7e1a <pow+0x9a>
   d7ec2:	4b63      	ldr	r3, [pc, #396]	; (d8050 <pow+0x2d0>)
   d7ec4:	9900      	ldr	r1, [sp, #0]
   d7ec6:	4a63      	ldr	r2, [pc, #396]	; (d8054 <pow+0x2d4>)
   d7ec8:	f993 3000 	ldrsb.w	r3, [r3]
   d7ecc:	910a      	str	r1, [sp, #40]	; 0x28
   d7ece:	2101      	movs	r1, #1
   d7ed0:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7ed4:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7ed8:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d7edc:	2b00      	cmp	r3, #0
   d7ede:	d16f      	bne.n	d7fc0 <pow+0x240>
   d7ee0:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7ee4:	a802      	add	r0, sp, #8
   d7ee6:	f001 f813 	bl	d8f10 <matherr>
   d7eea:	2800      	cmp	r0, #0
   d7eec:	d06e      	beq.n	d7fcc <pow+0x24c>
   d7eee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7ef0:	b32b      	cbz	r3, d7f3e <pow+0x1be>
   d7ef2:	e020      	b.n	d7f36 <pow+0x1b6>
   d7ef4:	2200      	movs	r2, #0
   d7ef6:	2300      	movs	r3, #0
   d7ef8:	4620      	mov	r0, r4
   d7efa:	4629      	mov	r1, r5
   d7efc:	f001 fd5e 	bl	d99bc <__aeabi_dcmpeq>
   d7f00:	2800      	cmp	r0, #0
   d7f02:	d08a      	beq.n	d7e1a <pow+0x9a>
   d7f04:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d8040 <pow+0x2c0>
   d7f08:	4b52      	ldr	r3, [pc, #328]	; (d8054 <pow+0x2d4>)
   d7f0a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d7f0e:	2201      	movs	r2, #1
   d7f10:	f1b9 0f02 	cmp.w	r9, #2
   d7f14:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7f18:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7f1c:	ed8d 8b08 	vstr	d8, [sp, #32]
   d7f20:	9202      	str	r2, [sp, #8]
   d7f22:	9303      	str	r3, [sp, #12]
   d7f24:	f43f af79 	beq.w	d7e1a <pow+0x9a>
   d7f28:	a802      	add	r0, sp, #8
   d7f2a:	f000 fff1 	bl	d8f10 <matherr>
   d7f2e:	2800      	cmp	r0, #0
   d7f30:	d051      	beq.n	d7fd6 <pow+0x256>
   d7f32:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7f34:	b11b      	cbz	r3, d7f3e <pow+0x1be>
   d7f36:	f7fe fa85 	bl	d6444 <__errno>
   d7f3a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7f3c:	6003      	str	r3, [r0, #0]
   d7f3e:	ed9d 8b08 	vldr	d8, [sp, #32]
   d7f42:	e76a      	b.n	d7e1a <pow+0x9a>
   d7f44:	ec47 6b10 	vmov	d0, r6, r7
   d7f48:	f000 ffd6 	bl	d8ef8 <finite>
   d7f4c:	2800      	cmp	r0, #0
   d7f4e:	f43f af77 	beq.w	d7e40 <pow+0xc0>
   d7f52:	ec45 4b10 	vmov	d0, r4, r5
   d7f56:	f000 ffcf 	bl	d8ef8 <finite>
   d7f5a:	2800      	cmp	r0, #0
   d7f5c:	f43f af70 	beq.w	d7e40 <pow+0xc0>
   d7f60:	ec53 2b18 	vmov	r2, r3, d8
   d7f64:	ee18 0a10 	vmov	r0, s16
   d7f68:	4619      	mov	r1, r3
   d7f6a:	f001 fd59 	bl	d9a20 <__aeabi_dcmpun>
   d7f6e:	4b38      	ldr	r3, [pc, #224]	; (d8050 <pow+0x2d0>)
   d7f70:	2800      	cmp	r0, #0
   d7f72:	f040 8096 	bne.w	d80a2 <pow+0x322>
   d7f76:	f993 8000 	ldrsb.w	r8, [r3]
   d7f7a:	900a      	str	r0, [sp, #40]	; 0x28
   d7f7c:	2303      	movs	r3, #3
   d7f7e:	9302      	str	r3, [sp, #8]
   d7f80:	4b34      	ldr	r3, [pc, #208]	; (d8054 <pow+0x2d4>)
   d7f82:	9303      	str	r3, [sp, #12]
   d7f84:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7f88:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7f8c:	f1b8 0f00 	cmp.w	r8, #0
   d7f90:	d126      	bne.n	d7fe0 <pow+0x260>
   d7f92:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d8064 <pow+0x2e4>
   d7f96:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d7f9a:	4652      	mov	r2, sl
   d7f9c:	465b      	mov	r3, fp
   d7f9e:	4630      	mov	r0, r6
   d7fa0:	4639      	mov	r1, r7
   d7fa2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d7fa6:	f001 fd13 	bl	d99d0 <__aeabi_dcmplt>
   d7faa:	bb48      	cbnz	r0, d8000 <pow+0x280>
   d7fac:	a802      	add	r0, sp, #8
   d7fae:	f000 ffaf 	bl	d8f10 <matherr>
   d7fb2:	2800      	cmp	r0, #0
   d7fb4:	d19b      	bne.n	d7eee <pow+0x16e>
   d7fb6:	f7fe fa45 	bl	d6444 <__errno>
   d7fba:	2322      	movs	r3, #34	; 0x22
   d7fbc:	6003      	str	r3, [r0, #0]
   d7fbe:	e796      	b.n	d7eee <pow+0x16e>
   d7fc0:	4925      	ldr	r1, [pc, #148]	; (d8058 <pow+0x2d8>)
   d7fc2:	2000      	movs	r0, #0
   d7fc4:	2b02      	cmp	r3, #2
   d7fc6:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d7fca:	d18b      	bne.n	d7ee4 <pow+0x164>
   d7fcc:	f7fe fa3a 	bl	d6444 <__errno>
   d7fd0:	2321      	movs	r3, #33	; 0x21
   d7fd2:	6003      	str	r3, [r0, #0]
   d7fd4:	e78b      	b.n	d7eee <pow+0x16e>
   d7fd6:	f7fe fa35 	bl	d6444 <__errno>
   d7fda:	2321      	movs	r3, #33	; 0x21
   d7fdc:	6003      	str	r3, [r0, #0]
   d7fde:	e7a8      	b.n	d7f32 <pow+0x1b2>
   d7fe0:	ed9f 7b19 	vldr	d7, [pc, #100]	; d8048 <pow+0x2c8>
   d7fe4:	4652      	mov	r2, sl
   d7fe6:	465b      	mov	r3, fp
   d7fe8:	4630      	mov	r0, r6
   d7fea:	4639      	mov	r1, r7
   d7fec:	ed8d 7b08 	vstr	d7, [sp, #32]
   d7ff0:	f001 fcee 	bl	d99d0 <__aeabi_dcmplt>
   d7ff4:	2800      	cmp	r0, #0
   d7ff6:	d137      	bne.n	d8068 <pow+0x2e8>
   d7ff8:	f1b8 0f02 	cmp.w	r8, #2
   d7ffc:	d0db      	beq.n	d7fb6 <pow+0x236>
   d7ffe:	e7d5      	b.n	d7fac <pow+0x22c>
   d8000:	4b16      	ldr	r3, [pc, #88]	; (d805c <pow+0x2dc>)
   d8002:	2200      	movs	r2, #0
   d8004:	4620      	mov	r0, r4
   d8006:	4629      	mov	r1, r5
   d8008:	f001 fa70 	bl	d94ec <__aeabi_dmul>
   d800c:	4602      	mov	r2, r0
   d800e:	460b      	mov	r3, r1
   d8010:	ec43 2b10 	vmov	d0, r2, r3
   d8014:	e9cd 2300 	strd	r2, r3, [sp]
   d8018:	f000 ff86 	bl	d8f28 <rint>
   d801c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8020:	ec51 0b10 	vmov	r0, r1, d0
   d8024:	f001 fcca 	bl	d99bc <__aeabi_dcmpeq>
   d8028:	2800      	cmp	r0, #0
   d802a:	d136      	bne.n	d809a <pow+0x31a>
   d802c:	4b0c      	ldr	r3, [pc, #48]	; (d8060 <pow+0x2e0>)
   d802e:	4908      	ldr	r1, [pc, #32]	; (d8050 <pow+0x2d0>)
   d8030:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8034:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d8038:	f991 8000 	ldrsb.w	r8, [r1]
   d803c:	e7dc      	b.n	d7ff8 <pow+0x278>
   d803e:	bf00      	nop
   d8040:	00000000 	.word	0x00000000
   d8044:	3ff00000 	.word	0x3ff00000
   d8048:	00000000 	.word	0x00000000
   d804c:	7ff00000 	.word	0x7ff00000
   d8050:	2003e39c 	.word	0x2003e39c
   d8054:	000da7ec 	.word	0x000da7ec
   d8058:	fff00000 	.word	0xfff00000
   d805c:	3fe00000 	.word	0x3fe00000
   d8060:	c7efffff 	.word	0xc7efffff
   d8064:	47efffff 	.word	0x47efffff
   d8068:	4b1c      	ldr	r3, [pc, #112]	; (d80dc <pow+0x35c>)
   d806a:	2200      	movs	r2, #0
   d806c:	4620      	mov	r0, r4
   d806e:	4629      	mov	r1, r5
   d8070:	f001 fa3c 	bl	d94ec <__aeabi_dmul>
   d8074:	4602      	mov	r2, r0
   d8076:	460b      	mov	r3, r1
   d8078:	ec43 2b10 	vmov	d0, r2, r3
   d807c:	e9cd 2300 	strd	r2, r3, [sp]
   d8080:	f000 ff52 	bl	d8f28 <rint>
   d8084:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8088:	ec51 0b10 	vmov	r0, r1, d0
   d808c:	f001 fc96 	bl	d99bc <__aeabi_dcmpeq>
   d8090:	b918      	cbnz	r0, d809a <pow+0x31a>
   d8092:	4b13      	ldr	r3, [pc, #76]	; (d80e0 <pow+0x360>)
   d8094:	2200      	movs	r2, #0
   d8096:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d809a:	4b12      	ldr	r3, [pc, #72]	; (d80e4 <pow+0x364>)
   d809c:	f993 8000 	ldrsb.w	r8, [r3]
   d80a0:	e7aa      	b.n	d7ff8 <pow+0x278>
   d80a2:	f993 9000 	ldrsb.w	r9, [r3]
   d80a6:	4b10      	ldr	r3, [pc, #64]	; (d80e8 <pow+0x368>)
   d80a8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d80ac:	2201      	movs	r2, #1
   d80ae:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d80b2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d80b6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d80ba:	f1b9 0f00 	cmp.w	r9, #0
   d80be:	f43f af0f 	beq.w	d7ee0 <pow+0x160>
   d80c2:	4652      	mov	r2, sl
   d80c4:	465b      	mov	r3, fp
   d80c6:	4650      	mov	r0, sl
   d80c8:	4659      	mov	r1, fp
   d80ca:	f001 fb39 	bl	d9740 <__aeabi_ddiv>
   d80ce:	f1b9 0f02 	cmp.w	r9, #2
   d80d2:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d80d6:	f43f af79 	beq.w	d7fcc <pow+0x24c>
   d80da:	e703      	b.n	d7ee4 <pow+0x164>
   d80dc:	3fe00000 	.word	0x3fe00000
   d80e0:	fff00000 	.word	0xfff00000
   d80e4:	2003e39c 	.word	0x2003e39c
   d80e8:	000da7ec 	.word	0x000da7ec

000d80ec <sqrt>:
   d80ec:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d80f0:	ed2d 8b02 	vpush	{d8}
   d80f4:	b08b      	sub	sp, #44	; 0x2c
   d80f6:	ec55 4b10 	vmov	r4, r5, d0
   d80fa:	f000 fe2f 	bl	d8d5c <__ieee754_sqrt>
   d80fe:	4b28      	ldr	r3, [pc, #160]	; (d81a0 <sqrt+0xb4>)
   d8100:	eeb0 8a40 	vmov.f32	s16, s0
   d8104:	eef0 8a60 	vmov.f32	s17, s1
   d8108:	f993 7000 	ldrsb.w	r7, [r3]
   d810c:	1c7b      	adds	r3, r7, #1
   d810e:	d012      	beq.n	d8136 <sqrt+0x4a>
   d8110:	4622      	mov	r2, r4
   d8112:	462b      	mov	r3, r5
   d8114:	4620      	mov	r0, r4
   d8116:	4629      	mov	r1, r5
   d8118:	f001 fc82 	bl	d9a20 <__aeabi_dcmpun>
   d811c:	4606      	mov	r6, r0
   d811e:	b950      	cbnz	r0, d8136 <sqrt+0x4a>
   d8120:	f04f 0800 	mov.w	r8, #0
   d8124:	f04f 0900 	mov.w	r9, #0
   d8128:	4620      	mov	r0, r4
   d812a:	4629      	mov	r1, r5
   d812c:	4642      	mov	r2, r8
   d812e:	464b      	mov	r3, r9
   d8130:	f001 fc4e 	bl	d99d0 <__aeabi_dcmplt>
   d8134:	b940      	cbnz	r0, d8148 <sqrt+0x5c>
   d8136:	eeb0 0a48 	vmov.f32	s0, s16
   d813a:	eef0 0a68 	vmov.f32	s1, s17
   d813e:	b00b      	add	sp, #44	; 0x2c
   d8140:	ecbd 8b02 	vpop	{d8}
   d8144:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8148:	4b16      	ldr	r3, [pc, #88]	; (d81a4 <sqrt+0xb8>)
   d814a:	9608      	str	r6, [sp, #32]
   d814c:	2201      	movs	r2, #1
   d814e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8152:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d8156:	9200      	str	r2, [sp, #0]
   d8158:	9301      	str	r3, [sp, #4]
   d815a:	b197      	cbz	r7, d8182 <sqrt+0x96>
   d815c:	4642      	mov	r2, r8
   d815e:	464b      	mov	r3, r9
   d8160:	4640      	mov	r0, r8
   d8162:	4649      	mov	r1, r9
   d8164:	f001 faec 	bl	d9740 <__aeabi_ddiv>
   d8168:	2f02      	cmp	r7, #2
   d816a:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d816e:	d10a      	bne.n	d8186 <sqrt+0x9a>
   d8170:	f7fe f968 	bl	d6444 <__errno>
   d8174:	2321      	movs	r3, #33	; 0x21
   d8176:	6003      	str	r3, [r0, #0]
   d8178:	9b08      	ldr	r3, [sp, #32]
   d817a:	b963      	cbnz	r3, d8196 <sqrt+0xaa>
   d817c:	ed9d 8b06 	vldr	d8, [sp, #24]
   d8180:	e7d9      	b.n	d8136 <sqrt+0x4a>
   d8182:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d8186:	4668      	mov	r0, sp
   d8188:	f000 fec2 	bl	d8f10 <matherr>
   d818c:	2800      	cmp	r0, #0
   d818e:	d0ef      	beq.n	d8170 <sqrt+0x84>
   d8190:	9b08      	ldr	r3, [sp, #32]
   d8192:	2b00      	cmp	r3, #0
   d8194:	d0f2      	beq.n	d817c <sqrt+0x90>
   d8196:	f7fe f955 	bl	d6444 <__errno>
   d819a:	9b08      	ldr	r3, [sp, #32]
   d819c:	6003      	str	r3, [r0, #0]
   d819e:	e7ed      	b.n	d817c <sqrt+0x90>
   d81a0:	2003e39c 	.word	0x2003e39c
   d81a4:	000da7f0 	.word	0x000da7f0

000d81a8 <__ieee754_pow>:
   d81a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d81ac:	ec57 6b11 	vmov	r6, r7, d1
   d81b0:	ed2d 8b0a 	vpush	{d8-d12}
   d81b4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d81b8:	ea5a 0206 	orrs.w	r2, sl, r6
   d81bc:	b089      	sub	sp, #36	; 0x24
   d81be:	d03d      	beq.n	d823c <__ieee754_pow+0x94>
   d81c0:	ec55 4b10 	vmov	r4, r5, d0
   d81c4:	4976      	ldr	r1, [pc, #472]	; (d83a0 <__ieee754_pow+0x1f8>)
   d81c6:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d81ca:	4588      	cmp	r8, r1
   d81cc:	ee10 2a10 	vmov	r2, s0
   d81d0:	46a9      	mov	r9, r5
   d81d2:	dc2c      	bgt.n	d822e <__ieee754_pow+0x86>
   d81d4:	ee11 3a10 	vmov	r3, s2
   d81d8:	46bb      	mov	fp, r7
   d81da:	d03a      	beq.n	d8252 <__ieee754_pow+0xaa>
   d81dc:	458a      	cmp	sl, r1
   d81de:	dc26      	bgt.n	d822e <__ieee754_pow+0x86>
   d81e0:	496f      	ldr	r1, [pc, #444]	; (d83a0 <__ieee754_pow+0x1f8>)
   d81e2:	458a      	cmp	sl, r1
   d81e4:	d021      	beq.n	d822a <__ieee754_pow+0x82>
   d81e6:	f1b9 0f00 	cmp.w	r9, #0
   d81ea:	db3d      	blt.n	d8268 <__ieee754_pow+0xc0>
   d81ec:	2100      	movs	r1, #0
   d81ee:	9103      	str	r1, [sp, #12]
   d81f0:	2b00      	cmp	r3, #0
   d81f2:	d155      	bne.n	d82a0 <__ieee754_pow+0xf8>
   d81f4:	4b6a      	ldr	r3, [pc, #424]	; (d83a0 <__ieee754_pow+0x1f8>)
   d81f6:	459a      	cmp	sl, r3
   d81f8:	f000 80a8 	beq.w	d834c <__ieee754_pow+0x1a4>
   d81fc:	4b69      	ldr	r3, [pc, #420]	; (d83a4 <__ieee754_pow+0x1fc>)
   d81fe:	459a      	cmp	sl, r3
   d8200:	f000 80b6 	beq.w	d8370 <__ieee754_pow+0x1c8>
   d8204:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d8208:	f000 8501 	beq.w	d8c0e <__ieee754_pow+0xa66>
   d820c:	4b66      	ldr	r3, [pc, #408]	; (d83a8 <__ieee754_pow+0x200>)
   d820e:	459b      	cmp	fp, r3
   d8210:	d146      	bne.n	d82a0 <__ieee754_pow+0xf8>
   d8212:	f1b9 0f00 	cmp.w	r9, #0
   d8216:	db43      	blt.n	d82a0 <__ieee754_pow+0xf8>
   d8218:	ec45 4b10 	vmov	d0, r4, r5
   d821c:	b009      	add	sp, #36	; 0x24
   d821e:	ecbd 8b0a 	vpop	{d8-d12}
   d8222:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8226:	f000 bd99 	b.w	d8d5c <__ieee754_sqrt>
   d822a:	2b00      	cmp	r3, #0
   d822c:	d0db      	beq.n	d81e6 <__ieee754_pow+0x3e>
   d822e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d8232:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d8236:	ea58 0302 	orrs.w	r3, r8, r2
   d823a:	d10d      	bne.n	d8258 <__ieee754_pow+0xb0>
   d823c:	ed9f 7b54 	vldr	d7, [pc, #336]	; d8390 <__ieee754_pow+0x1e8>
   d8240:	ed8d 7b00 	vstr	d7, [sp]
   d8244:	ed9d 0b00 	vldr	d0, [sp]
   d8248:	b009      	add	sp, #36	; 0x24
   d824a:	ecbd 8b0a 	vpop	{d8-d12}
   d824e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8252:	b90c      	cbnz	r4, d8258 <__ieee754_pow+0xb0>
   d8254:	45c2      	cmp	sl, r8
   d8256:	ddc3      	ble.n	d81e0 <__ieee754_pow+0x38>
   d8258:	4854      	ldr	r0, [pc, #336]	; (d83ac <__ieee754_pow+0x204>)
   d825a:	b009      	add	sp, #36	; 0x24
   d825c:	ecbd 8b0a 	vpop	{d8-d12}
   d8260:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8264:	f000 be58 	b.w	d8f18 <nan>
   d8268:	4951      	ldr	r1, [pc, #324]	; (d83b0 <__ieee754_pow+0x208>)
   d826a:	458a      	cmp	sl, r1
   d826c:	f300 8087 	bgt.w	d837e <__ieee754_pow+0x1d6>
   d8270:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d8274:	458a      	cmp	sl, r1
   d8276:	dd0f      	ble.n	d8298 <__ieee754_pow+0xf0>
   d8278:	ea4f 512a 	mov.w	r1, sl, asr #20
   d827c:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d8280:	2914      	cmp	r1, #20
   d8282:	f340 84ce 	ble.w	d8c22 <__ieee754_pow+0xa7a>
   d8286:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d828a:	fa23 f001 	lsr.w	r0, r3, r1
   d828e:	fa00 f101 	lsl.w	r1, r0, r1
   d8292:	4299      	cmp	r1, r3
   d8294:	f000 8520 	beq.w	d8cd8 <__ieee754_pow+0xb30>
   d8298:	2100      	movs	r1, #0
   d829a:	9103      	str	r1, [sp, #12]
   d829c:	2b00      	cmp	r3, #0
   d829e:	d0ad      	beq.n	d81fc <__ieee754_pow+0x54>
   d82a0:	ec45 4b10 	vmov	d0, r4, r5
   d82a4:	9206      	str	r2, [sp, #24]
   d82a6:	f000 fe1d 	bl	d8ee4 <fabs>
   d82aa:	9a06      	ldr	r2, [sp, #24]
   d82ac:	ed8d 0b00 	vstr	d0, [sp]
   d82b0:	bb5a      	cbnz	r2, d830a <__ieee754_pow+0x162>
   d82b2:	f1b8 0f00 	cmp.w	r8, #0
   d82b6:	d004      	beq.n	d82c2 <__ieee754_pow+0x11a>
   d82b8:	4b3a      	ldr	r3, [pc, #232]	; (d83a4 <__ieee754_pow+0x1fc>)
   d82ba:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d82be:	429a      	cmp	r2, r3
   d82c0:	d123      	bne.n	d830a <__ieee754_pow+0x162>
   d82c2:	f1bb 0f00 	cmp.w	fp, #0
   d82c6:	da07      	bge.n	d82d8 <__ieee754_pow+0x130>
   d82c8:	e9dd 2300 	ldrd	r2, r3, [sp]
   d82cc:	4935      	ldr	r1, [pc, #212]	; (d83a4 <__ieee754_pow+0x1fc>)
   d82ce:	2000      	movs	r0, #0
   d82d0:	f001 fa36 	bl	d9740 <__aeabi_ddiv>
   d82d4:	e9cd 0100 	strd	r0, r1, [sp]
   d82d8:	f1b9 0f00 	cmp.w	r9, #0
   d82dc:	dab2      	bge.n	d8244 <__ieee754_pow+0x9c>
   d82de:	9b03      	ldr	r3, [sp, #12]
   d82e0:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d82e4:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d82e8:	ea58 0303 	orrs.w	r3, r8, r3
   d82ec:	f040 84be 	bne.w	d8c6c <__ieee754_pow+0xac4>
   d82f0:	e9dd 2300 	ldrd	r2, r3, [sp]
   d82f4:	4610      	mov	r0, r2
   d82f6:	4619      	mov	r1, r3
   d82f8:	f000 ff40 	bl	d917c <__aeabi_dsub>
   d82fc:	4602      	mov	r2, r0
   d82fe:	460b      	mov	r3, r1
   d8300:	f001 fa1e 	bl	d9740 <__aeabi_ddiv>
   d8304:	e9cd 0100 	strd	r0, r1, [sp]
   d8308:	e79c      	b.n	d8244 <__ieee754_pow+0x9c>
   d830a:	9a03      	ldr	r2, [sp, #12]
   d830c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d8310:	3b01      	subs	r3, #1
   d8312:	9306      	str	r3, [sp, #24]
   d8314:	4313      	orrs	r3, r2
   d8316:	d035      	beq.n	d8384 <__ieee754_pow+0x1dc>
   d8318:	4b26      	ldr	r3, [pc, #152]	; (d83b4 <__ieee754_pow+0x20c>)
   d831a:	459a      	cmp	sl, r3
   d831c:	dd4e      	ble.n	d83bc <__ieee754_pow+0x214>
   d831e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d8322:	459a      	cmp	sl, r3
   d8324:	4b24      	ldr	r3, [pc, #144]	; (d83b8 <__ieee754_pow+0x210>)
   d8326:	f340 83ed 	ble.w	d8b04 <__ieee754_pow+0x95c>
   d832a:	4598      	cmp	r8, r3
   d832c:	f340 836b 	ble.w	d8a06 <__ieee754_pow+0x85e>
   d8330:	f1bb 0f00 	cmp.w	fp, #0
   d8334:	f340 836b 	ble.w	d8a0e <__ieee754_pow+0x866>
   d8338:	a317      	add	r3, pc, #92	; (adr r3, d8398 <__ieee754_pow+0x1f0>)
   d833a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d833e:	4610      	mov	r0, r2
   d8340:	4619      	mov	r1, r3
   d8342:	f001 f8d3 	bl	d94ec <__aeabi_dmul>
   d8346:	e9cd 0100 	strd	r0, r1, [sp]
   d834a:	e77b      	b.n	d8244 <__ieee754_pow+0x9c>
   d834c:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d8350:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d8354:	4313      	orrs	r3, r2
   d8356:	f43f af71 	beq.w	d823c <__ieee754_pow+0x94>
   d835a:	4b17      	ldr	r3, [pc, #92]	; (d83b8 <__ieee754_pow+0x210>)
   d835c:	4598      	cmp	r8, r3
   d835e:	f340 8388 	ble.w	d8a72 <__ieee754_pow+0x8ca>
   d8362:	f1bb 0f00 	cmp.w	fp, #0
   d8366:	f2c0 8352 	blt.w	d8a0e <__ieee754_pow+0x866>
   d836a:	e9cd 6700 	strd	r6, r7, [sp]
   d836e:	e769      	b.n	d8244 <__ieee754_pow+0x9c>
   d8370:	f1bb 0f00 	cmp.w	fp, #0
   d8374:	f2c0 8441 	blt.w	d8bfa <__ieee754_pow+0xa52>
   d8378:	e9cd 4500 	strd	r4, r5, [sp]
   d837c:	e762      	b.n	d8244 <__ieee754_pow+0x9c>
   d837e:	2102      	movs	r1, #2
   d8380:	9103      	str	r1, [sp, #12]
   d8382:	e735      	b.n	d81f0 <__ieee754_pow+0x48>
   d8384:	4622      	mov	r2, r4
   d8386:	462b      	mov	r3, r5
   d8388:	e7b4      	b.n	d82f4 <__ieee754_pow+0x14c>
   d838a:	bf00      	nop
   d838c:	f3af 8000 	nop.w
   d8390:	00000000 	.word	0x00000000
   d8394:	3ff00000 	.word	0x3ff00000
   d8398:	8800759c 	.word	0x8800759c
   d839c:	7e37e43c 	.word	0x7e37e43c
   d83a0:	7ff00000 	.word	0x7ff00000
   d83a4:	3ff00000 	.word	0x3ff00000
   d83a8:	3fe00000 	.word	0x3fe00000
   d83ac:	000da7f4 	.word	0x000da7f4
   d83b0:	433fffff 	.word	0x433fffff
   d83b4:	41e00000 	.word	0x41e00000
   d83b8:	3fefffff 	.word	0x3fefffff
   d83bc:	4be4      	ldr	r3, [pc, #912]	; (d8750 <__ieee754_pow+0x5a8>)
   d83be:	ea09 0303 	and.w	r3, r9, r3
   d83c2:	2b00      	cmp	r3, #0
   d83c4:	f040 8416 	bne.w	d8bf4 <__ieee754_pow+0xa4c>
   d83c8:	e9dd 0100 	ldrd	r0, r1, [sp]
   d83cc:	4be1      	ldr	r3, [pc, #900]	; (d8754 <__ieee754_pow+0x5ac>)
   d83ce:	2200      	movs	r2, #0
   d83d0:	f001 f88c 	bl	d94ec <__aeabi_dmul>
   d83d4:	e9cd 0100 	strd	r0, r1, [sp]
   d83d8:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d83dc:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d83e0:	ea4f 5328 	mov.w	r3, r8, asr #20
   d83e4:	49dc      	ldr	r1, [pc, #880]	; (d8758 <__ieee754_pow+0x5b0>)
   d83e6:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d83ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d83ee:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d83f2:	1818      	adds	r0, r3, r0
   d83f4:	428a      	cmp	r2, r1
   d83f6:	9007      	str	r0, [sp, #28]
   d83f8:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d83fc:	f340 83e9 	ble.w	d8bd2 <__ieee754_pow+0xa2a>
   d8400:	4bd6      	ldr	r3, [pc, #856]	; (d875c <__ieee754_pow+0x5b4>)
   d8402:	429a      	cmp	r2, r3
   d8404:	f340 843e 	ble.w	d8c84 <__ieee754_pow+0xadc>
   d8408:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d86f8 <__ieee754_pow+0x550>
   d840c:	eeb0 ba47 	vmov.f32	s22, s14
   d8410:	eef0 ba67 	vmov.f32	s23, s15
   d8414:	eeb0 ca47 	vmov.f32	s24, s14
   d8418:	eef0 ca67 	vmov.f32	s25, s15
   d841c:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d8700 <__ieee754_pow+0x558>
   d8420:	3001      	adds	r0, #1
   d8422:	ec54 3b17 	vmov	r3, r4, d7
   d8426:	9007      	str	r0, [sp, #28]
   d8428:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d842c:	f04f 0900 	mov.w	r9, #0
   d8430:	e9dd ab00 	ldrd	sl, fp, [sp]
   d8434:	ec44 3b18 	vmov	d8, r3, r4
   d8438:	461a      	mov	r2, r3
   d843a:	4650      	mov	r0, sl
   d843c:	4623      	mov	r3, r4
   d843e:	4641      	mov	r1, r8
   d8440:	f000 fe9c 	bl	d917c <__aeabi_dsub>
   d8444:	ec53 2b18 	vmov	r2, r3, d8
   d8448:	4604      	mov	r4, r0
   d844a:	460d      	mov	r5, r1
   d844c:	4650      	mov	r0, sl
   d844e:	4641      	mov	r1, r8
   d8450:	f000 fe96 	bl	d9180 <__adddf3>
   d8454:	4602      	mov	r2, r0
   d8456:	460b      	mov	r3, r1
   d8458:	2000      	movs	r0, #0
   d845a:	49c1      	ldr	r1, [pc, #772]	; (d8760 <__ieee754_pow+0x5b8>)
   d845c:	f001 f970 	bl	d9740 <__aeabi_ddiv>
   d8460:	ec45 4b1a 	vmov	d10, r4, r5
   d8464:	ec41 0b19 	vmov	d9, r0, r1
   d8468:	ec51 0b1a 	vmov	r0, r1, d10
   d846c:	ec53 2b19 	vmov	r2, r3, d9
   d8470:	f001 f83c 	bl	d94ec <__aeabi_dmul>
   d8474:	46c3      	mov	fp, r8
   d8476:	ea4f 0868 	mov.w	r8, r8, asr #1
   d847a:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d847e:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d8482:	eb03 0509 	add.w	r5, r3, r9
   d8486:	460a      	mov	r2, r1
   d8488:	2300      	movs	r3, #0
   d848a:	4601      	mov	r1, r0
   d848c:	e9cd 1200 	strd	r1, r2, [sp]
   d8490:	9300      	str	r3, [sp, #0]
   d8492:	e9dd 8900 	ldrd	r8, r9, [sp]
   d8496:	2400      	movs	r4, #0
   d8498:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d849c:	462b      	mov	r3, r5
   d849e:	4622      	mov	r2, r4
   d84a0:	4640      	mov	r0, r8
   d84a2:	4649      	mov	r1, r9
   d84a4:	f001 f822 	bl	d94ec <__aeabi_dmul>
   d84a8:	4602      	mov	r2, r0
   d84aa:	460b      	mov	r3, r1
   d84ac:	ec51 0b1a 	vmov	r0, r1, d10
   d84b0:	f000 fe64 	bl	d917c <__aeabi_dsub>
   d84b4:	ec41 0b17 	vmov	d7, r0, r1
   d84b8:	ec53 2b18 	vmov	r2, r3, d8
   d84bc:	4620      	mov	r0, r4
   d84be:	4629      	mov	r1, r5
   d84c0:	ec55 4b17 	vmov	r4, r5, d7
   d84c4:	f000 fe5a 	bl	d917c <__aeabi_dsub>
   d84c8:	4602      	mov	r2, r0
   d84ca:	460b      	mov	r3, r1
   d84cc:	4650      	mov	r0, sl
   d84ce:	4659      	mov	r1, fp
   d84d0:	f000 fe54 	bl	d917c <__aeabi_dsub>
   d84d4:	4642      	mov	r2, r8
   d84d6:	464b      	mov	r3, r9
   d84d8:	f001 f808 	bl	d94ec <__aeabi_dmul>
   d84dc:	4602      	mov	r2, r0
   d84de:	460b      	mov	r3, r1
   d84e0:	4620      	mov	r0, r4
   d84e2:	4629      	mov	r1, r5
   d84e4:	f000 fe4a 	bl	d917c <__aeabi_dsub>
   d84e8:	ec53 2b19 	vmov	r2, r3, d9
   d84ec:	f000 fffe 	bl	d94ec <__aeabi_dmul>
   d84f0:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d84f4:	4604      	mov	r4, r0
   d84f6:	460d      	mov	r5, r1
   d84f8:	4652      	mov	r2, sl
   d84fa:	465b      	mov	r3, fp
   d84fc:	4650      	mov	r0, sl
   d84fe:	4659      	mov	r1, fp
   d8500:	f000 fff4 	bl	d94ec <__aeabi_dmul>
   d8504:	a380      	add	r3, pc, #512	; (adr r3, d8708 <__ieee754_pow+0x560>)
   d8506:	e9d3 2300 	ldrd	r2, r3, [r3]
   d850a:	ec45 4b1a 	vmov	d10, r4, r5
   d850e:	4604      	mov	r4, r0
   d8510:	460d      	mov	r5, r1
   d8512:	f000 ffeb 	bl	d94ec <__aeabi_dmul>
   d8516:	a37e      	add	r3, pc, #504	; (adr r3, d8710 <__ieee754_pow+0x568>)
   d8518:	e9d3 2300 	ldrd	r2, r3, [r3]
   d851c:	f000 fe30 	bl	d9180 <__adddf3>
   d8520:	4622      	mov	r2, r4
   d8522:	462b      	mov	r3, r5
   d8524:	f000 ffe2 	bl	d94ec <__aeabi_dmul>
   d8528:	a37b      	add	r3, pc, #492	; (adr r3, d8718 <__ieee754_pow+0x570>)
   d852a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d852e:	f000 fe27 	bl	d9180 <__adddf3>
   d8532:	4622      	mov	r2, r4
   d8534:	462b      	mov	r3, r5
   d8536:	f000 ffd9 	bl	d94ec <__aeabi_dmul>
   d853a:	a379      	add	r3, pc, #484	; (adr r3, d8720 <__ieee754_pow+0x578>)
   d853c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8540:	f000 fe1e 	bl	d9180 <__adddf3>
   d8544:	4622      	mov	r2, r4
   d8546:	462b      	mov	r3, r5
   d8548:	f000 ffd0 	bl	d94ec <__aeabi_dmul>
   d854c:	a376      	add	r3, pc, #472	; (adr r3, d8728 <__ieee754_pow+0x580>)
   d854e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8552:	f000 fe15 	bl	d9180 <__adddf3>
   d8556:	4622      	mov	r2, r4
   d8558:	462b      	mov	r3, r5
   d855a:	f000 ffc7 	bl	d94ec <__aeabi_dmul>
   d855e:	a374      	add	r3, pc, #464	; (adr r3, d8730 <__ieee754_pow+0x588>)
   d8560:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8564:	f000 fe0c 	bl	d9180 <__adddf3>
   d8568:	4622      	mov	r2, r4
   d856a:	462b      	mov	r3, r5
   d856c:	4604      	mov	r4, r0
   d856e:	460d      	mov	r5, r1
   d8570:	4610      	mov	r0, r2
   d8572:	4619      	mov	r1, r3
   d8574:	f000 ffba 	bl	d94ec <__aeabi_dmul>
   d8578:	4602      	mov	r2, r0
   d857a:	460b      	mov	r3, r1
   d857c:	4620      	mov	r0, r4
   d857e:	4629      	mov	r1, r5
   d8580:	f000 ffb4 	bl	d94ec <__aeabi_dmul>
   d8584:	4642      	mov	r2, r8
   d8586:	4604      	mov	r4, r0
   d8588:	460d      	mov	r5, r1
   d858a:	464b      	mov	r3, r9
   d858c:	4650      	mov	r0, sl
   d858e:	4659      	mov	r1, fp
   d8590:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d8594:	f000 fdf4 	bl	d9180 <__adddf3>
   d8598:	ec53 2b1a 	vmov	r2, r3, d10
   d859c:	f000 ffa6 	bl	d94ec <__aeabi_dmul>
   d85a0:	4622      	mov	r2, r4
   d85a2:	462b      	mov	r3, r5
   d85a4:	f000 fdec 	bl	d9180 <__adddf3>
   d85a8:	4642      	mov	r2, r8
   d85aa:	4604      	mov	r4, r0
   d85ac:	460d      	mov	r5, r1
   d85ae:	464b      	mov	r3, r9
   d85b0:	4640      	mov	r0, r8
   d85b2:	4649      	mov	r1, r9
   d85b4:	f000 ff9a 	bl	d94ec <__aeabi_dmul>
   d85b8:	ec45 4b19 	vmov	d9, r4, r5
   d85bc:	4b69      	ldr	r3, [pc, #420]	; (d8764 <__ieee754_pow+0x5bc>)
   d85be:	2200      	movs	r2, #0
   d85c0:	4682      	mov	sl, r0
   d85c2:	468b      	mov	fp, r1
   d85c4:	f000 fddc 	bl	d9180 <__adddf3>
   d85c8:	ec53 2b19 	vmov	r2, r3, d9
   d85cc:	f000 fdd8 	bl	d9180 <__adddf3>
   d85d0:	9c00      	ldr	r4, [sp, #0]
   d85d2:	460d      	mov	r5, r1
   d85d4:	4622      	mov	r2, r4
   d85d6:	462b      	mov	r3, r5
   d85d8:	4640      	mov	r0, r8
   d85da:	4649      	mov	r1, r9
   d85dc:	f000 ff86 	bl	d94ec <__aeabi_dmul>
   d85e0:	4b60      	ldr	r3, [pc, #384]	; (d8764 <__ieee754_pow+0x5bc>)
   d85e2:	4680      	mov	r8, r0
   d85e4:	4689      	mov	r9, r1
   d85e6:	2200      	movs	r2, #0
   d85e8:	4620      	mov	r0, r4
   d85ea:	4629      	mov	r1, r5
   d85ec:	f000 fdc6 	bl	d917c <__aeabi_dsub>
   d85f0:	4652      	mov	r2, sl
   d85f2:	465b      	mov	r3, fp
   d85f4:	f000 fdc2 	bl	d917c <__aeabi_dsub>
   d85f8:	4602      	mov	r2, r0
   d85fa:	460b      	mov	r3, r1
   d85fc:	ec51 0b19 	vmov	r0, r1, d9
   d8600:	f000 fdbc 	bl	d917c <__aeabi_dsub>
   d8604:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8608:	f000 ff70 	bl	d94ec <__aeabi_dmul>
   d860c:	ec49 8b18 	vmov	d8, r8, r9
   d8610:	4622      	mov	r2, r4
   d8612:	4680      	mov	r8, r0
   d8614:	4689      	mov	r9, r1
   d8616:	462b      	mov	r3, r5
   d8618:	ec51 0b1a 	vmov	r0, r1, d10
   d861c:	f000 ff66 	bl	d94ec <__aeabi_dmul>
   d8620:	4602      	mov	r2, r0
   d8622:	460b      	mov	r3, r1
   d8624:	4640      	mov	r0, r8
   d8626:	4649      	mov	r1, r9
   d8628:	f000 fdaa 	bl	d9180 <__adddf3>
   d862c:	4682      	mov	sl, r0
   d862e:	468b      	mov	fp, r1
   d8630:	4652      	mov	r2, sl
   d8632:	465b      	mov	r3, fp
   d8634:	ec51 0b18 	vmov	r0, r1, d8
   d8638:	f000 fda2 	bl	d9180 <__adddf3>
   d863c:	9c00      	ldr	r4, [sp, #0]
   d863e:	a33e      	add	r3, pc, #248	; (adr r3, d8738 <__ieee754_pow+0x590>)
   d8640:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8644:	4620      	mov	r0, r4
   d8646:	460d      	mov	r5, r1
   d8648:	f000 ff50 	bl	d94ec <__aeabi_dmul>
   d864c:	ec53 2b18 	vmov	r2, r3, d8
   d8650:	4680      	mov	r8, r0
   d8652:	4689      	mov	r9, r1
   d8654:	4620      	mov	r0, r4
   d8656:	4629      	mov	r1, r5
   d8658:	f000 fd90 	bl	d917c <__aeabi_dsub>
   d865c:	4602      	mov	r2, r0
   d865e:	460b      	mov	r3, r1
   d8660:	4650      	mov	r0, sl
   d8662:	4659      	mov	r1, fp
   d8664:	f000 fd8a 	bl	d917c <__aeabi_dsub>
   d8668:	a335      	add	r3, pc, #212	; (adr r3, d8740 <__ieee754_pow+0x598>)
   d866a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d866e:	f000 ff3d 	bl	d94ec <__aeabi_dmul>
   d8672:	ec49 8b19 	vmov	d9, r8, r9
   d8676:	a334      	add	r3, pc, #208	; (adr r3, d8748 <__ieee754_pow+0x5a0>)
   d8678:	e9d3 2300 	ldrd	r2, r3, [r3]
   d867c:	4680      	mov	r8, r0
   d867e:	4689      	mov	r9, r1
   d8680:	4620      	mov	r0, r4
   d8682:	4629      	mov	r1, r5
   d8684:	f000 ff32 	bl	d94ec <__aeabi_dmul>
   d8688:	4602      	mov	r2, r0
   d868a:	460b      	mov	r3, r1
   d868c:	4640      	mov	r0, r8
   d868e:	4649      	mov	r1, r9
   d8690:	f000 fd76 	bl	d9180 <__adddf3>
   d8694:	ec53 2b1c 	vmov	r2, r3, d12
   d8698:	f000 fd72 	bl	d9180 <__adddf3>
   d869c:	4682      	mov	sl, r0
   d869e:	9807      	ldr	r0, [sp, #28]
   d86a0:	468b      	mov	fp, r1
   d86a2:	f000 feb9 	bl	d9418 <__aeabi_i2d>
   d86a6:	4652      	mov	r2, sl
   d86a8:	4680      	mov	r8, r0
   d86aa:	4689      	mov	r9, r1
   d86ac:	465b      	mov	r3, fp
   d86ae:	ec51 0b19 	vmov	r0, r1, d9
   d86b2:	f000 fd65 	bl	d9180 <__adddf3>
   d86b6:	ec53 2b1b 	vmov	r2, r3, d11
   d86ba:	f000 fd61 	bl	d9180 <__adddf3>
   d86be:	4642      	mov	r2, r8
   d86c0:	464b      	mov	r3, r9
   d86c2:	f000 fd5d 	bl	d9180 <__adddf3>
   d86c6:	9c00      	ldr	r4, [sp, #0]
   d86c8:	4642      	mov	r2, r8
   d86ca:	464b      	mov	r3, r9
   d86cc:	4620      	mov	r0, r4
   d86ce:	460d      	mov	r5, r1
   d86d0:	f000 fd54 	bl	d917c <__aeabi_dsub>
   d86d4:	ec53 2b1b 	vmov	r2, r3, d11
   d86d8:	f000 fd50 	bl	d917c <__aeabi_dsub>
   d86dc:	ec53 2b19 	vmov	r2, r3, d9
   d86e0:	f000 fd4c 	bl	d917c <__aeabi_dsub>
   d86e4:	4602      	mov	r2, r0
   d86e6:	460b      	mov	r3, r1
   d86e8:	4650      	mov	r0, sl
   d86ea:	4659      	mov	r1, fp
   d86ec:	f000 fd46 	bl	d917c <__aeabi_dsub>
   d86f0:	4682      	mov	sl, r0
   d86f2:	468b      	mov	fp, r1
   d86f4:	e038      	b.n	d8768 <__ieee754_pow+0x5c0>
   d86f6:	bf00      	nop
	...
   d8704:	3ff00000 	.word	0x3ff00000
   d8708:	4a454eef 	.word	0x4a454eef
   d870c:	3fca7e28 	.word	0x3fca7e28
   d8710:	93c9db65 	.word	0x93c9db65
   d8714:	3fcd864a 	.word	0x3fcd864a
   d8718:	a91d4101 	.word	0xa91d4101
   d871c:	3fd17460 	.word	0x3fd17460
   d8720:	518f264d 	.word	0x518f264d
   d8724:	3fd55555 	.word	0x3fd55555
   d8728:	db6fabff 	.word	0xdb6fabff
   d872c:	3fdb6db6 	.word	0x3fdb6db6
   d8730:	33333303 	.word	0x33333303
   d8734:	3fe33333 	.word	0x3fe33333
   d8738:	e0000000 	.word	0xe0000000
   d873c:	3feec709 	.word	0x3feec709
   d8740:	dc3a03fd 	.word	0xdc3a03fd
   d8744:	3feec709 	.word	0x3feec709
   d8748:	145b01f5 	.word	0x145b01f5
   d874c:	be3e2fe0 	.word	0xbe3e2fe0
   d8750:	7ff00000 	.word	0x7ff00000
   d8754:	43400000 	.word	0x43400000
   d8758:	0003988e 	.word	0x0003988e
   d875c:	000bb679 	.word	0x000bb679
   d8760:	3ff00000 	.word	0x3ff00000
   d8764:	40080000 	.word	0x40080000
   d8768:	9b03      	ldr	r3, [sp, #12]
   d876a:	9a06      	ldr	r2, [sp, #24]
   d876c:	3b01      	subs	r3, #1
   d876e:	4313      	orrs	r3, r2
   d8770:	f040 8178 	bne.w	d8a64 <__ieee754_pow+0x8bc>
   d8774:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d8a88 <__ieee754_pow+0x8e0>
   d8778:	eeb0 9a47 	vmov.f32	s18, s14
   d877c:	eef0 9a67 	vmov.f32	s19, s15
   d8780:	2300      	movs	r3, #0
   d8782:	e9cd 6700 	strd	r6, r7, [sp]
   d8786:	9300      	str	r3, [sp, #0]
   d8788:	e9dd 8900 	ldrd	r8, r9, [sp]
   d878c:	4630      	mov	r0, r6
   d878e:	4642      	mov	r2, r8
   d8790:	4639      	mov	r1, r7
   d8792:	464b      	mov	r3, r9
   d8794:	f000 fcf2 	bl	d917c <__aeabi_dsub>
   d8798:	4622      	mov	r2, r4
   d879a:	462b      	mov	r3, r5
   d879c:	f000 fea6 	bl	d94ec <__aeabi_dmul>
   d87a0:	4632      	mov	r2, r6
   d87a2:	463b      	mov	r3, r7
   d87a4:	4606      	mov	r6, r0
   d87a6:	460f      	mov	r7, r1
   d87a8:	4650      	mov	r0, sl
   d87aa:	4659      	mov	r1, fp
   d87ac:	f000 fe9e 	bl	d94ec <__aeabi_dmul>
   d87b0:	4602      	mov	r2, r0
   d87b2:	460b      	mov	r3, r1
   d87b4:	4630      	mov	r0, r6
   d87b6:	4639      	mov	r1, r7
   d87b8:	f000 fce2 	bl	d9180 <__adddf3>
   d87bc:	4642      	mov	r2, r8
   d87be:	4682      	mov	sl, r0
   d87c0:	468b      	mov	fp, r1
   d87c2:	464b      	mov	r3, r9
   d87c4:	4620      	mov	r0, r4
   d87c6:	4629      	mov	r1, r5
   d87c8:	f000 fe90 	bl	d94ec <__aeabi_dmul>
   d87cc:	4606      	mov	r6, r0
   d87ce:	460f      	mov	r7, r1
   d87d0:	463b      	mov	r3, r7
   d87d2:	4650      	mov	r0, sl
   d87d4:	4659      	mov	r1, fp
   d87d6:	4632      	mov	r2, r6
   d87d8:	f000 fcd2 	bl	d9180 <__adddf3>
   d87dc:	4bc4      	ldr	r3, [pc, #784]	; (d8af0 <__ieee754_pow+0x948>)
   d87de:	4299      	cmp	r1, r3
   d87e0:	4604      	mov	r4, r0
   d87e2:	460d      	mov	r5, r1
   d87e4:	4688      	mov	r8, r1
   d87e6:	f340 8117 	ble.w	d8a18 <__ieee754_pow+0x870>
   d87ea:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d87ee:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d87f2:	4303      	orrs	r3, r0
   d87f4:	f040 822a 	bne.w	d8c4c <__ieee754_pow+0xaa4>
   d87f8:	a3a5      	add	r3, pc, #660	; (adr r3, d8a90 <__ieee754_pow+0x8e8>)
   d87fa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d87fe:	4650      	mov	r0, sl
   d8800:	4659      	mov	r1, fp
   d8802:	f000 fcbd 	bl	d9180 <__adddf3>
   d8806:	4632      	mov	r2, r6
   d8808:	ec41 0b18 	vmov	d8, r0, r1
   d880c:	463b      	mov	r3, r7
   d880e:	4620      	mov	r0, r4
   d8810:	4629      	mov	r1, r5
   d8812:	f000 fcb3 	bl	d917c <__aeabi_dsub>
   d8816:	4602      	mov	r2, r0
   d8818:	460b      	mov	r3, r1
   d881a:	ec51 0b18 	vmov	r0, r1, d8
   d881e:	f001 f8f5 	bl	d9a0c <__aeabi_dcmpgt>
   d8822:	2800      	cmp	r0, #0
   d8824:	f040 8212 	bne.w	d8c4c <__ieee754_pow+0xaa4>
   d8828:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d882c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d8830:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d8834:	fa42 f303 	asr.w	r3, r2, r3
   d8838:	4443      	add	r3, r8
   d883a:	49ae      	ldr	r1, [pc, #696]	; (d8af4 <__ieee754_pow+0x94c>)
   d883c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d8840:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d8844:	fa41 fc02 	asr.w	ip, r1, r2
   d8848:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d884c:	ea23 010c 	bic.w	r1, r3, ip
   d8850:	f1c2 0414 	rsb	r4, r2, #20
   d8854:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d8858:	f1b8 0f00 	cmp.w	r8, #0
   d885c:	460b      	mov	r3, r1
   d885e:	fa45 f104 	asr.w	r1, r5, r4
   d8862:	9103      	str	r1, [sp, #12]
   d8864:	f04f 0000 	mov.w	r0, #0
   d8868:	bfb8      	it	lt
   d886a:	4249      	neglt	r1, r1
   d886c:	4602      	mov	r2, r0
   d886e:	bfb8      	it	lt
   d8870:	9103      	strlt	r1, [sp, #12]
   d8872:	4630      	mov	r0, r6
   d8874:	4639      	mov	r1, r7
   d8876:	f000 fc81 	bl	d917c <__aeabi_dsub>
   d887a:	4606      	mov	r6, r0
   d887c:	460f      	mov	r7, r1
   d887e:	463b      	mov	r3, r7
   d8880:	4650      	mov	r0, sl
   d8882:	4659      	mov	r1, fp
   d8884:	4632      	mov	r2, r6
   d8886:	f000 fc7b 	bl	d9180 <__adddf3>
   d888a:	9b03      	ldr	r3, [sp, #12]
   d888c:	051b      	lsls	r3, r3, #20
   d888e:	9300      	str	r3, [sp, #0]
   d8890:	460d      	mov	r5, r1
   d8892:	2400      	movs	r4, #0
   d8894:	a380      	add	r3, pc, #512	; (adr r3, d8a98 <__ieee754_pow+0x8f0>)
   d8896:	e9d3 2300 	ldrd	r2, r3, [r3]
   d889a:	4620      	mov	r0, r4
   d889c:	4629      	mov	r1, r5
   d889e:	f000 fe25 	bl	d94ec <__aeabi_dmul>
   d88a2:	4632      	mov	r2, r6
   d88a4:	4680      	mov	r8, r0
   d88a6:	4689      	mov	r9, r1
   d88a8:	463b      	mov	r3, r7
   d88aa:	4620      	mov	r0, r4
   d88ac:	4629      	mov	r1, r5
   d88ae:	f000 fc65 	bl	d917c <__aeabi_dsub>
   d88b2:	4602      	mov	r2, r0
   d88b4:	460b      	mov	r3, r1
   d88b6:	4650      	mov	r0, sl
   d88b8:	4659      	mov	r1, fp
   d88ba:	f000 fc5f 	bl	d917c <__aeabi_dsub>
   d88be:	a378      	add	r3, pc, #480	; (adr r3, d8aa0 <__ieee754_pow+0x8f8>)
   d88c0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d88c4:	f000 fe12 	bl	d94ec <__aeabi_dmul>
   d88c8:	a377      	add	r3, pc, #476	; (adr r3, d8aa8 <__ieee754_pow+0x900>)
   d88ca:	e9d3 2300 	ldrd	r2, r3, [r3]
   d88ce:	4606      	mov	r6, r0
   d88d0:	460f      	mov	r7, r1
   d88d2:	4620      	mov	r0, r4
   d88d4:	4629      	mov	r1, r5
   d88d6:	f000 fe09 	bl	d94ec <__aeabi_dmul>
   d88da:	4602      	mov	r2, r0
   d88dc:	460b      	mov	r3, r1
   d88de:	4630      	mov	r0, r6
   d88e0:	4639      	mov	r1, r7
   d88e2:	f000 fc4d 	bl	d9180 <__adddf3>
   d88e6:	4606      	mov	r6, r0
   d88e8:	460f      	mov	r7, r1
   d88ea:	4632      	mov	r2, r6
   d88ec:	463b      	mov	r3, r7
   d88ee:	4640      	mov	r0, r8
   d88f0:	4649      	mov	r1, r9
   d88f2:	f000 fc45 	bl	d9180 <__adddf3>
   d88f6:	4642      	mov	r2, r8
   d88f8:	464b      	mov	r3, r9
   d88fa:	4604      	mov	r4, r0
   d88fc:	460d      	mov	r5, r1
   d88fe:	f000 fc3d 	bl	d917c <__aeabi_dsub>
   d8902:	4602      	mov	r2, r0
   d8904:	460b      	mov	r3, r1
   d8906:	4630      	mov	r0, r6
   d8908:	4639      	mov	r1, r7
   d890a:	f000 fc37 	bl	d917c <__aeabi_dsub>
   d890e:	4622      	mov	r2, r4
   d8910:	4682      	mov	sl, r0
   d8912:	468b      	mov	fp, r1
   d8914:	462b      	mov	r3, r5
   d8916:	4620      	mov	r0, r4
   d8918:	4629      	mov	r1, r5
   d891a:	f000 fde7 	bl	d94ec <__aeabi_dmul>
   d891e:	a364      	add	r3, pc, #400	; (adr r3, d8ab0 <__ieee754_pow+0x908>)
   d8920:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8924:	4606      	mov	r6, r0
   d8926:	460f      	mov	r7, r1
   d8928:	f000 fde0 	bl	d94ec <__aeabi_dmul>
   d892c:	a362      	add	r3, pc, #392	; (adr r3, d8ab8 <__ieee754_pow+0x910>)
   d892e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8932:	f000 fc23 	bl	d917c <__aeabi_dsub>
   d8936:	4632      	mov	r2, r6
   d8938:	463b      	mov	r3, r7
   d893a:	f000 fdd7 	bl	d94ec <__aeabi_dmul>
   d893e:	a360      	add	r3, pc, #384	; (adr r3, d8ac0 <__ieee754_pow+0x918>)
   d8940:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8944:	f000 fc1c 	bl	d9180 <__adddf3>
   d8948:	4632      	mov	r2, r6
   d894a:	463b      	mov	r3, r7
   d894c:	f000 fdce 	bl	d94ec <__aeabi_dmul>
   d8950:	a35d      	add	r3, pc, #372	; (adr r3, d8ac8 <__ieee754_pow+0x920>)
   d8952:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8956:	f000 fc11 	bl	d917c <__aeabi_dsub>
   d895a:	4632      	mov	r2, r6
   d895c:	463b      	mov	r3, r7
   d895e:	f000 fdc5 	bl	d94ec <__aeabi_dmul>
   d8962:	a35b      	add	r3, pc, #364	; (adr r3, d8ad0 <__ieee754_pow+0x928>)
   d8964:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8968:	f000 fc0a 	bl	d9180 <__adddf3>
   d896c:	4632      	mov	r2, r6
   d896e:	463b      	mov	r3, r7
   d8970:	f000 fdbc 	bl	d94ec <__aeabi_dmul>
   d8974:	4602      	mov	r2, r0
   d8976:	460b      	mov	r3, r1
   d8978:	4620      	mov	r0, r4
   d897a:	4629      	mov	r1, r5
   d897c:	f000 fbfe 	bl	d917c <__aeabi_dsub>
   d8980:	4606      	mov	r6, r0
   d8982:	460f      	mov	r7, r1
   d8984:	4632      	mov	r2, r6
   d8986:	463b      	mov	r3, r7
   d8988:	4620      	mov	r0, r4
   d898a:	4629      	mov	r1, r5
   d898c:	f000 fdae 	bl	d94ec <__aeabi_dmul>
   d8990:	2200      	movs	r2, #0
   d8992:	4680      	mov	r8, r0
   d8994:	4689      	mov	r9, r1
   d8996:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d899a:	4630      	mov	r0, r6
   d899c:	4639      	mov	r1, r7
   d899e:	f000 fbed 	bl	d917c <__aeabi_dsub>
   d89a2:	4602      	mov	r2, r0
   d89a4:	460b      	mov	r3, r1
   d89a6:	4640      	mov	r0, r8
   d89a8:	4649      	mov	r1, r9
   d89aa:	f000 fec9 	bl	d9740 <__aeabi_ddiv>
   d89ae:	4652      	mov	r2, sl
   d89b0:	4606      	mov	r6, r0
   d89b2:	460f      	mov	r7, r1
   d89b4:	465b      	mov	r3, fp
   d89b6:	4620      	mov	r0, r4
   d89b8:	4629      	mov	r1, r5
   d89ba:	f000 fd97 	bl	d94ec <__aeabi_dmul>
   d89be:	4652      	mov	r2, sl
   d89c0:	465b      	mov	r3, fp
   d89c2:	f000 fbdd 	bl	d9180 <__adddf3>
   d89c6:	4602      	mov	r2, r0
   d89c8:	460b      	mov	r3, r1
   d89ca:	4630      	mov	r0, r6
   d89cc:	4639      	mov	r1, r7
   d89ce:	f000 fbd5 	bl	d917c <__aeabi_dsub>
   d89d2:	4622      	mov	r2, r4
   d89d4:	462b      	mov	r3, r5
   d89d6:	f000 fbd1 	bl	d917c <__aeabi_dsub>
   d89da:	4602      	mov	r2, r0
   d89dc:	460b      	mov	r3, r1
   d89de:	2000      	movs	r0, #0
   d89e0:	4945      	ldr	r1, [pc, #276]	; (d8af8 <__ieee754_pow+0x950>)
   d89e2:	f000 fbcb 	bl	d917c <__aeabi_dsub>
   d89e6:	460b      	mov	r3, r1
   d89e8:	9900      	ldr	r1, [sp, #0]
   d89ea:	4419      	add	r1, r3
   d89ec:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d89f0:	4602      	mov	r2, r0
   d89f2:	f2c0 8169 	blt.w	d8cc8 <__ieee754_pow+0xb20>
   d89f6:	4610      	mov	r0, r2
   d89f8:	ec53 2b19 	vmov	r2, r3, d9
   d89fc:	f000 fd76 	bl	d94ec <__aeabi_dmul>
   d8a00:	e9cd 0100 	strd	r0, r1, [sp]
   d8a04:	e41e      	b.n	d8244 <__ieee754_pow+0x9c>
   d8a06:	f1bb 0f00 	cmp.w	fp, #0
   d8a0a:	f6ff ac95 	blt.w	d8338 <__ieee754_pow+0x190>
   d8a0e:	ed9f 7b32 	vldr	d7, [pc, #200]	; d8ad8 <__ieee754_pow+0x930>
   d8a12:	ed8d 7b00 	vstr	d7, [sp]
   d8a16:	e415      	b.n	d8244 <__ieee754_pow+0x9c>
   d8a18:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d8b00 <__ieee754_pow+0x958>
   d8a1c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8a20:	4563      	cmp	r3, ip
   d8a22:	f340 810b 	ble.w	d8c3c <__ieee754_pow+0xa94>
   d8a26:	4b35      	ldr	r3, [pc, #212]	; (d8afc <__ieee754_pow+0x954>)
   d8a28:	440b      	add	r3, r1
   d8a2a:	4303      	orrs	r3, r0
   d8a2c:	d10a      	bne.n	d8a44 <__ieee754_pow+0x89c>
   d8a2e:	4632      	mov	r2, r6
   d8a30:	463b      	mov	r3, r7
   d8a32:	f000 fba3 	bl	d917c <__aeabi_dsub>
   d8a36:	4652      	mov	r2, sl
   d8a38:	465b      	mov	r3, fp
   d8a3a:	f000 ffdd 	bl	d99f8 <__aeabi_dcmpge>
   d8a3e:	2800      	cmp	r0, #0
   d8a40:	f43f aef2 	beq.w	d8828 <__ieee754_pow+0x680>
   d8a44:	a326      	add	r3, pc, #152	; (adr r3, d8ae0 <__ieee754_pow+0x938>)
   d8a46:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a4a:	ec51 0b19 	vmov	r0, r1, d9
   d8a4e:	f000 fd4d 	bl	d94ec <__aeabi_dmul>
   d8a52:	a323      	add	r3, pc, #140	; (adr r3, d8ae0 <__ieee754_pow+0x938>)
   d8a54:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a58:	f000 fd48 	bl	d94ec <__aeabi_dmul>
   d8a5c:	e9cd 0100 	strd	r0, r1, [sp]
   d8a60:	f7ff bbf0 	b.w	d8244 <__ieee754_pow+0x9c>
   d8a64:	ed9f 7b20 	vldr	d7, [pc, #128]	; d8ae8 <__ieee754_pow+0x940>
   d8a68:	eeb0 9a47 	vmov.f32	s18, s14
   d8a6c:	eef0 9a67 	vmov.f32	s19, s15
   d8a70:	e686      	b.n	d8780 <__ieee754_pow+0x5d8>
   d8a72:	f1bb 0f00 	cmp.w	fp, #0
   d8a76:	daca      	bge.n	d8a0e <__ieee754_pow+0x866>
   d8a78:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d8a7c:	9600      	str	r6, [sp, #0]
   d8a7e:	9301      	str	r3, [sp, #4]
   d8a80:	f7ff bbe0 	b.w	d8244 <__ieee754_pow+0x9c>
   d8a84:	f3af 8000 	nop.w
   d8a88:	00000000 	.word	0x00000000
   d8a8c:	bff00000 	.word	0xbff00000
   d8a90:	652b82fe 	.word	0x652b82fe
   d8a94:	3c971547 	.word	0x3c971547
   d8a98:	00000000 	.word	0x00000000
   d8a9c:	3fe62e43 	.word	0x3fe62e43
   d8aa0:	fefa39ef 	.word	0xfefa39ef
   d8aa4:	3fe62e42 	.word	0x3fe62e42
   d8aa8:	0ca86c39 	.word	0x0ca86c39
   d8aac:	be205c61 	.word	0xbe205c61
   d8ab0:	72bea4d0 	.word	0x72bea4d0
   d8ab4:	3e663769 	.word	0x3e663769
   d8ab8:	c5d26bf1 	.word	0xc5d26bf1
   d8abc:	3ebbbd41 	.word	0x3ebbbd41
   d8ac0:	af25de2c 	.word	0xaf25de2c
   d8ac4:	3f11566a 	.word	0x3f11566a
   d8ac8:	16bebd93 	.word	0x16bebd93
   d8acc:	3f66c16c 	.word	0x3f66c16c
   d8ad0:	5555553e 	.word	0x5555553e
   d8ad4:	3fc55555 	.word	0x3fc55555
	...
   d8ae0:	c2f8f359 	.word	0xc2f8f359
   d8ae4:	01a56e1f 	.word	0x01a56e1f
   d8ae8:	00000000 	.word	0x00000000
   d8aec:	3ff00000 	.word	0x3ff00000
   d8af0:	408fffff 	.word	0x408fffff
   d8af4:	000fffff 	.word	0x000fffff
   d8af8:	3ff00000 	.word	0x3ff00000
   d8afc:	3f6f3400 	.word	0x3f6f3400
   d8b00:	4090cbff 	.word	0x4090cbff
   d8b04:	4598      	cmp	r8, r3
   d8b06:	f6ff af7e 	blt.w	d8a06 <__ieee754_pow+0x85e>
   d8b0a:	4b91      	ldr	r3, [pc, #580]	; (d8d50 <__ieee754_pow+0xba8>)
   d8b0c:	4598      	cmp	r8, r3
   d8b0e:	f73f ac0f 	bgt.w	d8330 <__ieee754_pow+0x188>
   d8b12:	4b8f      	ldr	r3, [pc, #572]	; (d8d50 <__ieee754_pow+0xba8>)
   d8b14:	2200      	movs	r2, #0
   d8b16:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8b1a:	f000 fb2f 	bl	d917c <__aeabi_dsub>
   d8b1e:	a378      	add	r3, pc, #480	; (adr r3, d8d00 <__ieee754_pow+0xb58>)
   d8b20:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b24:	4604      	mov	r4, r0
   d8b26:	460d      	mov	r5, r1
   d8b28:	f000 fce0 	bl	d94ec <__aeabi_dmul>
   d8b2c:	a376      	add	r3, pc, #472	; (adr r3, d8d08 <__ieee754_pow+0xb60>)
   d8b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b32:	4682      	mov	sl, r0
   d8b34:	468b      	mov	fp, r1
   d8b36:	4620      	mov	r0, r4
   d8b38:	4629      	mov	r1, r5
   d8b3a:	f000 fcd7 	bl	d94ec <__aeabi_dmul>
   d8b3e:	4b85      	ldr	r3, [pc, #532]	; (d8d54 <__ieee754_pow+0xbac>)
   d8b40:	4680      	mov	r8, r0
   d8b42:	4689      	mov	r9, r1
   d8b44:	2200      	movs	r2, #0
   d8b46:	4620      	mov	r0, r4
   d8b48:	4629      	mov	r1, r5
   d8b4a:	f000 fccf 	bl	d94ec <__aeabi_dmul>
   d8b4e:	4602      	mov	r2, r0
   d8b50:	460b      	mov	r3, r1
   d8b52:	a16f      	add	r1, pc, #444	; (adr r1, d8d10 <__ieee754_pow+0xb68>)
   d8b54:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8b58:	f000 fb10 	bl	d917c <__aeabi_dsub>
   d8b5c:	4622      	mov	r2, r4
   d8b5e:	462b      	mov	r3, r5
   d8b60:	f000 fcc4 	bl	d94ec <__aeabi_dmul>
   d8b64:	4602      	mov	r2, r0
   d8b66:	460b      	mov	r3, r1
   d8b68:	2000      	movs	r0, #0
   d8b6a:	497b      	ldr	r1, [pc, #492]	; (d8d58 <__ieee754_pow+0xbb0>)
   d8b6c:	f000 fb06 	bl	d917c <__aeabi_dsub>
   d8b70:	4622      	mov	r2, r4
   d8b72:	462b      	mov	r3, r5
   d8b74:	4604      	mov	r4, r0
   d8b76:	460d      	mov	r5, r1
   d8b78:	4610      	mov	r0, r2
   d8b7a:	4619      	mov	r1, r3
   d8b7c:	f000 fcb6 	bl	d94ec <__aeabi_dmul>
   d8b80:	4602      	mov	r2, r0
   d8b82:	460b      	mov	r3, r1
   d8b84:	4620      	mov	r0, r4
   d8b86:	4629      	mov	r1, r5
   d8b88:	f000 fcb0 	bl	d94ec <__aeabi_dmul>
   d8b8c:	a362      	add	r3, pc, #392	; (adr r3, d8d18 <__ieee754_pow+0xb70>)
   d8b8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b92:	f000 fcab 	bl	d94ec <__aeabi_dmul>
   d8b96:	4602      	mov	r2, r0
   d8b98:	460b      	mov	r3, r1
   d8b9a:	4640      	mov	r0, r8
   d8b9c:	4649      	mov	r1, r9
   d8b9e:	f000 faed 	bl	d917c <__aeabi_dsub>
   d8ba2:	4680      	mov	r8, r0
   d8ba4:	4689      	mov	r9, r1
   d8ba6:	4650      	mov	r0, sl
   d8ba8:	4659      	mov	r1, fp
   d8baa:	4642      	mov	r2, r8
   d8bac:	464b      	mov	r3, r9
   d8bae:	f000 fae7 	bl	d9180 <__adddf3>
   d8bb2:	2400      	movs	r4, #0
   d8bb4:	4652      	mov	r2, sl
   d8bb6:	465b      	mov	r3, fp
   d8bb8:	4620      	mov	r0, r4
   d8bba:	460d      	mov	r5, r1
   d8bbc:	f000 fade 	bl	d917c <__aeabi_dsub>
   d8bc0:	4602      	mov	r2, r0
   d8bc2:	460b      	mov	r3, r1
   d8bc4:	4640      	mov	r0, r8
   d8bc6:	4649      	mov	r1, r9
   d8bc8:	f000 fad8 	bl	d917c <__aeabi_dsub>
   d8bcc:	4682      	mov	sl, r0
   d8bce:	468b      	mov	fp, r1
   d8bd0:	e5ca      	b.n	d8768 <__ieee754_pow+0x5c0>
   d8bd2:	ed9f 7b53 	vldr	d7, [pc, #332]	; d8d20 <__ieee754_pow+0xb78>
   d8bd6:	eeb0 ba47 	vmov.f32	s22, s14
   d8bda:	eef0 ba67 	vmov.f32	s23, s15
   d8bde:	eeb0 ca47 	vmov.f32	s24, s14
   d8be2:	eef0 ca67 	vmov.f32	s25, s15
   d8be6:	ed9f 7b50 	vldr	d7, [pc, #320]	; d8d28 <__ieee754_pow+0xb80>
   d8bea:	f04f 0900 	mov.w	r9, #0
   d8bee:	ec54 3b17 	vmov	r3, r4, d7
   d8bf2:	e41d      	b.n	d8430 <__ieee754_pow+0x288>
   d8bf4:	2000      	movs	r0, #0
   d8bf6:	f7ff bbf3 	b.w	d83e0 <__ieee754_pow+0x238>
   d8bfa:	4955      	ldr	r1, [pc, #340]	; (d8d50 <__ieee754_pow+0xba8>)
   d8bfc:	4622      	mov	r2, r4
   d8bfe:	462b      	mov	r3, r5
   d8c00:	2000      	movs	r0, #0
   d8c02:	f000 fd9d 	bl	d9740 <__aeabi_ddiv>
   d8c06:	e9cd 0100 	strd	r0, r1, [sp]
   d8c0a:	f7ff bb1b 	b.w	d8244 <__ieee754_pow+0x9c>
   d8c0e:	4622      	mov	r2, r4
   d8c10:	462b      	mov	r3, r5
   d8c12:	4620      	mov	r0, r4
   d8c14:	4629      	mov	r1, r5
   d8c16:	f000 fc69 	bl	d94ec <__aeabi_dmul>
   d8c1a:	e9cd 0100 	strd	r0, r1, [sp]
   d8c1e:	f7ff bb11 	b.w	d8244 <__ieee754_pow+0x9c>
   d8c22:	2b00      	cmp	r3, #0
   d8c24:	d142      	bne.n	d8cac <__ieee754_pow+0xb04>
   d8c26:	f1c1 0114 	rsb	r1, r1, #20
   d8c2a:	fa4a f001 	asr.w	r0, sl, r1
   d8c2e:	fa00 f101 	lsl.w	r1, r0, r1
   d8c32:	4551      	cmp	r1, sl
   d8c34:	d05a      	beq.n	d8cec <__ieee754_pow+0xb44>
   d8c36:	9303      	str	r3, [sp, #12]
   d8c38:	f7ff bae0 	b.w	d81fc <__ieee754_pow+0x54>
   d8c3c:	4a46      	ldr	r2, [pc, #280]	; (d8d58 <__ieee754_pow+0xbb0>)
   d8c3e:	4293      	cmp	r3, r2
   d8c40:	dc5b      	bgt.n	d8cfa <__ieee754_pow+0xb52>
   d8c42:	e9dd 1200 	ldrd	r1, r2, [sp]
   d8c46:	9100      	str	r1, [sp, #0]
   d8c48:	9103      	str	r1, [sp, #12]
   d8c4a:	e622      	b.n	d8892 <__ieee754_pow+0x6ea>
   d8c4c:	a338      	add	r3, pc, #224	; (adr r3, d8d30 <__ieee754_pow+0xb88>)
   d8c4e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c52:	ec51 0b19 	vmov	r0, r1, d9
   d8c56:	f000 fc49 	bl	d94ec <__aeabi_dmul>
   d8c5a:	a335      	add	r3, pc, #212	; (adr r3, d8d30 <__ieee754_pow+0xb88>)
   d8c5c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c60:	f000 fc44 	bl	d94ec <__aeabi_dmul>
   d8c64:	e9cd 0100 	strd	r0, r1, [sp]
   d8c68:	f7ff baec 	b.w	d8244 <__ieee754_pow+0x9c>
   d8c6c:	9b03      	ldr	r3, [sp, #12]
   d8c6e:	2b01      	cmp	r3, #1
   d8c70:	f47f aae8 	bne.w	d8244 <__ieee754_pow+0x9c>
   d8c74:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8c78:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8c7c:	e9cd 2300 	strd	r2, r3, [sp]
   d8c80:	f7ff bae0 	b.w	d8244 <__ieee754_pow+0x9c>
   d8c84:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d8d38 <__ieee754_pow+0xb90>
   d8c88:	eeb0 ba47 	vmov.f32	s22, s14
   d8c8c:	eef0 ba67 	vmov.f32	s23, s15
   d8c90:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d8d40 <__ieee754_pow+0xb98>
   d8c94:	eeb0 ca47 	vmov.f32	s24, s14
   d8c98:	eef0 ca67 	vmov.f32	s25, s15
   d8c9c:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d8d48 <__ieee754_pow+0xba0>
   d8ca0:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d8ca4:	ec54 3b17 	vmov	r3, r4, d7
   d8ca8:	f7ff bbc2 	b.w	d8430 <__ieee754_pow+0x288>
   d8cac:	ec45 4b10 	vmov	d0, r4, r5
   d8cb0:	9203      	str	r2, [sp, #12]
   d8cb2:	f000 f917 	bl	d8ee4 <fabs>
   d8cb6:	9a03      	ldr	r2, [sp, #12]
   d8cb8:	ed8d 0b00 	vstr	d0, [sp]
   d8cbc:	2a00      	cmp	r2, #0
   d8cbe:	f47f ab61 	bne.w	d8384 <__ieee754_pow+0x1dc>
   d8cc2:	9203      	str	r2, [sp, #12]
   d8cc4:	f7ff baf5 	b.w	d82b2 <__ieee754_pow+0x10a>
   d8cc8:	9803      	ldr	r0, [sp, #12]
   d8cca:	ec43 2b10 	vmov	d0, r2, r3
   d8cce:	f000 f9bf 	bl	d9050 <scalbn>
   d8cd2:	ec51 0b10 	vmov	r0, r1, d0
   d8cd6:	e68f      	b.n	d89f8 <__ieee754_pow+0x850>
   d8cd8:	f000 0001 	and.w	r0, r0, #1
   d8cdc:	f1c0 0102 	rsb	r1, r0, #2
   d8ce0:	9103      	str	r1, [sp, #12]
   d8ce2:	2b00      	cmp	r3, #0
   d8ce4:	f43f aa8a 	beq.w	d81fc <__ieee754_pow+0x54>
   d8ce8:	f7ff bada 	b.w	d82a0 <__ieee754_pow+0xf8>
   d8cec:	f000 0001 	and.w	r0, r0, #1
   d8cf0:	f1c0 0302 	rsb	r3, r0, #2
   d8cf4:	9303      	str	r3, [sp, #12]
   d8cf6:	f7ff ba81 	b.w	d81fc <__ieee754_pow+0x54>
   d8cfa:	151b      	asrs	r3, r3, #20
   d8cfc:	e596      	b.n	d882c <__ieee754_pow+0x684>
   d8cfe:	bf00      	nop
   d8d00:	60000000 	.word	0x60000000
   d8d04:	3ff71547 	.word	0x3ff71547
   d8d08:	f85ddf44 	.word	0xf85ddf44
   d8d0c:	3e54ae0b 	.word	0x3e54ae0b
   d8d10:	55555555 	.word	0x55555555
   d8d14:	3fd55555 	.word	0x3fd55555
   d8d18:	652b82fe 	.word	0x652b82fe
   d8d1c:	3ff71547 	.word	0x3ff71547
	...
   d8d2c:	3ff00000 	.word	0x3ff00000
   d8d30:	8800759c 	.word	0x8800759c
   d8d34:	7e37e43c 	.word	0x7e37e43c
   d8d38:	40000000 	.word	0x40000000
   d8d3c:	3fe2b803 	.word	0x3fe2b803
   d8d40:	43cfd006 	.word	0x43cfd006
   d8d44:	3e4cfdeb 	.word	0x3e4cfdeb
   d8d48:	00000000 	.word	0x00000000
   d8d4c:	3ff80000 	.word	0x3ff80000
   d8d50:	3ff00000 	.word	0x3ff00000
   d8d54:	3fd00000 	.word	0x3fd00000
   d8d58:	3fe00000 	.word	0x3fe00000

000d8d5c <__ieee754_sqrt>:
   d8d5c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8d60:	4a5f      	ldr	r2, [pc, #380]	; (d8ee0 <__ieee754_sqrt+0x184>)
   d8d62:	ec57 6b10 	vmov	r6, r7, d0
   d8d66:	43ba      	bics	r2, r7
   d8d68:	f000 8098 	beq.w	d8e9c <__ieee754_sqrt+0x140>
   d8d6c:	2f00      	cmp	r7, #0
   d8d6e:	ee10 4a10 	vmov	r4, s0
   d8d72:	463b      	mov	r3, r7
   d8d74:	dd4e      	ble.n	d8e14 <__ieee754_sqrt+0xb8>
   d8d76:	1539      	asrs	r1, r7, #20
   d8d78:	d05b      	beq.n	d8e32 <__ieee754_sqrt+0xd6>
   d8d7a:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8d7e:	07ca      	lsls	r2, r1, #31
   d8d80:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8d84:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d8d88:	d403      	bmi.n	d8d92 <__ieee754_sqrt+0x36>
   d8d8a:	005b      	lsls	r3, r3, #1
   d8d8c:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8d90:	0064      	lsls	r4, r4, #1
   d8d92:	0fe2      	lsrs	r2, r4, #31
   d8d94:	f04f 0c00 	mov.w	ip, #0
   d8d98:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d8d9c:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d8da0:	0064      	lsls	r4, r4, #1
   d8da2:	4666      	mov	r6, ip
   d8da4:	2516      	movs	r5, #22
   d8da6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d8daa:	18b1      	adds	r1, r6, r2
   d8dac:	4299      	cmp	r1, r3
   d8dae:	dc02      	bgt.n	d8db6 <__ieee754_sqrt+0x5a>
   d8db0:	1a5b      	subs	r3, r3, r1
   d8db2:	188e      	adds	r6, r1, r2
   d8db4:	4494      	add	ip, r2
   d8db6:	005b      	lsls	r3, r3, #1
   d8db8:	3d01      	subs	r5, #1
   d8dba:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8dbe:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8dc2:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8dc6:	d1f0      	bne.n	d8daa <__ieee754_sqrt+0x4e>
   d8dc8:	462f      	mov	r7, r5
   d8dca:	2020      	movs	r0, #32
   d8dcc:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d8dd0:	e009      	b.n	d8de6 <__ieee754_sqrt+0x8a>
   d8dd2:	d03e      	beq.n	d8e52 <__ieee754_sqrt+0xf6>
   d8dd4:	0fe1      	lsrs	r1, r4, #31
   d8dd6:	3801      	subs	r0, #1
   d8dd8:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8ddc:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d8de0:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8de4:	d03e      	beq.n	d8e64 <__ieee754_sqrt+0x108>
   d8de6:	42b3      	cmp	r3, r6
   d8de8:	eb02 0105 	add.w	r1, r2, r5
   d8dec:	ddf1      	ble.n	d8dd2 <__ieee754_sqrt+0x76>
   d8dee:	2900      	cmp	r1, #0
   d8df0:	eb01 0502 	add.w	r5, r1, r2
   d8df4:	db09      	blt.n	d8e0a <__ieee754_sqrt+0xae>
   d8df6:	46b0      	mov	r8, r6
   d8df8:	1b9b      	subs	r3, r3, r6
   d8dfa:	42a1      	cmp	r1, r4
   d8dfc:	bf88      	it	hi
   d8dfe:	f103 33ff 	addhi.w	r3, r3, #4294967295
   d8e02:	1a64      	subs	r4, r4, r1
   d8e04:	4417      	add	r7, r2
   d8e06:	4646      	mov	r6, r8
   d8e08:	e7e4      	b.n	d8dd4 <__ieee754_sqrt+0x78>
   d8e0a:	2d00      	cmp	r5, #0
   d8e0c:	dbf3      	blt.n	d8df6 <__ieee754_sqrt+0x9a>
   d8e0e:	f106 0801 	add.w	r8, r6, #1
   d8e12:	e7f1      	b.n	d8df8 <__ieee754_sqrt+0x9c>
   d8e14:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d8e18:	4332      	orrs	r2, r6
   d8e1a:	d036      	beq.n	d8e8a <__ieee754_sqrt+0x12e>
   d8e1c:	2f00      	cmp	r7, #0
   d8e1e:	d14d      	bne.n	d8ebc <__ieee754_sqrt+0x160>
   d8e20:	4639      	mov	r1, r7
   d8e22:	0ae2      	lsrs	r2, r4, #11
   d8e24:	3915      	subs	r1, #21
   d8e26:	0564      	lsls	r4, r4, #21
   d8e28:	4613      	mov	r3, r2
   d8e2a:	2a00      	cmp	r2, #0
   d8e2c:	d0f9      	beq.n	d8e22 <__ieee754_sqrt+0xc6>
   d8e2e:	02d7      	lsls	r7, r2, #11
   d8e30:	d451      	bmi.n	d8ed6 <__ieee754_sqrt+0x17a>
   d8e32:	2000      	movs	r0, #0
   d8e34:	005b      	lsls	r3, r3, #1
   d8e36:	02de      	lsls	r6, r3, #11
   d8e38:	4605      	mov	r5, r0
   d8e3a:	f100 0001 	add.w	r0, r0, #1
   d8e3e:	d5f9      	bpl.n	d8e34 <__ieee754_sqrt+0xd8>
   d8e40:	461a      	mov	r2, r3
   d8e42:	4623      	mov	r3, r4
   d8e44:	4084      	lsls	r4, r0
   d8e46:	f1c0 0020 	rsb	r0, r0, #32
   d8e4a:	40c3      	lsrs	r3, r0
   d8e4c:	4313      	orrs	r3, r2
   d8e4e:	1b49      	subs	r1, r1, r5
   d8e50:	e793      	b.n	d8d7a <__ieee754_sqrt+0x1e>
   d8e52:	42a1      	cmp	r1, r4
   d8e54:	d8be      	bhi.n	d8dd4 <__ieee754_sqrt+0x78>
   d8e56:	2900      	cmp	r1, #0
   d8e58:	eb01 0502 	add.w	r5, r1, r2
   d8e5c:	dbd5      	blt.n	d8e0a <__ieee754_sqrt+0xae>
   d8e5e:	4698      	mov	r8, r3
   d8e60:	2300      	movs	r3, #0
   d8e62:	e7ce      	b.n	d8e02 <__ieee754_sqrt+0xa6>
   d8e64:	4323      	orrs	r3, r4
   d8e66:	d112      	bne.n	d8e8e <__ieee754_sqrt+0x132>
   d8e68:	0878      	lsrs	r0, r7, #1
   d8e6a:	ea4f 016c 	mov.w	r1, ip, asr #1
   d8e6e:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8e72:	f01c 0f01 	tst.w	ip, #1
   d8e76:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8e7a:	bf18      	it	ne
   d8e7c:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d8e80:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d8e84:	4602      	mov	r2, r0
   d8e86:	ec43 2b10 	vmov	d0, r2, r3
   d8e8a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8e8e:	1c7b      	adds	r3, r7, #1
   d8e90:	bf16      	itet	ne
   d8e92:	1c78      	addne	r0, r7, #1
   d8e94:	f10c 0c01 	addeq.w	ip, ip, #1
   d8e98:	0840      	lsrne	r0, r0, #1
   d8e9a:	e7e6      	b.n	d8e6a <__ieee754_sqrt+0x10e>
   d8e9c:	ee10 2a10 	vmov	r2, s0
   d8ea0:	ee10 0a10 	vmov	r0, s0
   d8ea4:	463b      	mov	r3, r7
   d8ea6:	4639      	mov	r1, r7
   d8ea8:	f000 fb20 	bl	d94ec <__aeabi_dmul>
   d8eac:	4632      	mov	r2, r6
   d8eae:	463b      	mov	r3, r7
   d8eb0:	f000 f966 	bl	d9180 <__adddf3>
   d8eb4:	ec41 0b10 	vmov	d0, r0, r1
   d8eb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8ebc:	ee10 2a10 	vmov	r2, s0
   d8ec0:	4630      	mov	r0, r6
   d8ec2:	4639      	mov	r1, r7
   d8ec4:	f000 f95a 	bl	d917c <__aeabi_dsub>
   d8ec8:	4602      	mov	r2, r0
   d8eca:	460b      	mov	r3, r1
   d8ecc:	f000 fc38 	bl	d9740 <__aeabi_ddiv>
   d8ed0:	ec41 0b10 	vmov	d0, r0, r1
   d8ed4:	e7d9      	b.n	d8e8a <__ieee754_sqrt+0x12e>
   d8ed6:	4623      	mov	r3, r4
   d8ed8:	2020      	movs	r0, #32
   d8eda:	f04f 35ff 	mov.w	r5, #4294967295
   d8ede:	e7b4      	b.n	d8e4a <__ieee754_sqrt+0xee>
   d8ee0:	7ff00000 	.word	0x7ff00000

000d8ee4 <fabs>:
   d8ee4:	ec51 0b10 	vmov	r0, r1, d0
   d8ee8:	ee10 2a10 	vmov	r2, s0
   d8eec:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8ef0:	ec43 2b10 	vmov	d0, r2, r3
   d8ef4:	4770      	bx	lr
   d8ef6:	bf00      	nop

000d8ef8 <finite>:
   d8ef8:	b082      	sub	sp, #8
   d8efa:	ed8d 0b00 	vstr	d0, [sp]
   d8efe:	9801      	ldr	r0, [sp, #4]
   d8f00:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d8f04:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d8f08:	0fc0      	lsrs	r0, r0, #31
   d8f0a:	b002      	add	sp, #8
   d8f0c:	4770      	bx	lr
   d8f0e:	bf00      	nop

000d8f10 <matherr>:
   d8f10:	2000      	movs	r0, #0
   d8f12:	4770      	bx	lr
   d8f14:	0000      	movs	r0, r0
	...

000d8f18 <nan>:
   d8f18:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8f20 <nan+0x8>
   d8f1c:	4770      	bx	lr
   d8f1e:	bf00      	nop
   d8f20:	00000000 	.word	0x00000000
   d8f24:	7ff80000 	.word	0x7ff80000

000d8f28 <rint>:
   d8f28:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8f2a:	ec53 2b10 	vmov	r2, r3, d0
   d8f2e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d8f32:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d8f36:	2813      	cmp	r0, #19
   d8f38:	ee10 5a10 	vmov	r5, s0
   d8f3c:	b083      	sub	sp, #12
   d8f3e:	4619      	mov	r1, r3
   d8f40:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d8f44:	dc31      	bgt.n	d8faa <rint+0x82>
   d8f46:	2800      	cmp	r0, #0
   d8f48:	db4c      	blt.n	d8fe4 <rint+0xbc>
   d8f4a:	4e3e      	ldr	r6, [pc, #248]	; (d9044 <rint+0x11c>)
   d8f4c:	4106      	asrs	r6, r0
   d8f4e:	ea03 0706 	and.w	r7, r3, r6
   d8f52:	4317      	orrs	r7, r2
   d8f54:	d02e      	beq.n	d8fb4 <rint+0x8c>
   d8f56:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d8f5a:	431d      	orrs	r5, r3
   d8f5c:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d8f60:	d00c      	beq.n	d8f7c <rint+0x54>
   d8f62:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d8f66:	2813      	cmp	r0, #19
   d8f68:	ea21 0606 	bic.w	r6, r1, r6
   d8f6c:	fa43 f100 	asr.w	r1, r3, r0
   d8f70:	ea41 0106 	orr.w	r1, r1, r6
   d8f74:	bf0c      	ite	eq
   d8f76:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d8f7a:	2500      	movne	r5, #0
   d8f7c:	4832      	ldr	r0, [pc, #200]	; (d9048 <rint+0x120>)
   d8f7e:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d8f82:	462a      	mov	r2, r5
   d8f84:	e9d4 4500 	ldrd	r4, r5, [r4]
   d8f88:	460b      	mov	r3, r1
   d8f8a:	4620      	mov	r0, r4
   d8f8c:	4629      	mov	r1, r5
   d8f8e:	f000 f8f7 	bl	d9180 <__adddf3>
   d8f92:	e9cd 0100 	strd	r0, r1, [sp]
   d8f96:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8f9a:	4622      	mov	r2, r4
   d8f9c:	462b      	mov	r3, r5
   d8f9e:	f000 f8ed 	bl	d917c <__aeabi_dsub>
   d8fa2:	ec41 0b10 	vmov	d0, r0, r1
   d8fa6:	b003      	add	sp, #12
   d8fa8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8faa:	2833      	cmp	r0, #51	; 0x33
   d8fac:	dd06      	ble.n	d8fbc <rint+0x94>
   d8fae:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d8fb2:	d040      	beq.n	d9036 <rint+0x10e>
   d8fb4:	ec43 2b10 	vmov	d0, r2, r3
   d8fb8:	b003      	add	sp, #12
   d8fba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8fbc:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d8fc0:	f04f 30ff 	mov.w	r0, #4294967295
   d8fc4:	40f0      	lsrs	r0, r6
   d8fc6:	4202      	tst	r2, r0
   d8fc8:	d0f4      	beq.n	d8fb4 <rint+0x8c>
   d8fca:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d8fce:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d8fd2:	d0d3      	beq.n	d8f7c <rint+0x54>
   d8fd4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d8fd8:	ea25 0503 	bic.w	r5, r5, r3
   d8fdc:	fa42 f606 	asr.w	r6, r2, r6
   d8fe0:	4335      	orrs	r5, r6
   d8fe2:	e7cb      	b.n	d8f7c <rint+0x54>
   d8fe4:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d8fe8:	4310      	orrs	r0, r2
   d8fea:	d0e3      	beq.n	d8fb4 <rint+0x8c>
   d8fec:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d8ff0:	4310      	orrs	r0, r2
   d8ff2:	4245      	negs	r5, r0
   d8ff4:	4305      	orrs	r5, r0
   d8ff6:	4814      	ldr	r0, [pc, #80]	; (d9048 <rint+0x120>)
   d8ff8:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d8ffc:	e9d0 6700 	ldrd	r6, r7, [r0]
   d9000:	0c59      	lsrs	r1, r3, #17
   d9002:	0b2d      	lsrs	r5, r5, #12
   d9004:	0449      	lsls	r1, r1, #17
   d9006:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d900a:	ea45 0301 	orr.w	r3, r5, r1
   d900e:	4630      	mov	r0, r6
   d9010:	4639      	mov	r1, r7
   d9012:	f000 f8b5 	bl	d9180 <__adddf3>
   d9016:	e9cd 0100 	strd	r0, r1, [sp]
   d901a:	463b      	mov	r3, r7
   d901c:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9020:	4632      	mov	r2, r6
   d9022:	f000 f8ab 	bl	d917c <__aeabi_dsub>
   d9026:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d902a:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d902e:	ec41 0b10 	vmov	d0, r0, r1
   d9032:	b003      	add	sp, #12
   d9034:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9036:	ee10 0a10 	vmov	r0, s0
   d903a:	f000 f8a1 	bl	d9180 <__adddf3>
   d903e:	ec41 0b10 	vmov	d0, r0, r1
   d9042:	e7b9      	b.n	d8fb8 <rint+0x90>
   d9044:	000fffff 	.word	0x000fffff
   d9048:	000da7f8 	.word	0x000da7f8
   d904c:	00000000 	.word	0x00000000

000d9050 <scalbn>:
   d9050:	b538      	push	{r3, r4, r5, lr}
   d9052:	ec53 2b10 	vmov	r2, r3, d0
   d9056:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d905a:	461c      	mov	r4, r3
   d905c:	4605      	mov	r5, r0
   d905e:	bb81      	cbnz	r1, d90c2 <scalbn+0x72>
   d9060:	ee10 1a10 	vmov	r1, s0
   d9064:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d9068:	4321      	orrs	r1, r4
   d906a:	d029      	beq.n	d90c0 <scalbn+0x70>
   d906c:	4619      	mov	r1, r3
   d906e:	2200      	movs	r2, #0
   d9070:	4b3d      	ldr	r3, [pc, #244]	; (d9168 <scalbn+0x118>)
   d9072:	4c3e      	ldr	r4, [pc, #248]	; (d916c <scalbn+0x11c>)
   d9074:	ee10 0a10 	vmov	r0, s0
   d9078:	f000 fa38 	bl	d94ec <__aeabi_dmul>
   d907c:	42a5      	cmp	r5, r4
   d907e:	4602      	mov	r2, r0
   d9080:	460b      	mov	r3, r1
   d9082:	db16      	blt.n	d90b2 <scalbn+0x62>
   d9084:	460c      	mov	r4, r1
   d9086:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d908a:	3936      	subs	r1, #54	; 0x36
   d908c:	4429      	add	r1, r5
   d908e:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d9092:	4281      	cmp	r1, r0
   d9094:	dc21      	bgt.n	d90da <scalbn+0x8a>
   d9096:	2900      	cmp	r1, #0
   d9098:	dc47      	bgt.n	d912a <scalbn+0xda>
   d909a:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d909e:	da34      	bge.n	d910a <scalbn+0xba>
   d90a0:	f24c 3150 	movw	r1, #50000	; 0xc350
   d90a4:	428d      	cmp	r5, r1
   d90a6:	dc18      	bgt.n	d90da <scalbn+0x8a>
   d90a8:	2b00      	cmp	r3, #0
   d90aa:	a127      	add	r1, pc, #156	; (adr r1, d9148 <scalbn+0xf8>)
   d90ac:	e9d1 0100 	ldrd	r0, r1, [r1]
   d90b0:	db44      	blt.n	d913c <scalbn+0xec>
   d90b2:	a325      	add	r3, pc, #148	; (adr r3, d9148 <scalbn+0xf8>)
   d90b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d90b8:	f000 fa18 	bl	d94ec <__aeabi_dmul>
   d90bc:	ec41 0b10 	vmov	d0, r0, r1
   d90c0:	bd38      	pop	{r3, r4, r5, pc}
   d90c2:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d90c6:	4281      	cmp	r1, r0
   d90c8:	d1e0      	bne.n	d908c <scalbn+0x3c>
   d90ca:	ee10 0a10 	vmov	r0, s0
   d90ce:	4619      	mov	r1, r3
   d90d0:	f000 f856 	bl	d9180 <__adddf3>
   d90d4:	ec41 0b10 	vmov	d0, r0, r1
   d90d8:	bd38      	pop	{r3, r4, r5, pc}
   d90da:	2b00      	cmp	r3, #0
   d90dc:	a11c      	add	r1, pc, #112	; (adr r1, d9150 <scalbn+0x100>)
   d90de:	e9d1 0100 	ldrd	r0, r1, [r1]
   d90e2:	db07      	blt.n	d90f4 <scalbn+0xa4>
   d90e4:	a31a      	add	r3, pc, #104	; (adr r3, d9150 <scalbn+0x100>)
   d90e6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d90ea:	f000 f9ff 	bl	d94ec <__aeabi_dmul>
   d90ee:	ec41 0b10 	vmov	d0, r0, r1
   d90f2:	bd38      	pop	{r3, r4, r5, pc}
   d90f4:	a118      	add	r1, pc, #96	; (adr r1, d9158 <scalbn+0x108>)
   d90f6:	e9d1 0100 	ldrd	r0, r1, [r1]
   d90fa:	a315      	add	r3, pc, #84	; (adr r3, d9150 <scalbn+0x100>)
   d90fc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9100:	f000 f9f4 	bl	d94ec <__aeabi_dmul>
   d9104:	ec41 0b10 	vmov	d0, r0, r1
   d9108:	e7f3      	b.n	d90f2 <scalbn+0xa2>
   d910a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d910e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d9112:	3136      	adds	r1, #54	; 0x36
   d9114:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d9118:	4610      	mov	r0, r2
   d911a:	4619      	mov	r1, r3
   d911c:	2200      	movs	r2, #0
   d911e:	4b14      	ldr	r3, [pc, #80]	; (d9170 <scalbn+0x120>)
   d9120:	f000 f9e4 	bl	d94ec <__aeabi_dmul>
   d9124:	ec41 0b10 	vmov	d0, r0, r1
   d9128:	bd38      	pop	{r3, r4, r5, pc}
   d912a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d912e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d9132:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d9136:	ec43 2b10 	vmov	d0, r2, r3
   d913a:	bd38      	pop	{r3, r4, r5, pc}
   d913c:	a108      	add	r1, pc, #32	; (adr r1, d9160 <scalbn+0x110>)
   d913e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9142:	e7b6      	b.n	d90b2 <scalbn+0x62>
   d9144:	f3af 8000 	nop.w
   d9148:	c2f8f359 	.word	0xc2f8f359
   d914c:	01a56e1f 	.word	0x01a56e1f
   d9150:	8800759c 	.word	0x8800759c
   d9154:	7e37e43c 	.word	0x7e37e43c
   d9158:	8800759c 	.word	0x8800759c
   d915c:	fe37e43c 	.word	0xfe37e43c
   d9160:	c2f8f359 	.word	0xc2f8f359
   d9164:	81a56e1f 	.word	0x81a56e1f
   d9168:	43500000 	.word	0x43500000
   d916c:	ffff3cb0 	.word	0xffff3cb0
   d9170:	3c900000 	.word	0x3c900000

000d9174 <__aeabi_drsub>:
   d9174:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d9178:	e002      	b.n	d9180 <__adddf3>
   d917a:	bf00      	nop

000d917c <__aeabi_dsub>:
   d917c:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d9180 <__adddf3>:
   d9180:	b530      	push	{r4, r5, lr}
   d9182:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d9186:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d918a:	ea94 0f05 	teq	r4, r5
   d918e:	bf08      	it	eq
   d9190:	ea90 0f02 	teqeq	r0, r2
   d9194:	bf1f      	itttt	ne
   d9196:	ea54 0c00 	orrsne.w	ip, r4, r0
   d919a:	ea55 0c02 	orrsne.w	ip, r5, r2
   d919e:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d91a2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d91a6:	f000 80e2 	beq.w	d936e <__adddf3+0x1ee>
   d91aa:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d91ae:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d91b2:	bfb8      	it	lt
   d91b4:	426d      	neglt	r5, r5
   d91b6:	dd0c      	ble.n	d91d2 <__adddf3+0x52>
   d91b8:	442c      	add	r4, r5
   d91ba:	ea80 0202 	eor.w	r2, r0, r2
   d91be:	ea81 0303 	eor.w	r3, r1, r3
   d91c2:	ea82 0000 	eor.w	r0, r2, r0
   d91c6:	ea83 0101 	eor.w	r1, r3, r1
   d91ca:	ea80 0202 	eor.w	r2, r0, r2
   d91ce:	ea81 0303 	eor.w	r3, r1, r3
   d91d2:	2d36      	cmp	r5, #54	; 0x36
   d91d4:	bf88      	it	hi
   d91d6:	bd30      	pophi	{r4, r5, pc}
   d91d8:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d91dc:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d91e0:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d91e4:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d91e8:	d002      	beq.n	d91f0 <__adddf3+0x70>
   d91ea:	4240      	negs	r0, r0
   d91ec:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d91f0:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d91f4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d91f8:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d91fc:	d002      	beq.n	d9204 <__adddf3+0x84>
   d91fe:	4252      	negs	r2, r2
   d9200:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9204:	ea94 0f05 	teq	r4, r5
   d9208:	f000 80a7 	beq.w	d935a <__adddf3+0x1da>
   d920c:	f1a4 0401 	sub.w	r4, r4, #1
   d9210:	f1d5 0e20 	rsbs	lr, r5, #32
   d9214:	db0d      	blt.n	d9232 <__adddf3+0xb2>
   d9216:	fa02 fc0e 	lsl.w	ip, r2, lr
   d921a:	fa22 f205 	lsr.w	r2, r2, r5
   d921e:	1880      	adds	r0, r0, r2
   d9220:	f141 0100 	adc.w	r1, r1, #0
   d9224:	fa03 f20e 	lsl.w	r2, r3, lr
   d9228:	1880      	adds	r0, r0, r2
   d922a:	fa43 f305 	asr.w	r3, r3, r5
   d922e:	4159      	adcs	r1, r3
   d9230:	e00e      	b.n	d9250 <__adddf3+0xd0>
   d9232:	f1a5 0520 	sub.w	r5, r5, #32
   d9236:	f10e 0e20 	add.w	lr, lr, #32
   d923a:	2a01      	cmp	r2, #1
   d923c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9240:	bf28      	it	cs
   d9242:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9246:	fa43 f305 	asr.w	r3, r3, r5
   d924a:	18c0      	adds	r0, r0, r3
   d924c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9250:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9254:	d507      	bpl.n	d9266 <__adddf3+0xe6>
   d9256:	f04f 0e00 	mov.w	lr, #0
   d925a:	f1dc 0c00 	rsbs	ip, ip, #0
   d925e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d9262:	eb6e 0101 	sbc.w	r1, lr, r1
   d9266:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d926a:	d31b      	bcc.n	d92a4 <__adddf3+0x124>
   d926c:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d9270:	d30c      	bcc.n	d928c <__adddf3+0x10c>
   d9272:	0849      	lsrs	r1, r1, #1
   d9274:	ea5f 0030 	movs.w	r0, r0, rrx
   d9278:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d927c:	f104 0401 	add.w	r4, r4, #1
   d9280:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d9284:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d9288:	f080 809a 	bcs.w	d93c0 <__adddf3+0x240>
   d928c:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9290:	bf08      	it	eq
   d9292:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d9296:	f150 0000 	adcs.w	r0, r0, #0
   d929a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d929e:	ea41 0105 	orr.w	r1, r1, r5
   d92a2:	bd30      	pop	{r4, r5, pc}
   d92a4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d92a8:	4140      	adcs	r0, r0
   d92aa:	eb41 0101 	adc.w	r1, r1, r1
   d92ae:	3c01      	subs	r4, #1
   d92b0:	bf28      	it	cs
   d92b2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d92b6:	d2e9      	bcs.n	d928c <__adddf3+0x10c>
   d92b8:	f091 0f00 	teq	r1, #0
   d92bc:	bf04      	itt	eq
   d92be:	4601      	moveq	r1, r0
   d92c0:	2000      	moveq	r0, #0
   d92c2:	fab1 f381 	clz	r3, r1
   d92c6:	bf08      	it	eq
   d92c8:	3320      	addeq	r3, #32
   d92ca:	f1a3 030b 	sub.w	r3, r3, #11
   d92ce:	f1b3 0220 	subs.w	r2, r3, #32
   d92d2:	da0c      	bge.n	d92ee <__adddf3+0x16e>
   d92d4:	320c      	adds	r2, #12
   d92d6:	dd08      	ble.n	d92ea <__adddf3+0x16a>
   d92d8:	f102 0c14 	add.w	ip, r2, #20
   d92dc:	f1c2 020c 	rsb	r2, r2, #12
   d92e0:	fa01 f00c 	lsl.w	r0, r1, ip
   d92e4:	fa21 f102 	lsr.w	r1, r1, r2
   d92e8:	e00c      	b.n	d9304 <__adddf3+0x184>
   d92ea:	f102 0214 	add.w	r2, r2, #20
   d92ee:	bfd8      	it	le
   d92f0:	f1c2 0c20 	rsble	ip, r2, #32
   d92f4:	fa01 f102 	lsl.w	r1, r1, r2
   d92f8:	fa20 fc0c 	lsr.w	ip, r0, ip
   d92fc:	bfdc      	itt	le
   d92fe:	ea41 010c 	orrle.w	r1, r1, ip
   d9302:	4090      	lslle	r0, r2
   d9304:	1ae4      	subs	r4, r4, r3
   d9306:	bfa2      	ittt	ge
   d9308:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d930c:	4329      	orrge	r1, r5
   d930e:	bd30      	popge	{r4, r5, pc}
   d9310:	ea6f 0404 	mvn.w	r4, r4
   d9314:	3c1f      	subs	r4, #31
   d9316:	da1c      	bge.n	d9352 <__adddf3+0x1d2>
   d9318:	340c      	adds	r4, #12
   d931a:	dc0e      	bgt.n	d933a <__adddf3+0x1ba>
   d931c:	f104 0414 	add.w	r4, r4, #20
   d9320:	f1c4 0220 	rsb	r2, r4, #32
   d9324:	fa20 f004 	lsr.w	r0, r0, r4
   d9328:	fa01 f302 	lsl.w	r3, r1, r2
   d932c:	ea40 0003 	orr.w	r0, r0, r3
   d9330:	fa21 f304 	lsr.w	r3, r1, r4
   d9334:	ea45 0103 	orr.w	r1, r5, r3
   d9338:	bd30      	pop	{r4, r5, pc}
   d933a:	f1c4 040c 	rsb	r4, r4, #12
   d933e:	f1c4 0220 	rsb	r2, r4, #32
   d9342:	fa20 f002 	lsr.w	r0, r0, r2
   d9346:	fa01 f304 	lsl.w	r3, r1, r4
   d934a:	ea40 0003 	orr.w	r0, r0, r3
   d934e:	4629      	mov	r1, r5
   d9350:	bd30      	pop	{r4, r5, pc}
   d9352:	fa21 f004 	lsr.w	r0, r1, r4
   d9356:	4629      	mov	r1, r5
   d9358:	bd30      	pop	{r4, r5, pc}
   d935a:	f094 0f00 	teq	r4, #0
   d935e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d9362:	bf06      	itte	eq
   d9364:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d9368:	3401      	addeq	r4, #1
   d936a:	3d01      	subne	r5, #1
   d936c:	e74e      	b.n	d920c <__adddf3+0x8c>
   d936e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9372:	bf18      	it	ne
   d9374:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d9378:	d029      	beq.n	d93ce <__adddf3+0x24e>
   d937a:	ea94 0f05 	teq	r4, r5
   d937e:	bf08      	it	eq
   d9380:	ea90 0f02 	teqeq	r0, r2
   d9384:	d005      	beq.n	d9392 <__adddf3+0x212>
   d9386:	ea54 0c00 	orrs.w	ip, r4, r0
   d938a:	bf04      	itt	eq
   d938c:	4619      	moveq	r1, r3
   d938e:	4610      	moveq	r0, r2
   d9390:	bd30      	pop	{r4, r5, pc}
   d9392:	ea91 0f03 	teq	r1, r3
   d9396:	bf1e      	ittt	ne
   d9398:	2100      	movne	r1, #0
   d939a:	2000      	movne	r0, #0
   d939c:	bd30      	popne	{r4, r5, pc}
   d939e:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d93a2:	d105      	bne.n	d93b0 <__adddf3+0x230>
   d93a4:	0040      	lsls	r0, r0, #1
   d93a6:	4149      	adcs	r1, r1
   d93a8:	bf28      	it	cs
   d93aa:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d93ae:	bd30      	pop	{r4, r5, pc}
   d93b0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d93b4:	bf3c      	itt	cc
   d93b6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d93ba:	bd30      	popcc	{r4, r5, pc}
   d93bc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d93c0:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d93c4:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d93c8:	f04f 0000 	mov.w	r0, #0
   d93cc:	bd30      	pop	{r4, r5, pc}
   d93ce:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d93d2:	bf1a      	itte	ne
   d93d4:	4619      	movne	r1, r3
   d93d6:	4610      	movne	r0, r2
   d93d8:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d93dc:	bf1c      	itt	ne
   d93de:	460b      	movne	r3, r1
   d93e0:	4602      	movne	r2, r0
   d93e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d93e6:	bf06      	itte	eq
   d93e8:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d93ec:	ea91 0f03 	teqeq	r1, r3
   d93f0:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d93f4:	bd30      	pop	{r4, r5, pc}
   d93f6:	bf00      	nop

000d93f8 <__aeabi_ui2d>:
   d93f8:	f090 0f00 	teq	r0, #0
   d93fc:	bf04      	itt	eq
   d93fe:	2100      	moveq	r1, #0
   d9400:	4770      	bxeq	lr
   d9402:	b530      	push	{r4, r5, lr}
   d9404:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9408:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d940c:	f04f 0500 	mov.w	r5, #0
   d9410:	f04f 0100 	mov.w	r1, #0
   d9414:	e750      	b.n	d92b8 <__adddf3+0x138>
   d9416:	bf00      	nop

000d9418 <__aeabi_i2d>:
   d9418:	f090 0f00 	teq	r0, #0
   d941c:	bf04      	itt	eq
   d941e:	2100      	moveq	r1, #0
   d9420:	4770      	bxeq	lr
   d9422:	b530      	push	{r4, r5, lr}
   d9424:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9428:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d942c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9430:	bf48      	it	mi
   d9432:	4240      	negmi	r0, r0
   d9434:	f04f 0100 	mov.w	r1, #0
   d9438:	e73e      	b.n	d92b8 <__adddf3+0x138>
   d943a:	bf00      	nop

000d943c <__aeabi_f2d>:
   d943c:	0042      	lsls	r2, r0, #1
   d943e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9442:	ea4f 0131 	mov.w	r1, r1, rrx
   d9446:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d944a:	bf1f      	itttt	ne
   d944c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9450:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9454:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9458:	4770      	bxne	lr
   d945a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d945e:	bf08      	it	eq
   d9460:	4770      	bxeq	lr
   d9462:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d9466:	bf04      	itt	eq
   d9468:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d946c:	4770      	bxeq	lr
   d946e:	b530      	push	{r4, r5, lr}
   d9470:	f44f 7460 	mov.w	r4, #896	; 0x380
   d9474:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9478:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d947c:	e71c      	b.n	d92b8 <__adddf3+0x138>
   d947e:	bf00      	nop

000d9480 <__aeabi_ul2d>:
   d9480:	ea50 0201 	orrs.w	r2, r0, r1
   d9484:	bf08      	it	eq
   d9486:	4770      	bxeq	lr
   d9488:	b530      	push	{r4, r5, lr}
   d948a:	f04f 0500 	mov.w	r5, #0
   d948e:	e00a      	b.n	d94a6 <__aeabi_l2d+0x16>

000d9490 <__aeabi_l2d>:
   d9490:	ea50 0201 	orrs.w	r2, r0, r1
   d9494:	bf08      	it	eq
   d9496:	4770      	bxeq	lr
   d9498:	b530      	push	{r4, r5, lr}
   d949a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d949e:	d502      	bpl.n	d94a6 <__aeabi_l2d+0x16>
   d94a0:	4240      	negs	r0, r0
   d94a2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d94a6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d94aa:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d94ae:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d94b2:	f43f aed8 	beq.w	d9266 <__adddf3+0xe6>
   d94b6:	f04f 0203 	mov.w	r2, #3
   d94ba:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d94be:	bf18      	it	ne
   d94c0:	3203      	addne	r2, #3
   d94c2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d94c6:	bf18      	it	ne
   d94c8:	3203      	addne	r2, #3
   d94ca:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d94ce:	f1c2 0320 	rsb	r3, r2, #32
   d94d2:	fa00 fc03 	lsl.w	ip, r0, r3
   d94d6:	fa20 f002 	lsr.w	r0, r0, r2
   d94da:	fa01 fe03 	lsl.w	lr, r1, r3
   d94de:	ea40 000e 	orr.w	r0, r0, lr
   d94e2:	fa21 f102 	lsr.w	r1, r1, r2
   d94e6:	4414      	add	r4, r2
   d94e8:	e6bd      	b.n	d9266 <__adddf3+0xe6>
   d94ea:	bf00      	nop

000d94ec <__aeabi_dmul>:
   d94ec:	b570      	push	{r4, r5, r6, lr}
   d94ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d94f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d94f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d94fa:	bf1d      	ittte	ne
   d94fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9500:	ea94 0f0c 	teqne	r4, ip
   d9504:	ea95 0f0c 	teqne	r5, ip
   d9508:	f000 f8de 	bleq	d96c8 <__aeabi_dmul+0x1dc>
   d950c:	442c      	add	r4, r5
   d950e:	ea81 0603 	eor.w	r6, r1, r3
   d9512:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9516:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d951a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d951e:	bf18      	it	ne
   d9520:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9524:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9528:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d952c:	d038      	beq.n	d95a0 <__aeabi_dmul+0xb4>
   d952e:	fba0 ce02 	umull	ip, lr, r0, r2
   d9532:	f04f 0500 	mov.w	r5, #0
   d9536:	fbe1 e502 	umlal	lr, r5, r1, r2
   d953a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d953e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9542:	f04f 0600 	mov.w	r6, #0
   d9546:	fbe1 5603 	umlal	r5, r6, r1, r3
   d954a:	f09c 0f00 	teq	ip, #0
   d954e:	bf18      	it	ne
   d9550:	f04e 0e01 	orrne.w	lr, lr, #1
   d9554:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9558:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d955c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d9560:	d204      	bcs.n	d956c <__aeabi_dmul+0x80>
   d9562:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d9566:	416d      	adcs	r5, r5
   d9568:	eb46 0606 	adc.w	r6, r6, r6
   d956c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d9570:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d9574:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d9578:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d957c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d9580:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9584:	bf88      	it	hi
   d9586:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d958a:	d81e      	bhi.n	d95ca <__aeabi_dmul+0xde>
   d958c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d9590:	bf08      	it	eq
   d9592:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d9596:	f150 0000 	adcs.w	r0, r0, #0
   d959a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d959e:	bd70      	pop	{r4, r5, r6, pc}
   d95a0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d95a4:	ea46 0101 	orr.w	r1, r6, r1
   d95a8:	ea40 0002 	orr.w	r0, r0, r2
   d95ac:	ea81 0103 	eor.w	r1, r1, r3
   d95b0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d95b4:	bfc2      	ittt	gt
   d95b6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d95ba:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d95be:	bd70      	popgt	{r4, r5, r6, pc}
   d95c0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d95c4:	f04f 0e00 	mov.w	lr, #0
   d95c8:	3c01      	subs	r4, #1
   d95ca:	f300 80ab 	bgt.w	d9724 <__aeabi_dmul+0x238>
   d95ce:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d95d2:	bfde      	ittt	le
   d95d4:	2000      	movle	r0, #0
   d95d6:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d95da:	bd70      	pople	{r4, r5, r6, pc}
   d95dc:	f1c4 0400 	rsb	r4, r4, #0
   d95e0:	3c20      	subs	r4, #32
   d95e2:	da35      	bge.n	d9650 <__aeabi_dmul+0x164>
   d95e4:	340c      	adds	r4, #12
   d95e6:	dc1b      	bgt.n	d9620 <__aeabi_dmul+0x134>
   d95e8:	f104 0414 	add.w	r4, r4, #20
   d95ec:	f1c4 0520 	rsb	r5, r4, #32
   d95f0:	fa00 f305 	lsl.w	r3, r0, r5
   d95f4:	fa20 f004 	lsr.w	r0, r0, r4
   d95f8:	fa01 f205 	lsl.w	r2, r1, r5
   d95fc:	ea40 0002 	orr.w	r0, r0, r2
   d9600:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9604:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9608:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d960c:	fa21 f604 	lsr.w	r6, r1, r4
   d9610:	eb42 0106 	adc.w	r1, r2, r6
   d9614:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9618:	bf08      	it	eq
   d961a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d961e:	bd70      	pop	{r4, r5, r6, pc}
   d9620:	f1c4 040c 	rsb	r4, r4, #12
   d9624:	f1c4 0520 	rsb	r5, r4, #32
   d9628:	fa00 f304 	lsl.w	r3, r0, r4
   d962c:	fa20 f005 	lsr.w	r0, r0, r5
   d9630:	fa01 f204 	lsl.w	r2, r1, r4
   d9634:	ea40 0002 	orr.w	r0, r0, r2
   d9638:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d963c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9640:	f141 0100 	adc.w	r1, r1, #0
   d9644:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9648:	bf08      	it	eq
   d964a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d964e:	bd70      	pop	{r4, r5, r6, pc}
   d9650:	f1c4 0520 	rsb	r5, r4, #32
   d9654:	fa00 f205 	lsl.w	r2, r0, r5
   d9658:	ea4e 0e02 	orr.w	lr, lr, r2
   d965c:	fa20 f304 	lsr.w	r3, r0, r4
   d9660:	fa01 f205 	lsl.w	r2, r1, r5
   d9664:	ea43 0302 	orr.w	r3, r3, r2
   d9668:	fa21 f004 	lsr.w	r0, r1, r4
   d966c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9670:	fa21 f204 	lsr.w	r2, r1, r4
   d9674:	ea20 0002 	bic.w	r0, r0, r2
   d9678:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d967c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9680:	bf08      	it	eq
   d9682:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d9686:	bd70      	pop	{r4, r5, r6, pc}
   d9688:	f094 0f00 	teq	r4, #0
   d968c:	d10f      	bne.n	d96ae <__aeabi_dmul+0x1c2>
   d968e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d9692:	0040      	lsls	r0, r0, #1
   d9694:	eb41 0101 	adc.w	r1, r1, r1
   d9698:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d969c:	bf08      	it	eq
   d969e:	3c01      	subeq	r4, #1
   d96a0:	d0f7      	beq.n	d9692 <__aeabi_dmul+0x1a6>
   d96a2:	ea41 0106 	orr.w	r1, r1, r6
   d96a6:	f095 0f00 	teq	r5, #0
   d96aa:	bf18      	it	ne
   d96ac:	4770      	bxne	lr
   d96ae:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d96b2:	0052      	lsls	r2, r2, #1
   d96b4:	eb43 0303 	adc.w	r3, r3, r3
   d96b8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d96bc:	bf08      	it	eq
   d96be:	3d01      	subeq	r5, #1
   d96c0:	d0f7      	beq.n	d96b2 <__aeabi_dmul+0x1c6>
   d96c2:	ea43 0306 	orr.w	r3, r3, r6
   d96c6:	4770      	bx	lr
   d96c8:	ea94 0f0c 	teq	r4, ip
   d96cc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d96d0:	bf18      	it	ne
   d96d2:	ea95 0f0c 	teqne	r5, ip
   d96d6:	d00c      	beq.n	d96f2 <__aeabi_dmul+0x206>
   d96d8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d96dc:	bf18      	it	ne
   d96de:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d96e2:	d1d1      	bne.n	d9688 <__aeabi_dmul+0x19c>
   d96e4:	ea81 0103 	eor.w	r1, r1, r3
   d96e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d96ec:	f04f 0000 	mov.w	r0, #0
   d96f0:	bd70      	pop	{r4, r5, r6, pc}
   d96f2:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d96f6:	bf06      	itte	eq
   d96f8:	4610      	moveq	r0, r2
   d96fa:	4619      	moveq	r1, r3
   d96fc:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9700:	d019      	beq.n	d9736 <__aeabi_dmul+0x24a>
   d9702:	ea94 0f0c 	teq	r4, ip
   d9706:	d102      	bne.n	d970e <__aeabi_dmul+0x222>
   d9708:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d970c:	d113      	bne.n	d9736 <__aeabi_dmul+0x24a>
   d970e:	ea95 0f0c 	teq	r5, ip
   d9712:	d105      	bne.n	d9720 <__aeabi_dmul+0x234>
   d9714:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9718:	bf1c      	itt	ne
   d971a:	4610      	movne	r0, r2
   d971c:	4619      	movne	r1, r3
   d971e:	d10a      	bne.n	d9736 <__aeabi_dmul+0x24a>
   d9720:	ea81 0103 	eor.w	r1, r1, r3
   d9724:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9728:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d972c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9730:	f04f 0000 	mov.w	r0, #0
   d9734:	bd70      	pop	{r4, r5, r6, pc}
   d9736:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d973a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d973e:	bd70      	pop	{r4, r5, r6, pc}

000d9740 <__aeabi_ddiv>:
   d9740:	b570      	push	{r4, r5, r6, lr}
   d9742:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9746:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d974a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d974e:	bf1d      	ittte	ne
   d9750:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9754:	ea94 0f0c 	teqne	r4, ip
   d9758:	ea95 0f0c 	teqne	r5, ip
   d975c:	f000 f8a7 	bleq	d98ae <__aeabi_ddiv+0x16e>
   d9760:	eba4 0405 	sub.w	r4, r4, r5
   d9764:	ea81 0e03 	eor.w	lr, r1, r3
   d9768:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d976c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9770:	f000 8088 	beq.w	d9884 <__aeabi_ddiv+0x144>
   d9774:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9778:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d977c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d9780:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d9784:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d9788:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d978c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d9790:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d9794:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d9798:	429d      	cmp	r5, r3
   d979a:	bf08      	it	eq
   d979c:	4296      	cmpeq	r6, r2
   d979e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d97a2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d97a6:	d202      	bcs.n	d97ae <__aeabi_ddiv+0x6e>
   d97a8:	085b      	lsrs	r3, r3, #1
   d97aa:	ea4f 0232 	mov.w	r2, r2, rrx
   d97ae:	1ab6      	subs	r6, r6, r2
   d97b0:	eb65 0503 	sbc.w	r5, r5, r3
   d97b4:	085b      	lsrs	r3, r3, #1
   d97b6:	ea4f 0232 	mov.w	r2, r2, rrx
   d97ba:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d97be:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d97c2:	ebb6 0e02 	subs.w	lr, r6, r2
   d97c6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d97ca:	bf22      	ittt	cs
   d97cc:	1ab6      	subcs	r6, r6, r2
   d97ce:	4675      	movcs	r5, lr
   d97d0:	ea40 000c 	orrcs.w	r0, r0, ip
   d97d4:	085b      	lsrs	r3, r3, #1
   d97d6:	ea4f 0232 	mov.w	r2, r2, rrx
   d97da:	ebb6 0e02 	subs.w	lr, r6, r2
   d97de:	eb75 0e03 	sbcs.w	lr, r5, r3
   d97e2:	bf22      	ittt	cs
   d97e4:	1ab6      	subcs	r6, r6, r2
   d97e6:	4675      	movcs	r5, lr
   d97e8:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d97ec:	085b      	lsrs	r3, r3, #1
   d97ee:	ea4f 0232 	mov.w	r2, r2, rrx
   d97f2:	ebb6 0e02 	subs.w	lr, r6, r2
   d97f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   d97fa:	bf22      	ittt	cs
   d97fc:	1ab6      	subcs	r6, r6, r2
   d97fe:	4675      	movcs	r5, lr
   d9800:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9804:	085b      	lsrs	r3, r3, #1
   d9806:	ea4f 0232 	mov.w	r2, r2, rrx
   d980a:	ebb6 0e02 	subs.w	lr, r6, r2
   d980e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9812:	bf22      	ittt	cs
   d9814:	1ab6      	subcs	r6, r6, r2
   d9816:	4675      	movcs	r5, lr
   d9818:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d981c:	ea55 0e06 	orrs.w	lr, r5, r6
   d9820:	d018      	beq.n	d9854 <__aeabi_ddiv+0x114>
   d9822:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9826:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d982a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d982e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9832:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9836:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d983a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d983e:	d1c0      	bne.n	d97c2 <__aeabi_ddiv+0x82>
   d9840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9844:	d10b      	bne.n	d985e <__aeabi_ddiv+0x11e>
   d9846:	ea41 0100 	orr.w	r1, r1, r0
   d984a:	f04f 0000 	mov.w	r0, #0
   d984e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9852:	e7b6      	b.n	d97c2 <__aeabi_ddiv+0x82>
   d9854:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9858:	bf04      	itt	eq
   d985a:	4301      	orreq	r1, r0
   d985c:	2000      	moveq	r0, #0
   d985e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d9862:	bf88      	it	hi
   d9864:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d9868:	f63f aeaf 	bhi.w	d95ca <__aeabi_dmul+0xde>
   d986c:	ebb5 0c03 	subs.w	ip, r5, r3
   d9870:	bf04      	itt	eq
   d9872:	ebb6 0c02 	subseq.w	ip, r6, r2
   d9876:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d987a:	f150 0000 	adcs.w	r0, r0, #0
   d987e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d9882:	bd70      	pop	{r4, r5, r6, pc}
   d9884:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d9888:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d988c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d9890:	bfc2      	ittt	gt
   d9892:	ebd4 050c 	rsbsgt	r5, r4, ip
   d9896:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d989a:	bd70      	popgt	{r4, r5, r6, pc}
   d989c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d98a0:	f04f 0e00 	mov.w	lr, #0
   d98a4:	3c01      	subs	r4, #1
   d98a6:	e690      	b.n	d95ca <__aeabi_dmul+0xde>
   d98a8:	ea45 0e06 	orr.w	lr, r5, r6
   d98ac:	e68d      	b.n	d95ca <__aeabi_dmul+0xde>
   d98ae:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d98b2:	ea94 0f0c 	teq	r4, ip
   d98b6:	bf08      	it	eq
   d98b8:	ea95 0f0c 	teqeq	r5, ip
   d98bc:	f43f af3b 	beq.w	d9736 <__aeabi_dmul+0x24a>
   d98c0:	ea94 0f0c 	teq	r4, ip
   d98c4:	d10a      	bne.n	d98dc <__aeabi_ddiv+0x19c>
   d98c6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d98ca:	f47f af34 	bne.w	d9736 <__aeabi_dmul+0x24a>
   d98ce:	ea95 0f0c 	teq	r5, ip
   d98d2:	f47f af25 	bne.w	d9720 <__aeabi_dmul+0x234>
   d98d6:	4610      	mov	r0, r2
   d98d8:	4619      	mov	r1, r3
   d98da:	e72c      	b.n	d9736 <__aeabi_dmul+0x24a>
   d98dc:	ea95 0f0c 	teq	r5, ip
   d98e0:	d106      	bne.n	d98f0 <__aeabi_ddiv+0x1b0>
   d98e2:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d98e6:	f43f aefd 	beq.w	d96e4 <__aeabi_dmul+0x1f8>
   d98ea:	4610      	mov	r0, r2
   d98ec:	4619      	mov	r1, r3
   d98ee:	e722      	b.n	d9736 <__aeabi_dmul+0x24a>
   d98f0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d98f4:	bf18      	it	ne
   d98f6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d98fa:	f47f aec5 	bne.w	d9688 <__aeabi_dmul+0x19c>
   d98fe:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9902:	f47f af0d 	bne.w	d9720 <__aeabi_dmul+0x234>
   d9906:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d990a:	f47f aeeb 	bne.w	d96e4 <__aeabi_dmul+0x1f8>
   d990e:	e712      	b.n	d9736 <__aeabi_dmul+0x24a>

000d9910 <__gedf2>:
   d9910:	f04f 3cff 	mov.w	ip, #4294967295
   d9914:	e006      	b.n	d9924 <__cmpdf2+0x4>
   d9916:	bf00      	nop

000d9918 <__ledf2>:
   d9918:	f04f 0c01 	mov.w	ip, #1
   d991c:	e002      	b.n	d9924 <__cmpdf2+0x4>
   d991e:	bf00      	nop

000d9920 <__cmpdf2>:
   d9920:	f04f 0c01 	mov.w	ip, #1
   d9924:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9928:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d992c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9930:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9934:	bf18      	it	ne
   d9936:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d993a:	d01b      	beq.n	d9974 <__cmpdf2+0x54>
   d993c:	b001      	add	sp, #4
   d993e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9942:	bf0c      	ite	eq
   d9944:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9948:	ea91 0f03 	teqne	r1, r3
   d994c:	bf02      	ittt	eq
   d994e:	ea90 0f02 	teqeq	r0, r2
   d9952:	2000      	moveq	r0, #0
   d9954:	4770      	bxeq	lr
   d9956:	f110 0f00 	cmn.w	r0, #0
   d995a:	ea91 0f03 	teq	r1, r3
   d995e:	bf58      	it	pl
   d9960:	4299      	cmppl	r1, r3
   d9962:	bf08      	it	eq
   d9964:	4290      	cmpeq	r0, r2
   d9966:	bf2c      	ite	cs
   d9968:	17d8      	asrcs	r0, r3, #31
   d996a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d996e:	f040 0001 	orr.w	r0, r0, #1
   d9972:	4770      	bx	lr
   d9974:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9978:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d997c:	d102      	bne.n	d9984 <__cmpdf2+0x64>
   d997e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9982:	d107      	bne.n	d9994 <__cmpdf2+0x74>
   d9984:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9988:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d998c:	d1d6      	bne.n	d993c <__cmpdf2+0x1c>
   d998e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9992:	d0d3      	beq.n	d993c <__cmpdf2+0x1c>
   d9994:	f85d 0b04 	ldr.w	r0, [sp], #4
   d9998:	4770      	bx	lr
   d999a:	bf00      	nop

000d999c <__aeabi_cdrcmple>:
   d999c:	4684      	mov	ip, r0
   d999e:	4610      	mov	r0, r2
   d99a0:	4662      	mov	r2, ip
   d99a2:	468c      	mov	ip, r1
   d99a4:	4619      	mov	r1, r3
   d99a6:	4663      	mov	r3, ip
   d99a8:	e000      	b.n	d99ac <__aeabi_cdcmpeq>
   d99aa:	bf00      	nop

000d99ac <__aeabi_cdcmpeq>:
   d99ac:	b501      	push	{r0, lr}
   d99ae:	f7ff ffb7 	bl	d9920 <__cmpdf2>
   d99b2:	2800      	cmp	r0, #0
   d99b4:	bf48      	it	mi
   d99b6:	f110 0f00 	cmnmi.w	r0, #0
   d99ba:	bd01      	pop	{r0, pc}

000d99bc <__aeabi_dcmpeq>:
   d99bc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d99c0:	f7ff fff4 	bl	d99ac <__aeabi_cdcmpeq>
   d99c4:	bf0c      	ite	eq
   d99c6:	2001      	moveq	r0, #1
   d99c8:	2000      	movne	r0, #0
   d99ca:	f85d fb08 	ldr.w	pc, [sp], #8
   d99ce:	bf00      	nop

000d99d0 <__aeabi_dcmplt>:
   d99d0:	f84d ed08 	str.w	lr, [sp, #-8]!
   d99d4:	f7ff ffea 	bl	d99ac <__aeabi_cdcmpeq>
   d99d8:	bf34      	ite	cc
   d99da:	2001      	movcc	r0, #1
   d99dc:	2000      	movcs	r0, #0
   d99de:	f85d fb08 	ldr.w	pc, [sp], #8
   d99e2:	bf00      	nop

000d99e4 <__aeabi_dcmple>:
   d99e4:	f84d ed08 	str.w	lr, [sp, #-8]!
   d99e8:	f7ff ffe0 	bl	d99ac <__aeabi_cdcmpeq>
   d99ec:	bf94      	ite	ls
   d99ee:	2001      	movls	r0, #1
   d99f0:	2000      	movhi	r0, #0
   d99f2:	f85d fb08 	ldr.w	pc, [sp], #8
   d99f6:	bf00      	nop

000d99f8 <__aeabi_dcmpge>:
   d99f8:	f84d ed08 	str.w	lr, [sp, #-8]!
   d99fc:	f7ff ffce 	bl	d999c <__aeabi_cdrcmple>
   d9a00:	bf94      	ite	ls
   d9a02:	2001      	movls	r0, #1
   d9a04:	2000      	movhi	r0, #0
   d9a06:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a0a:	bf00      	nop

000d9a0c <__aeabi_dcmpgt>:
   d9a0c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a10:	f7ff ffc4 	bl	d999c <__aeabi_cdrcmple>
   d9a14:	bf34      	ite	cc
   d9a16:	2001      	movcc	r0, #1
   d9a18:	2000      	movcs	r0, #0
   d9a1a:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a1e:	bf00      	nop

000d9a20 <__aeabi_dcmpun>:
   d9a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a28:	d102      	bne.n	d9a30 <__aeabi_dcmpun+0x10>
   d9a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9a2e:	d10a      	bne.n	d9a46 <__aeabi_dcmpun+0x26>
   d9a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a38:	d102      	bne.n	d9a40 <__aeabi_dcmpun+0x20>
   d9a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9a3e:	d102      	bne.n	d9a46 <__aeabi_dcmpun+0x26>
   d9a40:	f04f 0000 	mov.w	r0, #0
   d9a44:	4770      	bx	lr
   d9a46:	f04f 0001 	mov.w	r0, #1
   d9a4a:	4770      	bx	lr

000d9a4c <__aeabi_d2uiz>:
   d9a4c:	004a      	lsls	r2, r1, #1
   d9a4e:	d211      	bcs.n	d9a74 <__aeabi_d2uiz+0x28>
   d9a50:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9a54:	d211      	bcs.n	d9a7a <__aeabi_d2uiz+0x2e>
   d9a56:	d50d      	bpl.n	d9a74 <__aeabi_d2uiz+0x28>
   d9a58:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9a5c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9a60:	d40e      	bmi.n	d9a80 <__aeabi_d2uiz+0x34>
   d9a62:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9a66:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9a6a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9a6e:	fa23 f002 	lsr.w	r0, r3, r2
   d9a72:	4770      	bx	lr
   d9a74:	f04f 0000 	mov.w	r0, #0
   d9a78:	4770      	bx	lr
   d9a7a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9a7e:	d102      	bne.n	d9a86 <__aeabi_d2uiz+0x3a>
   d9a80:	f04f 30ff 	mov.w	r0, #4294967295
   d9a84:	4770      	bx	lr
   d9a86:	f04f 0000 	mov.w	r0, #0
   d9a8a:	4770      	bx	lr

000d9a8c <__aeabi_d2f>:
   d9a8c:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9a90:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9a94:	bf24      	itt	cs
   d9a96:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9a9a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9a9e:	d90d      	bls.n	d9abc <__aeabi_d2f+0x30>
   d9aa0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9aa4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9aa8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9aac:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9ab0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9ab4:	bf08      	it	eq
   d9ab6:	f020 0001 	biceq.w	r0, r0, #1
   d9aba:	4770      	bx	lr
   d9abc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9ac0:	d121      	bne.n	d9b06 <__aeabi_d2f+0x7a>
   d9ac2:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9ac6:	bfbc      	itt	lt
   d9ac8:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9acc:	4770      	bxlt	lr
   d9ace:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9ad2:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9ad6:	f1c2 0218 	rsb	r2, r2, #24
   d9ada:	f1c2 0c20 	rsb	ip, r2, #32
   d9ade:	fa10 f30c 	lsls.w	r3, r0, ip
   d9ae2:	fa20 f002 	lsr.w	r0, r0, r2
   d9ae6:	bf18      	it	ne
   d9ae8:	f040 0001 	orrne.w	r0, r0, #1
   d9aec:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9af0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9af4:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9af8:	ea40 000c 	orr.w	r0, r0, ip
   d9afc:	fa23 f302 	lsr.w	r3, r3, r2
   d9b00:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9b04:	e7cc      	b.n	d9aa0 <__aeabi_d2f+0x14>
   d9b06:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9b0a:	d107      	bne.n	d9b1c <__aeabi_d2f+0x90>
   d9b0c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9b10:	bf1e      	ittt	ne
   d9b12:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9b16:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9b1a:	4770      	bxne	lr
   d9b1c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9b20:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9b24:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9b28:	4770      	bx	lr
   d9b2a:	bf00      	nop

000d9b2c <__aeabi_frsub>:
   d9b2c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d9b30:	e002      	b.n	d9b38 <__addsf3>
   d9b32:	bf00      	nop

000d9b34 <__aeabi_fsub>:
   d9b34:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d9b38 <__addsf3>:
   d9b38:	0042      	lsls	r2, r0, #1
   d9b3a:	bf1f      	itttt	ne
   d9b3c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d9b40:	ea92 0f03 	teqne	r2, r3
   d9b44:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d9b48:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d9b4c:	d06a      	beq.n	d9c24 <__addsf3+0xec>
   d9b4e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d9b52:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d9b56:	bfc1      	itttt	gt
   d9b58:	18d2      	addgt	r2, r2, r3
   d9b5a:	4041      	eorgt	r1, r0
   d9b5c:	4048      	eorgt	r0, r1
   d9b5e:	4041      	eorgt	r1, r0
   d9b60:	bfb8      	it	lt
   d9b62:	425b      	neglt	r3, r3
   d9b64:	2b19      	cmp	r3, #25
   d9b66:	bf88      	it	hi
   d9b68:	4770      	bxhi	lr
   d9b6a:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d9b6e:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9b72:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d9b76:	bf18      	it	ne
   d9b78:	4240      	negne	r0, r0
   d9b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9b7e:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d9b82:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d9b86:	bf18      	it	ne
   d9b88:	4249      	negne	r1, r1
   d9b8a:	ea92 0f03 	teq	r2, r3
   d9b8e:	d03f      	beq.n	d9c10 <__addsf3+0xd8>
   d9b90:	f1a2 0201 	sub.w	r2, r2, #1
   d9b94:	fa41 fc03 	asr.w	ip, r1, r3
   d9b98:	eb10 000c 	adds.w	r0, r0, ip
   d9b9c:	f1c3 0320 	rsb	r3, r3, #32
   d9ba0:	fa01 f103 	lsl.w	r1, r1, r3
   d9ba4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d9ba8:	d502      	bpl.n	d9bb0 <__addsf3+0x78>
   d9baa:	4249      	negs	r1, r1
   d9bac:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d9bb0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d9bb4:	d313      	bcc.n	d9bde <__addsf3+0xa6>
   d9bb6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d9bba:	d306      	bcc.n	d9bca <__addsf3+0x92>
   d9bbc:	0840      	lsrs	r0, r0, #1
   d9bbe:	ea4f 0131 	mov.w	r1, r1, rrx
   d9bc2:	f102 0201 	add.w	r2, r2, #1
   d9bc6:	2afe      	cmp	r2, #254	; 0xfe
   d9bc8:	d251      	bcs.n	d9c6e <__addsf3+0x136>
   d9bca:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d9bce:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d9bd2:	bf08      	it	eq
   d9bd4:	f020 0001 	biceq.w	r0, r0, #1
   d9bd8:	ea40 0003 	orr.w	r0, r0, r3
   d9bdc:	4770      	bx	lr
   d9bde:	0049      	lsls	r1, r1, #1
   d9be0:	eb40 0000 	adc.w	r0, r0, r0
   d9be4:	3a01      	subs	r2, #1
   d9be6:	bf28      	it	cs
   d9be8:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   d9bec:	d2ed      	bcs.n	d9bca <__addsf3+0x92>
   d9bee:	fab0 fc80 	clz	ip, r0
   d9bf2:	f1ac 0c08 	sub.w	ip, ip, #8
   d9bf6:	ebb2 020c 	subs.w	r2, r2, ip
   d9bfa:	fa00 f00c 	lsl.w	r0, r0, ip
   d9bfe:	bfaa      	itet	ge
   d9c00:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d9c04:	4252      	neglt	r2, r2
   d9c06:	4318      	orrge	r0, r3
   d9c08:	bfbc      	itt	lt
   d9c0a:	40d0      	lsrlt	r0, r2
   d9c0c:	4318      	orrlt	r0, r3
   d9c0e:	4770      	bx	lr
   d9c10:	f092 0f00 	teq	r2, #0
   d9c14:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d9c18:	bf06      	itte	eq
   d9c1a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d9c1e:	3201      	addeq	r2, #1
   d9c20:	3b01      	subne	r3, #1
   d9c22:	e7b5      	b.n	d9b90 <__addsf3+0x58>
   d9c24:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d9c28:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d9c2c:	bf18      	it	ne
   d9c2e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d9c32:	d021      	beq.n	d9c78 <__addsf3+0x140>
   d9c34:	ea92 0f03 	teq	r2, r3
   d9c38:	d004      	beq.n	d9c44 <__addsf3+0x10c>
   d9c3a:	f092 0f00 	teq	r2, #0
   d9c3e:	bf08      	it	eq
   d9c40:	4608      	moveq	r0, r1
   d9c42:	4770      	bx	lr
   d9c44:	ea90 0f01 	teq	r0, r1
   d9c48:	bf1c      	itt	ne
   d9c4a:	2000      	movne	r0, #0
   d9c4c:	4770      	bxne	lr
   d9c4e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d9c52:	d104      	bne.n	d9c5e <__addsf3+0x126>
   d9c54:	0040      	lsls	r0, r0, #1
   d9c56:	bf28      	it	cs
   d9c58:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d9c5c:	4770      	bx	lr
   d9c5e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d9c62:	bf3c      	itt	cc
   d9c64:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d9c68:	4770      	bxcc	lr
   d9c6a:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d9c6e:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d9c72:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9c76:	4770      	bx	lr
   d9c78:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d9c7c:	bf16      	itet	ne
   d9c7e:	4608      	movne	r0, r1
   d9c80:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d9c84:	4601      	movne	r1, r0
   d9c86:	0242      	lsls	r2, r0, #9
   d9c88:	bf06      	itte	eq
   d9c8a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d9c8e:	ea90 0f01 	teqeq	r0, r1
   d9c92:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d9c96:	4770      	bx	lr

000d9c98 <__aeabi_ui2f>:
   d9c98:	f04f 0300 	mov.w	r3, #0
   d9c9c:	e004      	b.n	d9ca8 <__aeabi_i2f+0x8>
   d9c9e:	bf00      	nop

000d9ca0 <__aeabi_i2f>:
   d9ca0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d9ca4:	bf48      	it	mi
   d9ca6:	4240      	negmi	r0, r0
   d9ca8:	ea5f 0c00 	movs.w	ip, r0
   d9cac:	bf08      	it	eq
   d9cae:	4770      	bxeq	lr
   d9cb0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d9cb4:	4601      	mov	r1, r0
   d9cb6:	f04f 0000 	mov.w	r0, #0
   d9cba:	e01c      	b.n	d9cf6 <__aeabi_l2f+0x2a>

000d9cbc <__aeabi_ul2f>:
   d9cbc:	ea50 0201 	orrs.w	r2, r0, r1
   d9cc0:	bf08      	it	eq
   d9cc2:	4770      	bxeq	lr
   d9cc4:	f04f 0300 	mov.w	r3, #0
   d9cc8:	e00a      	b.n	d9ce0 <__aeabi_l2f+0x14>
   d9cca:	bf00      	nop

000d9ccc <__aeabi_l2f>:
   d9ccc:	ea50 0201 	orrs.w	r2, r0, r1
   d9cd0:	bf08      	it	eq
   d9cd2:	4770      	bxeq	lr
   d9cd4:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d9cd8:	d502      	bpl.n	d9ce0 <__aeabi_l2f+0x14>
   d9cda:	4240      	negs	r0, r0
   d9cdc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9ce0:	ea5f 0c01 	movs.w	ip, r1
   d9ce4:	bf02      	ittt	eq
   d9ce6:	4684      	moveq	ip, r0
   d9ce8:	4601      	moveq	r1, r0
   d9cea:	2000      	moveq	r0, #0
   d9cec:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d9cf0:	bf08      	it	eq
   d9cf2:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d9cf6:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d9cfa:	fabc f28c 	clz	r2, ip
   d9cfe:	3a08      	subs	r2, #8
   d9d00:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d9d04:	db10      	blt.n	d9d28 <__aeabi_l2f+0x5c>
   d9d06:	fa01 fc02 	lsl.w	ip, r1, r2
   d9d0a:	4463      	add	r3, ip
   d9d0c:	fa00 fc02 	lsl.w	ip, r0, r2
   d9d10:	f1c2 0220 	rsb	r2, r2, #32
   d9d14:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9d18:	fa20 f202 	lsr.w	r2, r0, r2
   d9d1c:	eb43 0002 	adc.w	r0, r3, r2
   d9d20:	bf08      	it	eq
   d9d22:	f020 0001 	biceq.w	r0, r0, #1
   d9d26:	4770      	bx	lr
   d9d28:	f102 0220 	add.w	r2, r2, #32
   d9d2c:	fa01 fc02 	lsl.w	ip, r1, r2
   d9d30:	f1c2 0220 	rsb	r2, r2, #32
   d9d34:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d9d38:	fa21 f202 	lsr.w	r2, r1, r2
   d9d3c:	eb43 0002 	adc.w	r0, r3, r2
   d9d40:	bf08      	it	eq
   d9d42:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d9d46:	4770      	bx	lr

000d9d48 <__aeabi_ldivmod>:
   d9d48:	b97b      	cbnz	r3, d9d6a <__aeabi_ldivmod+0x22>
   d9d4a:	b972      	cbnz	r2, d9d6a <__aeabi_ldivmod+0x22>
   d9d4c:	2900      	cmp	r1, #0
   d9d4e:	bfbe      	ittt	lt
   d9d50:	2000      	movlt	r0, #0
   d9d52:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d9d56:	e006      	blt.n	d9d66 <__aeabi_ldivmod+0x1e>
   d9d58:	bf08      	it	eq
   d9d5a:	2800      	cmpeq	r0, #0
   d9d5c:	bf1c      	itt	ne
   d9d5e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d9d62:	f04f 30ff 	movne.w	r0, #4294967295
   d9d66:	f000 b9d7 	b.w	da118 <__aeabi_idiv0>
   d9d6a:	f1ad 0c08 	sub.w	ip, sp, #8
   d9d6e:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9d72:	2900      	cmp	r1, #0
   d9d74:	db09      	blt.n	d9d8a <__aeabi_ldivmod+0x42>
   d9d76:	2b00      	cmp	r3, #0
   d9d78:	db1a      	blt.n	d9db0 <__aeabi_ldivmod+0x68>
   d9d7a:	f000 f86b 	bl	d9e54 <__udivmoddi4>
   d9d7e:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9d82:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9d86:	b004      	add	sp, #16
   d9d88:	4770      	bx	lr
   d9d8a:	4240      	negs	r0, r0
   d9d8c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9d90:	2b00      	cmp	r3, #0
   d9d92:	db1b      	blt.n	d9dcc <__aeabi_ldivmod+0x84>
   d9d94:	f000 f85e 	bl	d9e54 <__udivmoddi4>
   d9d98:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9d9c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9da0:	b004      	add	sp, #16
   d9da2:	4240      	negs	r0, r0
   d9da4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9da8:	4252      	negs	r2, r2
   d9daa:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9dae:	4770      	bx	lr
   d9db0:	4252      	negs	r2, r2
   d9db2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9db6:	f000 f84d 	bl	d9e54 <__udivmoddi4>
   d9dba:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9dbe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9dc2:	b004      	add	sp, #16
   d9dc4:	4240      	negs	r0, r0
   d9dc6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9dca:	4770      	bx	lr
   d9dcc:	4252      	negs	r2, r2
   d9dce:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9dd2:	f000 f83f 	bl	d9e54 <__udivmoddi4>
   d9dd6:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9dda:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9dde:	b004      	add	sp, #16
   d9de0:	4252      	negs	r2, r2
   d9de2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9de6:	4770      	bx	lr

000d9de8 <__aeabi_uldivmod>:
   d9de8:	b953      	cbnz	r3, d9e00 <__aeabi_uldivmod+0x18>
   d9dea:	b94a      	cbnz	r2, d9e00 <__aeabi_uldivmod+0x18>
   d9dec:	2900      	cmp	r1, #0
   d9dee:	bf08      	it	eq
   d9df0:	2800      	cmpeq	r0, #0
   d9df2:	bf1c      	itt	ne
   d9df4:	f04f 31ff 	movne.w	r1, #4294967295
   d9df8:	f04f 30ff 	movne.w	r0, #4294967295
   d9dfc:	f000 b98c 	b.w	da118 <__aeabi_idiv0>
   d9e00:	f1ad 0c08 	sub.w	ip, sp, #8
   d9e04:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9e08:	f000 f824 	bl	d9e54 <__udivmoddi4>
   d9e0c:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9e10:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9e14:	b004      	add	sp, #16
   d9e16:	4770      	bx	lr

000d9e18 <__aeabi_d2ulz>:
   d9e18:	b5d0      	push	{r4, r6, r7, lr}
   d9e1a:	4b0c      	ldr	r3, [pc, #48]	; (d9e4c <__aeabi_d2ulz+0x34>)
   d9e1c:	2200      	movs	r2, #0
   d9e1e:	4606      	mov	r6, r0
   d9e20:	460f      	mov	r7, r1
   d9e22:	f7ff fb63 	bl	d94ec <__aeabi_dmul>
   d9e26:	f7ff fe11 	bl	d9a4c <__aeabi_d2uiz>
   d9e2a:	4604      	mov	r4, r0
   d9e2c:	f7ff fae4 	bl	d93f8 <__aeabi_ui2d>
   d9e30:	4b07      	ldr	r3, [pc, #28]	; (d9e50 <__aeabi_d2ulz+0x38>)
   d9e32:	2200      	movs	r2, #0
   d9e34:	f7ff fb5a 	bl	d94ec <__aeabi_dmul>
   d9e38:	4602      	mov	r2, r0
   d9e3a:	460b      	mov	r3, r1
   d9e3c:	4630      	mov	r0, r6
   d9e3e:	4639      	mov	r1, r7
   d9e40:	f7ff f99c 	bl	d917c <__aeabi_dsub>
   d9e44:	f7ff fe02 	bl	d9a4c <__aeabi_d2uiz>
   d9e48:	4621      	mov	r1, r4
   d9e4a:	bdd0      	pop	{r4, r6, r7, pc}
   d9e4c:	3df00000 	.word	0x3df00000
   d9e50:	41f00000 	.word	0x41f00000

000d9e54 <__udivmoddi4>:
   d9e54:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9e58:	9d08      	ldr	r5, [sp, #32]
   d9e5a:	4604      	mov	r4, r0
   d9e5c:	468c      	mov	ip, r1
   d9e5e:	2b00      	cmp	r3, #0
   d9e60:	f040 8083 	bne.w	d9f6a <__udivmoddi4+0x116>
   d9e64:	428a      	cmp	r2, r1
   d9e66:	4617      	mov	r7, r2
   d9e68:	d947      	bls.n	d9efa <__udivmoddi4+0xa6>
   d9e6a:	fab2 f282 	clz	r2, r2
   d9e6e:	b142      	cbz	r2, d9e82 <__udivmoddi4+0x2e>
   d9e70:	f1c2 0020 	rsb	r0, r2, #32
   d9e74:	fa24 f000 	lsr.w	r0, r4, r0
   d9e78:	4091      	lsls	r1, r2
   d9e7a:	4097      	lsls	r7, r2
   d9e7c:	ea40 0c01 	orr.w	ip, r0, r1
   d9e80:	4094      	lsls	r4, r2
   d9e82:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d9e86:	0c23      	lsrs	r3, r4, #16
   d9e88:	fbbc f6f8 	udiv	r6, ip, r8
   d9e8c:	fa1f fe87 	uxth.w	lr, r7
   d9e90:	fb08 c116 	mls	r1, r8, r6, ip
   d9e94:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d9e98:	fb06 f10e 	mul.w	r1, r6, lr
   d9e9c:	4299      	cmp	r1, r3
   d9e9e:	d909      	bls.n	d9eb4 <__udivmoddi4+0x60>
   d9ea0:	18fb      	adds	r3, r7, r3
   d9ea2:	f106 30ff 	add.w	r0, r6, #4294967295
   d9ea6:	f080 8119 	bcs.w	da0dc <__udivmoddi4+0x288>
   d9eaa:	4299      	cmp	r1, r3
   d9eac:	f240 8116 	bls.w	da0dc <__udivmoddi4+0x288>
   d9eb0:	3e02      	subs	r6, #2
   d9eb2:	443b      	add	r3, r7
   d9eb4:	1a5b      	subs	r3, r3, r1
   d9eb6:	b2a4      	uxth	r4, r4
   d9eb8:	fbb3 f0f8 	udiv	r0, r3, r8
   d9ebc:	fb08 3310 	mls	r3, r8, r0, r3
   d9ec0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d9ec4:	fb00 fe0e 	mul.w	lr, r0, lr
   d9ec8:	45a6      	cmp	lr, r4
   d9eca:	d909      	bls.n	d9ee0 <__udivmoddi4+0x8c>
   d9ecc:	193c      	adds	r4, r7, r4
   d9ece:	f100 33ff 	add.w	r3, r0, #4294967295
   d9ed2:	f080 8105 	bcs.w	da0e0 <__udivmoddi4+0x28c>
   d9ed6:	45a6      	cmp	lr, r4
   d9ed8:	f240 8102 	bls.w	da0e0 <__udivmoddi4+0x28c>
   d9edc:	3802      	subs	r0, #2
   d9ede:	443c      	add	r4, r7
   d9ee0:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d9ee4:	eba4 040e 	sub.w	r4, r4, lr
   d9ee8:	2600      	movs	r6, #0
   d9eea:	b11d      	cbz	r5, d9ef4 <__udivmoddi4+0xa0>
   d9eec:	40d4      	lsrs	r4, r2
   d9eee:	2300      	movs	r3, #0
   d9ef0:	e9c5 4300 	strd	r4, r3, [r5]
   d9ef4:	4631      	mov	r1, r6
   d9ef6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9efa:	b902      	cbnz	r2, d9efe <__udivmoddi4+0xaa>
   d9efc:	deff      	udf	#255	; 0xff
   d9efe:	fab2 f282 	clz	r2, r2
   d9f02:	2a00      	cmp	r2, #0
   d9f04:	d150      	bne.n	d9fa8 <__udivmoddi4+0x154>
   d9f06:	1bcb      	subs	r3, r1, r7
   d9f08:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d9f0c:	fa1f f887 	uxth.w	r8, r7
   d9f10:	2601      	movs	r6, #1
   d9f12:	fbb3 fcfe 	udiv	ip, r3, lr
   d9f16:	0c21      	lsrs	r1, r4, #16
   d9f18:	fb0e 331c 	mls	r3, lr, ip, r3
   d9f1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d9f20:	fb08 f30c 	mul.w	r3, r8, ip
   d9f24:	428b      	cmp	r3, r1
   d9f26:	d907      	bls.n	d9f38 <__udivmoddi4+0xe4>
   d9f28:	1879      	adds	r1, r7, r1
   d9f2a:	f10c 30ff 	add.w	r0, ip, #4294967295
   d9f2e:	d202      	bcs.n	d9f36 <__udivmoddi4+0xe2>
   d9f30:	428b      	cmp	r3, r1
   d9f32:	f200 80e9 	bhi.w	da108 <__udivmoddi4+0x2b4>
   d9f36:	4684      	mov	ip, r0
   d9f38:	1ac9      	subs	r1, r1, r3
   d9f3a:	b2a3      	uxth	r3, r4
   d9f3c:	fbb1 f0fe 	udiv	r0, r1, lr
   d9f40:	fb0e 1110 	mls	r1, lr, r0, r1
   d9f44:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d9f48:	fb08 f800 	mul.w	r8, r8, r0
   d9f4c:	45a0      	cmp	r8, r4
   d9f4e:	d907      	bls.n	d9f60 <__udivmoddi4+0x10c>
   d9f50:	193c      	adds	r4, r7, r4
   d9f52:	f100 33ff 	add.w	r3, r0, #4294967295
   d9f56:	d202      	bcs.n	d9f5e <__udivmoddi4+0x10a>
   d9f58:	45a0      	cmp	r8, r4
   d9f5a:	f200 80d9 	bhi.w	da110 <__udivmoddi4+0x2bc>
   d9f5e:	4618      	mov	r0, r3
   d9f60:	eba4 0408 	sub.w	r4, r4, r8
   d9f64:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d9f68:	e7bf      	b.n	d9eea <__udivmoddi4+0x96>
   d9f6a:	428b      	cmp	r3, r1
   d9f6c:	d909      	bls.n	d9f82 <__udivmoddi4+0x12e>
   d9f6e:	2d00      	cmp	r5, #0
   d9f70:	f000 80b1 	beq.w	da0d6 <__udivmoddi4+0x282>
   d9f74:	2600      	movs	r6, #0
   d9f76:	e9c5 0100 	strd	r0, r1, [r5]
   d9f7a:	4630      	mov	r0, r6
   d9f7c:	4631      	mov	r1, r6
   d9f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f82:	fab3 f683 	clz	r6, r3
   d9f86:	2e00      	cmp	r6, #0
   d9f88:	d14a      	bne.n	da020 <__udivmoddi4+0x1cc>
   d9f8a:	428b      	cmp	r3, r1
   d9f8c:	d302      	bcc.n	d9f94 <__udivmoddi4+0x140>
   d9f8e:	4282      	cmp	r2, r0
   d9f90:	f200 80b8 	bhi.w	da104 <__udivmoddi4+0x2b0>
   d9f94:	1a84      	subs	r4, r0, r2
   d9f96:	eb61 0103 	sbc.w	r1, r1, r3
   d9f9a:	2001      	movs	r0, #1
   d9f9c:	468c      	mov	ip, r1
   d9f9e:	2d00      	cmp	r5, #0
   d9fa0:	d0a8      	beq.n	d9ef4 <__udivmoddi4+0xa0>
   d9fa2:	e9c5 4c00 	strd	r4, ip, [r5]
   d9fa6:	e7a5      	b.n	d9ef4 <__udivmoddi4+0xa0>
   d9fa8:	f1c2 0320 	rsb	r3, r2, #32
   d9fac:	fa20 f603 	lsr.w	r6, r0, r3
   d9fb0:	4097      	lsls	r7, r2
   d9fb2:	fa01 f002 	lsl.w	r0, r1, r2
   d9fb6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d9fba:	40d9      	lsrs	r1, r3
   d9fbc:	4330      	orrs	r0, r6
   d9fbe:	0c03      	lsrs	r3, r0, #16
   d9fc0:	fbb1 f6fe 	udiv	r6, r1, lr
   d9fc4:	fa1f f887 	uxth.w	r8, r7
   d9fc8:	fb0e 1116 	mls	r1, lr, r6, r1
   d9fcc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d9fd0:	fb06 f108 	mul.w	r1, r6, r8
   d9fd4:	4299      	cmp	r1, r3
   d9fd6:	fa04 f402 	lsl.w	r4, r4, r2
   d9fda:	d909      	bls.n	d9ff0 <__udivmoddi4+0x19c>
   d9fdc:	18fb      	adds	r3, r7, r3
   d9fde:	f106 3cff 	add.w	ip, r6, #4294967295
   d9fe2:	f080 808d 	bcs.w	da100 <__udivmoddi4+0x2ac>
   d9fe6:	4299      	cmp	r1, r3
   d9fe8:	f240 808a 	bls.w	da100 <__udivmoddi4+0x2ac>
   d9fec:	3e02      	subs	r6, #2
   d9fee:	443b      	add	r3, r7
   d9ff0:	1a5b      	subs	r3, r3, r1
   d9ff2:	b281      	uxth	r1, r0
   d9ff4:	fbb3 f0fe 	udiv	r0, r3, lr
   d9ff8:	fb0e 3310 	mls	r3, lr, r0, r3
   d9ffc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da000:	fb00 f308 	mul.w	r3, r0, r8
   da004:	428b      	cmp	r3, r1
   da006:	d907      	bls.n	da018 <__udivmoddi4+0x1c4>
   da008:	1879      	adds	r1, r7, r1
   da00a:	f100 3cff 	add.w	ip, r0, #4294967295
   da00e:	d273      	bcs.n	da0f8 <__udivmoddi4+0x2a4>
   da010:	428b      	cmp	r3, r1
   da012:	d971      	bls.n	da0f8 <__udivmoddi4+0x2a4>
   da014:	3802      	subs	r0, #2
   da016:	4439      	add	r1, r7
   da018:	1acb      	subs	r3, r1, r3
   da01a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   da01e:	e778      	b.n	d9f12 <__udivmoddi4+0xbe>
   da020:	f1c6 0c20 	rsb	ip, r6, #32
   da024:	fa03 f406 	lsl.w	r4, r3, r6
   da028:	fa22 f30c 	lsr.w	r3, r2, ip
   da02c:	431c      	orrs	r4, r3
   da02e:	fa20 f70c 	lsr.w	r7, r0, ip
   da032:	fa01 f306 	lsl.w	r3, r1, r6
   da036:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   da03a:	fa21 f10c 	lsr.w	r1, r1, ip
   da03e:	431f      	orrs	r7, r3
   da040:	0c3b      	lsrs	r3, r7, #16
   da042:	fbb1 f9fe 	udiv	r9, r1, lr
   da046:	fa1f f884 	uxth.w	r8, r4
   da04a:	fb0e 1119 	mls	r1, lr, r9, r1
   da04e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   da052:	fb09 fa08 	mul.w	sl, r9, r8
   da056:	458a      	cmp	sl, r1
   da058:	fa02 f206 	lsl.w	r2, r2, r6
   da05c:	fa00 f306 	lsl.w	r3, r0, r6
   da060:	d908      	bls.n	da074 <__udivmoddi4+0x220>
   da062:	1861      	adds	r1, r4, r1
   da064:	f109 30ff 	add.w	r0, r9, #4294967295
   da068:	d248      	bcs.n	da0fc <__udivmoddi4+0x2a8>
   da06a:	458a      	cmp	sl, r1
   da06c:	d946      	bls.n	da0fc <__udivmoddi4+0x2a8>
   da06e:	f1a9 0902 	sub.w	r9, r9, #2
   da072:	4421      	add	r1, r4
   da074:	eba1 010a 	sub.w	r1, r1, sl
   da078:	b2bf      	uxth	r7, r7
   da07a:	fbb1 f0fe 	udiv	r0, r1, lr
   da07e:	fb0e 1110 	mls	r1, lr, r0, r1
   da082:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   da086:	fb00 f808 	mul.w	r8, r0, r8
   da08a:	45b8      	cmp	r8, r7
   da08c:	d907      	bls.n	da09e <__udivmoddi4+0x24a>
   da08e:	19e7      	adds	r7, r4, r7
   da090:	f100 31ff 	add.w	r1, r0, #4294967295
   da094:	d22e      	bcs.n	da0f4 <__udivmoddi4+0x2a0>
   da096:	45b8      	cmp	r8, r7
   da098:	d92c      	bls.n	da0f4 <__udivmoddi4+0x2a0>
   da09a:	3802      	subs	r0, #2
   da09c:	4427      	add	r7, r4
   da09e:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   da0a2:	eba7 0708 	sub.w	r7, r7, r8
   da0a6:	fba0 8902 	umull	r8, r9, r0, r2
   da0aa:	454f      	cmp	r7, r9
   da0ac:	46c6      	mov	lr, r8
   da0ae:	4649      	mov	r1, r9
   da0b0:	d31a      	bcc.n	da0e8 <__udivmoddi4+0x294>
   da0b2:	d017      	beq.n	da0e4 <__udivmoddi4+0x290>
   da0b4:	b15d      	cbz	r5, da0ce <__udivmoddi4+0x27a>
   da0b6:	ebb3 020e 	subs.w	r2, r3, lr
   da0ba:	eb67 0701 	sbc.w	r7, r7, r1
   da0be:	fa07 fc0c 	lsl.w	ip, r7, ip
   da0c2:	40f2      	lsrs	r2, r6
   da0c4:	ea4c 0202 	orr.w	r2, ip, r2
   da0c8:	40f7      	lsrs	r7, r6
   da0ca:	e9c5 2700 	strd	r2, r7, [r5]
   da0ce:	2600      	movs	r6, #0
   da0d0:	4631      	mov	r1, r6
   da0d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da0d6:	462e      	mov	r6, r5
   da0d8:	4628      	mov	r0, r5
   da0da:	e70b      	b.n	d9ef4 <__udivmoddi4+0xa0>
   da0dc:	4606      	mov	r6, r0
   da0de:	e6e9      	b.n	d9eb4 <__udivmoddi4+0x60>
   da0e0:	4618      	mov	r0, r3
   da0e2:	e6fd      	b.n	d9ee0 <__udivmoddi4+0x8c>
   da0e4:	4543      	cmp	r3, r8
   da0e6:	d2e5      	bcs.n	da0b4 <__udivmoddi4+0x260>
   da0e8:	ebb8 0e02 	subs.w	lr, r8, r2
   da0ec:	eb69 0104 	sbc.w	r1, r9, r4
   da0f0:	3801      	subs	r0, #1
   da0f2:	e7df      	b.n	da0b4 <__udivmoddi4+0x260>
   da0f4:	4608      	mov	r0, r1
   da0f6:	e7d2      	b.n	da09e <__udivmoddi4+0x24a>
   da0f8:	4660      	mov	r0, ip
   da0fa:	e78d      	b.n	da018 <__udivmoddi4+0x1c4>
   da0fc:	4681      	mov	r9, r0
   da0fe:	e7b9      	b.n	da074 <__udivmoddi4+0x220>
   da100:	4666      	mov	r6, ip
   da102:	e775      	b.n	d9ff0 <__udivmoddi4+0x19c>
   da104:	4630      	mov	r0, r6
   da106:	e74a      	b.n	d9f9e <__udivmoddi4+0x14a>
   da108:	f1ac 0c02 	sub.w	ip, ip, #2
   da10c:	4439      	add	r1, r7
   da10e:	e713      	b.n	d9f38 <__udivmoddi4+0xe4>
   da110:	3802      	subs	r0, #2
   da112:	443c      	add	r4, r7
   da114:	e724      	b.n	d9f60 <__udivmoddi4+0x10c>
   da116:	bf00      	nop

000da118 <__aeabi_idiv0>:
   da118:	4770      	bx	lr
   da11a:	bf00      	nop

000da11c <atol>:
   da11c:	220a      	movs	r2, #10
   da11e:	2100      	movs	r1, #0
   da120:	f000 b8fe 	b.w	da320 <strtol>

000da124 <__cxa_atexit>:
   da124:	b510      	push	{r4, lr}
   da126:	4c05      	ldr	r4, [pc, #20]	; (da13c <__cxa_atexit+0x18>)
   da128:	4613      	mov	r3, r2
   da12a:	b12c      	cbz	r4, da138 <__cxa_atexit+0x14>
   da12c:	460a      	mov	r2, r1
   da12e:	4601      	mov	r1, r0
   da130:	2002      	movs	r0, #2
   da132:	f3af 8000 	nop.w
   da136:	bd10      	pop	{r4, pc}
   da138:	4620      	mov	r0, r4
   da13a:	e7fc      	b.n	da136 <__cxa_atexit+0x12>
   da13c:	00000000 	.word	0x00000000

000da140 <memcpy>:
   da140:	440a      	add	r2, r1
   da142:	4291      	cmp	r1, r2
   da144:	f100 33ff 	add.w	r3, r0, #4294967295
   da148:	d100      	bne.n	da14c <memcpy+0xc>
   da14a:	4770      	bx	lr
   da14c:	b510      	push	{r4, lr}
   da14e:	f811 4b01 	ldrb.w	r4, [r1], #1
   da152:	f803 4f01 	strb.w	r4, [r3, #1]!
   da156:	4291      	cmp	r1, r2
   da158:	d1f9      	bne.n	da14e <memcpy+0xe>
   da15a:	bd10      	pop	{r4, pc}

000da15c <memset>:
   da15c:	4402      	add	r2, r0
   da15e:	4603      	mov	r3, r0
   da160:	4293      	cmp	r3, r2
   da162:	d100      	bne.n	da166 <memset+0xa>
   da164:	4770      	bx	lr
   da166:	f803 1b01 	strb.w	r1, [r3], #1
   da16a:	e7f9      	b.n	da160 <memset+0x4>

000da16c <srand>:
   da16c:	b538      	push	{r3, r4, r5, lr}
   da16e:	4b0d      	ldr	r3, [pc, #52]	; (da1a4 <srand+0x38>)
   da170:	681d      	ldr	r5, [r3, #0]
   da172:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da174:	4604      	mov	r4, r0
   da176:	b97b      	cbnz	r3, da198 <srand+0x2c>
   da178:	2018      	movs	r0, #24
   da17a:	f7fc f93b 	bl	d63f4 <malloc>
   da17e:	4a0a      	ldr	r2, [pc, #40]	; (da1a8 <srand+0x3c>)
   da180:	4b0a      	ldr	r3, [pc, #40]	; (da1ac <srand+0x40>)
   da182:	63a8      	str	r0, [r5, #56]	; 0x38
   da184:	e9c0 2300 	strd	r2, r3, [r0]
   da188:	4b09      	ldr	r3, [pc, #36]	; (da1b0 <srand+0x44>)
   da18a:	6083      	str	r3, [r0, #8]
   da18c:	230b      	movs	r3, #11
   da18e:	8183      	strh	r3, [r0, #12]
   da190:	2201      	movs	r2, #1
   da192:	2300      	movs	r3, #0
   da194:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da198:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da19a:	2200      	movs	r2, #0
   da19c:	611c      	str	r4, [r3, #16]
   da19e:	615a      	str	r2, [r3, #20]
   da1a0:	bd38      	pop	{r3, r4, r5, pc}
   da1a2:	bf00      	nop
   da1a4:	2003e3a0 	.word	0x2003e3a0
   da1a8:	abcd330e 	.word	0xabcd330e
   da1ac:	e66d1234 	.word	0xe66d1234
   da1b0:	0005deec 	.word	0x0005deec

000da1b4 <strcat>:
   da1b4:	b510      	push	{r4, lr}
   da1b6:	4602      	mov	r2, r0
   da1b8:	7814      	ldrb	r4, [r2, #0]
   da1ba:	4613      	mov	r3, r2
   da1bc:	3201      	adds	r2, #1
   da1be:	2c00      	cmp	r4, #0
   da1c0:	d1fa      	bne.n	da1b8 <strcat+0x4>
   da1c2:	3b01      	subs	r3, #1
   da1c4:	f811 2b01 	ldrb.w	r2, [r1], #1
   da1c8:	f803 2f01 	strb.w	r2, [r3, #1]!
   da1cc:	2a00      	cmp	r2, #0
   da1ce:	d1f9      	bne.n	da1c4 <strcat+0x10>
   da1d0:	bd10      	pop	{r4, pc}

000da1d2 <strcmp>:
   da1d2:	f810 2b01 	ldrb.w	r2, [r0], #1
   da1d6:	f811 3b01 	ldrb.w	r3, [r1], #1
   da1da:	2a01      	cmp	r2, #1
   da1dc:	bf28      	it	cs
   da1de:	429a      	cmpcs	r2, r3
   da1e0:	d0f7      	beq.n	da1d2 <strcmp>
   da1e2:	1ad0      	subs	r0, r2, r3
   da1e4:	4770      	bx	lr

000da1e6 <strcpy>:
   da1e6:	4603      	mov	r3, r0
   da1e8:	f811 2b01 	ldrb.w	r2, [r1], #1
   da1ec:	f803 2b01 	strb.w	r2, [r3], #1
   da1f0:	2a00      	cmp	r2, #0
   da1f2:	d1f9      	bne.n	da1e8 <strcpy+0x2>
   da1f4:	4770      	bx	lr

000da1f6 <strlen>:
   da1f6:	4603      	mov	r3, r0
   da1f8:	f813 2b01 	ldrb.w	r2, [r3], #1
   da1fc:	2a00      	cmp	r2, #0
   da1fe:	d1fb      	bne.n	da1f8 <strlen+0x2>
   da200:	1a18      	subs	r0, r3, r0
   da202:	3801      	subs	r0, #1
   da204:	4770      	bx	lr

000da206 <strncpy>:
   da206:	b510      	push	{r4, lr}
   da208:	3901      	subs	r1, #1
   da20a:	4603      	mov	r3, r0
   da20c:	b132      	cbz	r2, da21c <strncpy+0x16>
   da20e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da212:	f803 4b01 	strb.w	r4, [r3], #1
   da216:	3a01      	subs	r2, #1
   da218:	2c00      	cmp	r4, #0
   da21a:	d1f7      	bne.n	da20c <strncpy+0x6>
   da21c:	441a      	add	r2, r3
   da21e:	2100      	movs	r1, #0
   da220:	4293      	cmp	r3, r2
   da222:	d100      	bne.n	da226 <strncpy+0x20>
   da224:	bd10      	pop	{r4, pc}
   da226:	f803 1b01 	strb.w	r1, [r3], #1
   da22a:	e7f9      	b.n	da220 <strncpy+0x1a>

000da22c <_strtol_l.isra.0>:
   da22c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da230:	4e3a      	ldr	r6, [pc, #232]	; (da31c <_strtol_l.isra.0+0xf0>)
   da232:	4686      	mov	lr, r0
   da234:	468c      	mov	ip, r1
   da236:	4660      	mov	r0, ip
   da238:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da23c:	5da5      	ldrb	r5, [r4, r6]
   da23e:	f015 0508 	ands.w	r5, r5, #8
   da242:	d1f8      	bne.n	da236 <_strtol_l.isra.0+0xa>
   da244:	2c2d      	cmp	r4, #45	; 0x2d
   da246:	d133      	bne.n	da2b0 <_strtol_l.isra.0+0x84>
   da248:	f89c 4000 	ldrb.w	r4, [ip]
   da24c:	f04f 0801 	mov.w	r8, #1
   da250:	f100 0c02 	add.w	ip, r0, #2
   da254:	2b00      	cmp	r3, #0
   da256:	d05c      	beq.n	da312 <_strtol_l.isra.0+0xe6>
   da258:	2b10      	cmp	r3, #16
   da25a:	d10c      	bne.n	da276 <_strtol_l.isra.0+0x4a>
   da25c:	2c30      	cmp	r4, #48	; 0x30
   da25e:	d10a      	bne.n	da276 <_strtol_l.isra.0+0x4a>
   da260:	f89c 0000 	ldrb.w	r0, [ip]
   da264:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da268:	2858      	cmp	r0, #88	; 0x58
   da26a:	d14d      	bne.n	da308 <_strtol_l.isra.0+0xdc>
   da26c:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da270:	2310      	movs	r3, #16
   da272:	f10c 0c02 	add.w	ip, ip, #2
   da276:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   da27a:	3f01      	subs	r7, #1
   da27c:	2600      	movs	r6, #0
   da27e:	fbb7 f9f3 	udiv	r9, r7, r3
   da282:	4630      	mov	r0, r6
   da284:	fb03 7a19 	mls	sl, r3, r9, r7
   da288:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   da28c:	2d09      	cmp	r5, #9
   da28e:	d818      	bhi.n	da2c2 <_strtol_l.isra.0+0x96>
   da290:	462c      	mov	r4, r5
   da292:	42a3      	cmp	r3, r4
   da294:	dd24      	ble.n	da2e0 <_strtol_l.isra.0+0xb4>
   da296:	1c75      	adds	r5, r6, #1
   da298:	d007      	beq.n	da2aa <_strtol_l.isra.0+0x7e>
   da29a:	4581      	cmp	r9, r0
   da29c:	d31d      	bcc.n	da2da <_strtol_l.isra.0+0xae>
   da29e:	d101      	bne.n	da2a4 <_strtol_l.isra.0+0x78>
   da2a0:	45a2      	cmp	sl, r4
   da2a2:	db1a      	blt.n	da2da <_strtol_l.isra.0+0xae>
   da2a4:	fb00 4003 	mla	r0, r0, r3, r4
   da2a8:	2601      	movs	r6, #1
   da2aa:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da2ae:	e7eb      	b.n	da288 <_strtol_l.isra.0+0x5c>
   da2b0:	2c2b      	cmp	r4, #43	; 0x2b
   da2b2:	bf08      	it	eq
   da2b4:	f89c 4000 	ldrbeq.w	r4, [ip]
   da2b8:	46a8      	mov	r8, r5
   da2ba:	bf08      	it	eq
   da2bc:	f100 0c02 	addeq.w	ip, r0, #2
   da2c0:	e7c8      	b.n	da254 <_strtol_l.isra.0+0x28>
   da2c2:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   da2c6:	2d19      	cmp	r5, #25
   da2c8:	d801      	bhi.n	da2ce <_strtol_l.isra.0+0xa2>
   da2ca:	3c37      	subs	r4, #55	; 0x37
   da2cc:	e7e1      	b.n	da292 <_strtol_l.isra.0+0x66>
   da2ce:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   da2d2:	2d19      	cmp	r5, #25
   da2d4:	d804      	bhi.n	da2e0 <_strtol_l.isra.0+0xb4>
   da2d6:	3c57      	subs	r4, #87	; 0x57
   da2d8:	e7db      	b.n	da292 <_strtol_l.isra.0+0x66>
   da2da:	f04f 36ff 	mov.w	r6, #4294967295
   da2de:	e7e4      	b.n	da2aa <_strtol_l.isra.0+0x7e>
   da2e0:	1c73      	adds	r3, r6, #1
   da2e2:	d106      	bne.n	da2f2 <_strtol_l.isra.0+0xc6>
   da2e4:	2322      	movs	r3, #34	; 0x22
   da2e6:	f8ce 3000 	str.w	r3, [lr]
   da2ea:	4638      	mov	r0, r7
   da2ec:	b942      	cbnz	r2, da300 <_strtol_l.isra.0+0xd4>
   da2ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da2f2:	f1b8 0f00 	cmp.w	r8, #0
   da2f6:	d000      	beq.n	da2fa <_strtol_l.isra.0+0xce>
   da2f8:	4240      	negs	r0, r0
   da2fa:	2a00      	cmp	r2, #0
   da2fc:	d0f7      	beq.n	da2ee <_strtol_l.isra.0+0xc2>
   da2fe:	b10e      	cbz	r6, da304 <_strtol_l.isra.0+0xd8>
   da300:	f10c 31ff 	add.w	r1, ip, #4294967295
   da304:	6011      	str	r1, [r2, #0]
   da306:	e7f2      	b.n	da2ee <_strtol_l.isra.0+0xc2>
   da308:	2430      	movs	r4, #48	; 0x30
   da30a:	2b00      	cmp	r3, #0
   da30c:	d1b3      	bne.n	da276 <_strtol_l.isra.0+0x4a>
   da30e:	2308      	movs	r3, #8
   da310:	e7b1      	b.n	da276 <_strtol_l.isra.0+0x4a>
   da312:	2c30      	cmp	r4, #48	; 0x30
   da314:	d0a4      	beq.n	da260 <_strtol_l.isra.0+0x34>
   da316:	230a      	movs	r3, #10
   da318:	e7ad      	b.n	da276 <_strtol_l.isra.0+0x4a>
   da31a:	bf00      	nop
   da31c:	000da809 	.word	0x000da809

000da320 <strtol>:
   da320:	4613      	mov	r3, r2
   da322:	460a      	mov	r2, r1
   da324:	4601      	mov	r1, r0
   da326:	4802      	ldr	r0, [pc, #8]	; (da330 <strtol+0x10>)
   da328:	6800      	ldr	r0, [r0, #0]
   da32a:	f7ff bf7f 	b.w	da22c <_strtol_l.isra.0>
   da32e:	bf00      	nop
   da330:	2003e3a0 	.word	0x2003e3a0

000da334 <dynalib_user>:
   da334:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   da344:	00000000 66352e25 25252500 00583230     ....%.5f.%%%02X.
   da354:	50545448 312e312f 69706100 6968742e     HTTP/1.1.api.thi
   da364:	7073676e 2e6b6165 006d6f63 61656826     ngspeak.com.&hea
   da374:	73726564 6c61663d 50006573 2054534f     ders=false.POST 
   da384:	6470752f 20657461 50545448 312e312f     /update HTTP/1.1
   da394:	48000a0d 3a74736f 69706120 6968742e     ...Host: api.thi
   da3a4:	7073676e 2e6b6165 0d6d6f63 6f43000a     ngspeak.com...Co
   da3b4:	63656e6e 6e6f6974 6c63203a 0d65736f     nnection: close.
   da3c4:	7355000a 412d7265 746e6567 7400203a     ..User-Agent: .t
   da3d4:	62696c73 6472612d 6f6e6975 352e312f     slib-arduino/1.5
   da3e4:	61702820 63697472 6120656c 6e6f6772      (particle argon
   da3f4:	2d580029 4e494854 45505347 50414b41     ).X-THINGSPEAKAP
   da404:	59454b49 4300203a 65746e6f 542d746e     IKEY: .Content-T
   da414:	3a657079 70706120 6163696c 6e6f6974     ype: application
   da424:	772d782f 662d7777 2d6d726f 656c7275     /x-www-form-urle
   da434:	646f636e 0a0d6465 6e6f4300 746e6574     ncoded...Content
   da444:	6e654c2d 3a687467 0a0d0020 26000a0d     -Length: ......&
   da454:	65696600 6c00646c 003d7461 676e6f6c     .field.lat=.long
   da464:	6c65003d 74617665 3d6e6f69 61747300     =.elevation=.sta
   da474:	3d737574 69777400 72657474 7774003d     tus=.twitter=.tw
   da484:	3d746565 65726300 64657461 3d74615f     eet=.created_at=
   da494:	49002e00 35525a45 4b434949 34445035     ...IEZR5IICK5PD4
   da4a4:	00425638 61666564 20746c75 42534d00     8VB.default .MSB
   da4b4:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   da4c4:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   da4d4:	69747465 2073676e 75257325 20732520     ettings %s%u %s 
   da4e4:	45444f4d 003e7525                       MODE%u>.

000da4ec <_ZTVN8particle11SPISettingsE>:
	...
   da4f4:	000d4f65 000d4f39 000d4f3b 4d525047     eO..9O..;O..GPRM
   da504:	50470043 00414747                       C.GPGGA.

000da50c <_ZTVN5spark13EthernetClassE>:
	...
   da514:	000d64c3 000d64b9 000d64af 000d64a5     .d...d...d...d..
   da524:	000d6499 000d648d 000d6481 000d6479     .d...d...d..yd..
   da534:	000d646f 000d6465 000d78e9              od..ed...x..

000da540 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   da540:	18100800 38302820                       .... (08

000da548 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   da550:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   da560:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000da570 <_ZTV9IPAddress>:
	...
   da578:	000d6e85 000d6e75 000d6e77              .n..un..wn..

000da584 <_ZTV9USBSerial>:
	...
   da58c:	000d6f87 000d6fef 000d6fc5 000d6a4d     .o...o...o..Mj..
   da59c:	000d6fb7 000d6f89 000d6f99 000d6fe9     .o...o...o...o..
   da5ac:	000d6fa9 000d6f83                       .o...o..

000da5b4 <_ZTV11USARTSerial>:
	...
   da5bc:	000d7091 000d70fd 000d70d5 000d6a4d     .p...p...p..Mj..
   da5cc:	000d70a5 000d70c1 000d70b3 000d70cf     .p...p...p...p..
   da5dc:	000d7093 000d7097                       .p...p..

000da5e4 <_ZTV7TwoWire>:
	...
   da5ec:	000d718d 000d71d7 000d71af 000d718f     .q...q...q...q..
   da5fc:	000d71b7 000d71bf 000d71c7 000d71cf     .q...q...q...q..
   da60c:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   da61c:	203d2072 00006425                       r = %d..

000da624 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da62c:	000d730b 000d732d 000d77ff 000d733b     .s..-s...w..;s..
   da63c:	000d730d                                .s..

000da640 <_ZTV9TCPClient>:
	...
   da648:	000d40b5 000d4101 000d7289 000d72a3     .@...A...r...r..
   da658:	000d7695 000d7407 000d73d9 000d72cd     .v...t...s...r..
   da668:	000d759d 000d7491 000d743b 000d7749     .u...t..;t..Iw..
   da678:	000d72cf 000d7301 000d72b5 000d733f     .r...s...r..?s..
   da688:	000d73b9                                .s..

000da68c <_ZTVN5spark9WiFiClassE>:
	...
   da694:	000d7863 000d7859 000d784f 000d7805     cx..Yx..Ox...x..
   da6a4:	000d7843 000d7837 000d782b 000d7823     Cx..7x..+x..#x..
   da6b4:	000d7819 000d780f 000d78e9              .x...x...x..

000da6c0 <_ZTVN5spark12NetworkClassE>:
	...
   da6c8:	000d7881 000d788b 000d7895 000d789f     .x...x...x...x..
   da6d8:	000d78a9 000d78b5 000d78c1 000d78cd     .x...x...x...x..
   da6e8:	000d78d5 000d78df 000d78e9              .x...x...x..

000da6f4 <_ZSt7nothrow>:
	...

000da6f5 <_ZTSSt19_Sp_make_shared_tag>:
   da6f5:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   da705:	5f646572 00676174                        red_tag....

000da710 <_ZTISt19_Sp_make_shared_tag>:
   da710:	000da750 000da6f5                       P.......

000da718 <_ZTIN10__cxxabiv117__class_type_infoE>:
   da718:	000da7b0 000da724 000da7d4              ....$.......

000da724 <_ZTSN10__cxxabiv117__class_type_infoE>:
   da724:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   da734:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   da744:	00000045                                E...

000da748 <_ZTVN10__cxxabiv117__class_type_infoE>:
   da748:	00000000 000da718 000d7ba9 000d7bbd     .........{...{..
   da758:	000d7d51 000d7d51 000d7c27 000d7b69     Q}..Q}..'|..i{..
   da768:	000d7c0f 000d7bd1 000d7b9d              .|...{...{..

000da774 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   da774:	000da7b0 000da780 000da718              ............

000da780 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   da780:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   da790:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   da7a0:	456f666e 00000000                       nfoE....

000da7a8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   da7a8:	00000000 000da774 000d7c51 000d7c65     ....t...Q|..e|..
   da7b8:	000d7d51 000d7d51 000d7c27 000d7b69     Q}..Q}..'|..i{..
   da7c8:	000d7d25 000d7cb1 000d7c79              %}...|..y|..

000da7d4 <_ZTISt9type_info>:
   da7d4:	000da750 000da7dc                       P.......

000da7dc <_ZTSSt9type_info>:
   da7dc:	74397453 5f657079 6f666e69 00000000     St9type_info....
   da7ec:	00776f70 74727173 00000000              pow.sqrt....

000da7f8 <TWO52>:
   da7f8:	00000000 43300000 00000000 c3300000     ......0C......0.

000da808 <_ctype_>:
   da808:	20202000 20202020 28282020 20282828     .         ((((( 
   da818:	20202020 20202020 20202020 20202020                     
   da828:	10108820 10101010 10101010 10101010      ...............
   da838:	04040410 04040404 10040404 10101010     ................
   da848:	41411010 41414141 01010101 01010101     ..AAAAAA........
   da858:	01010101 01010101 01010101 10101010     ................
   da868:	42421010 42424242 02020202 02020202     ..BBBBBB........
   da878:	02020202 02020202 02020202 10101010     ................
   da888:	00000020 00000000 00000000 00000000      ...............
	...

000da909 <link_const_variable_data_end>:
   da909:	00          	.byte	0x00
	...

000da90c <link_constructors_location>:
   da90c:	000d4f01 	.word	0x000d4f01
   da910:	000d59c9 	.word	0x000d59c9
   da914:	000d64cd 	.word	0x000d64cd
   da918:	000d665d 	.word	0x000d665d
   da91c:	000d6a25 	.word	0x000d6a25
   da920:	000d6ced 	.word	0x000d6ced
   da924:	000d6cfd 	.word	0x000d6cfd
   da928:	000d6d35 	.word	0x000d6d35
   da92c:	000d786d 	.word	0x000d786d
   da930:	000d79bd 	.word	0x000d79bd

000da934 <link_constructors_end>:
	...
