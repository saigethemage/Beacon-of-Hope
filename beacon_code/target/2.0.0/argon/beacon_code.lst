
c:/Users/Saige/Documents/IoT/Beacon-of-Hope/beacon_code/target/2.0.0/argon/beacon_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00006960  000d4020  000d4020  00004020  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .ARM.exidx    00000008  000da980  000da980  0000a980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  4 .backup       00000004  2003f400  000da988  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .data         00000074  2003e390  000da98c  0001e390  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  6 .bss          000003ec  2003e404  2003e404  0002e404  2**2
                  ALLOC
  7 .module_info_suffix 00000028  000daa00  000daa00  0002aa00  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .module_info_crc 00000004  000daa28  000daa28  0002aa28  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  9 .debug_info   00177952  00000000  00000000  0002aa2c  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 00018920  00000000  00000000  001a237e  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    0002cb52  00000000  00000000  001bac9e  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_aranges 00002ba8  00000000  00000000  001e77f0  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_ranges 00007830  00000000  00000000  001ea398  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_macro  0003c3ba  00000000  00000000  001f1bc8  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_line   0003db63  00000000  00000000  0022df82  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_str    0010b383  00000000  00000000  0026bae5  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_frame  00007db0  00000000  00000000  00376e68  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d4020 <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4020:	4809      	ldr	r0, [pc, #36]	; (d4048 <module_user_pre_init+0x28>)
   d4022:	490a      	ldr	r1, [pc, #40]	; (d404c <module_user_pre_init+0x2c>)
   d4024:	4288      	cmp	r0, r1
void* module_user_pre_init() {
   d4026:	b508      	push	{r3, lr}
    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4028:	d005      	beq.n	d4036 <module_user_pre_init+0x16>
   d402a:	4a09      	ldr	r2, [pc, #36]	; (d4050 <module_user_pre_init+0x30>)
   d402c:	4282      	cmp	r2, r0
   d402e:	d002      	beq.n	d4036 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d4030:	1a12      	subs	r2, r2, r0
   d4032:	f006 f8a5 	bl	da180 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4036:	4807      	ldr	r0, [pc, #28]	; (d4054 <module_user_pre_init+0x34>)
   d4038:	4a07      	ldr	r2, [pc, #28]	; (d4058 <module_user_pre_init+0x38>)
   d403a:	2100      	movs	r1, #0
   d403c:	1a12      	subs	r2, r2, r0
   d403e:	f006 f8ad 	bl	da19c <memset>
    return &link_global_data_start;
}
   d4042:	4801      	ldr	r0, [pc, #4]	; (d4048 <module_user_pre_init+0x28>)
   d4044:	bd08      	pop	{r3, pc}
   d4046:	bf00      	nop
   d4048:	2003e390 	.word	0x2003e390
   d404c:	000da98c 	.word	0x000da98c
   d4050:	2003e404 	.word	0x2003e404
   d4054:	2003e404 	.word	0x2003e404
   d4058:	2003e7f0 	.word	0x2003e7f0

000d405c <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d405c:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d405e:	4e07      	ldr	r6, [pc, #28]	; (d407c <module_user_init+0x20>)
   d4060:	4c07      	ldr	r4, [pc, #28]	; (d4080 <module_user_init+0x24>)
    module_user_init_hook();
   d4062:	f002 feeb 	bl	d6e3c <module_user_init_hook>
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	1ba4      	subs	r4, r4, r6
   d4068:	08a4      	lsrs	r4, r4, #2
   d406a:	2500      	movs	r5, #0
   d406c:	42a5      	cmp	r5, r4
   d406e:	d100      	bne.n	d4072 <module_user_init+0x16>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4070:	bd70      	pop	{r4, r5, r6, pc}
        link_constructors_location[ctor_num]();
   d4072:	f856 3b04 	ldr.w	r3, [r6], #4
   d4076:	4798      	blx	r3
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4078:	3501      	adds	r5, #1
   d407a:	e7f7      	b.n	d406c <module_user_init+0x10>
   d407c:	000da94c 	.word	0x000da94c
   d4080:	000da974 	.word	0x000da974

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 bd16 	b.w	d4ab4 <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 fe4d 	bl	d4d28 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    _post_loop();
   d4092:	f002 be95 	b.w	d6dc0 <_post_loop>

000d4096 <_Znwj>:
 * Implement C++ new/delete operators using the heap
 */

void *operator new(size_t size)
{
	return malloc(size);
   d4096:	f002 b9b9 	b.w	d640c <malloc>

000d409a <_Znaj>:
   d409a:	f002 b9b7 	b.w	d640c <malloc>

000d409e <_ZdlPv>:
	return malloc(size);
}

void operator delete(void *p)
{
	free(p);
   d409e:	f002 b9bd 	b.w	d641c <free>

000d40a2 <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d40a2:	7800      	ldrb	r0, [r0, #0]
   d40a4:	fab0 f080 	clz	r0, r0
   d40a8:	0940      	lsrs	r0, r0, #5
   d40aa:	4770      	bx	lr

000d40ac <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40ac:	2301      	movs	r3, #1
   d40ae:	7003      	strb	r3, [r0, #0]
   d40b0:	4770      	bx	lr
	...

000d40b4 <_ZN9TCPClientD1Ev>:
class TCPClient : public Client {

public:
    TCPClient();
    TCPClient(sock_handle_t sock);
    virtual ~TCPClient() {};
   d40b4:	b538      	push	{r3, r4, r5, lr}
      // Does not throw if __r._M_get_use_count() == 0, caller must check.
      explicit __shared_count(const __weak_count<_Lp>& __r, std::nothrow_t);

      ~__shared_count() noexcept
      {
	if (_M_pi != nullptr)
   d40b6:	6984      	ldr	r4, [r0, #24]
   d40b8:	4b0a      	ldr	r3, [pc, #40]	; (d40e4 <_ZN9TCPClientD1Ev+0x30>)
   d40ba:	6003      	str	r3, [r0, #0]
   d40bc:	4605      	mov	r5, r0
   d40be:	b17c      	cbz	r4, d40e0 <_ZN9TCPClientD1Ev+0x2c>
      if (--_M_use_count == 0)
   d40c0:	6863      	ldr	r3, [r4, #4]
   d40c2:	3b01      	subs	r3, #1
   d40c4:	6063      	str	r3, [r4, #4]
   d40c6:	b95b      	cbnz	r3, d40e0 <_ZN9TCPClientD1Ev+0x2c>
          _M_dispose();
   d40c8:	6823      	ldr	r3, [r4, #0]
   d40ca:	4620      	mov	r0, r4
   d40cc:	689b      	ldr	r3, [r3, #8]
   d40ce:	4798      	blx	r3
          if (--_M_weak_count == 0)
   d40d0:	68a3      	ldr	r3, [r4, #8]
   d40d2:	3b01      	subs	r3, #1
   d40d4:	60a3      	str	r3, [r4, #8]
   d40d6:	b91b      	cbnz	r3, d40e0 <_ZN9TCPClientD1Ev+0x2c>
            _M_destroy();
   d40d8:	6823      	ldr	r3, [r4, #0]
   d40da:	4620      	mov	r0, r4
   d40dc:	68db      	ldr	r3, [r3, #12]
   d40de:	4798      	blx	r3
   d40e0:	4628      	mov	r0, r5
   d40e2:	bd38      	pop	{r3, r4, r5, pc}
   d40e4:	000da688 	.word	0x000da688

000d40e8 <_ZN15ThingSpeakClass13abortWriteRawEv.isra.0>:
		textToSearch.remove(toPosition);
		
		return textToSearch.substring(fromPosition);	
	}
	
    int abortWriteRaw()
   d40e8:	b508      	push	{r3, lr}
    {
        this->client->stop();
   d40ea:	6803      	ldr	r3, [r0, #0]
   d40ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d40ee:	4798      	blx	r3
        return ERR_UNEXPECTED_FAIL;
    }
   d40f0:	4800      	ldr	r0, [pc, #0]	; (d40f4 <_ZN15ThingSpeakClass13abortWriteRawEv.isra.0+0xc>)
   d40f2:	bd08      	pop	{r3, pc}
   d40f4:	fffffed2 	.word	0xfffffed2

000d40f8 <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40f8:	6803      	ldr	r3, [r0, #0]
   d40fa:	b2c9      	uxtb	r1, r1
   d40fc:	689b      	ldr	r3, [r3, #8]
   d40fe:	4718      	bx	r3

000d4100 <_ZN9TCPClientD0Ev>:
   d4100:	b510      	push	{r4, lr}
   d4102:	4604      	mov	r4, r0
   d4104:	f7ff ffd6 	bl	d40b4 <_ZN9TCPClientD1Ev>
   d4108:	4620      	mov	r0, r4
   d410a:	211c      	movs	r1, #28
   d410c:	f003 fd3f 	bl	d7b8e <_ZdlPvj>
   d4110:	4620      	mov	r0, r4
   d4112:	bd10      	pop	{r4, pc}

000d4114 <_ZN15ThingSpeakClass8setFieldEjf>:
    int setField(unsigned int field, float value)
   d4114:	b530      	push	{r4, r5, lr}
	};

	int convertFloatToChar(float value, char *valueString)
	{
		// Supported range is -999999000000 to 999999000000
		if(0 == isinf(value) && (value > 999999000000 || value < -999999000000))
   d4116:	eddf 7a22 	vldr	s15, [pc, #136]	; d41a0 <_ZN15ThingSpeakClass8setFieldEjf+0x8c>
#endif

#ifndef __CORRECT_ISO_CPP11_MATH_H_PROTO_FP
  constexpr bool
  isinf(float __x)
  { return __builtin_isinf(__x); }
   d411a:	eeb0 7ac0 	vabs.f32	s14, s0
   d411e:	eeb4 7a67 	vcmp.f32	s14, s15
   d4122:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    int setField(unsigned int field, float value)
   d4126:	b08b      	sub	sp, #44	; 0x2c
   d4128:	4605      	mov	r5, r0
   d412a:	460c      	mov	r4, r1
		if(0 == isinf(value) && (value > 999999000000 || value < -999999000000))
   d412c:	dc0d      	bgt.n	d414a <_ZN15ThingSpeakClass8setFieldEjf+0x36>
   d412e:	eddf 7a1d 	vldr	s15, [pc, #116]	; d41a4 <_ZN15ThingSpeakClass8setFieldEjf+0x90>
   d4132:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d413a:	dc2d      	bgt.n	d4198 <_ZN15ThingSpeakClass8setFieldEjf+0x84>
   d413c:	eddf 7a1a 	vldr	s15, [pc, #104]	; d41a8 <_ZN15ThingSpeakClass8setFieldEjf+0x94>
   d4140:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d4144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4148:	d426      	bmi.n	d4198 <_ZN15ThingSpeakClass8setFieldEjf+0x84>
		{
			// Out of range
			return ERR_OUT_OF_RANGE;
		}
		// Given that the resolution of Spark is 1 / 2^12, or ~0.00024 volts, assume that 5 places right of decimal should be sufficient for most applications
        sprintf(valueString, "%.5f", value);
   d414a:	ee10 0a10 	vmov	r0, s0
   d414e:	f005 f995 	bl	d947c <__aeabi_f2d>
   d4152:	4602      	mov	r2, r0
   d4154:	460b      	mov	r3, r1
   d4156:	a805      	add	r0, sp, #20
   d4158:	4914      	ldr	r1, [pc, #80]	; (d41ac <_ZN15ThingSpeakClass8setFieldEjf+0x98>)
   d415a:	f002 f96f 	bl	d643c <sprintf>
		return setField(field, String(value));
   d415e:	a905      	add	r1, sp, #20
   d4160:	a801      	add	r0, sp, #4
   d4162:	f002 fb90 	bl	d6886 <_ZN6StringC1EPKc>
		if(field < FIELDNUM_MIN || field > FIELDNUM_MAX) return ERR_INVALID_FIELD_NUM;
   d4166:	1e61      	subs	r1, r4, #1
   d4168:	2907      	cmp	r1, #7
   d416a:	d80f      	bhi.n	d418c <_ZN15ThingSpeakClass8setFieldEjf+0x78>
		if(value.length() > FIELDLENGTH_MAX) return ERR_OUT_OF_RANGE;
   d416c:	9b03      	ldr	r3, [sp, #12]
   d416e:	2bff      	cmp	r3, #255	; 0xff
   d4170:	d80f      	bhi.n	d4192 <_ZN15ThingSpeakClass8setFieldEjf+0x7e>
		this->nextWriteField[field - 1] = value;
   d4172:	eb05 1001 	add.w	r0, r5, r1, lsl #4
   d4176:	3008      	adds	r0, #8
   d4178:	a901      	add	r1, sp, #4
   d417a:	f002 fbb5 	bl	d68e8 <_ZN6StringaSERKS_>
		return OK_SUCCESS;
   d417e:	24c8      	movs	r4, #200	; 0xc8
		return setField(field, String(value));
   d4180:	a801      	add	r0, sp, #4
   d4182:	f002 fb35 	bl	d67f0 <_ZN6StringD1Ev>
	};
   d4186:	4620      	mov	r0, r4
   d4188:	b00b      	add	sp, #44	; 0x2c
   d418a:	bd30      	pop	{r4, r5, pc}
		if(field < FIELDNUM_MIN || field > FIELDNUM_MAX) return ERR_INVALID_FIELD_NUM;
   d418c:	f06f 04c8 	mvn.w	r4, #200	; 0xc8
   d4190:	e7f6      	b.n	d4180 <_ZN15ThingSpeakClass8setFieldEjf+0x6c>
		if(value.length() > FIELDLENGTH_MAX) return ERR_OUT_OF_RANGE;
   d4192:	f06f 0464 	mvn.w	r4, #100	; 0x64
   d4196:	e7f3      	b.n	d4180 <_ZN15ThingSpeakClass8setFieldEjf+0x6c>
			return ERR_OUT_OF_RANGE;
   d4198:	f06f 0464 	mvn.w	r4, #100	; 0x64
   d419c:	e7f3      	b.n	d4186 <_ZN15ThingSpeakClass8setFieldEjf+0x72>
   d419e:	bf00      	nop
   d41a0:	7f7fffff 	.word	0x7f7fffff
   d41a4:	5368d496 	.word	0x5368d496
   d41a8:	d368d496 	.word	0xd368d496
   d41ac:	000da388 	.word	0x000da388

000d41b0 <_ZN15ThingSpeakClass9escapeUrlE6String>:
	String escapeUrl(String message){
   d41b0:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d41b4:	4615      	mov	r5, r2
   d41b6:	b087      	sub	sp, #28
		char ch[] = " ";
   d41b8:	2320      	movs	r3, #32
		String result = "";
   d41ba:	4933      	ldr	r1, [pc, #204]	; (d4288 <_ZN15ThingSpeakClass9escapeUrlE6String+0xd8>)
		char ch[] = " ";
   d41bc:	f8ad 3000 	strh.w	r3, [sp]
	String escapeUrl(String message){
   d41c0:	4606      	mov	r6, r0
		String result = "";
   d41c2:	f002 fb60 	bl	d6886 <_ZN6StringC1EPKc>
		unsigned int n = message.length() + 1;  // add an extra for the null
   d41c6:	68ac      	ldr	r4, [r5, #8]
			if(t == 0x22 || t == 0x25 || t == 0x26 || t == 0x2B || t == 0x3B){
   d41c8:	f8df 80c0 	ldr.w	r8, [pc, #192]	; d428c <_ZN15ThingSpeakClass9escapeUrlE6String+0xdc>
		unsigned int n = message.length() + 1;  // add an extra for the null
   d41cc:	3401      	adds	r4, #1
		for(i = 0; i < message.length(); i++){
   d41ce:	2700      	movs	r7, #0
   d41d0:	68ab      	ldr	r3, [r5, #8]
   d41d2:	429f      	cmp	r7, r3
   d41d4:	d216      	bcs.n	d4204 <_ZN15ThingSpeakClass9escapeUrlE6String+0x54>
			t = message.charAt(i);
   d41d6:	4639      	mov	r1, r7
   d41d8:	4628      	mov	r0, r5
   d41da:	f002 fc1f 	bl	d6a1c <_ZNK6String6charAtEj>
			if( (t >= 0x00 && t <= 0x1F) || t >= 0x80 ){
   d41de:	f1a0 0320 	sub.w	r3, r0, #32
   d41e2:	b2db      	uxtb	r3, r3
   d41e4:	2b5f      	cmp	r3, #95	; 0x5f
   d41e6:	d902      	bls.n	d41ee <_ZN15ThingSpeakClass9escapeUrlE6String+0x3e>
				n--;
   d41e8:	3c01      	subs	r4, #1
		for(i = 0; i < message.length(); i++){
   d41ea:	3701      	adds	r7, #1
   d41ec:	e7f0      	b.n	d41d0 <_ZN15ThingSpeakClass9escapeUrlE6String+0x20>
			if(t == 0x22 || t == 0x25 || t == 0x26 || t == 0x2B || t == 0x3B){
   d41ee:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
   d41f2:	b2db      	uxtb	r3, r3
   d41f4:	2b19      	cmp	r3, #25
   d41f6:	d8f8      	bhi.n	d41ea <_ZN15ThingSpeakClass9escapeUrlE6String+0x3a>
   d41f8:	fa28 f303 	lsr.w	r3, r8, r3
   d41fc:	07da      	lsls	r2, r3, #31
				n = n + 2;
   d41fe:	bf48      	it	mi
   d4200:	3402      	addmi	r4, #2
   d4202:	e7f2      	b.n	d41ea <_ZN15ThingSpeakClass9escapeUrlE6String+0x3a>
		encoded = (char *)malloc(sizeof(char) * n);	
   d4204:	4620      	mov	r0, r4
   d4206:	f002 f901 	bl	d640c <malloc>
		if(encoded == NULL){
   d420a:	4604      	mov	r4, r0
   d420c:	2800      	cmp	r0, #0
   d420e:	d037      	beq.n	d4280 <_ZN15ThingSpeakClass9escapeUrlE6String+0xd0>
		encoded[0] = 0;
   d4210:	2700      	movs	r7, #0
			if(t == 0x22 || t == 0x25 || t == 0x26 || t == 0x2B || t == 0x3B){
   d4212:	f8df 8078 	ldr.w	r8, [pc, #120]	; d428c <_ZN15ThingSpeakClass9escapeUrlE6String+0xdc>
				sprintf(temp, "%%%02X", t);
   d4216:	f8df 9078 	ldr.w	r9, [pc, #120]	; d4290 <_ZN15ThingSpeakClass9escapeUrlE6String+0xe0>
		encoded[0] = 0;
   d421a:	7007      	strb	r7, [r0, #0]
		for(i = 0; i < message.length(); i++){
   d421c:	68ab      	ldr	r3, [r5, #8]
   d421e:	429f      	cmp	r7, r3
   d4220:	d220      	bcs.n	d4264 <_ZN15ThingSpeakClass9escapeUrlE6String+0xb4>
			t = message.charAt(i);
   d4222:	4639      	mov	r1, r7
   d4224:	4628      	mov	r0, r5
   d4226:	f002 fbf9 	bl	d6a1c <_ZNK6String6charAtEj>
			if( (t >= 0x00 && t <= 0x1F) || t >= 0x80 ){
   d422a:	f1a0 0320 	sub.w	r3, r0, #32
   d422e:	b2db      	uxtb	r3, r3
   d4230:	2b5f      	cmp	r3, #95	; 0x5f
			t = message.charAt(i);
   d4232:	4602      	mov	r2, r0
			if( (t >= 0x00 && t <= 0x1F) || t >= 0x80 ){
   d4234:	d80e      	bhi.n	d4254 <_ZN15ThingSpeakClass9escapeUrlE6String+0xa4>
			if(t == 0x22 || t == 0x25 || t == 0x26 || t == 0x2B || t == 0x3B){
   d4236:	f1a0 0322 	sub.w	r3, r0, #34	; 0x22
   d423a:	b2db      	uxtb	r3, r3
   d423c:	2b19      	cmp	r3, #25
   d423e:	d803      	bhi.n	d4248 <_ZN15ThingSpeakClass9escapeUrlE6String+0x98>
   d4240:	fa28 f303 	lsr.w	r3, r8, r3
   d4244:	07db      	lsls	r3, r3, #31
   d4246:	d407      	bmi.n	d4258 <_ZN15ThingSpeakClass9escapeUrlE6String+0xa8>
			ch[0] = t;
   d4248:	f88d 2000 	strb.w	r2, [sp]
			strcat(encoded, ch);
   d424c:	4669      	mov	r1, sp
				strcat(encoded, temp);
   d424e:	4620      	mov	r0, r4
   d4250:	f005 ffd0 	bl	da1f4 <strcat>
		for(i = 0; i < message.length(); i++){
   d4254:	3701      	adds	r7, #1
   d4256:	e7e1      	b.n	d421c <_ZN15ThingSpeakClass9escapeUrlE6String+0x6c>
				sprintf(temp, "%%%02X", t);
   d4258:	4649      	mov	r1, r9
   d425a:	a801      	add	r0, sp, #4
   d425c:	f002 f8ee 	bl	d643c <sprintf>
				strcat(encoded, temp);
   d4260:	a901      	add	r1, sp, #4
   d4262:	e7f4      	b.n	d424e <_ZN15ThingSpeakClass9escapeUrlE6String+0x9e>
		result = String(encoded);
   d4264:	4621      	mov	r1, r4
   d4266:	a802      	add	r0, sp, #8
   d4268:	f002 fb0d 	bl	d6886 <_ZN6StringC1EPKc>
   d426c:	a902      	add	r1, sp, #8
   d426e:	4630      	mov	r0, r6
   d4270:	f002 fb54 	bl	d691c <_ZN6StringaSEOS_>
   d4274:	a802      	add	r0, sp, #8
   d4276:	f002 fabb 	bl	d67f0 <_ZN6StringD1Ev>
		free(encoded);
   d427a:	4620      	mov	r0, r4
   d427c:	f002 f8ce 	bl	d641c <free>
	}
   d4280:	4630      	mov	r0, r6
   d4282:	b007      	add	sp, #28
   d4284:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4288:	000da492 	.word	0x000da492
   d428c:	02000219 	.word	0x02000219
   d4290:	000da38d 	.word	0x000da38d

000d4294 <_ZN15ThingSpeakClass15getHTTPResponseER6String>:
	int getHTTPResponse(String & response)
   d4294:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4296:	b085      	sub	sp, #20
   d4298:	4604      	mov	r4, r0
   d429a:	460e      	mov	r6, r1

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d429c:	f001 feba 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
        while(client->available() == 0 && millis() - startWaitForResponseAt < TIMEOUT_MS_SERVERRESPONSE)
   d42a0:	f241 3787 	movw	r7, #4999	; 0x1387
   d42a4:	4605      	mov	r5, r0
   d42a6:	6820      	ldr	r0, [r4, #0]
   d42a8:	6803      	ldr	r3, [r0, #0]
   d42aa:	691b      	ldr	r3, [r3, #16]
   d42ac:	4798      	blx	r3
   d42ae:	b940      	cbnz	r0, d42c2 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x2e>
   d42b0:	f001 feb0 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
   d42b4:	1b40      	subs	r0, r0, r5
   d42b6:	42b8      	cmp	r0, r7
   d42b8:	d803      	bhi.n	d42c2 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x2e>
            delay(100);
   d42ba:	2064      	movs	r0, #100	; 0x64
   d42bc:	f002 fd3e 	bl	d6d3c <delay>
        while(client->available() == 0 && millis() - startWaitForResponseAt < TIMEOUT_MS_SERVERRESPONSE)
   d42c0:	e7f1      	b.n	d42a6 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x12>
        if(client->available() == 0)
   d42c2:	6820      	ldr	r0, [r4, #0]
   d42c4:	6803      	ldr	r3, [r0, #0]
   d42c6:	691b      	ldr	r3, [r3, #16]
   d42c8:	4798      	blx	r3
   d42ca:	b338      	cbz	r0, d431c <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x88>
		if(!client->find(const_cast<char *>("HTTP/1.1")))
   d42cc:	4914      	ldr	r1, [pc, #80]	; (d4320 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x8c>)
   d42ce:	6820      	ldr	r0, [r4, #0]
   d42d0:	f002 fcdb 	bl	d6c8a <_ZN6Stream4findEPc>
   d42d4:	b920      	cbnz	r0, d42e0 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x4c>
			return ERR_BAD_RESPONSE; // Couldn't parse response (didn't find HTTP/1.1)
   d42d6:	f46f 7597 	mvn.w	r5, #302	; 0x12e
	};
   d42da:	4628      	mov	r0, r5
   d42dc:	b005      	add	sp, #20
   d42de:	bdf0      	pop	{r4, r5, r6, r7, pc}
		int status = client->parseInt();
   d42e0:	6820      	ldr	r0, [r4, #0]
   d42e2:	f002 fd01 	bl	d6ce8 <_ZN6Stream8parseIntEv>
		if(status != OK_SUCCESS)
   d42e6:	28c8      	cmp	r0, #200	; 0xc8
		int status = client->parseInt();
   d42e8:	4605      	mov	r5, r0
		if(status != OK_SUCCESS)
   d42ea:	d1f6      	bne.n	d42da <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x46>
		if(!client->find(const_cast<char *>("\r\n")))
   d42ec:	490d      	ldr	r1, [pc, #52]	; (d4324 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x90>)
   d42ee:	6820      	ldr	r0, [r4, #0]
   d42f0:	f002 fccb 	bl	d6c8a <_ZN6Stream4findEPc>
   d42f4:	2800      	cmp	r0, #0
   d42f6:	d0ee      	beq.n	d42d6 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x42>
		if(!client->find(const_cast<char *>("\n\r\n")))
   d42f8:	490b      	ldr	r1, [pc, #44]	; (d4328 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x94>)
   d42fa:	6820      	ldr	r0, [r4, #0]
   d42fc:	f002 fcc5 	bl	d6c8a <_ZN6Stream4findEPc>
   d4300:	2800      	cmp	r0, #0
   d4302:	d0e8      	beq.n	d42d6 <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x42>
		String tempString = client->readString();
   d4304:	6821      	ldr	r1, [r4, #0]
   d4306:	4668      	mov	r0, sp
   d4308:	f002 fcf2 	bl	d6cf0 <_ZN6Stream10readStringEv>
		response = tempString;
   d430c:	4669      	mov	r1, sp
   d430e:	4630      	mov	r0, r6
   d4310:	f002 faea 	bl	d68e8 <_ZN6StringaSERKS_>
		String tempString = client->readString();
   d4314:	4668      	mov	r0, sp
   d4316:	f002 fa6b 	bl	d67f0 <_ZN6StringD1Ev>
   d431a:	e7de      	b.n	d42da <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x46>
			return ERR_TIMEOUT; // Didn't get server response in time
   d431c:	4d03      	ldr	r5, [pc, #12]	; (d432c <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x98>)
   d431e:	e7dc      	b.n	d42da <_ZN15ThingSpeakClass15getHTTPResponseER6String+0x46>
   d4320:	000da394 	.word	0x000da394
   d4324:	000da490 	.word	0x000da490
   d4328:	000da48f 	.word	0x000da48f
   d432c:	fffffed0 	.word	0xfffffed0

000d4330 <_ZN15ThingSpeakClass8writeRawEm6StringPKc>:
	int writeRaw(unsigned long channelNumber, String postMessage, const char * writeAPIKey)
   d4330:	b5f0      	push	{r4, r5, r6, r7, lr}
   d4332:	4605      	mov	r5, r0
		connectSuccess = client->connect(THINGSPEAK_URL, this->port);
   d4334:	6800      	ldr	r0, [r0, #0]
   d4336:	4950      	ldr	r1, [pc, #320]	; (d4478 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x148>)
	int writeRaw(unsigned long channelNumber, String postMessage, const char * writeAPIKey)
   d4338:	461e      	mov	r6, r3
		connectSuccess = client->connect(THINGSPEAK_URL, this->port);
   d433a:	6803      	ldr	r3, [r0, #0]
	int writeRaw(unsigned long channelNumber, String postMessage, const char * writeAPIKey)
   d433c:	b089      	sub	sp, #36	; 0x24
		connectSuccess = client->connect(THINGSPEAK_URL, this->port);
   d433e:	6a5f      	ldr	r7, [r3, #36]	; 0x24
	int writeRaw(unsigned long channelNumber, String postMessage, const char * writeAPIKey)
   d4340:	4614      	mov	r4, r2
		connectSuccess = client->connect(THINGSPEAK_URL, this->port);
   d4342:	2300      	movs	r3, #0
   d4344:	88aa      	ldrh	r2, [r5, #4]
   d4346:	47b8      	blx	r7
		if(!connectThingSpeak())
   d4348:	2800      	cmp	r0, #0
   d434a:	f000 8092 	beq.w	d4472 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x142>
};

class StringSumHelper : public String
{
public:
	StringSumHelper(const String &s) : String(s) {}
   d434e:	4621      	mov	r1, r4
   d4350:	a804      	add	r0, sp, #16
   d4352:	f002 fad8 	bl	d6906 <_ZN6StringC1ERKS_>
		postMessage = postMessage + String("&headers=false");
   d4356:	4949      	ldr	r1, [pc, #292]	; (d447c <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x14c>)
   d4358:	4668      	mov	r0, sp
   d435a:	f002 fa94 	bl	d6886 <_ZN6StringC1EPKc>
   d435e:	4669      	mov	r1, sp
   d4360:	a804      	add	r0, sp, #16
   d4362:	f002 fb46 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d4366:	4601      	mov	r1, r0
   d4368:	4620      	mov	r0, r4
   d436a:	f002 fabd 	bl	d68e8 <_ZN6StringaSERKS_>
   d436e:	4668      	mov	r0, sp
   d4370:	f002 fa3e 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4374:	a804      	add	r0, sp, #16
   d4376:	f002 fa3b 	bl	d67f0 <_ZN6StringD1Ev>
		if(!this->client->print("POST /update HTTP/1.1\r\n")) return abortWriteRaw();
   d437a:	4941      	ldr	r1, [pc, #260]	; (d4480 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x150>)
   d437c:	6828      	ldr	r0, [r5, #0]
   d437e:	f002 fb99 	bl	d6ab4 <_ZN5Print5printEPKc>
   d4382:	b930      	cbnz	r0, d4392 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x62>
		if(!this->client->print(postMessage)) return abortWriteRaw();
   d4384:	6828      	ldr	r0, [r5, #0]
   d4386:	f7ff feaf 	bl	d40e8 <_ZN15ThingSpeakClass13abortWriteRawEv.isra.0>
   d438a:	4604      	mov	r4, r0
	};
   d438c:	4620      	mov	r0, r4
   d438e:	b009      	add	sp, #36	; 0x24
   d4390:	bdf0      	pop	{r4, r5, r6, r7, pc}
		if (!this->client->print("Host: api.thingspeak.com\r\n")) return false;
   d4392:	493c      	ldr	r1, [pc, #240]	; (d4484 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x154>)
   d4394:	6828      	ldr	r0, [r5, #0]
   d4396:	f002 fb8d 	bl	d6ab4 <_ZN5Print5printEPKc>
   d439a:	2800      	cmp	r0, #0
   d439c:	d0f2      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if (!this->client->print("Connection: close\r\n")) return false;
   d439e:	493a      	ldr	r1, [pc, #232]	; (d4488 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x158>)
   d43a0:	6828      	ldr	r0, [r5, #0]
   d43a2:	f002 fb87 	bl	d6ab4 <_ZN5Print5printEPKc>
   d43a6:	2800      	cmp	r0, #0
   d43a8:	d0ec      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if (!this->client->print("User-Agent: ")) return false;
   d43aa:	4938      	ldr	r1, [pc, #224]	; (d448c <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x15c>)
   d43ac:	6828      	ldr	r0, [r5, #0]
   d43ae:	f002 fb81 	bl	d6ab4 <_ZN5Print5printEPKc>
   d43b2:	2800      	cmp	r0, #0
   d43b4:	d0e6      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if (!this->client->print(TS_USER_AGENT)) return false;
   d43b6:	4936      	ldr	r1, [pc, #216]	; (d4490 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x160>)
   d43b8:	6828      	ldr	r0, [r5, #0]
   d43ba:	f002 fb7b 	bl	d6ab4 <_ZN5Print5printEPKc>
   d43be:	2800      	cmp	r0, #0
   d43c0:	d0e0      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if (!this->client->print("\r\n")) return false;
   d43c2:	4934      	ldr	r1, [pc, #208]	; (d4494 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x164>)
   d43c4:	6828      	ldr	r0, [r5, #0]
   d43c6:	f002 fb75 	bl	d6ab4 <_ZN5Print5printEPKc>
   d43ca:	2800      	cmp	r0, #0
   d43cc:	d0da      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if(NULL != APIKey)
   d43ce:	b18e      	cbz	r6, d43f4 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0xc4>
			if (!this->client->print("X-THINGSPEAKAPIKEY: ")) return false;
   d43d0:	4931      	ldr	r1, [pc, #196]	; (d4498 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x168>)
   d43d2:	6828      	ldr	r0, [r5, #0]
   d43d4:	f002 fb6e 	bl	d6ab4 <_ZN5Print5printEPKc>
   d43d8:	2800      	cmp	r0, #0
   d43da:	d0d3      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
			if (!this->client->print(APIKey)) return false;
   d43dc:	6828      	ldr	r0, [r5, #0]
   d43de:	4631      	mov	r1, r6
   d43e0:	f002 fb68 	bl	d6ab4 <_ZN5Print5printEPKc>
   d43e4:	2800      	cmp	r0, #0
   d43e6:	d0cd      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
			if (!this->client->print("\r\n")) return false;
   d43e8:	492a      	ldr	r1, [pc, #168]	; (d4494 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x164>)
   d43ea:	6828      	ldr	r0, [r5, #0]
   d43ec:	f002 fb62 	bl	d6ab4 <_ZN5Print5printEPKc>
   d43f0:	2800      	cmp	r0, #0
   d43f2:	d0c7      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if(!this->client->print("Content-Type: application/x-www-form-urlencoded\r\n")) return abortWriteRaw();
   d43f4:	4929      	ldr	r1, [pc, #164]	; (d449c <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x16c>)
   d43f6:	6828      	ldr	r0, [r5, #0]
   d43f8:	f002 fb5c 	bl	d6ab4 <_ZN5Print5printEPKc>
   d43fc:	2800      	cmp	r0, #0
   d43fe:	d0c1      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if(!this->client->print("Content-Length: ")) return abortWriteRaw();
   d4400:	4927      	ldr	r1, [pc, #156]	; (d44a0 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x170>)
   d4402:	6828      	ldr	r0, [r5, #0]
   d4404:	f002 fb56 	bl	d6ab4 <_ZN5Print5printEPKc>
   d4408:	2800      	cmp	r0, #0
   d440a:	d0bb      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d440c:	68a1      	ldr	r1, [r4, #8]
   d440e:	6828      	ldr	r0, [r5, #0]
   d4410:	220a      	movs	r2, #10
   d4412:	f002 fb6c 	bl	d6aee <_ZN5Print11printNumberEmh>
		if(!this->client->print(postMessage.length())) return abortWriteRaw();
   d4416:	2800      	cmp	r0, #0
   d4418:	d0b4      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if(!this->client->print("\r\n\r\n")) return abortWriteRaw();
   d441a:	4922      	ldr	r1, [pc, #136]	; (d44a4 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x174>)
   d441c:	6828      	ldr	r0, [r5, #0]
   d441e:	f002 fb49 	bl	d6ab4 <_ZN5Print5printEPKc>
   d4422:	2800      	cmp	r0, #0
   d4424:	d0ae      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		if(!this->client->print(postMessage)) return abortWriteRaw();
   d4426:	6821      	ldr	r1, [r4, #0]
   d4428:	6828      	ldr	r0, [r5, #0]
   d442a:	f002 fb43 	bl	d6ab4 <_ZN5Print5printEPKc>
   d442e:	2800      	cmp	r0, #0
   d4430:	d0a8      	beq.n	d4384 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x54>
		String entryIDText = String();
   d4432:	491d      	ldr	r1, [pc, #116]	; (d44a8 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x178>)
   d4434:	a804      	add	r0, sp, #16
   d4436:	f002 fa26 	bl	d6886 <_ZN6StringC1EPKc>
		int status = getHTTPResponse(entryIDText);
   d443a:	a904      	add	r1, sp, #16
   d443c:	4628      	mov	r0, r5
   d443e:	f7ff ff29 	bl	d4294 <_ZN15ThingSpeakClass15getHTTPResponseER6String>
		if(status != OK_SUCCESS)
   d4442:	28c8      	cmp	r0, #200	; 0xc8
		int status = getHTTPResponse(entryIDText);
   d4444:	4604      	mov	r4, r0
		if(status != OK_SUCCESS)
   d4446:	d007      	beq.n	d4458 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x128>
			client->stop();
   d4448:	6828      	ldr	r0, [r5, #0]
   d444a:	6803      	ldr	r3, [r0, #0]
   d444c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d444e:	4798      	blx	r3
		String entryIDText = String();
   d4450:	a804      	add	r0, sp, #16
   d4452:	f002 f9cd 	bl	d67f0 <_ZN6StringD1Ev>
   d4456:	e799      	b.n	d438c <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x5c>
		long entryID = entryIDText.toInt();
   d4458:	a804      	add	r0, sp, #16
   d445a:	f002 fae1 	bl	d6a20 <_ZNK6String5toIntEv>
   d445e:	4606      	mov	r6, r0
		client->stop();
   d4460:	6828      	ldr	r0, [r5, #0]
   d4462:	6803      	ldr	r3, [r0, #0]
   d4464:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4466:	4798      	blx	r3
			status = ERR_NOT_INSERTED;
   d4468:	2e00      	cmp	r6, #0
   d446a:	bf08      	it	eq
   d446c:	f46f 74c8 	mvneq.w	r4, #400	; 0x190
   d4470:	e7ee      	b.n	d4450 <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x120>
			return ERR_CONNECT_FAILED;
   d4472:	f46f 7496 	mvn.w	r4, #300	; 0x12c
   d4476:	e789      	b.n	d438c <_ZN15ThingSpeakClass8writeRawEm6StringPKc+0x5c>
   d4478:	000da39d 	.word	0x000da39d
   d447c:	000da3b0 	.word	0x000da3b0
   d4480:	000da3bf 	.word	0x000da3bf
   d4484:	000da3d7 	.word	0x000da3d7
   d4488:	000da3f2 	.word	0x000da3f2
   d448c:	000da406 	.word	0x000da406
   d4490:	000da413 	.word	0x000da413
   d4494:	000da490 	.word	0x000da490
   d4498:	000da436 	.word	0x000da436
   d449c:	000da44b 	.word	0x000da44b
   d44a0:	000da47d 	.word	0x000da47d
   d44a4:	000da48e 	.word	0x000da48e
   d44a8:	000da492 	.word	0x000da492

000d44ac <_ZN15ThingSpeakClass11writeFieldsEmPKc>:
	int writeFields(unsigned long channelNumber, const char * writeAPIKey)
   d44ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d44b0:	b09f      	sub	sp, #124	; 0x7c
   d44b2:	4604      	mov	r4, r0
   d44b4:	460e      	mov	r6, r1
		String postMessage = String("");
   d44b6:	a802      	add	r0, sp, #8
   d44b8:	49b8      	ldr	r1, [pc, #736]	; (d479c <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f0>)
				postMessage = postMessage + String("field") + String(iField + 1) + String("=") + escapeUrl(this->nextWriteField[iField]);
   d44ba:	f8df 82fc 	ldr.w	r8, [pc, #764]	; d47b8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x30c>
   d44be:	f8df 92fc 	ldr.w	r9, [pc, #764]	; d47bc <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x310>
				this->nextWriteField[iField] = "";
   d44c2:	f8df a2d8 	ldr.w	sl, [pc, #728]	; d479c <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f0>
		String postMessage = String("");
   d44c6:	2501      	movs	r5, #1
	int writeFields(unsigned long channelNumber, const char * writeAPIKey)
   d44c8:	4617      	mov	r7, r2
   d44ca:	f104 0b08 	add.w	fp, r4, #8
		String postMessage = String("");
   d44ce:	f002 f9da 	bl	d6886 <_ZN6StringC1EPKc>
		bool fFirstItem = true;
   d44d2:	462b      	mov	r3, r5
			if(this->nextWriteField[iField].length() > 0)
   d44d4:	f8db 2008 	ldr.w	r2, [fp, #8]
   d44d8:	2a00      	cmp	r2, #0
   d44da:	d061      	beq.n	d45a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0xf4>
				if(!fFirstItem)
   d44dc:	b9ab      	cbnz	r3, d450a <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x5e>
	StringSumHelper(const String &s) : String(s) {}
   d44de:	a902      	add	r1, sp, #8
   d44e0:	a81a      	add	r0, sp, #104	; 0x68
   d44e2:	f002 fa10 	bl	d6906 <_ZN6StringC1ERKS_>
					postMessage = postMessage + String("&");
   d44e6:	49ae      	ldr	r1, [pc, #696]	; (d47a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f4>)
   d44e8:	a816      	add	r0, sp, #88	; 0x58
   d44ea:	f002 f9cc 	bl	d6886 <_ZN6StringC1EPKc>
   d44ee:	a916      	add	r1, sp, #88	; 0x58
   d44f0:	a81a      	add	r0, sp, #104	; 0x68
   d44f2:	f002 fa7e 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d44f6:	4601      	mov	r1, r0
   d44f8:	a802      	add	r0, sp, #8
   d44fa:	f002 f9f5 	bl	d68e8 <_ZN6StringaSERKS_>
   d44fe:	a816      	add	r0, sp, #88	; 0x58
   d4500:	f002 f976 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4504:	a81a      	add	r0, sp, #104	; 0x68
   d4506:	f002 f973 	bl	d67f0 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d450a:	a902      	add	r1, sp, #8
   d450c:	a80a      	add	r0, sp, #40	; 0x28
   d450e:	f002 f9fa 	bl	d6906 <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("field") + String(iField + 1) + String("=") + escapeUrl(this->nextWriteField[iField]);
   d4512:	4641      	mov	r1, r8
   d4514:	a806      	add	r0, sp, #24
   d4516:	f002 f9b6 	bl	d6886 <_ZN6StringC1EPKc>
   d451a:	a906      	add	r1, sp, #24
   d451c:	a80a      	add	r0, sp, #40	; 0x28
   d451e:	f002 fa68 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d4522:	220a      	movs	r2, #10
   d4524:	9001      	str	r0, [sp, #4]
   d4526:	4629      	mov	r1, r5
   d4528:	a80e      	add	r0, sp, #56	; 0x38
   d452a:	f002 fa11 	bl	d6950 <_ZN6StringC1Ejh>
   d452e:	9b01      	ldr	r3, [sp, #4]
   d4530:	a90e      	add	r1, sp, #56	; 0x38
   d4532:	4618      	mov	r0, r3
   d4534:	f002 fa5d 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d4538:	4649      	mov	r1, r9
   d453a:	9001      	str	r0, [sp, #4]
   d453c:	a812      	add	r0, sp, #72	; 0x48
   d453e:	f002 f9a2 	bl	d6886 <_ZN6StringC1EPKc>
   d4542:	9b01      	ldr	r3, [sp, #4]
   d4544:	a912      	add	r1, sp, #72	; 0x48
   d4546:	4618      	mov	r0, r3
   d4548:	f002 fa53 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d454c:	4659      	mov	r1, fp
   d454e:	9001      	str	r0, [sp, #4]
   d4550:	a816      	add	r0, sp, #88	; 0x58
   d4552:	f002 f9d8 	bl	d6906 <_ZN6StringC1ERKS_>
   d4556:	aa16      	add	r2, sp, #88	; 0x58
   d4558:	4621      	mov	r1, r4
   d455a:	a81a      	add	r0, sp, #104	; 0x68
   d455c:	f7ff fe28 	bl	d41b0 <_ZN15ThingSpeakClass9escapeUrlE6String>
   d4560:	9b01      	ldr	r3, [sp, #4]
   d4562:	a91a      	add	r1, sp, #104	; 0x68
   d4564:	4618      	mov	r0, r3
   d4566:	f002 fa44 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d456a:	4601      	mov	r1, r0
   d456c:	a802      	add	r0, sp, #8
   d456e:	f002 f9bb 	bl	d68e8 <_ZN6StringaSERKS_>
   d4572:	a81a      	add	r0, sp, #104	; 0x68
   d4574:	f002 f93c 	bl	d67f0 <_ZN6StringD1Ev>
   d4578:	a816      	add	r0, sp, #88	; 0x58
   d457a:	f002 f939 	bl	d67f0 <_ZN6StringD1Ev>
   d457e:	a812      	add	r0, sp, #72	; 0x48
   d4580:	f002 f936 	bl	d67f0 <_ZN6StringD1Ev>
   d4584:	a80e      	add	r0, sp, #56	; 0x38
   d4586:	f002 f933 	bl	d67f0 <_ZN6StringD1Ev>
   d458a:	a806      	add	r0, sp, #24
   d458c:	f002 f930 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4590:	a80a      	add	r0, sp, #40	; 0x28
   d4592:	f002 f92d 	bl	d67f0 <_ZN6StringD1Ev>
				this->nextWriteField[iField] = "";
   d4596:	4651      	mov	r1, sl
   d4598:	4658      	mov	r0, fp
   d459a:	f002 f9c7 	bl	d692c <_ZN6StringaSEPKc>
				fFirstItem = false;
   d459e:	2300      	movs	r3, #0
		for(size_t iField = 0; iField < 8; iField++)
   d45a0:	3501      	adds	r5, #1
   d45a2:	2d09      	cmp	r5, #9
   d45a4:	f10b 0b10 	add.w	fp, fp, #16
   d45a8:	d194      	bne.n	d44d4 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x28>
		if(!isnan(nextWriteLatitude))
   d45aa:	edd4 7a22 	vldr	s15, [r4, #136]	; 0x88
   d45ae:	eef4 7a67 	vcmp.f32	s15, s15
   d45b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d45b6:	d63e      	bvs.n	d4636 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x18a>
			if(!fFirstItem)
   d45b8:	b9ab      	cbnz	r3, d45e6 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x13a>
	StringSumHelper(const String &s) : String(s) {}
   d45ba:	a902      	add	r1, sp, #8
   d45bc:	a81a      	add	r0, sp, #104	; 0x68
   d45be:	f002 f9a2 	bl	d6906 <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d45c2:	4977      	ldr	r1, [pc, #476]	; (d47a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f4>)
   d45c4:	a816      	add	r0, sp, #88	; 0x58
   d45c6:	f002 f95e 	bl	d6886 <_ZN6StringC1EPKc>
   d45ca:	a916      	add	r1, sp, #88	; 0x58
   d45cc:	a81a      	add	r0, sp, #104	; 0x68
   d45ce:	f002 fa10 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d45d2:	4601      	mov	r1, r0
   d45d4:	a802      	add	r0, sp, #8
   d45d6:	f002 f987 	bl	d68e8 <_ZN6StringaSERKS_>
   d45da:	a816      	add	r0, sp, #88	; 0x58
   d45dc:	f002 f908 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d45e0:	a81a      	add	r0, sp, #104	; 0x68
   d45e2:	f002 f905 	bl	d67f0 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d45e6:	a902      	add	r1, sp, #8
   d45e8:	a816      	add	r0, sp, #88	; 0x58
   d45ea:	f002 f98c 	bl	d6906 <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("lat=") + String(this->nextWriteLatitude);
   d45ee:	496d      	ldr	r1, [pc, #436]	; (d47a4 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f8>)
   d45f0:	a812      	add	r0, sp, #72	; 0x48
   d45f2:	f002 f948 	bl	d6886 <_ZN6StringC1EPKc>
   d45f6:	a912      	add	r1, sp, #72	; 0x48
   d45f8:	a816      	add	r0, sp, #88	; 0x58
   d45fa:	f002 f9fa 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d45fe:	ed94 0a22 	vldr	s0, [r4, #136]	; 0x88
   d4602:	4605      	mov	r5, r0
   d4604:	2106      	movs	r1, #6
   d4606:	a81a      	add	r0, sp, #104	; 0x68
   d4608:	f002 f9b5 	bl	d6976 <_ZN6StringC1Efi>
   d460c:	a91a      	add	r1, sp, #104	; 0x68
   d460e:	4628      	mov	r0, r5
   d4610:	f002 f9ef 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d4614:	4601      	mov	r1, r0
   d4616:	a802      	add	r0, sp, #8
   d4618:	f002 f966 	bl	d68e8 <_ZN6StringaSERKS_>
   d461c:	a81a      	add	r0, sp, #104	; 0x68
   d461e:	f002 f8e7 	bl	d67f0 <_ZN6StringD1Ev>
   d4622:	a812      	add	r0, sp, #72	; 0x48
   d4624:	f002 f8e4 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4628:	a816      	add	r0, sp, #88	; 0x58
   d462a:	f002 f8e1 	bl	d67f0 <_ZN6StringD1Ev>
			this->nextWriteLatitude = NAN;
   d462e:	4b5e      	ldr	r3, [pc, #376]	; (d47a8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2fc>)
   d4630:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
			fFirstItem = false;
   d4634:	2300      	movs	r3, #0
		if(!isnan(this->nextWriteLongitude))
   d4636:	edd4 7a23 	vldr	s15, [r4, #140]	; 0x8c
   d463a:	eef4 7a67 	vcmp.f32	s15, s15
   d463e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d4642:	d63e      	bvs.n	d46c2 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x216>
			if(!fFirstItem)
   d4644:	b9ab      	cbnz	r3, d4672 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x1c6>
	StringSumHelper(const String &s) : String(s) {}
   d4646:	a902      	add	r1, sp, #8
   d4648:	a81a      	add	r0, sp, #104	; 0x68
   d464a:	f002 f95c 	bl	d6906 <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d464e:	4954      	ldr	r1, [pc, #336]	; (d47a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f4>)
   d4650:	a816      	add	r0, sp, #88	; 0x58
   d4652:	f002 f918 	bl	d6886 <_ZN6StringC1EPKc>
   d4656:	a916      	add	r1, sp, #88	; 0x58
   d4658:	a81a      	add	r0, sp, #104	; 0x68
   d465a:	f002 f9ca 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d465e:	4601      	mov	r1, r0
   d4660:	a802      	add	r0, sp, #8
   d4662:	f002 f941 	bl	d68e8 <_ZN6StringaSERKS_>
   d4666:	a816      	add	r0, sp, #88	; 0x58
   d4668:	f002 f8c2 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d466c:	a81a      	add	r0, sp, #104	; 0x68
   d466e:	f002 f8bf 	bl	d67f0 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d4672:	a902      	add	r1, sp, #8
   d4674:	a816      	add	r0, sp, #88	; 0x58
   d4676:	f002 f946 	bl	d6906 <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("long=") + String(this->nextWriteLongitude);
   d467a:	494c      	ldr	r1, [pc, #304]	; (d47ac <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x300>)
   d467c:	a812      	add	r0, sp, #72	; 0x48
   d467e:	f002 f902 	bl	d6886 <_ZN6StringC1EPKc>
   d4682:	a912      	add	r1, sp, #72	; 0x48
   d4684:	a816      	add	r0, sp, #88	; 0x58
   d4686:	f002 f9b4 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d468a:	ed94 0a23 	vldr	s0, [r4, #140]	; 0x8c
   d468e:	4605      	mov	r5, r0
   d4690:	2106      	movs	r1, #6
   d4692:	a81a      	add	r0, sp, #104	; 0x68
   d4694:	f002 f96f 	bl	d6976 <_ZN6StringC1Efi>
   d4698:	a91a      	add	r1, sp, #104	; 0x68
   d469a:	4628      	mov	r0, r5
   d469c:	f002 f9a9 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d46a0:	4601      	mov	r1, r0
   d46a2:	a802      	add	r0, sp, #8
   d46a4:	f002 f920 	bl	d68e8 <_ZN6StringaSERKS_>
   d46a8:	a81a      	add	r0, sp, #104	; 0x68
   d46aa:	f002 f8a1 	bl	d67f0 <_ZN6StringD1Ev>
   d46ae:	a812      	add	r0, sp, #72	; 0x48
   d46b0:	f002 f89e 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d46b4:	a816      	add	r0, sp, #88	; 0x58
   d46b6:	f002 f89b 	bl	d67f0 <_ZN6StringD1Ev>
			this->nextWriteLongitude = NAN;
   d46ba:	4b3b      	ldr	r3, [pc, #236]	; (d47a8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2fc>)
   d46bc:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
			fFirstItem = false;
   d46c0:	2300      	movs	r3, #0
		if(!isnan(this->nextWriteElevation))
   d46c2:	edd4 7a24 	vldr	s15, [r4, #144]	; 0x90
   d46c6:	eef4 7a67 	vcmp.f32	s15, s15
   d46ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
   d46ce:	d63e      	bvs.n	d474e <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2a2>
			if(!fFirstItem)
   d46d0:	b9ab      	cbnz	r3, d46fe <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x252>
	StringSumHelper(const String &s) : String(s) {}
   d46d2:	a902      	add	r1, sp, #8
   d46d4:	a81a      	add	r0, sp, #104	; 0x68
   d46d6:	f002 f916 	bl	d6906 <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d46da:	4931      	ldr	r1, [pc, #196]	; (d47a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f4>)
   d46dc:	a816      	add	r0, sp, #88	; 0x58
   d46de:	f002 f8d2 	bl	d6886 <_ZN6StringC1EPKc>
   d46e2:	a916      	add	r1, sp, #88	; 0x58
   d46e4:	a81a      	add	r0, sp, #104	; 0x68
   d46e6:	f002 f984 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d46ea:	4601      	mov	r1, r0
   d46ec:	a802      	add	r0, sp, #8
   d46ee:	f002 f8fb 	bl	d68e8 <_ZN6StringaSERKS_>
   d46f2:	a816      	add	r0, sp, #88	; 0x58
   d46f4:	f002 f87c 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d46f8:	a81a      	add	r0, sp, #104	; 0x68
   d46fa:	f002 f879 	bl	d67f0 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d46fe:	a902      	add	r1, sp, #8
   d4700:	a816      	add	r0, sp, #88	; 0x58
   d4702:	f002 f900 	bl	d6906 <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("elevation=") + String(this->nextWriteElevation);
   d4706:	492a      	ldr	r1, [pc, #168]	; (d47b0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x304>)
   d4708:	a812      	add	r0, sp, #72	; 0x48
   d470a:	f002 f8bc 	bl	d6886 <_ZN6StringC1EPKc>
   d470e:	a912      	add	r1, sp, #72	; 0x48
   d4710:	a816      	add	r0, sp, #88	; 0x58
   d4712:	f002 f96e 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d4716:	ed94 0a24 	vldr	s0, [r4, #144]	; 0x90
   d471a:	4605      	mov	r5, r0
   d471c:	2106      	movs	r1, #6
   d471e:	a81a      	add	r0, sp, #104	; 0x68
   d4720:	f002 f929 	bl	d6976 <_ZN6StringC1Efi>
   d4724:	a91a      	add	r1, sp, #104	; 0x68
   d4726:	4628      	mov	r0, r5
   d4728:	f002 f963 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d472c:	4601      	mov	r1, r0
   d472e:	a802      	add	r0, sp, #8
   d4730:	f002 f8da 	bl	d68e8 <_ZN6StringaSERKS_>
   d4734:	a81a      	add	r0, sp, #104	; 0x68
   d4736:	f002 f85b 	bl	d67f0 <_ZN6StringD1Ev>
   d473a:	a812      	add	r0, sp, #72	; 0x48
   d473c:	f002 f858 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4740:	a816      	add	r0, sp, #88	; 0x58
   d4742:	f002 f855 	bl	d67f0 <_ZN6StringD1Ev>
			this->nextWriteElevation = NAN;
   d4746:	4b18      	ldr	r3, [pc, #96]	; (d47a8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2fc>)
   d4748:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
			fFirstItem = false;
   d474c:	2300      	movs	r3, #0
		if(this->nextWriteStatus.length() > 0)
   d474e:	f8d4 20a0 	ldr.w	r2, [r4, #160]	; 0xa0
   d4752:	2a00      	cmp	r2, #0
   d4754:	d05b      	beq.n	d480e <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x362>
			if(!fFirstItem)
   d4756:	b9ab      	cbnz	r3, d4784 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2d8>
	StringSumHelper(const String &s) : String(s) {}
   d4758:	a902      	add	r1, sp, #8
   d475a:	a81a      	add	r0, sp, #104	; 0x68
   d475c:	f002 f8d3 	bl	d6906 <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d4760:	490f      	ldr	r1, [pc, #60]	; (d47a0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x2f4>)
   d4762:	a816      	add	r0, sp, #88	; 0x58
   d4764:	f002 f88f 	bl	d6886 <_ZN6StringC1EPKc>
   d4768:	a916      	add	r1, sp, #88	; 0x58
   d476a:	a81a      	add	r0, sp, #104	; 0x68
   d476c:	f002 f941 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d4770:	4601      	mov	r1, r0
   d4772:	a802      	add	r0, sp, #8
   d4774:	f002 f8b8 	bl	d68e8 <_ZN6StringaSERKS_>
   d4778:	a816      	add	r0, sp, #88	; 0x58
   d477a:	f002 f839 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d477e:	a81a      	add	r0, sp, #104	; 0x68
   d4780:	f002 f836 	bl	d67f0 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d4784:	a902      	add	r1, sp, #8
   d4786:	a812      	add	r0, sp, #72	; 0x48
   d4788:	f002 f8bd 	bl	d6906 <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("status=") + escapeUrl(this->nextWriteStatus);
   d478c:	4909      	ldr	r1, [pc, #36]	; (d47b4 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x308>)
   d478e:	a80e      	add	r0, sp, #56	; 0x38
   d4790:	f002 f879 	bl	d6886 <_ZN6StringC1EPKc>
   d4794:	a90e      	add	r1, sp, #56	; 0x38
   d4796:	a812      	add	r0, sp, #72	; 0x48
   d4798:	e012      	b.n	d47c0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x314>
   d479a:	bf00      	nop
   d479c:	000da492 	.word	0x000da492
   d47a0:	000da493 	.word	0x000da493
   d47a4:	000da49b 	.word	0x000da49b
   d47a8:	7fc00000 	.word	0x7fc00000
   d47ac:	000da4a0 	.word	0x000da4a0
   d47b0:	000da4a6 	.word	0x000da4a6
   d47b4:	000da4b1 	.word	0x000da4b1
   d47b8:	000da495 	.word	0x000da495
   d47bc:	000da4a4 	.word	0x000da4a4
   d47c0:	f002 f917 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d47c4:	f104 0598 	add.w	r5, r4, #152	; 0x98
   d47c8:	4680      	mov	r8, r0
   d47ca:	4629      	mov	r1, r5
   d47cc:	a816      	add	r0, sp, #88	; 0x58
   d47ce:	f002 f89a 	bl	d6906 <_ZN6StringC1ERKS_>
   d47d2:	aa16      	add	r2, sp, #88	; 0x58
   d47d4:	4621      	mov	r1, r4
   d47d6:	a81a      	add	r0, sp, #104	; 0x68
   d47d8:	f7ff fcea 	bl	d41b0 <_ZN15ThingSpeakClass9escapeUrlE6String>
   d47dc:	a91a      	add	r1, sp, #104	; 0x68
   d47de:	4640      	mov	r0, r8
   d47e0:	f002 f907 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d47e4:	4601      	mov	r1, r0
   d47e6:	a802      	add	r0, sp, #8
   d47e8:	f002 f87e 	bl	d68e8 <_ZN6StringaSERKS_>
   d47ec:	a81a      	add	r0, sp, #104	; 0x68
   d47ee:	f001 ffff 	bl	d67f0 <_ZN6StringD1Ev>
   d47f2:	a816      	add	r0, sp, #88	; 0x58
   d47f4:	f001 fffc 	bl	d67f0 <_ZN6StringD1Ev>
   d47f8:	a80e      	add	r0, sp, #56	; 0x38
   d47fa:	f001 fff9 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d47fe:	a812      	add	r0, sp, #72	; 0x48
   d4800:	f001 fff6 	bl	d67f0 <_ZN6StringD1Ev>
			this->nextWriteStatus = "";
   d4804:	497c      	ldr	r1, [pc, #496]	; (d49f8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x54c>)
   d4806:	4628      	mov	r0, r5
   d4808:	f002 f890 	bl	d692c <_ZN6StringaSEPKc>
			fFirstItem = false;
   d480c:	2300      	movs	r3, #0
		if(this->nextWriteTwitter.length() > 0)
   d480e:	f8d4 20b0 	ldr.w	r2, [r4, #176]	; 0xb0
   d4812:	2a00      	cmp	r2, #0
   d4814:	d047      	beq.n	d48a6 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x3fa>
			if(!fFirstItem)
   d4816:	b9ab      	cbnz	r3, d4844 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x398>
	StringSumHelper(const String &s) : String(s) {}
   d4818:	a902      	add	r1, sp, #8
   d481a:	a81a      	add	r0, sp, #104	; 0x68
   d481c:	f002 f873 	bl	d6906 <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d4820:	4976      	ldr	r1, [pc, #472]	; (d49fc <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x550>)
   d4822:	a816      	add	r0, sp, #88	; 0x58
   d4824:	f002 f82f 	bl	d6886 <_ZN6StringC1EPKc>
   d4828:	a916      	add	r1, sp, #88	; 0x58
   d482a:	a81a      	add	r0, sp, #104	; 0x68
   d482c:	f002 f8e1 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d4830:	4601      	mov	r1, r0
   d4832:	a802      	add	r0, sp, #8
   d4834:	f002 f858 	bl	d68e8 <_ZN6StringaSERKS_>
   d4838:	a816      	add	r0, sp, #88	; 0x58
   d483a:	f001 ffd9 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d483e:	a81a      	add	r0, sp, #104	; 0x68
   d4840:	f001 ffd6 	bl	d67f0 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d4844:	a902      	add	r1, sp, #8
   d4846:	a812      	add	r0, sp, #72	; 0x48
   d4848:	f002 f85d 	bl	d6906 <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("twitter=") + escapeUrl(this->nextWriteTwitter);
   d484c:	496c      	ldr	r1, [pc, #432]	; (d4a00 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x554>)
   d484e:	a80e      	add	r0, sp, #56	; 0x38
   d4850:	f002 f819 	bl	d6886 <_ZN6StringC1EPKc>
   d4854:	a90e      	add	r1, sp, #56	; 0x38
   d4856:	a812      	add	r0, sp, #72	; 0x48
   d4858:	f002 f8cb 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d485c:	f104 05a8 	add.w	r5, r4, #168	; 0xa8
   d4860:	4680      	mov	r8, r0
   d4862:	4629      	mov	r1, r5
   d4864:	a816      	add	r0, sp, #88	; 0x58
   d4866:	f002 f84e 	bl	d6906 <_ZN6StringC1ERKS_>
   d486a:	aa16      	add	r2, sp, #88	; 0x58
   d486c:	4621      	mov	r1, r4
   d486e:	a81a      	add	r0, sp, #104	; 0x68
   d4870:	f7ff fc9e 	bl	d41b0 <_ZN15ThingSpeakClass9escapeUrlE6String>
   d4874:	a91a      	add	r1, sp, #104	; 0x68
   d4876:	4640      	mov	r0, r8
   d4878:	f002 f8bb 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d487c:	4601      	mov	r1, r0
   d487e:	a802      	add	r0, sp, #8
   d4880:	f002 f832 	bl	d68e8 <_ZN6StringaSERKS_>
   d4884:	a81a      	add	r0, sp, #104	; 0x68
   d4886:	f001 ffb3 	bl	d67f0 <_ZN6StringD1Ev>
   d488a:	a816      	add	r0, sp, #88	; 0x58
   d488c:	f001 ffb0 	bl	d67f0 <_ZN6StringD1Ev>
   d4890:	a80e      	add	r0, sp, #56	; 0x38
   d4892:	f001 ffad 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d4896:	a812      	add	r0, sp, #72	; 0x48
   d4898:	f001 ffaa 	bl	d67f0 <_ZN6StringD1Ev>
			this->nextWriteTwitter = "";
   d489c:	4956      	ldr	r1, [pc, #344]	; (d49f8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x54c>)
   d489e:	4628      	mov	r0, r5
   d48a0:	f002 f844 	bl	d692c <_ZN6StringaSEPKc>
			fFirstItem = false;
   d48a4:	2300      	movs	r3, #0
		if(this->nextWriteTweet.length() > 0)
   d48a6:	f8d4 20c0 	ldr.w	r2, [r4, #192]	; 0xc0
   d48aa:	2a00      	cmp	r2, #0
   d48ac:	d047      	beq.n	d493e <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x492>
			if(!fFirstItem)
   d48ae:	b9ab      	cbnz	r3, d48dc <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x430>
	StringSumHelper(const String &s) : String(s) {}
   d48b0:	a902      	add	r1, sp, #8
   d48b2:	a81a      	add	r0, sp, #104	; 0x68
   d48b4:	f002 f827 	bl	d6906 <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d48b8:	4950      	ldr	r1, [pc, #320]	; (d49fc <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x550>)
   d48ba:	a816      	add	r0, sp, #88	; 0x58
   d48bc:	f001 ffe3 	bl	d6886 <_ZN6StringC1EPKc>
   d48c0:	a916      	add	r1, sp, #88	; 0x58
   d48c2:	a81a      	add	r0, sp, #104	; 0x68
   d48c4:	f002 f895 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d48c8:	4601      	mov	r1, r0
   d48ca:	a802      	add	r0, sp, #8
   d48cc:	f002 f80c 	bl	d68e8 <_ZN6StringaSERKS_>
   d48d0:	a816      	add	r0, sp, #88	; 0x58
   d48d2:	f001 ff8d 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d48d6:	a81a      	add	r0, sp, #104	; 0x68
   d48d8:	f001 ff8a 	bl	d67f0 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d48dc:	a902      	add	r1, sp, #8
   d48de:	a812      	add	r0, sp, #72	; 0x48
   d48e0:	f002 f811 	bl	d6906 <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("tweet=") + escapeUrl(this->nextWriteTweet);
   d48e4:	4947      	ldr	r1, [pc, #284]	; (d4a04 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x558>)
   d48e6:	a80e      	add	r0, sp, #56	; 0x38
   d48e8:	f001 ffcd 	bl	d6886 <_ZN6StringC1EPKc>
   d48ec:	a90e      	add	r1, sp, #56	; 0x38
   d48ee:	a812      	add	r0, sp, #72	; 0x48
   d48f0:	f002 f87f 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d48f4:	f104 05b8 	add.w	r5, r4, #184	; 0xb8
   d48f8:	4680      	mov	r8, r0
   d48fa:	4629      	mov	r1, r5
   d48fc:	a816      	add	r0, sp, #88	; 0x58
   d48fe:	f002 f802 	bl	d6906 <_ZN6StringC1ERKS_>
   d4902:	aa16      	add	r2, sp, #88	; 0x58
   d4904:	4621      	mov	r1, r4
   d4906:	a81a      	add	r0, sp, #104	; 0x68
   d4908:	f7ff fc52 	bl	d41b0 <_ZN15ThingSpeakClass9escapeUrlE6String>
   d490c:	a91a      	add	r1, sp, #104	; 0x68
   d490e:	4640      	mov	r0, r8
   d4910:	f002 f86f 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d4914:	4601      	mov	r1, r0
   d4916:	a802      	add	r0, sp, #8
   d4918:	f001 ffe6 	bl	d68e8 <_ZN6StringaSERKS_>
   d491c:	a81a      	add	r0, sp, #104	; 0x68
   d491e:	f001 ff67 	bl	d67f0 <_ZN6StringD1Ev>
   d4922:	a816      	add	r0, sp, #88	; 0x58
   d4924:	f001 ff64 	bl	d67f0 <_ZN6StringD1Ev>
   d4928:	a80e      	add	r0, sp, #56	; 0x38
   d492a:	f001 ff61 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d492e:	a812      	add	r0, sp, #72	; 0x48
   d4930:	f001 ff5e 	bl	d67f0 <_ZN6StringD1Ev>
			this->nextWriteTweet = "";
   d4934:	4930      	ldr	r1, [pc, #192]	; (d49f8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x54c>)
   d4936:	4628      	mov	r0, r5
   d4938:	f001 fff8 	bl	d692c <_ZN6StringaSEPKc>
			fFirstItem = false;
   d493c:	2300      	movs	r3, #0
		if(this->nextWriteCreatedAt.length() > 0)
   d493e:	f8d4 20d0 	ldr.w	r2, [r4, #208]	; 0xd0
   d4942:	2a00      	cmp	r2, #0
   d4944:	d053      	beq.n	d49ee <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x542>
			if(!fFirstItem)
   d4946:	b9ab      	cbnz	r3, d4974 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x4c8>
	StringSumHelper(const String &s) : String(s) {}
   d4948:	a902      	add	r1, sp, #8
   d494a:	a81a      	add	r0, sp, #104	; 0x68
   d494c:	f001 ffdb 	bl	d6906 <_ZN6StringC1ERKS_>
				postMessage = postMessage + String("&");
   d4950:	492a      	ldr	r1, [pc, #168]	; (d49fc <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x550>)
   d4952:	a816      	add	r0, sp, #88	; 0x58
   d4954:	f001 ff97 	bl	d6886 <_ZN6StringC1EPKc>
   d4958:	a916      	add	r1, sp, #88	; 0x58
   d495a:	a81a      	add	r0, sp, #104	; 0x68
   d495c:	f002 f849 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d4960:	4601      	mov	r1, r0
   d4962:	a802      	add	r0, sp, #8
   d4964:	f001 ffc0 	bl	d68e8 <_ZN6StringaSERKS_>
   d4968:	a816      	add	r0, sp, #88	; 0x58
   d496a:	f001 ff41 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d496e:	a81a      	add	r0, sp, #104	; 0x68
   d4970:	f001 ff3e 	bl	d67f0 <_ZN6StringD1Ev>
	StringSumHelper(const String &s) : String(s) {}
   d4974:	a902      	add	r1, sp, #8
   d4976:	a816      	add	r0, sp, #88	; 0x58
   d4978:	f001 ffc5 	bl	d6906 <_ZN6StringC1ERKS_>
			postMessage = postMessage + String("created_at=") + String(this->nextWriteCreatedAt);
   d497c:	4922      	ldr	r1, [pc, #136]	; (d4a08 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x55c>)
   d497e:	a812      	add	r0, sp, #72	; 0x48
   d4980:	f001 ff81 	bl	d6886 <_ZN6StringC1EPKc>
   d4984:	a912      	add	r1, sp, #72	; 0x48
   d4986:	a816      	add	r0, sp, #88	; 0x58
   d4988:	f002 f833 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d498c:	f104 08c8 	add.w	r8, r4, #200	; 0xc8
   d4990:	4605      	mov	r5, r0
   d4992:	4641      	mov	r1, r8
   d4994:	a81a      	add	r0, sp, #104	; 0x68
   d4996:	f001 ffb6 	bl	d6906 <_ZN6StringC1ERKS_>
   d499a:	a91a      	add	r1, sp, #104	; 0x68
   d499c:	4628      	mov	r0, r5
   d499e:	f002 f828 	bl	d69f2 <_ZplRK15StringSumHelperRK6String>
   d49a2:	4601      	mov	r1, r0
   d49a4:	a802      	add	r0, sp, #8
   d49a6:	f001 ff9f 	bl	d68e8 <_ZN6StringaSERKS_>
   d49aa:	a81a      	add	r0, sp, #104	; 0x68
   d49ac:	f001 ff20 	bl	d67f0 <_ZN6StringD1Ev>
   d49b0:	a812      	add	r0, sp, #72	; 0x48
   d49b2:	f001 ff1d 	bl	d67f0 <_ZN6StringD1Ev>
class StringSumHelper : public String
   d49b6:	a816      	add	r0, sp, #88	; 0x58
   d49b8:	f001 ff1a 	bl	d67f0 <_ZN6StringD1Ev>
			this->nextWriteCreatedAt = "";
   d49bc:	490e      	ldr	r1, [pc, #56]	; (d49f8 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x54c>)
   d49be:	4640      	mov	r0, r8
   d49c0:	f001 ffb4 	bl	d692c <_ZN6StringaSEPKc>
		return writeRaw(channelNumber, postMessage, writeAPIKey);
   d49c4:	a902      	add	r1, sp, #8
   d49c6:	a81a      	add	r0, sp, #104	; 0x68
   d49c8:	f001 ff9d 	bl	d6906 <_ZN6StringC1ERKS_>
   d49cc:	4620      	mov	r0, r4
   d49ce:	463b      	mov	r3, r7
   d49d0:	aa1a      	add	r2, sp, #104	; 0x68
   d49d2:	4631      	mov	r1, r6
   d49d4:	f7ff fcac 	bl	d4330 <_ZN15ThingSpeakClass8writeRawEm6StringPKc>
   d49d8:	4604      	mov	r4, r0
   d49da:	a81a      	add	r0, sp, #104	; 0x68
   d49dc:	f001 ff08 	bl	d67f0 <_ZN6StringD1Ev>
		String postMessage = String("");
   d49e0:	a802      	add	r0, sp, #8
   d49e2:	f001 ff05 	bl	d67f0 <_ZN6StringD1Ev>
	};
   d49e6:	4620      	mov	r0, r4
   d49e8:	b01f      	add	sp, #124	; 0x7c
   d49ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
		if(fFirstItem)
   d49ee:	2b00      	cmp	r3, #0
   d49f0:	d0e8      	beq.n	d49c4 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x518>
			return ERR_SETFIELD_NOT_CALLED;
   d49f2:	f06f 04d1 	mvn.w	r4, #209	; 0xd1
   d49f6:	e7f3      	b.n	d49e0 <_ZN15ThingSpeakClass11writeFieldsEmPKc+0x534>
   d49f8:	000da492 	.word	0x000da492
   d49fc:	000da493 	.word	0x000da493
   d4a00:	000da4b9 	.word	0x000da4b9
   d4a04:	000da4c2 	.word	0x000da4c2
   d4a08:	000da4c9 	.word	0x000da4c9

000d4a0c <_Z8beginMPUv>:
      }
    }  
  }
}

void beginMPU() {
   d4a0c:	b508      	push	{r3, lr}
   *          6    | Reserved
   *          7    | Stops the clock and keeps the time
   *               | generator in reset
   */

  Wire.begin();
   d4a0e:	f003 f891 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4a12:	f002 fc17 	bl	d7244 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(MPU_ADDRESS);
   d4a16:	f003 f88d 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4a1a:	2168      	movs	r1, #104	; 0x68
   d4a1c:	f002 fc48 	bl	d72b0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x6B);
   d4a20:	f003 f888 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4a24:	216b      	movs	r1, #107	; 0x6b
   d4a26:	f7ff fb67 	bl	d40f8 <_ZN7TwoWire5writeEi>
  Wire.write(0);
   d4a2a:	f003 f883 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4a2e:	2100      	movs	r1, #0
   d4a30:	f7ff fb62 	bl	d40f8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission(true);
   d4a34:	f003 f87e 	bl	d7b34 <_Z19__fetch_global_Wirev>
}
   d4a38:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
  Wire.endTransmission(true);
   d4a3c:	2101      	movs	r1, #1
   d4a3e:	f002 bc3a 	b.w	d72b6 <_ZN7TwoWire15endTransmissionEh>
	...

000d4a44 <_Z12configureACCi>:
   *           1    |       +- 4 g     |   8192 LSB/g
   *           2    |       +- 8 g     |   4096 LSB/g
   *           3    |       +- 16 g    |   2048 LSB/g
   */

  switch (select) {
   d4a44:	2802      	cmp	r0, #2
void configureACC(int select) {
   d4a46:	b510      	push	{r4, lr}
   d4a48:	4b19      	ldr	r3, [pc, #100]	; (d4ab0 <_Z12configureACCi+0x6c>)
  switch (select) {
   d4a4a:	d021      	beq.n	d4a90 <_Z12configureACCi+0x4c>
   d4a4c:	2803      	cmp	r0, #3
   d4a4e:	d024      	beq.n	d4a9a <_Z12configureACCi+0x56>
   d4a50:	2801      	cmp	r0, #1
   d4a52:	d127      	bne.n	d4aa4 <_Z12configureACCi+0x60>
    case 1:
      select = 0x08;
      sensitivity = 8192.0;
   d4a54:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
   d4a58:	601a      	str	r2, [r3, #0]
      select = 0x08;
   d4a5a:	2408      	movs	r4, #8
      select = 0x00;
      sensitivity = 16384.0;
      break;
  }

  Wire.begin();
   d4a5c:	f003 f86a 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4a60:	f002 fbf0 	bl	d7244 <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(MPU_ADDRESS);
   d4a64:	f003 f866 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4a68:	2168      	movs	r1, #104	; 0x68
   d4a6a:	f002 fc21 	bl	d72b0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x1C);
   d4a6e:	f003 f861 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4a72:	211c      	movs	r1, #28
   d4a74:	f7ff fb40 	bl	d40f8 <_ZN7TwoWire5writeEi>
  Wire.write(select);
   d4a78:	f003 f85c 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4a7c:	4621      	mov	r1, r4
   d4a7e:	f7ff fb3b 	bl	d40f8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission(true);
   d4a82:	f003 f857 	bl	d7b34 <_Z19__fetch_global_Wirev>
}
   d4a86:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  Wire.endTransmission(true);
   d4a8a:	2101      	movs	r1, #1
   d4a8c:	f002 bc13 	b.w	d72b6 <_ZN7TwoWire15endTransmissionEh>
      sensitivity = 4096.0;
   d4a90:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
   d4a94:	601a      	str	r2, [r3, #0]
      select = 0x10;
   d4a96:	2410      	movs	r4, #16
      break;
   d4a98:	e7e0      	b.n	d4a5c <_Z12configureACCi+0x18>
      sensitivity = 2048.0;
   d4a9a:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
   d4a9e:	601a      	str	r2, [r3, #0]
      select = 0x18;
   d4aa0:	2418      	movs	r4, #24
      break;
   d4aa2:	e7db      	b.n	d4a5c <_Z12configureACCi+0x18>
      sensitivity = 16384.0;
   d4aa4:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
   d4aa8:	601a      	str	r2, [r3, #0]
      select = 0x00;
   d4aaa:	2400      	movs	r4, #0
      break;
   d4aac:	e7d6      	b.n	d4a5c <_Z12configureACCi+0x18>
   d4aae:	bf00      	nop
   d4ab0:	2003e560 	.word	0x2003e560

000d4ab4 <setup>:
void setup() {
   d4ab4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  Serial.begin(9600);
   d4ab6:	f002 fad7 	bl	d7068 <_Z16_fetch_usbserialv>
   d4aba:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4abe:	f002 fac7 	bl	d7050 <_ZN9USBSerial5beginEl>
  Serial1.begin(9600);
   d4ac2:	f002 fb57 	bl	d7174 <_Z22__fetch_global_Serial1v>
   d4ac6:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4aca:	f002 fb4f 	bl	d716c <_ZN11USARTSerial5beginEm>
  beginMPU();
   d4ace:	f7ff ff9d 	bl	d4a0c <_Z8beginMPUv>
  configureACC(3);
   d4ad2:	2003      	movs	r0, #3
   d4ad4:	f7ff ffb6 	bl	d4a44 <_Z12configureACCi>
  pinMode(LED, OUTPUT);
   d4ad8:	2101      	movs	r1, #1
   d4ada:	200b      	movs	r0, #11
   d4adc:	f002 ffd4 	bl	d7a88 <pinMode>
	void setClient(Client * client) {this->client = client;};
   d4ae0:	4c16      	ldr	r4, [pc, #88]	; (d4b3c <setup+0x88>)
  bme.begin();
   d4ae2:	4817      	ldr	r0, [pc, #92]	; (d4b40 <setup+0x8c>)

	void resetWriteFields()
	{
		for(size_t iField = 0; iField < 8; iField++)
		{
			this->nextWriteField[iField] = "";
   d4ae4:	4f17      	ldr	r7, [pc, #92]	; (d4b44 <setup+0x90>)
   d4ae6:	f000 feec 	bl	d58c2 <_ZN15Adafruit_BME2805beginEv>
	void setClient(Client * client) {this->client = client;};
   d4aea:	4b17      	ldr	r3, [pc, #92]	; (d4b48 <setup+0x94>)
   d4aec:	6023      	str	r3, [r4, #0]
		this->port = port;
   d4aee:	2350      	movs	r3, #80	; 0x50
   d4af0:	6063      	str	r3, [r4, #4]
   d4af2:	2500      	movs	r5, #0
			this->nextWriteField[iField] = "";
   d4af4:	f104 0608 	add.w	r6, r4, #8
   d4af8:	1970      	adds	r0, r6, r5
   d4afa:	4639      	mov	r1, r7
   d4afc:	3510      	adds	r5, #16
   d4afe:	f001 ff15 	bl	d692c <_ZN6StringaSEPKc>
		for(size_t iField = 0; iField < 8; iField++)
   d4b02:	2d80      	cmp	r5, #128	; 0x80
   d4b04:	d1f8      	bne.n	d4af8 <setup+0x44>
		}
		this->nextWriteLatitude = NAN;
   d4b06:	4b11      	ldr	r3, [pc, #68]	; (d4b4c <setup+0x98>)
		this->nextWriteLongitude = NAN;
		this->nextWriteElevation = NAN;
		this->nextWriteStatus = "";
   d4b08:	490e      	ldr	r1, [pc, #56]	; (d4b44 <setup+0x90>)
   d4b0a:	4811      	ldr	r0, [pc, #68]	; (d4b50 <setup+0x9c>)
		this->nextWriteLatitude = NAN;
   d4b0c:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		this->nextWriteLongitude = NAN;
   d4b10:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		this->nextWriteElevation = NAN;
   d4b14:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		this->nextWriteStatus = "";
   d4b18:	f001 ff08 	bl	d692c <_ZN6StringaSEPKc>
		this->nextWriteTwitter = "";
   d4b1c:	4909      	ldr	r1, [pc, #36]	; (d4b44 <setup+0x90>)
   d4b1e:	480d      	ldr	r0, [pc, #52]	; (d4b54 <setup+0xa0>)
   d4b20:	f001 ff04 	bl	d692c <_ZN6StringaSEPKc>
		this->nextWriteTweet = "";
   d4b24:	4907      	ldr	r1, [pc, #28]	; (d4b44 <setup+0x90>)
   d4b26:	480c      	ldr	r0, [pc, #48]	; (d4b58 <setup+0xa4>)
   d4b28:	f001 ff00 	bl	d692c <_ZN6StringaSEPKc>
		this->nextWriteCreatedAt = "";
   d4b2c:	4905      	ldr	r1, [pc, #20]	; (d4b44 <setup+0x90>)
   d4b2e:	480b      	ldr	r0, [pc, #44]	; (d4b5c <setup+0xa8>)
   d4b30:	f001 fefc 	bl	d692c <_ZN6StringaSEPKc>
		this->lastReadStatus = OK_SUCCESS;
   d4b34:	23c8      	movs	r3, #200	; 0xc8
   d4b36:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
}
   d4b3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   d4b3c:	2003e578 	.word	0x2003e578
   d4b40:	2003e410 	.word	0x2003e410
   d4b44:	000da492 	.word	0x000da492
   d4b48:	2003e454 	.word	0x2003e454
   d4b4c:	7fc00000 	.word	0x7fc00000
   d4b50:	2003e610 	.word	0x2003e610
   d4b54:	2003e620 	.word	0x2003e620
   d4b58:	2003e630 	.word	0x2003e630
   d4b5c:	2003e640 	.word	0x2003e640

000d4b60 <_Z7readACCv>:

bool readACC() {
   d4b60:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4b64:	ed2d 8b02 	vpush	{d8}
   d4b68:	b083      	sub	sp, #12

  int16_t xRaw, yRaw, zRaw;
  float xCal, yCal, zCal, accel;

  // Request most recent accelerometer measurements.
  Wire.beginTransmission(MPU_ADDRESS);
   d4b6a:	f002 ffe3 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4b6e:	2168      	movs	r1, #104	; 0x68
   d4b70:	f002 fb9e 	bl	d72b0 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x3B); // Start at 0x3B ACCEL_XOUT[15:8]
   d4b74:	f002 ffde 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4b78:	213b      	movs	r1, #59	; 0x3b
   d4b7a:	f7ff fabd 	bl	d40f8 <_ZN7TwoWire5writeEi>
  Wire.endTransmission(false);
   d4b7e:	f002 ffd9 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4b82:	2100      	movs	r1, #0
   d4b84:	f002 fb97 	bl	d72b6 <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPU_ADDRESS, 6, true); // Read six registers.
   d4b88:	f002 ffd4 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4b8c:	2206      	movs	r2, #6
   d4b8e:	2168      	movs	r1, #104	; 0x68
   d4b90:	2301      	movs	r3, #1
   d4b92:	f002 fb74 	bl	d727e <_ZN7TwoWire11requestFromEhjh>

  // Shift bits.
  xRaw = Wire.read() << 8 | Wire.read(); // 0x3B ACCEL_XOUT[15:8] & 0x3C ACCEL_XOUT[7:0]
   d4b96:	f002 ffcd 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4b9a:	6803      	ldr	r3, [r0, #0]
   d4b9c:	695b      	ldr	r3, [r3, #20]
   d4b9e:	4798      	blx	r3
   d4ba0:	4604      	mov	r4, r0
   d4ba2:	f002 ffc7 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4ba6:	6803      	ldr	r3, [r0, #0]
   d4ba8:	695b      	ldr	r3, [r3, #20]
   d4baa:	4798      	blx	r3
   d4bac:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4bb0:	b206      	sxth	r6, r0
  yRaw = Wire.read() << 8 | Wire.read(); // 0x3D ACCEL_YOUT[15:8] & 0x3E ACCEL_YOUT[7:0]
   d4bb2:	f002 ffbf 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4bb6:	6803      	ldr	r3, [r0, #0]
   d4bb8:	695b      	ldr	r3, [r3, #20]
   d4bba:	4798      	blx	r3
   d4bbc:	4604      	mov	r4, r0
   d4bbe:	f002 ffb9 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4bc2:	6803      	ldr	r3, [r0, #0]
   d4bc4:	695b      	ldr	r3, [r3, #20]
   d4bc6:	4798      	blx	r3
   d4bc8:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4bcc:	b205      	sxth	r5, r0
  zRaw = Wire.read() << 8 | Wire.read(); // 0x3F ACCEL_ZOUT[15:8] & 0x40 ACCEL_ZOUT[7:0]
   d4bce:	f002 ffb1 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4bd2:	6803      	ldr	r3, [r0, #0]
   d4bd4:	695b      	ldr	r3, [r3, #20]
   d4bd6:	4798      	blx	r3
   d4bd8:	4680      	mov	r8, r0
   d4bda:	f002 ffab 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d4bde:	6803      	ldr	r3, [r0, #0]
   d4be0:	695b      	ldr	r3, [r3, #20]
   d4be2:	4798      	blx	r3
  
  // Calibrate measurements to least significant bit sensitivity.
  xCal = xRaw / sensitivity * (-1);
   d4be4:	4b36      	ldr	r3, [pc, #216]	; (d4cc0 <_Z7readACCv+0x160>)
   d4be6:	ee07 6a90 	vmov	s15, r6
   d4bea:	ed93 8a00 	vldr	s16, [r3]
   d4bee:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  zRaw = Wire.read() << 8 | Wire.read(); // 0x3F ACCEL_ZOUT[15:8] & 0x40 ACCEL_ZOUT[7:0]
   d4bf2:	4604      	mov	r4, r0
  xCal = xRaw / sensitivity * (-1);
   d4bf4:	ee87 7a88 	vdiv.f32	s14, s15, s16
  zRaw = Wire.read() << 8 | Wire.read(); // 0x3F ACCEL_ZOUT[15:8] & 0x40 ACCEL_ZOUT[7:0]
   d4bf8:	ea44 2408 	orr.w	r4, r4, r8, lsl #8
  yCal = yRaw / sensitivity * (-1);
  zCal = zRaw / sensitivity * (-1);
   d4bfc:	b224      	sxth	r4, r4
      return pow(__type(__x), __type(__y));
   d4bfe:	eef1 7a47 	vneg.f32	s15, s14
   d4c02:	ee17 0a90 	vmov	r0, s15
   d4c06:	f004 fc39 	bl	d947c <__aeabi_f2d>
  yCal = yRaw / sensitivity * (-1);
   d4c0a:	ee07 5a90 	vmov	s15, r5
   d4c0e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4c12:	4602      	mov	r2, r0
   d4c14:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d4c18:	460b      	mov	r3, r1
   d4c1a:	e9cd 2300 	strd	r2, r3, [sp]
   d4c1e:	eef1 7a47 	vneg.f32	s15, s14
   d4c22:	ee17 0a90 	vmov	r0, s15
   d4c26:	f004 fc29 	bl	d947c <__aeabi_f2d>
  zCal = zRaw / sensitivity * (-1);
   d4c2a:	ee07 4a90 	vmov	s15, r4
   d4c2e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4c32:	4606      	mov	r6, r0
   d4c34:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d4c38:	460f      	mov	r7, r1
   d4c3a:	eef1 7a47 	vneg.f32	s15, s14
   d4c3e:	ee17 0a90 	vmov	r0, s15
   d4c42:	f004 fc1b 	bl	d947c <__aeabi_f2d>
   d4c46:	e9dd 2300 	ldrd	r2, r3, [sp]
   d4c4a:	4604      	mov	r4, r0
   d4c4c:	460d      	mov	r5, r1
   d4c4e:	4610      	mov	r0, r2
   d4c50:	4619      	mov	r1, r3
   d4c52:	f004 fc6b 	bl	d952c <__aeabi_dmul>
   d4c56:	4632      	mov	r2, r6
   d4c58:	4680      	mov	r8, r0
   d4c5a:	4689      	mov	r9, r1
   d4c5c:	463b      	mov	r3, r7
   d4c5e:	4630      	mov	r0, r6
   d4c60:	4639      	mov	r1, r7
   d4c62:	f004 fc63 	bl	d952c <__aeabi_dmul>
   d4c66:	4602      	mov	r2, r0
   d4c68:	460b      	mov	r3, r1

  // Calculate total acceleration.
  accel = sqrt(pow(xCal, 2) + pow(yCal, 2) + pow(zCal, 2));
   d4c6a:	4640      	mov	r0, r8
   d4c6c:	4649      	mov	r1, r9
   d4c6e:	f004 faa7 	bl	d91c0 <__adddf3>
   d4c72:	4622      	mov	r2, r4
   d4c74:	4606      	mov	r6, r0
   d4c76:	460f      	mov	r7, r1
   d4c78:	462b      	mov	r3, r5
   d4c7a:	4620      	mov	r0, r4
   d4c7c:	4629      	mov	r1, r5
   d4c7e:	f004 fc55 	bl	d952c <__aeabi_dmul>
   d4c82:	4602      	mov	r2, r0
   d4c84:	460b      	mov	r3, r1
   d4c86:	4630      	mov	r0, r6
   d4c88:	4639      	mov	r1, r7
   d4c8a:	f004 fa99 	bl	d91c0 <__adddf3>
   d4c8e:	ec41 0b10 	vmov	d0, r0, r1
   d4c92:	f003 fa4b 	bl	d812c <sqrt>
   d4c96:	ec51 0b10 	vmov	r0, r1, d0
   d4c9a:	f004 ff17 	bl	d9acc <__aeabi_d2f>
  
  if(accel > 3) {
   d4c9e:	ee07 0a10 	vmov	s14, r0
   d4ca2:	eef0 7a08 	vmov.f32	s15, #8	; 0x40400000  3.0
   d4ca6:	eeb4 7ae7 	vcmpe.f32	s14, s15
   d4caa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
    return true;
  }
  else {
    return false;
  }
}
   d4cae:	bfcc      	ite	gt
   d4cb0:	2001      	movgt	r0, #1
   d4cb2:	2000      	movle	r0, #0
   d4cb4:	b003      	add	sp, #12
   d4cb6:	ecbd 8b02 	vpop	{d8}
   d4cba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d4cbe:	bf00      	nop
   d4cc0:	2003e560 	.word	0x2003e560

000d4cc4 <_Z5flashi>:

void flash(int duration) {
   d4cc4:	b510      	push	{r4, lr}
  /*
   * This function switches on and off a light-emitting diode (LED).
   */

  digitalWrite(LED, HIGH);
   d4cc6:	2101      	movs	r1, #1
void flash(int duration) {
   d4cc8:	4604      	mov	r4, r0
  digitalWrite(LED, HIGH);
   d4cca:	200b      	movs	r0, #11
   d4ccc:	f002 feed 	bl	d7aaa <digitalWrite>
  delay(duration);
   d4cd0:	4620      	mov	r0, r4
   d4cd2:	f002 f833 	bl	d6d3c <delay>
  digitalWrite(LED, LOW);
   d4cd6:	200b      	movs	r0, #11
   d4cd8:	2100      	movs	r1, #0
   d4cda:	f002 fee6 	bl	d7aaa <digitalWrite>
  delay(duration);
   d4cde:	4620      	mov	r0, r4
}
   d4ce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
  delay(duration);
   d4ce4:	f002 b82a 	b.w	d6d3c <delay>

000d4ce8 <_Z8flashSOSv>:

void flashSOS() {
   d4ce8:	b508      	push	{r3, lr}
   * in an SOS pattern: 3 short flashes, 3 long flashes, and 3 short flashes.  
   */

  for(int i=1; i<5; i+=2) {
    for(int j=0; j<3; j++) {
      flash(200*i);
   d4cea:	20c8      	movs	r0, #200	; 0xc8
   d4cec:	f7ff ffea 	bl	d4cc4 <_Z5flashi>
   d4cf0:	20c8      	movs	r0, #200	; 0xc8
   d4cf2:	f7ff ffe7 	bl	d4cc4 <_Z5flashi>
   d4cf6:	20c8      	movs	r0, #200	; 0xc8
   d4cf8:	f7ff ffe4 	bl	d4cc4 <_Z5flashi>
    }
    delay(400);
   d4cfc:	f44f 70c8 	mov.w	r0, #400	; 0x190
   d4d00:	f002 f81c 	bl	d6d3c <delay>
      flash(200*i);
   d4d04:	f44f 7016 	mov.w	r0, #600	; 0x258
   d4d08:	f7ff ffdc 	bl	d4cc4 <_Z5flashi>
   d4d0c:	f44f 7016 	mov.w	r0, #600	; 0x258
   d4d10:	f7ff ffd8 	bl	d4cc4 <_Z5flashi>
   d4d14:	f44f 7016 	mov.w	r0, #600	; 0x258
   d4d18:	f7ff ffd4 	bl	d4cc4 <_Z5flashi>
  }
   d4d1c:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    delay(400);
   d4d20:	f44f 70c8 	mov.w	r0, #400	; 0x190
   d4d24:	f002 b80a 	b.w	d6d3c <delay>

000d4d28 <loop>:
void loop() {
   d4d28:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
  accelState = readACC();
   d4d2c:	f7ff ff18 	bl	d4b60 <_Z7readACCv>
   d4d30:	4b61      	ldr	r3, [pc, #388]	; (d4eb8 <loop+0x190>)
   d4d32:	7018      	strb	r0, [r3, #0]
  if(accelState != accelStateOld) {
   d4d34:	4b61      	ldr	r3, [pc, #388]	; (d4ebc <loop+0x194>)
   d4d36:	781a      	ldrb	r2, [r3, #0]
   d4d38:	4282      	cmp	r2, r0
   d4d3a:	4a61      	ldr	r2, [pc, #388]	; (d4ec0 <loop+0x198>)
   d4d3c:	d005      	beq.n	d4d4a <loop+0x22>
    if(accelState) {
   d4d3e:	b118      	cbz	r0, d4d48 <loop+0x20>
      systemState = !systemState;
   d4d40:	7811      	ldrb	r1, [r2, #0]
   d4d42:	f081 0101 	eor.w	r1, r1, #1
   d4d46:	7011      	strb	r1, [r2, #0]
    accelStateOld = accelState;
   d4d48:	7018      	strb	r0, [r3, #0]
  if(systemState) {
   d4d4a:	7813      	ldrb	r3, [r2, #0]
   d4d4c:	2b00      	cmp	r3, #0
   d4d4e:	f000 80a7 	beq.w	d4ea0 <loop+0x178>
    flashSOS();
   d4d52:	f7ff ffc9 	bl	d4ce8 <_Z8flashSOSv>
   d4d56:	f001 f95d 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
    currentTime = millis();
   d4d5a:	4d5a      	ldr	r5, [pc, #360]	; (d4ec4 <loop+0x19c>)
   d4d5c:	6028      	str	r0, [r5, #0]
    while(Serial1.available() > 0) {
   d4d5e:	f002 fa09 	bl	d7174 <_Z22__fetch_global_Serial1v>
   d4d62:	6803      	ldr	r3, [r0, #0]
   d4d64:	691b      	ldr	r3, [r3, #16]
   d4d66:	4798      	blx	r3
   d4d68:	2800      	cmp	r0, #0
   d4d6a:	f340 8099 	ble.w	d4ea0 <loop+0x178>
      if(gps.encode(Serial1.read())) {
   d4d6e:	f002 fa01 	bl	d7174 <_Z22__fetch_global_Serial1v>
   d4d72:	6803      	ldr	r3, [r0, #0]
   d4d74:	4c54      	ldr	r4, [pc, #336]	; (d4ec8 <loop+0x1a0>)
   d4d76:	695b      	ldr	r3, [r3, #20]
   d4d78:	4798      	blx	r3
   d4d7a:	b2c1      	uxtb	r1, r0
   d4d7c:	4620      	mov	r0, r4
   d4d7e:	f001 f8b5 	bl	d5eec <_ZN11TinyGPSPlus6encodeEc>
   d4d82:	2800      	cmp	r0, #0
   d4d84:	d0eb      	beq.n	d4d5e <loop+0x36>
        if(gps.location.isValid()) {
   d4d86:	7823      	ldrb	r3, [r4, #0]
   d4d88:	2b00      	cmp	r3, #0
   d4d8a:	d0e8      	beq.n	d4d5e <loop+0x36>
          if((currentTime-previousTime) > 15000) {
   d4d8c:	4e4f      	ldr	r6, [pc, #316]	; (d4ecc <loop+0x1a4>)
   d4d8e:	682b      	ldr	r3, [r5, #0]
   d4d90:	6832      	ldr	r2, [r6, #0]
   d4d92:	1a9b      	subs	r3, r3, r2
   d4d94:	f643 2298 	movw	r2, #15000	; 0x3a98
   d4d98:	4293      	cmp	r3, r2
   d4d9a:	dde0      	ble.n	d4d5e <loop+0x36>
            Serial.println(".");
   d4d9c:	f002 f964 	bl	d7068 <_Z16_fetch_usbserialv>
   d4da0:	494b      	ldr	r1, [pc, #300]	; (d4ed0 <loop+0x1a8>)
            altitude = bme.readAltitude(1013.25) * 3.28;
   d4da2:	f8df a154 	ldr.w	sl, [pc, #340]	; d4ef8 <loop+0x1d0>
            pressure = bme.readPressure() / 100.0F;
   d4da6:	f8df 9154 	ldr.w	r9, [pc, #340]	; d4efc <loop+0x1d4>
            temperature = bme.readTemperature() * 1.8 + 32.0;
   d4daa:	f8df 8154 	ldr.w	r8, [pc, #340]	; d4f00 <loop+0x1d8>
            humidity = bme.readHumidity();
   d4dae:	f8df b154 	ldr.w	fp, [pc, #340]	; d4f04 <loop+0x1dc>
            latitude = gps.location.lat();
   d4db2:	4f48      	ldr	r7, [pc, #288]	; (d4ed4 <loop+0x1ac>)
            Serial.println(".");
   d4db4:	f001 fe91 	bl	d6ada <_ZN5Print7printlnEPKc>
            altitude = bme.readAltitude(1013.25) * 3.28;
   d4db8:	4847      	ldr	r0, [pc, #284]	; (d4ed8 <loop+0x1b0>)
   d4dba:	ed9f 0a48 	vldr	s0, [pc, #288]	; d4edc <loop+0x1b4>
   d4dbe:	f000 fadb 	bl	d5378 <_ZN15Adafruit_BME28012readAltitudeEf>
   d4dc2:	ee10 0a10 	vmov	r0, s0
   d4dc6:	f004 fb59 	bl	d947c <__aeabi_f2d>
   d4dca:	a337      	add	r3, pc, #220	; (adr r3, d4ea8 <loop+0x180>)
   d4dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4dd0:	f004 fbac 	bl	d952c <__aeabi_dmul>
   d4dd4:	f004 fe7a 	bl	d9acc <__aeabi_d2f>
   d4dd8:	f8ca 0000 	str.w	r0, [sl]
            pressure = bme.readPressure() / 100.0F;
   d4ddc:	483e      	ldr	r0, [pc, #248]	; (d4ed8 <loop+0x1b0>)
   d4dde:	f000 f9ef 	bl	d51c0 <_ZN15Adafruit_BME28012readPressureEv>
   d4de2:	ed9f 7a3f 	vldr	s14, [pc, #252]	; d4ee0 <loop+0x1b8>
            temperature = bme.readTemperature() * 1.8 + 32.0;
   d4de6:	483c      	ldr	r0, [pc, #240]	; (d4ed8 <loop+0x1b0>)
            pressure = bme.readPressure() / 100.0F;
   d4de8:	eec0 7a07 	vdiv.f32	s15, s0, s14
   d4dec:	edc9 7a00 	vstr	s15, [r9]
            temperature = bme.readTemperature() * 1.8 + 32.0;
   d4df0:	f000 f9b8 	bl	d5164 <_ZN15Adafruit_BME28015readTemperatureEv>
   d4df4:	ee10 0a10 	vmov	r0, s0
   d4df8:	f004 fb40 	bl	d947c <__aeabi_f2d>
   d4dfc:	a32c      	add	r3, pc, #176	; (adr r3, d4eb0 <loop+0x188>)
   d4dfe:	e9d3 2300 	ldrd	r2, r3, [r3]
   d4e02:	f004 fb93 	bl	d952c <__aeabi_dmul>
   d4e06:	4b37      	ldr	r3, [pc, #220]	; (d4ee4 <loop+0x1bc>)
   d4e08:	2200      	movs	r2, #0
   d4e0a:	f004 f9d9 	bl	d91c0 <__adddf3>
   d4e0e:	f004 fe5d 	bl	d9acc <__aeabi_d2f>
   d4e12:	f8c8 0000 	str.w	r0, [r8]
            humidity = bme.readHumidity();
   d4e16:	4830      	ldr	r0, [pc, #192]	; (d4ed8 <loop+0x1b0>)
   d4e18:	f000 fb4e 	bl	d54b8 <_ZN15Adafruit_BME28012readHumidityEv>
            latitude = gps.location.lat();
   d4e1c:	4620      	mov	r0, r4
            humidity = bme.readHumidity();
   d4e1e:	ed8b 0a00 	vstr	s0, [fp]
            latitude = gps.location.lat();
   d4e22:	f000 fea1 	bl	d5b68 <_ZN15TinyGPSLocation3latEv>
   d4e26:	ec51 0b10 	vmov	r0, r1, d0
   d4e2a:	f004 fe4f 	bl	d9acc <__aeabi_d2f>
   d4e2e:	6038      	str	r0, [r7, #0]
            longitude = gps.location.lng();
   d4e30:	4620      	mov	r0, r4
   d4e32:	f000 febd 	bl	d5bb0 <_ZN15TinyGPSLocation3lngEv>
   d4e36:	ec51 0b10 	vmov	r0, r1, d0
   d4e3a:	f004 fe47 	bl	d9acc <__aeabi_d2f>
   d4e3e:	4c2a      	ldr	r4, [pc, #168]	; (d4ee8 <loop+0x1c0>)
            ThingSpeak.setField(1, altitude);
   d4e40:	ed9a 0a00 	vldr	s0, [sl]
            longitude = gps.location.lng();
   d4e44:	6020      	str	r0, [r4, #0]
            ThingSpeak.setField(1, altitude);
   d4e46:	2101      	movs	r1, #1
   d4e48:	4828      	ldr	r0, [pc, #160]	; (d4eec <loop+0x1c4>)
   d4e4a:	f7ff f963 	bl	d4114 <_ZN15ThingSpeakClass8setFieldEjf>
            ThingSpeak.setField(2, pressure);
   d4e4e:	ed99 0a00 	vldr	s0, [r9]
   d4e52:	4826      	ldr	r0, [pc, #152]	; (d4eec <loop+0x1c4>)
   d4e54:	2102      	movs	r1, #2
   d4e56:	f7ff f95d 	bl	d4114 <_ZN15ThingSpeakClass8setFieldEjf>
            ThingSpeak.setField(3, temperature);
   d4e5a:	ed98 0a00 	vldr	s0, [r8]
   d4e5e:	4823      	ldr	r0, [pc, #140]	; (d4eec <loop+0x1c4>)
   d4e60:	2103      	movs	r1, #3
   d4e62:	f7ff f957 	bl	d4114 <_ZN15ThingSpeakClass8setFieldEjf>
            ThingSpeak.setField(4, humidity);
   d4e66:	ed9b 0a00 	vldr	s0, [fp]
   d4e6a:	4820      	ldr	r0, [pc, #128]	; (d4eec <loop+0x1c4>)
   d4e6c:	2104      	movs	r1, #4
   d4e6e:	f7ff f951 	bl	d4114 <_ZN15ThingSpeakClass8setFieldEjf>
            ThingSpeak.setField(5, latitude);
   d4e72:	ed97 0a00 	vldr	s0, [r7]
   d4e76:	481d      	ldr	r0, [pc, #116]	; (d4eec <loop+0x1c4>)
   d4e78:	2105      	movs	r1, #5
   d4e7a:	f7ff f94b 	bl	d4114 <_ZN15ThingSpeakClass8setFieldEjf>
            ThingSpeak.setField(6, longitude);
   d4e7e:	ed94 0a00 	vldr	s0, [r4]
   d4e82:	481a      	ldr	r0, [pc, #104]	; (d4eec <loop+0x1c4>)
   d4e84:	2106      	movs	r1, #6
   d4e86:	f7ff f945 	bl	d4114 <_ZN15ThingSpeakClass8setFieldEjf>
            ThingSpeak.writeFields(myChannelNumber, myWriteAPIKey);
   d4e8a:	4b19      	ldr	r3, [pc, #100]	; (d4ef0 <loop+0x1c8>)
   d4e8c:	4817      	ldr	r0, [pc, #92]	; (d4eec <loop+0x1c4>)
   d4e8e:	681a      	ldr	r2, [r3, #0]
   d4e90:	4b18      	ldr	r3, [pc, #96]	; (d4ef4 <loop+0x1cc>)
   d4e92:	6819      	ldr	r1, [r3, #0]
   d4e94:	f7ff fb0a 	bl	d44ac <_ZN15ThingSpeakClass11writeFieldsEmPKc>
   d4e98:	f001 f8bc 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
            previousTime = millis();
   d4e9c:	6030      	str	r0, [r6, #0]
   d4e9e:	e75e      	b.n	d4d5e <loop+0x36>
}
   d4ea0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d4ea4:	f3af 8000 	nop.w
   d4ea8:	a3d70a3d 	.word	0xa3d70a3d
   d4eac:	400a3d70 	.word	0x400a3d70
   d4eb0:	cccccccd 	.word	0xcccccccd
   d4eb4:	3ffccccc 	.word	0x3ffccccc
   d4eb8:	2003e408 	.word	0x2003e408
   d4ebc:	2003e409 	.word	0x2003e409
   d4ec0:	2003e564 	.word	0x2003e564
   d4ec4:	2003e470 	.word	0x2003e470
   d4ec8:	2003e474 	.word	0x2003e474
   d4ecc:	2003e55c 	.word	0x2003e55c
   d4ed0:	000da4d5 	.word	0x000da4d5
   d4ed4:	2003e550 	.word	0x2003e550
   d4ed8:	2003e410 	.word	0x2003e410
   d4edc:	447d5000 	.word	0x447d5000
   d4ee0:	42c80000 	.word	0x42c80000
   d4ee4:	40400000 	.word	0x40400000
   d4ee8:	2003e554 	.word	0x2003e554
   d4eec:	2003e578 	.word	0x2003e578
   d4ef0:	2003e394 	.word	0x2003e394
   d4ef4:	2003e390 	.word	0x2003e390
   d4ef8:	2003e40c 	.word	0x2003e40c
   d4efc:	2003e558 	.word	0x2003e558
   d4f00:	2003e568 	.word	0x2003e568
   d4f04:	2003e54c 	.word	0x2003e54c

000d4f08 <_GLOBAL__sub_I_sensitivity>:
   d4f08:	b510      	push	{r4, lr}
Adafruit_BME280 bme;
   d4f0a:	4808      	ldr	r0, [pc, #32]	; (d4f2c <_GLOBAL__sub_I_sensitivity+0x24>)
TCPClient client;
   d4f0c:	4c08      	ldr	r4, [pc, #32]	; (d4f30 <_GLOBAL__sub_I_sensitivity+0x28>)
Adafruit_BME280 bme;
   d4f0e:	f000 f857 	bl	d4fc0 <_ZN15Adafruit_BME280C1Ev>
TinyGPSPlus gps;
   d4f12:	4808      	ldr	r0, [pc, #32]	; (d4f34 <_GLOBAL__sub_I_sensitivity+0x2c>)
   d4f14:	f000 fd6e 	bl	d59f4 <_ZN11TinyGPSPlusC1Ev>
TCPClient client;
   d4f18:	4620      	mov	r0, r4
   d4f1a:	f002 fc7d 	bl	d7818 <_ZN9TCPClientC1Ev>
   d4f1e:	4620      	mov	r0, r4
   d4f20:	4a05      	ldr	r2, [pc, #20]	; (d4f38 <_GLOBAL__sub_I_sensitivity+0x30>)
   d4f22:	4906      	ldr	r1, [pc, #24]	; (d4f3c <_GLOBAL__sub_I_sensitivity+0x34>)
   d4f24:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
TCPClient client;
   d4f28:	f002 be2c 	b.w	d7b84 <__aeabi_atexit>
   d4f2c:	2003e410 	.word	0x2003e410
   d4f30:	2003e454 	.word	0x2003e454
   d4f34:	2003e474 	.word	0x2003e474
   d4f38:	2003e404 	.word	0x2003e404
   d4f3c:	000d40b5 	.word	0x000d40b5

000d4f40 <_ZN8particle11SPISettingsD1Ev>:
  SPISettings()
  {
  }

  virtual ~SPISettings() {
  }
   d4f40:	4770      	bx	lr

000d4f42 <_ZN8particle11SPISettingsD0Ev>:
  virtual ~SPISettings() {
   d4f42:	b510      	push	{r4, lr}
  }
   d4f44:	2110      	movs	r1, #16
  virtual ~SPISettings() {
   d4f46:	4604      	mov	r4, r0
  }
   d4f48:	f002 fe21 	bl	d7b8e <_ZdlPvj>
   d4f4c:	4620      	mov	r0, r4
   d4f4e:	bd10      	pop	{r4, pc}

000d4f50 <_ZN5Print6printfEPKcz>:
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4f50:	b40e      	push	{r1, r2, r3}
   d4f52:	b503      	push	{r0, r1, lr}
   d4f54:	ab03      	add	r3, sp, #12
        auto r = this->vprintf(false, format, args);
   d4f56:	2100      	movs	r1, #0
    size_t printf(const char* format, ...) __attribute__ ((format(printf, 2, 3)))
   d4f58:	f853 2b04 	ldr.w	r2, [r3], #4
        va_start(args, format);
   d4f5c:	9301      	str	r3, [sp, #4]
        auto r = this->vprintf(false, format, args);
   d4f5e:	f001 fde4 	bl	d6b2a <_ZN5Print7vprintfEbPKcSt9__va_list>
    }
   d4f62:	b002      	add	sp, #8
   d4f64:	f85d eb04 	ldr.w	lr, [sp], #4
   d4f68:	b003      	add	sp, #12
   d4f6a:	4770      	bx	lr

000d4f6c <_ZNK8particle11SPISettings7printToER5Print>:
  bool operator!=(const SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4f6c:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d4f6e:	4604      	mov	r4, r0
   d4f70:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d4f72:	7922      	ldrb	r2, [r4, #4]
   d4f74:	68a3      	ldr	r3, [r4, #8]
   d4f76:	b132      	cbz	r2, d4f86 <_ZNK8particle11SPISettings7printToER5Print+0x1a>
   d4f78:	b9a3      	cbnz	r3, d4fa4 <_ZNK8particle11SPISettings7printToER5Print+0x38>
      return p.print("<SPISettings default>");
   d4f7a:	490b      	ldr	r1, [pc, #44]	; (d4fa8 <_ZNK8particle11SPISettings7printToER5Print+0x3c>)
    else
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
          bitOrder_ == MSBFIRST ? "MSB" : "LSB", (unsigned int)dataMode_);
  }
   d4f7c:	b002      	add	sp, #8
   d4f7e:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
      return p.print("<SPISettings default>");
   d4f82:	f001 bd97 	b.w	d6ab4 <_ZN5Print5printEPKc>
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4f86:	4a09      	ldr	r2, [pc, #36]	; (d4fac <_ZNK8particle11SPISettings7printToER5Print+0x40>)
   d4f88:	7b26      	ldrb	r6, [r4, #12]
   d4f8a:	4d09      	ldr	r5, [pc, #36]	; (d4fb0 <_ZNK8particle11SPISettings7printToER5Print+0x44>)
   d4f8c:	4909      	ldr	r1, [pc, #36]	; (d4fb4 <_ZNK8particle11SPISettings7printToER5Print+0x48>)
   d4f8e:	7b64      	ldrb	r4, [r4, #13]
   d4f90:	2e01      	cmp	r6, #1
   d4f92:	bf18      	it	ne
   d4f94:	4629      	movne	r1, r5
   d4f96:	e9cd 1400 	strd	r1, r4, [sp]
   d4f9a:	4907      	ldr	r1, [pc, #28]	; (d4fb8 <_ZNK8particle11SPISettings7printToER5Print+0x4c>)
   d4f9c:	f7ff ffd8 	bl	d4f50 <_ZN5Print6printfEPKcz>
  }
   d4fa0:	b002      	add	sp, #8
   d4fa2:	bd70      	pop	{r4, r5, r6, pc}
      return p.printf("<SPISettings %s%u %s MODE%u>", default_ ? "default " : "", (unsigned int)clock_,
   d4fa4:	4a05      	ldr	r2, [pc, #20]	; (d4fbc <_ZNK8particle11SPISettings7printToER5Print+0x50>)
   d4fa6:	e7ef      	b.n	d4f88 <_ZNK8particle11SPISettings7printToER5Print+0x1c>
   d4fa8:	000da4f9 	.word	0x000da4f9
   d4fac:	000da492 	.word	0x000da492
   d4fb0:	000da4f5 	.word	0x000da4f5
   d4fb4:	000da4f1 	.word	0x000da4f1
   d4fb8:	000da50f 	.word	0x000da50f
   d4fbc:	000da4e8 	.word	0x000da4e8

000d4fc0 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d4fc0:	f04f 33ff 	mov.w	r3, #4294967295
   d4fc4:	6103      	str	r3, [r0, #16]
{ }
   d4fc6:	4770      	bx	lr

000d4fc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>:
namespace particle {

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d4fc8:	b513      	push	{r0, r1, r4, lr}
        static SPIClass instance(Interface);
   d4fca:	4c0b      	ldr	r4, [pc, #44]	; (d4ff8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x30>)
   d4fcc:	7821      	ldrb	r1, [r4, #0]
   d4fce:	f3bf 8f5b 	dmb	ish
   d4fd2:	f011 0101 	ands.w	r1, r1, #1
   d4fd6:	d10b      	bne.n	d4ff0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4fd8:	4620      	mov	r0, r4
   d4fda:	9101      	str	r1, [sp, #4]
   d4fdc:	f7ff f861 	bl	d40a2 <__cxa_guard_acquire>
   d4fe0:	9901      	ldr	r1, [sp, #4]
   d4fe2:	b128      	cbz	r0, d4ff0 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x28>
   d4fe4:	4805      	ldr	r0, [pc, #20]	; (d4ffc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4fe6:	f001 fa8d 	bl	d6504 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d4fea:	4620      	mov	r0, r4
   d4fec:	f7ff f85e 	bl	d40ac <__cxa_guard_release>
        return instance;
    }
   d4ff0:	4802      	ldr	r0, [pc, #8]	; (d4ffc <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv+0x34>)
   d4ff2:	b002      	add	sp, #8
   d4ff4:	bd10      	pop	{r4, pc}
   d4ff6:	bf00      	nop
   d4ff8:	2003e56c 	.word	0x2003e56c
   d4ffc:	2003e570 	.word	0x2003e570

000d5000 <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d5000:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d5004:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5008:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d500a:	4605      	mov	r5, r0
   d500c:	460f      	mov	r7, r1
    if (_sck == -1)
   d500e:	d106      	bne.n	d501e <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d5010:	f7ff ffda 	bl	d4fc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5014:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d5016:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d501a:	f001 bb15 	b.w	d6648 <_ZN8SPIClass8transferEh>
    uint8_t reply = 0;
   d501e:	2400      	movs	r4, #0
    for (int i=7; i>=0; i--) {
   d5020:	2607      	movs	r6, #7
        digitalWrite(_mosi, x & (1<<i));
   d5022:	f04f 0801 	mov.w	r8, #1
        digitalWrite(_sck, LOW);
   d5026:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d502a:	2100      	movs	r1, #0
   d502c:	b280      	uxth	r0, r0
   d502e:	f002 fd3c 	bl	d7aaa <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d5032:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d5036:	fa08 f106 	lsl.w	r1, r8, r6
   d503a:	4039      	ands	r1, r7
   d503c:	b280      	uxth	r0, r0
   d503e:	f002 fd34 	bl	d7aaa <digitalWrite>
        digitalWrite(_sck, HIGH);
   d5042:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d5046:	2101      	movs	r1, #1
   d5048:	b280      	uxth	r0, r0
   d504a:	f002 fd2e 	bl	d7aaa <digitalWrite>
        if (digitalRead(_miso))
   d504e:	f995 0012 	ldrsb.w	r0, [r5, #18]
        reply <<= 1;
   d5052:	0064      	lsls	r4, r4, #1
        if (digitalRead(_miso))
   d5054:	b280      	uxth	r0, r0
        reply <<= 1;
   d5056:	b2e4      	uxtb	r4, r4
        if (digitalRead(_miso))
   d5058:	f002 fd40 	bl	d7adc <digitalRead>
   d505c:	b108      	cbz	r0, d5062 <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d505e:	f044 0401 	orr.w	r4, r4, #1
    for (int i=7; i>=0; i--) {
   d5062:	3e01      	subs	r6, #1
   d5064:	d2df      	bcs.n	d5026 <_ZN15Adafruit_BME2807spixferEh+0x26>
}
   d5066:	4620      	mov	r0, r4
   d5068:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d506c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>:
    void endTransaction() {
   d506c:	b508      	push	{r3, lr}
        instance().endTransaction();
   d506e:	f7ff ffab 	bl	d4fc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
    }
   d5072:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
        instance().endTransaction();
   d5076:	f001 ba60 	b.w	d653a <_ZN8SPIClass14endTransactionEv>

000d507a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>:
    int32_t beginTransaction(const particle::SPISettings& settings) {
   d507a:	b507      	push	{r0, r1, r2, lr}
   d507c:	9001      	str	r0, [sp, #4]
        return instance().beginTransaction(settings);
   d507e:	f7ff ffa3 	bl	d4fc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5082:	9901      	ldr	r1, [sp, #4]
    }
   d5084:	b003      	add	sp, #12
   d5086:	f85d eb04 	ldr.w	lr, [sp], #4
        return instance().beginTransaction(settings);
   d508a:	f001 ba6f 	b.w	d656c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>
	...

000d5090 <_ZN15Adafruit_BME2806read24Eh>:
    @param reg the register address to read from
    @returns the 24 bit data value read from the device
*/
/**************************************************************************/
uint32_t Adafruit_BME280::read24(byte reg)
{
   d5090:	b530      	push	{r4, r5, lr}
    uint32_t value;

    if (_cs == -1) {
   d5092:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5096:	3301      	adds	r3, #1
{
   d5098:	b085      	sub	sp, #20
   d509a:	4604      	mov	r4, r0
   d509c:	460d      	mov	r5, r1
    if (_cs == -1) {
   d509e:	d123      	bne.n	d50e8 <_ZN15Adafruit_BME2806read24Eh+0x58>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d50a0:	7901      	ldrb	r1, [r0, #4]
   d50a2:	6800      	ldr	r0, [r0, #0]
   d50a4:	f002 f900 	bl	d72a8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d50a8:	6820      	ldr	r0, [r4, #0]
   d50aa:	6803      	ldr	r3, [r0, #0]
   d50ac:	4629      	mov	r1, r5
   d50ae:	689b      	ldr	r3, [r3, #8]
   d50b0:	4798      	blx	r3
        _wire -> endTransmission();
   d50b2:	6820      	ldr	r0, [r4, #0]
   d50b4:	f002 f903 	bl	d72be <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)3);
   d50b8:	7921      	ldrb	r1, [r4, #4]
   d50ba:	6820      	ldr	r0, [r4, #0]
   d50bc:	2203      	movs	r2, #3
   d50be:	f002 f8f0 	bl	d72a2 <_ZN7TwoWire11requestFromEhj>

        value = _wire -> read();
   d50c2:	6820      	ldr	r0, [r4, #0]
   d50c4:	6803      	ldr	r3, [r0, #0]
   d50c6:	695b      	ldr	r3, [r3, #20]
   d50c8:	4798      	blx	r3
        value <<= 8;
   d50ca:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d50cc:	6820      	ldr	r0, [r4, #0]
   d50ce:	6803      	ldr	r3, [r0, #0]
   d50d0:	695b      	ldr	r3, [r3, #20]
   d50d2:	4798      	blx	r3
   d50d4:	4328      	orrs	r0, r5
        value <<= 8;
   d50d6:	0205      	lsls	r5, r0, #8
        value |= _wire -> read();
   d50d8:	6820      	ldr	r0, [r4, #0]
   d50da:	6803      	ldr	r3, [r0, #0]
   d50dc:	695b      	ldr	r3, [r3, #20]
   d50de:	4798      	blx	r3
   d50e0:	4305      	orrs	r5, r0
        if (_sck == -1)
            SPI.endTransaction(); // release the SPI bus
    }

    return value;
}
   d50e2:	4628      	mov	r0, r5
   d50e4:	b005      	add	sp, #20
   d50e6:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d50e8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d50ec:	3301      	adds	r3, #1
   d50ee:	d10c      	bne.n	d510a <_ZN15Adafruit_BME2806read24Eh+0x7a>
      dataMode_{dataMode}
   d50f0:	4b1a      	ldr	r3, [pc, #104]	; (d515c <_ZN15Adafruit_BME2806read24Eh+0xcc>)
   d50f2:	9300      	str	r3, [sp, #0]
   d50f4:	2300      	movs	r3, #0
   d50f6:	f88d 3004 	strb.w	r3, [sp, #4]
   d50fa:	4b19      	ldr	r3, [pc, #100]	; (d5160 <_ZN15Adafruit_BME2806read24Eh+0xd0>)
   d50fc:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d50fe:	4668      	mov	r0, sp
   d5100:	2301      	movs	r3, #1
   d5102:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5106:	f7ff ffb8 	bl	d507a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d510a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d510e:	2100      	movs	r1, #0
   d5110:	b280      	uxth	r0, r0
   d5112:	f002 fcca 	bl	d7aaa <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5116:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d511a:	4620      	mov	r0, r4
   d511c:	f7ff ff70 	bl	d5000 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d5120:	2100      	movs	r1, #0
   d5122:	4620      	mov	r0, r4
   d5124:	f7ff ff6c 	bl	d5000 <_ZN15Adafruit_BME2807spixferEh>
        value |= spixfer(0);
   d5128:	2100      	movs	r1, #0
        value <<= 8;
   d512a:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d512c:	4620      	mov	r0, r4
   d512e:	f7ff ff67 	bl	d5000 <_ZN15Adafruit_BME2807spixferEh>
   d5132:	4328      	orrs	r0, r5
        value <<= 8;
   d5134:	0205      	lsls	r5, r0, #8
        value |= spixfer(0);
   d5136:	2100      	movs	r1, #0
   d5138:	4620      	mov	r0, r4
   d513a:	f7ff ff61 	bl	d5000 <_ZN15Adafruit_BME2807spixferEh>
   d513e:	4305      	orrs	r5, r0
        digitalWrite(_cs, HIGH);
   d5140:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5144:	2101      	movs	r1, #1
   d5146:	b280      	uxth	r0, r0
   d5148:	f002 fcaf 	bl	d7aaa <digitalWrite>
        if (_sck == -1)
   d514c:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5150:	3301      	adds	r3, #1
   d5152:	d1c6      	bne.n	d50e2 <_ZN15Adafruit_BME2806read24Eh+0x52>
            SPI.endTransaction(); // release the SPI bus
   d5154:	f7ff ff8a 	bl	d506c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
    return value;
   d5158:	e7c3      	b.n	d50e2 <_ZN15Adafruit_BME2806read24Eh+0x52>
   d515a:	bf00      	nop
   d515c:	000da534 	.word	0x000da534
   d5160:	0007a120 	.word	0x0007a120

000d5164 <_ZN15Adafruit_BME28015readTemperatureEv>:
    @brief  Returns the temperature from the sensor
    @returns the temperature read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readTemperature(void)
{
   d5164:	b510      	push	{r4, lr}
    int32_t var1, var2;

    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d5166:	21fa      	movs	r1, #250	; 0xfa
{
   d5168:	4604      	mov	r4, r0
    int32_t adc_T = read24(BME280_REGISTER_TEMPDATA);
   d516a:	f7ff ff91 	bl	d5090 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_T == 0x800000) // value in case temp measurement was disabled
   d516e:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d5172:	d01e      	beq.n	d51b2 <_ZN15Adafruit_BME28015readTemperatureEv+0x4e>
        return NAN;
    adc_T >>= 4;

    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5174:	8aa1      	ldrh	r1, [r4, #20]
            ((int32_t)_bme280_calib.dig_T3)) >> 14;

    t_fine = var1 + var2;

    float T = (t_fine * 5 + 128) >> 8;
    return T/100;
   d5176:	ed9f 7a10 	vldr	s14, [pc, #64]	; d51b8 <_ZN15Adafruit_BME28015readTemperatureEv+0x54>
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d517a:	004b      	lsls	r3, r1, #1
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d517c:	ebc1 2220 	rsb	r2, r1, r0, asr #8
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d5180:	ebc3 11e0 	rsb	r1, r3, r0, asr #7
            ((int32_t)_bme280_calib.dig_T2)) >> 11;
   d5184:	f9b4 3016 	ldrsh.w	r3, [r4, #22]
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5188:	4352      	muls	r2, r2
    var1 = ((((adc_T>>3) - ((int32_t)_bme280_calib.dig_T1 <<1))) *
   d518a:	4359      	muls	r1, r3
            ((int32_t)_bme280_calib.dig_T3)) >> 14;
   d518c:	f9b4 3018 	ldrsh.w	r3, [r4, #24]
              ((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1))) >> 12) *
   d5190:	1312      	asrs	r2, r2, #12
   d5192:	4353      	muls	r3, r2
    var2 = (((((adc_T>>4) - ((int32_t)_bme280_calib.dig_T1)) *
   d5194:	139b      	asrs	r3, r3, #14
    t_fine = var1 + var2;
   d5196:	eb03 23e1 	add.w	r3, r3, r1, asr #11
   d519a:	60e3      	str	r3, [r4, #12]
    float T = (t_fine * 5 + 128) >> 8;
   d519c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d51a0:	3380      	adds	r3, #128	; 0x80
   d51a2:	121b      	asrs	r3, r3, #8
   d51a4:	ee07 3a90 	vmov	s15, r3
   d51a8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
    return T/100;
   d51ac:	ee87 0a87 	vdiv.f32	s0, s15, s14
}
   d51b0:	bd10      	pop	{r4, pc}
        return NAN;
   d51b2:	ed9f 0a02 	vldr	s0, [pc, #8]	; d51bc <_ZN15Adafruit_BME28015readTemperatureEv+0x58>
   d51b6:	e7fb      	b.n	d51b0 <_ZN15Adafruit_BME28015readTemperatureEv+0x4c>
   d51b8:	42c80000 	.word	0x42c80000
   d51bc:	7fc00000 	.word	0x7fc00000

000d51c0 <_ZN15Adafruit_BME28012readPressureEv>:
/*!
    @brief  Returns the pressure from the sensor
    @returns the pressure value (in Pascal) read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readPressure(void) {
   d51c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
   d51c4:	4604      	mov	r4, r0
    int64_t var1, var2, p;

    readTemperature(); // must be done first to get t_fine
   d51c6:	f7ff ffcd 	bl	d5164 <_ZN15Adafruit_BME28015readTemperatureEv>

    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d51ca:	21f7      	movs	r1, #247	; 0xf7
   d51cc:	4620      	mov	r0, r4
   d51ce:	f7ff ff5f 	bl	d5090 <_ZN15Adafruit_BME2806read24Eh>
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d51d2:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
    int32_t adc_P = read24(BME280_REGISTER_PRESSUREDATA);
   d51d6:	4605      	mov	r5, r0
    if (adc_P == 0x800000) // value in case pressure measurement was disabled
   d51d8:	f000 80bf 	beq.w	d535a <_ZN15Adafruit_BME28012readPressureEv+0x19a>
        return NAN;
    adc_P >>= 4;

    var1 = ((int64_t)t_fine) - 128000;
   d51dc:	68e0      	ldr	r0, [r4, #12]
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d51de:	f9b4 601c 	ldrsh.w	r6, [r4, #28]
    var1 = ((int64_t)t_fine) - 128000;
   d51e2:	f5b0 33fa 	subs.w	r3, r0, #128000	; 0x1f400
   d51e6:	ea4f 71e0 	mov.w	r1, r0, asr #31
   d51ea:	f141 32ff 	adc.w	r2, r1, #4294967295
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d51ee:	fba3 8903 	umull	r8, r9, r3, r3
   d51f2:	fb03 f102 	mul.w	r1, r3, r2
   d51f6:	eb09 0941 	add.w	r9, r9, r1, lsl #1
           ((var1 * (int64_t)_bme280_calib.dig_P2)<<12);
   d51fa:	17f7      	asrs	r7, r6, #31
   d51fc:	fb06 f102 	mul.w	r1, r6, r2
   d5200:	fb03 1107 	mla	r1, r3, r7, r1
   d5204:	fba6 6703 	umull	r6, r7, r6, r3
   d5208:	440f      	add	r7, r1
   d520a:	0339      	lsls	r1, r7, #12
   d520c:	ea41 5116 	orr.w	r1, r1, r6, lsr #20
   d5210:	0330      	lsls	r0, r6, #12
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5212:	f9b4 601e 	ldrsh.w	r6, [r4, #30]
   d5216:	17f7      	asrs	r7, r6, #31
   d5218:	fb06 fc09 	mul.w	ip, r6, r9
   d521c:	fb08 cc07 	mla	ip, r8, r7, ip
   d5220:	fba6 6708 	umull	r6, r7, r6, r8
   d5224:	4467      	add	r7, ip
   d5226:	ea4f 2c16 	mov.w	ip, r6, lsr #8
   d522a:	ea4c 6c07 	orr.w	ip, ip, r7, lsl #24
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d522e:	8b66      	ldrh	r6, [r4, #26]
    var1 = ((var1 * var1 * (int64_t)_bme280_calib.dig_P3)>>8) +
   d5230:	ea4f 2e27 	mov.w	lr, r7, asr #8
   d5234:	eb1c 0000 	adds.w	r0, ip, r0
   d5238:	eb4e 0e01 	adc.w	lr, lr, r1
    var1 = (((((int64_t)1)<<47)+var1))*((int64_t)_bme280_calib.dig_P1)>>33;
   d523c:	3000      	adds	r0, #0
   d523e:	f54e 4e00 	adc.w	lr, lr, #32768	; 0x8000
   d5242:	fba0 0106 	umull	r0, r1, r0, r6
   d5246:	fb06 110e 	mla	r1, r6, lr, r1
   d524a:	104e      	asrs	r6, r1, #1
   d524c:	17cf      	asrs	r7, r1, #31

    if (var1 == 0) {
   d524e:	ea56 0107 	orrs.w	r1, r6, r7
   d5252:	f000 8085 	beq.w	d5360 <_ZN15Adafruit_BME28012readPressureEv+0x1a0>
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d5256:	f9b4 0024 	ldrsh.w	r0, [r4, #36]	; 0x24
   d525a:	fb00 fc09 	mul.w	ip, r0, r9
   d525e:	17c1      	asrs	r1, r0, #31
   d5260:	fb08 cc01 	mla	ip, r8, r1, ip
   d5264:	fba0 0108 	umull	r0, r1, r0, r8
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5268:	f9b4 8022 	ldrsh.w	r8, [r4, #34]	; 0x22
   d526c:	ea4f 79e8 	mov.w	r9, r8, asr #31
   d5270:	fb08 f202 	mul.w	r2, r8, r2
   d5274:	fb03 2209 	mla	r2, r3, r9, r2
   d5278:	fba8 8903 	umull	r8, r9, r8, r3
   d527c:	4491      	add	r9, r2
    var2 = var1 * var1 * (int64_t)_bme280_calib.dig_P6;
   d527e:	4461      	add	r1, ip
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5280:	ea4f 4248 	mov.w	r2, r8, lsl #17
   d5284:	ea4f 4c49 	mov.w	ip, r9, lsl #17
    adc_P >>= 4;
   d5288:	112d      	asrs	r5, r5, #4
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d528a:	1812      	adds	r2, r2, r0
        return 0; // avoid exception caused by division by zero
    }
    p = 1048576 - adc_P;
   d528c:	f5c5 1580 	rsb	r5, r5, #1048576	; 0x100000
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5290:	ea4c 3cd8 	orr.w	ip, ip, r8, lsr #15
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d5294:	f9b4 8020 	ldrsh.w	r8, [r4, #32]
    var2 = var2 + ((var1*(int64_t)_bme280_calib.dig_P5)<<17);
   d5298:	eb4c 0c01 	adc.w	ip, ip, r1
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d529c:	2300      	movs	r3, #0
    p = 1048576 - adc_P;
   d529e:	17e9      	asrs	r1, r5, #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d52a0:	189b      	adds	r3, r3, r2
    p = (((p<<31) - var2)*3125) / var1;
   d52a2:	ea4f 7ec1 	mov.w	lr, r1, lsl #31
   d52a6:	ea4f 70c5 	mov.w	r0, r5, lsl #31
    var2 = var2 + (((int64_t)_bme280_calib.dig_P4)<<35);
   d52aa:	ea4f 01c8 	mov.w	r1, r8, lsl #3
   d52ae:	eb41 0c0c 	adc.w	ip, r1, ip
    p = (((p<<31) - var2)*3125) / var1;
   d52b2:	ea4e 0e55 	orr.w	lr, lr, r5, lsr #1
   d52b6:	1ac0      	subs	r0, r0, r3
   d52b8:	f640 4335 	movw	r3, #3125	; 0xc35
   d52bc:	eb6e 0e0c 	sbc.w	lr, lr, ip
   d52c0:	fba0 0103 	umull	r0, r1, r0, r3
   d52c4:	fb03 110e 	mla	r1, r3, lr, r1
   d52c8:	4632      	mov	r2, r6
   d52ca:	463b      	mov	r3, r7
   d52cc:	f004 fd5c 	bl	d9d88 <__aeabi_ldivmod>
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d52d0:	f9b4 202a 	ldrsh.w	r2, [r4, #42]	; 0x2a
   d52d4:	134d      	asrs	r5, r1, #13
   d52d6:	0b46      	lsrs	r6, r0, #13
   d52d8:	ea46 46c1 	orr.w	r6, r6, r1, lsl #19
   d52dc:	fb02 f705 	mul.w	r7, r2, r5
   d52e0:	17d3      	asrs	r3, r2, #31
   d52e2:	fb06 7703 	mla	r7, r6, r3, r7
   d52e6:	fba2 2306 	umull	r2, r3, r2, r6
   d52ea:	443b      	add	r3, r7
   d52ec:	4355      	muls	r5, r2
   d52ee:	fb06 5503 	mla	r5, r6, r3, r5
   d52f2:	fba2 2306 	umull	r2, r3, r2, r6
   d52f6:	442b      	add	r3, r5
   d52f8:	0e55      	lsrs	r5, r2, #25
   d52fa:	ea45 15c3 	orr.w	r5, r5, r3, lsl #7
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d52fe:	f9b4 2028 	ldrsh.w	r2, [r4, #40]	; 0x28

    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5302:	f9b4 4026 	ldrsh.w	r4, [r4, #38]	; 0x26
   d5306:	182d      	adds	r5, r5, r0
    var1 = (((int64_t)_bme280_calib.dig_P9) * (p>>13) * (p>>13)) >> 25;
   d5308:	ea4f 6663 	mov.w	r6, r3, asr #25
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d530c:	eb41 0606 	adc.w	r6, r1, r6
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5310:	17d3      	asrs	r3, r2, #31
   d5312:	4351      	muls	r1, r2
   d5314:	fb00 1103 	mla	r1, r0, r3, r1
   d5318:	fba2 2300 	umull	r2, r3, r2, r0
   d531c:	440b      	add	r3, r1
   d531e:	0cd1      	lsrs	r1, r2, #19
   d5320:	ea41 3143 	orr.w	r1, r1, r3, lsl #13
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d5324:	186d      	adds	r5, r5, r1
    var2 = (((int64_t)_bme280_calib.dig_P8) * p) >> 19;
   d5326:	ea4f 40e3 	mov.w	r0, r3, asr #19
    p = ((p + var1 + var2) >> 8) + (((int64_t)_bme280_calib.dig_P7)<<4);
   d532a:	eb46 0300 	adc.w	r3, r6, r0
   d532e:	0a2a      	lsrs	r2, r5, #8
   d5330:	17e5      	asrs	r5, r4, #31
   d5332:	ea42 6203 	orr.w	r2, r2, r3, lsl #24
   d5336:	1219      	asrs	r1, r3, #8
   d5338:	0120      	lsls	r0, r4, #4
   d533a:	012b      	lsls	r3, r5, #4
   d533c:	ea43 7314 	orr.w	r3, r3, r4, lsr #28
    return (float)p/256;
   d5340:	1880      	adds	r0, r0, r2
   d5342:	eb43 0101 	adc.w	r1, r3, r1
   d5346:	f004 fce1 	bl	d9d0c <__aeabi_l2f>
   d534a:	ed9f 0a07 	vldr	s0, [pc, #28]	; d5368 <_ZN15Adafruit_BME28012readPressureEv+0x1a8>
   d534e:	ee07 0a90 	vmov	s15, r0
   d5352:	ee27 0a80 	vmul.f32	s0, s15, s0
}
   d5356:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
        return NAN;
   d535a:	ed9f 0a04 	vldr	s0, [pc, #16]	; d536c <_ZN15Adafruit_BME28012readPressureEv+0x1ac>
   d535e:	e7fa      	b.n	d5356 <_ZN15Adafruit_BME28012readPressureEv+0x196>
        return 0; // avoid exception caused by division by zero
   d5360:	ed9f 0a03 	vldr	s0, [pc, #12]	; d5370 <_ZN15Adafruit_BME28012readPressureEv+0x1b0>
   d5364:	e7f7      	b.n	d5356 <_ZN15Adafruit_BME28012readPressureEv+0x196>
   d5366:	bf00      	nop
   d5368:	3b800000 	.word	0x3b800000
   d536c:	7fc00000 	.word	0x7fc00000
	...

000d5378 <_ZN15Adafruit_BME28012readAltitudeEf>:
    @param  seaLevel      Sea-level pressure in hPa
    @returns the altitude value read from the device
*/
/**************************************************************************/
float Adafruit_BME280::readAltitude(float seaLevel)
{
   d5378:	b508      	push	{r3, lr}
   d537a:	ed2d 8b02 	vpush	{d8}
   d537e:	eeb0 8a40 	vmov.f32	s16, s0

    // Note that using the equation from wikipedia can give bad results
    // at high altitude. See this thread for more information:
    //  http://forums.adafruit.com/viewtopic.php?f=22&t=58064

    float atmospheric = readPressure() / 100.0F;
   d5382:	f7ff ff1d 	bl	d51c0 <_ZN15Adafruit_BME28012readPressureEv>
   d5386:	ed9f 7a16 	vldr	s14, [pc, #88]	; d53e0 <_ZN15Adafruit_BME28012readAltitudeEf+0x68>
   d538a:	eec0 7a07 	vdiv.f32	s15, s0, s14
   d538e:	eec7 7a88 	vdiv.f32	s15, s15, s16
   d5392:	ee17 0a90 	vmov	r0, s15
   d5396:	f004 f871 	bl	d947c <__aeabi_f2d>
   d539a:	ed9f 1b0d 	vldr	d1, [pc, #52]	; d53d0 <_ZN15Adafruit_BME28012readAltitudeEf+0x58>
   d539e:	ec41 0b10 	vmov	d0, r0, r1
   d53a2:	f002 fd0d 	bl	d7dc0 <pow>
    return 44330.0 * (1.0 - pow(atmospheric / seaLevel, 0.1903));
   d53a6:	490f      	ldr	r1, [pc, #60]	; (d53e4 <_ZN15Adafruit_BME28012readAltitudeEf+0x6c>)
   d53a8:	ec53 2b10 	vmov	r2, r3, d0
   d53ac:	2000      	movs	r0, #0
   d53ae:	f003 ff05 	bl	d91bc <__aeabi_dsub>
   d53b2:	a309      	add	r3, pc, #36	; (adr r3, d53d8 <_ZN15Adafruit_BME28012readAltitudeEf+0x60>)
   d53b4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d53b8:	f004 f8b8 	bl	d952c <__aeabi_dmul>
   d53bc:	f004 fb86 	bl	d9acc <__aeabi_d2f>
}
   d53c0:	ecbd 8b02 	vpop	{d8}
   d53c4:	ee00 0a10 	vmov	s0, r0
   d53c8:	bd08      	pop	{r3, pc}
   d53ca:	bf00      	nop
   d53cc:	f3af 8000 	nop.w
   d53d0:	1a36e2eb 	.word	0x1a36e2eb
   d53d4:	3fc85bc0 	.word	0x3fc85bc0
   d53d8:	00000000 	.word	0x00000000
   d53dc:	40e5a540 	.word	0x40e5a540
   d53e0:	42c80000 	.word	0x42c80000
   d53e4:	3ff00000 	.word	0x3ff00000

000d53e8 <_ZN15Adafruit_BME2806read16Eh>:
{
   d53e8:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d53ea:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d53ee:	3301      	adds	r3, #1
{
   d53f0:	b085      	sub	sp, #20
   d53f2:	4604      	mov	r4, r0
   d53f4:	460d      	mov	r5, r1
    if (_cs == -1) {
   d53f6:	d11f      	bne.n	d5438 <_ZN15Adafruit_BME2806read16Eh+0x50>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d53f8:	7901      	ldrb	r1, [r0, #4]
   d53fa:	6800      	ldr	r0, [r0, #0]
   d53fc:	f001 ff54 	bl	d72a8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5400:	6820      	ldr	r0, [r4, #0]
   d5402:	6803      	ldr	r3, [r0, #0]
   d5404:	4629      	mov	r1, r5
   d5406:	689b      	ldr	r3, [r3, #8]
   d5408:	4798      	blx	r3
        _wire -> endTransmission();
   d540a:	6820      	ldr	r0, [r4, #0]
   d540c:	f001 ff57 	bl	d72be <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d5410:	7921      	ldrb	r1, [r4, #4]
   d5412:	6820      	ldr	r0, [r4, #0]
   d5414:	2202      	movs	r2, #2
   d5416:	f001 ff44 	bl	d72a2 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d541a:	6820      	ldr	r0, [r4, #0]
   d541c:	6803      	ldr	r3, [r0, #0]
   d541e:	695b      	ldr	r3, [r3, #20]
   d5420:	4798      	blx	r3
   d5422:	4605      	mov	r5, r0
   d5424:	6820      	ldr	r0, [r4, #0]
   d5426:	6803      	ldr	r3, [r0, #0]
   d5428:	695b      	ldr	r3, [r3, #20]
   d542a:	4798      	blx	r3
   d542c:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5430:	b285      	uxth	r5, r0
}
   d5432:	4628      	mov	r0, r5
   d5434:	b005      	add	sp, #20
   d5436:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d5438:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d543c:	3301      	adds	r3, #1
   d543e:	d10c      	bne.n	d545a <_ZN15Adafruit_BME2806read16Eh+0x72>
   d5440:	4b18      	ldr	r3, [pc, #96]	; (d54a4 <_ZN15Adafruit_BME2806read16Eh+0xbc>)
   d5442:	9300      	str	r3, [sp, #0]
   d5444:	2300      	movs	r3, #0
   d5446:	f88d 3004 	strb.w	r3, [sp, #4]
   d544a:	4b17      	ldr	r3, [pc, #92]	; (d54a8 <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d544c:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d544e:	4668      	mov	r0, sp
   d5450:	2301      	movs	r3, #1
   d5452:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5456:	f7ff fe10 	bl	d507a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d545a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d545e:	2100      	movs	r1, #0
   d5460:	b280      	uxth	r0, r0
   d5462:	f002 fb22 	bl	d7aaa <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d5466:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d546a:	4620      	mov	r0, r4
   d546c:	f7ff fdc8 	bl	d5000 <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d5470:	2100      	movs	r1, #0
   d5472:	4620      	mov	r0, r4
   d5474:	f7ff fdc4 	bl	d5000 <_ZN15Adafruit_BME2807spixferEh>
   d5478:	2100      	movs	r1, #0
   d547a:	4605      	mov	r5, r0
   d547c:	4620      	mov	r0, r4
   d547e:	f7ff fdbf 	bl	d5000 <_ZN15Adafruit_BME2807spixferEh>
   d5482:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d5486:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d5488:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d548c:	2101      	movs	r1, #1
   d548e:	b280      	uxth	r0, r0
   d5490:	f002 fb0b 	bl	d7aaa <digitalWrite>
        if (_sck == -1)
   d5494:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d5498:	3301      	adds	r3, #1
   d549a:	d1ca      	bne.n	d5432 <_ZN15Adafruit_BME2806read16Eh+0x4a>
            SPI.endTransaction(); // release the SPI bus
   d549c:	f7ff fde6 	bl	d506c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d54a0:	e7c7      	b.n	d5432 <_ZN15Adafruit_BME2806read16Eh+0x4a>
   d54a2:	bf00      	nop
   d54a4:	000da534 	.word	0x000da534
   d54a8:	0007a120 	.word	0x0007a120

000d54ac <_ZN15Adafruit_BME2809read16_LEEh>:
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d54ac:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d54ae:	f7ff ff9b 	bl	d53e8 <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d54b2:	ba40      	rev16	r0, r0
}
   d54b4:	b280      	uxth	r0, r0
   d54b6:	bd08      	pop	{r3, pc}

000d54b8 <_ZN15Adafruit_BME28012readHumidityEv>:
float Adafruit_BME280::readHumidity(void) {
   d54b8:	b538      	push	{r3, r4, r5, lr}
   d54ba:	4604      	mov	r4, r0
    readTemperature(); // must be done first to get t_fine
   d54bc:	f7ff fe52 	bl	d5164 <_ZN15Adafruit_BME28015readTemperatureEv>
    int32_t adc_H = read16(BME280_REGISTER_HUMIDDATA);
   d54c0:	21fd      	movs	r1, #253	; 0xfd
   d54c2:	4620      	mov	r0, r4
   d54c4:	f7ff ff90 	bl	d53e8 <_ZN15Adafruit_BME2806read16Eh>
    if (adc_H == 0x8000) // value in case humidity measurement was disabled
   d54c8:	f5b0 4f00 	cmp.w	r0, #32768	; 0x8000
   d54cc:	d038      	beq.n	d5540 <_ZN15Adafruit_BME28012readHumidityEv+0x88>
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d54ce:	f9b4 5032 	ldrsh.w	r5, [r4, #50]	; 0x32
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d54d2:	68e2      	ldr	r2, [r4, #12]
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d54d4:	f9b4 3034 	ldrsh.w	r3, [r4, #52]	; 0x34
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d54d8:	052d      	lsls	r5, r5, #20
    v_x1_u32r = (t_fine - ((int32_t)76800));
   d54da:	f5a2 3296 	sub.w	r2, r2, #76800	; 0x12c00
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d54de:	ebc5 3080 	rsb	r0, r5, r0, lsl #14
   d54e2:	fb02 0313 	mls	r3, r2, r3, r0
                    (((int32_t)_bme280_calib.dig_H5) * v_x1_u32r)) + ((int32_t)16384)) >> 15) *
   d54e6:	f503 4380 	add.w	r3, r3, #16384	; 0x4000
   d54ea:	13d9      	asrs	r1, r3, #15
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d54ec:	f894 3030 	ldrb.w	r3, [r4, #48]	; 0x30
   d54f0:	4353      	muls	r3, r2
   d54f2:	12db      	asrs	r3, r3, #11
   d54f4:	f503 4000 	add.w	r0, r3, #32768	; 0x8000
                 (((((((v_x1_u32r * ((int32_t)_bme280_calib.dig_H6)) >> 10) *
   d54f8:	f994 3036 	ldrsb.w	r3, [r4, #54]	; 0x36
   d54fc:	4353      	muls	r3, r2
   d54fe:	129b      	asrs	r3, r3, #10
   d5500:	4343      	muls	r3, r0
                      (((v_x1_u32r * ((int32_t)_bme280_calib.dig_H3)) >> 11) + ((int32_t)32768))) >> 10) +
   d5502:	129b      	asrs	r3, r3, #10
   d5504:	f503 1200 	add.w	r2, r3, #2097152	; 0x200000
                    ((int32_t)2097152)) * ((int32_t)_bme280_calib.dig_H2) + 8192) >> 14));
   d5508:	f9b4 302e 	ldrsh.w	r3, [r4, #46]	; 0x2e
   d550c:	4353      	muls	r3, r2
   d550e:	f503 5300 	add.w	r3, r3, #8192	; 0x2000
   d5512:	139b      	asrs	r3, r3, #14
    v_x1_u32r = (((((adc_H << 14) - (((int32_t)_bme280_calib.dig_H4) << 20) -
   d5514:	434b      	muls	r3, r1
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d5516:	13da      	asrs	r2, r3, #15
                               ((int32_t)_bme280_calib.dig_H1)) >> 4));
   d5518:	f894 102c 	ldrb.w	r1, [r4, #44]	; 0x2c
    v_x1_u32r = (v_x1_u32r - (((((v_x1_u32r >> 15) * (v_x1_u32r >> 15)) >> 7) *
   d551c:	4352      	muls	r2, r2
   d551e:	11d2      	asrs	r2, r2, #7
   d5520:	434a      	muls	r2, r1
   d5522:	eba3 1322 	sub.w	r3, r3, r2, asr #4
    v_x1_u32r = (v_x1_u32r < 0) ? 0 : v_x1_u32r;
   d5526:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
    v_x1_u32r = (v_x1_u32r > 419430400) ? 419430400 : v_x1_u32r;
   d552a:	f1b3 5fc8 	cmp.w	r3, #419430400	; 0x19000000
   d552e:	bfa8      	it	ge
   d5530:	f04f 53c8 	movge.w	r3, #419430400	; 0x19000000
    float h = (v_x1_u32r>>12);
   d5534:	131b      	asrs	r3, r3, #12
   d5536:	ee00 3a10 	vmov	s0, r3
    return  h / 1024.0;
   d553a:	eeba 0acb 	vcvt.f32.s32	s0, s0, #10
}
   d553e:	bd38      	pop	{r3, r4, r5, pc}
        return NAN;
   d5540:	ed9f 0a01 	vldr	s0, [pc, #4]	; d5548 <_ZN15Adafruit_BME28012readHumidityEv+0x90>
   d5544:	e7fb      	b.n	d553e <_ZN15Adafruit_BME28012readHumidityEv+0x86>
   d5546:	bf00      	nop
   d5548:	7fc00000 	.word	0x7fc00000

000d554c <_ZN15Adafruit_BME2805read8Eh>:
uint8_t Adafruit_BME280::read8(byte reg) {
   d554c:	b530      	push	{r4, r5, lr}
    if (_cs == -1) {
   d554e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d5552:	3301      	adds	r3, #1
uint8_t Adafruit_BME280::read8(byte reg) {
   d5554:	b085      	sub	sp, #20
   d5556:	4604      	mov	r4, r0
   d5558:	460d      	mov	r5, r1
    if (_cs == -1) {
   d555a:	d118      	bne.n	d558e <_ZN15Adafruit_BME2805read8Eh+0x42>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d555c:	7901      	ldrb	r1, [r0, #4]
   d555e:	6800      	ldr	r0, [r0, #0]
   d5560:	f001 fea2 	bl	d72a8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d5564:	6820      	ldr	r0, [r4, #0]
   d5566:	6803      	ldr	r3, [r0, #0]
   d5568:	4629      	mov	r1, r5
   d556a:	689b      	ldr	r3, [r3, #8]
   d556c:	4798      	blx	r3
        _wire -> endTransmission();
   d556e:	6820      	ldr	r0, [r4, #0]
   d5570:	f001 fea5 	bl	d72be <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d5574:	7921      	ldrb	r1, [r4, #4]
   d5576:	6820      	ldr	r0, [r4, #0]
   d5578:	2201      	movs	r2, #1
   d557a:	f001 fe92 	bl	d72a2 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d557e:	6820      	ldr	r0, [r4, #0]
   d5580:	6803      	ldr	r3, [r0, #0]
   d5582:	695b      	ldr	r3, [r3, #20]
   d5584:	4798      	blx	r3
   d5586:	b2c5      	uxtb	r5, r0
}
   d5588:	4628      	mov	r0, r5
   d558a:	b005      	add	sp, #20
   d558c:	bd30      	pop	{r4, r5, pc}
        if (_sck == -1)
   d558e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d5592:	3301      	adds	r3, #1
   d5594:	d10c      	bne.n	d55b0 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d5596:	4b15      	ldr	r3, [pc, #84]	; (d55ec <_ZN15Adafruit_BME2805read8Eh+0xa0>)
   d5598:	9300      	str	r3, [sp, #0]
   d559a:	2300      	movs	r3, #0
   d559c:	f88d 3004 	strb.w	r3, [sp, #4]
   d55a0:	4b13      	ldr	r3, [pc, #76]	; (d55f0 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d55a2:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d55a4:	4668      	mov	r0, sp
   d55a6:	2301      	movs	r3, #1
   d55a8:	f8ad 300c 	strh.w	r3, [sp, #12]
   d55ac:	f7ff fd65 	bl	d507a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d55b0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d55b4:	2100      	movs	r1, #0
   d55b6:	b280      	uxth	r0, r0
   d55b8:	f002 fa77 	bl	d7aaa <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d55bc:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d55c0:	4620      	mov	r0, r4
   d55c2:	f7ff fd1d 	bl	d5000 <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d55c6:	2100      	movs	r1, #0
   d55c8:	4620      	mov	r0, r4
   d55ca:	f7ff fd19 	bl	d5000 <_ZN15Adafruit_BME2807spixferEh>
   d55ce:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d55d0:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d55d4:	2101      	movs	r1, #1
   d55d6:	b280      	uxth	r0, r0
   d55d8:	f002 fa67 	bl	d7aaa <digitalWrite>
        if (_sck == -1)
   d55dc:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d55e0:	3301      	adds	r3, #1
   d55e2:	d1d1      	bne.n	d5588 <_ZN15Adafruit_BME2805read8Eh+0x3c>
            SPI.endTransaction(); // release the SPI bus
   d55e4:	f7ff fd42 	bl	d506c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
   d55e8:	e7ce      	b.n	d5588 <_ZN15Adafruit_BME2805read8Eh+0x3c>
   d55ea:	bf00      	nop
   d55ec:	000da534 	.word	0x000da534
   d55f0:	0007a120 	.word	0x0007a120

000d55f4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
{
   d55f4:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d55f6:	21f3      	movs	r1, #243	; 0xf3
   d55f8:	f7ff ffa8 	bl	d554c <_ZN15Adafruit_BME2805read8Eh>
}
   d55fc:	f000 0001 	and.w	r0, r0, #1
   d5600:	bd08      	pop	{r3, pc}

000d5602 <_ZN15Adafruit_BME28016readCoefficientsEv>:
{
   d5602:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5604:	2188      	movs	r1, #136	; 0x88
{
   d5606:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d5608:	f7ff ff50 	bl	d54ac <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d560c:	218a      	movs	r1, #138	; 0x8a
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d560e:	82a0      	strh	r0, [r4, #20]
    return (int16_t)read16_LE(reg);
   d5610:	4620      	mov	r0, r4
   d5612:	f7ff ff4b 	bl	d54ac <_ZN15Adafruit_BME2809read16_LEEh>
   d5616:	218c      	movs	r1, #140	; 0x8c
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d5618:	82e0      	strh	r0, [r4, #22]
    return (int16_t)read16_LE(reg);
   d561a:	4620      	mov	r0, r4
   d561c:	f7ff ff46 	bl	d54ac <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5620:	218e      	movs	r1, #142	; 0x8e
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d5622:	8320      	strh	r0, [r4, #24]
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d5624:	4620      	mov	r0, r4
   d5626:	f7ff ff41 	bl	d54ac <_ZN15Adafruit_BME2809read16_LEEh>
    return (int16_t)read16_LE(reg);
   d562a:	2190      	movs	r1, #144	; 0x90
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d562c:	8360      	strh	r0, [r4, #26]
    return (int16_t)read16_LE(reg);
   d562e:	4620      	mov	r0, r4
   d5630:	f7ff ff3c 	bl	d54ac <_ZN15Adafruit_BME2809read16_LEEh>
   d5634:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d5636:	83a0      	strh	r0, [r4, #28]
    return (int16_t)read16_LE(reg);
   d5638:	4620      	mov	r0, r4
   d563a:	f7ff ff37 	bl	d54ac <_ZN15Adafruit_BME2809read16_LEEh>
   d563e:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d5640:	83e0      	strh	r0, [r4, #30]
    return (int16_t)read16_LE(reg);
   d5642:	4620      	mov	r0, r4
   d5644:	f7ff ff32 	bl	d54ac <_ZN15Adafruit_BME2809read16_LEEh>
   d5648:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d564a:	8420      	strh	r0, [r4, #32]
    return (int16_t)read16_LE(reg);
   d564c:	4620      	mov	r0, r4
   d564e:	f7ff ff2d 	bl	d54ac <_ZN15Adafruit_BME2809read16_LEEh>
   d5652:	2198      	movs	r1, #152	; 0x98
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d5654:	8460      	strh	r0, [r4, #34]	; 0x22
    return (int16_t)read16_LE(reg);
   d5656:	4620      	mov	r0, r4
   d5658:	f7ff ff28 	bl	d54ac <_ZN15Adafruit_BME2809read16_LEEh>
   d565c:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d565e:	84a0      	strh	r0, [r4, #36]	; 0x24
    return (int16_t)read16_LE(reg);
   d5660:	4620      	mov	r0, r4
   d5662:	f7ff ff23 	bl	d54ac <_ZN15Adafruit_BME2809read16_LEEh>
   d5666:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d5668:	84e0      	strh	r0, [r4, #38]	; 0x26
    return (int16_t)read16_LE(reg);
   d566a:	4620      	mov	r0, r4
   d566c:	f7ff ff1e 	bl	d54ac <_ZN15Adafruit_BME2809read16_LEEh>
   d5670:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d5672:	8520      	strh	r0, [r4, #40]	; 0x28
    return (int16_t)read16_LE(reg);
   d5674:	4620      	mov	r0, r4
   d5676:	f7ff ff19 	bl	d54ac <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d567a:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d567c:	8560      	strh	r0, [r4, #42]	; 0x2a
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d567e:	4620      	mov	r0, r4
   d5680:	f7ff ff64 	bl	d554c <_ZN15Adafruit_BME2805read8Eh>
    return (int16_t)read16_LE(reg);
   d5684:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d5686:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    return (int16_t)read16_LE(reg);
   d568a:	4620      	mov	r0, r4
   d568c:	f7ff ff0e 	bl	d54ac <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5690:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d5692:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d5694:	4620      	mov	r0, r4
   d5696:	f7ff ff59 	bl	d554c <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d569a:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d569c:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d56a0:	4620      	mov	r0, r4
   d56a2:	f7ff ff53 	bl	d554c <_ZN15Adafruit_BME2805read8Eh>
   d56a6:	21e5      	movs	r1, #229	; 0xe5
   d56a8:	4605      	mov	r5, r0
   d56aa:	4620      	mov	r0, r4
   d56ac:	f7ff ff4e 	bl	d554c <_ZN15Adafruit_BME2805read8Eh>
   d56b0:	f000 030f 	and.w	r3, r0, #15
   d56b4:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d56b8:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d56ba:	21e6      	movs	r1, #230	; 0xe6
   d56bc:	4620      	mov	r0, r4
   d56be:	f7ff ff45 	bl	d554c <_ZN15Adafruit_BME2805read8Eh>
   d56c2:	21e5      	movs	r1, #229	; 0xe5
   d56c4:	4605      	mov	r5, r0
   d56c6:	4620      	mov	r0, r4
   d56c8:	f7ff ff40 	bl	d554c <_ZN15Adafruit_BME2805read8Eh>
   d56cc:	1103      	asrs	r3, r0, #4
   d56ce:	ea43 1005 	orr.w	r0, r3, r5, lsl #4
   d56d2:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d56d4:	21e7      	movs	r1, #231	; 0xe7
   d56d6:	4620      	mov	r0, r4
   d56d8:	f7ff ff38 	bl	d554c <_ZN15Adafruit_BME2805read8Eh>
   d56dc:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
}
   d56e0:	bd38      	pop	{r3, r4, r5, pc}
	...

000d56e4 <_ZN15Adafruit_BME2806write8Ehh>:
void Adafruit_BME280::write8(byte reg, byte value) {
   d56e4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d56e6:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d56ea:	3301      	adds	r3, #1
void Adafruit_BME280::write8(byte reg, byte value) {
   d56ec:	4604      	mov	r4, r0
   d56ee:	460e      	mov	r6, r1
   d56f0:	4615      	mov	r5, r2
    if (_cs == -1) {
   d56f2:	d112      	bne.n	d571a <_ZN15Adafruit_BME2806write8Ehh+0x36>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d56f4:	7901      	ldrb	r1, [r0, #4]
   d56f6:	6800      	ldr	r0, [r0, #0]
   d56f8:	f001 fdd6 	bl	d72a8 <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d56fc:	6820      	ldr	r0, [r4, #0]
   d56fe:	6803      	ldr	r3, [r0, #0]
   d5700:	4631      	mov	r1, r6
   d5702:	689b      	ldr	r3, [r3, #8]
   d5704:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d5706:	6820      	ldr	r0, [r4, #0]
   d5708:	6803      	ldr	r3, [r0, #0]
   d570a:	4629      	mov	r1, r5
   d570c:	689b      	ldr	r3, [r3, #8]
   d570e:	4798      	blx	r3
        _wire -> endTransmission();
   d5710:	6820      	ldr	r0, [r4, #0]
   d5712:	f001 fdd4 	bl	d72be <_ZN7TwoWire15endTransmissionEv>
}
   d5716:	b004      	add	sp, #16
   d5718:	bd70      	pop	{r4, r5, r6, pc}
        if (_sck == -1)
   d571a:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d571e:	3301      	adds	r3, #1
   d5720:	d10c      	bne.n	d573c <_ZN15Adafruit_BME2806write8Ehh+0x58>
   d5722:	4b14      	ldr	r3, [pc, #80]	; (d5774 <_ZN15Adafruit_BME2806write8Ehh+0x90>)
   d5724:	9300      	str	r3, [sp, #0]
   d5726:	2300      	movs	r3, #0
   d5728:	f88d 3004 	strb.w	r3, [sp, #4]
   d572c:	4b12      	ldr	r3, [pc, #72]	; (d5778 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d572e:	9302      	str	r3, [sp, #8]
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d5730:	4668      	mov	r0, sp
   d5732:	2301      	movs	r3, #1
   d5734:	f8ad 300c 	strh.w	r3, [sp, #12]
   d5738:	f7ff fc9f 	bl	d507a <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE16beginTransactionERKNS_11SPISettingsE.isra.0.constprop.0>
        digitalWrite(_cs, LOW);
   d573c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d5740:	2100      	movs	r1, #0
   d5742:	b280      	uxth	r0, r0
   d5744:	f002 f9b1 	bl	d7aaa <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d5748:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d574c:	4620      	mov	r0, r4
   d574e:	f7ff fc57 	bl	d5000 <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d5752:	4629      	mov	r1, r5
   d5754:	4620      	mov	r0, r4
   d5756:	f7ff fc53 	bl	d5000 <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d575a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d575e:	2101      	movs	r1, #1
   d5760:	b280      	uxth	r0, r0
   d5762:	f002 f9a2 	bl	d7aaa <digitalWrite>
    if (_sck == -1)
   d5766:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d576a:	3301      	adds	r3, #1
   d576c:	d1d3      	bne.n	d5716 <_ZN15Adafruit_BME2806write8Ehh+0x32>
        SPI.endTransaction(); // release the SPI bus
   d576e:	f7ff fc7d 	bl	d506c <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE14endTransactionEv.isra.0>
}
   d5772:	e7d0      	b.n	d5716 <_ZN15Adafruit_BME2806write8Ehh+0x32>
   d5774:	000da534 	.word	0x000da534
   d5778:	0007a120 	.word	0x0007a120

000d577c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
		 standby_duration  duration) {
   d577c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.osrs_t   = tempSampling;
   d577e:	00db      	lsls	r3, r3, #3
   d5780:	f002 0207 	and.w	r2, r2, #7
   d5784:	f003 0338 	and.w	r3, r3, #56	; 0x38
   d5788:	4313      	orrs	r3, r2
   d578a:	ea43 1381 	orr.w	r3, r3, r1, lsl #6
		 standby_duration  duration) {
   d578e:	f89d 6018 	ldrb.w	r6, [sp, #24]
    _measReg.osrs_t   = tempSampling;
   d5792:	f880 303c 	strb.w	r3, [r0, #60]	; 0x3c
    _humReg.osrs_h    = humSampling;
   d5796:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 standby_duration  duration) {
   d579a:	f89d 501c 	ldrb.w	r5, [sp, #28]
   d579e:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _humReg.osrs_h    = humSampling;
   d57a2:	f366 1347 	bfi	r3, r6, #5, #3
   d57a6:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.t_sb   = duration;
   d57aa:	00ed      	lsls	r5, r5, #3
   d57ac:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d57b0:	f007 0707 	and.w	r7, r7, #7
   d57b4:	f005 0538 	and.w	r5, r5, #56	; 0x38
   d57b8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
   d57bc:	433d      	orrs	r5, r7
		 standby_duration  duration) {
   d57be:	4604      	mov	r4, r0
    _configReg.t_sb   = duration;
   d57c0:	431d      	orrs	r5, r3
   d57c2:	f880 5038 	strb.w	r5, [r0, #56]	; 0x38
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d57c6:	f006 0207 	and.w	r2, r6, #7
   d57ca:	21f2      	movs	r1, #242	; 0xf2
   d57cc:	f7ff ff8a 	bl	d56e4 <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d57d0:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
   d57d4:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d57d8:	f002 0107 	and.w	r1, r2, #7
   d57dc:	009b      	lsls	r3, r3, #2
   d57de:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d57e2:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d57e6:	4620      	mov	r0, r4
   d57e8:	21f5      	movs	r1, #245	; 0xf5
   d57ea:	f7ff ff7b 	bl	d56e4 <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d57ee:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
   d57f2:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d57f6:	f002 0107 	and.w	r1, r2, #7
   d57fa:	009b      	lsls	r3, r3, #2
   d57fc:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d5800:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d5804:	4620      	mov	r0, r4
   d5806:	21f4      	movs	r1, #244	; 0xf4
}
   d5808:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d580c:	f7ff bf6a 	b.w	d56e4 <_ZN15Adafruit_BME2806write8Ehh>

000d5810 <_ZN15Adafruit_BME2804initEv>:
{
   d5810:	b530      	push	{r4, r5, lr}
   d5812:	4604      	mov	r4, r0
    if (_cs == -1) {
   d5814:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d5818:	1c42      	adds	r2, r0, #1
{
   d581a:	b085      	sub	sp, #20
    if (_cs == -1) {
   d581c:	d119      	bne.n	d5852 <_ZN15Adafruit_BME2804initEv+0x42>
        _wire -> begin();
   d581e:	6820      	ldr	r0, [r4, #0]
   d5820:	f001 fd10 	bl	d7244 <_ZN7TwoWire5beginEv>
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d5824:	21d0      	movs	r1, #208	; 0xd0
   d5826:	4620      	mov	r0, r4
   d5828:	f7ff fe90 	bl	d554c <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d582c:	2860      	cmp	r0, #96	; 0x60
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d582e:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d5830:	d145      	bne.n	d58be <_ZN15Adafruit_BME2804initEv+0xae>
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d5832:	4620      	mov	r0, r4
   d5834:	22b6      	movs	r2, #182	; 0xb6
   d5836:	21e0      	movs	r1, #224	; 0xe0
   d5838:	f7ff ff54 	bl	d56e4 <_ZN15Adafruit_BME2806write8Ehh>
    delay(300);
   d583c:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d5840:	f001 fa7c 	bl	d6d3c <delay>
    while (isReadingCalibration())
   d5844:	4620      	mov	r0, r4
   d5846:	f7ff fed5 	bl	d55f4 <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d584a:	4605      	mov	r5, r0
   d584c:	b328      	cbz	r0, d589a <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d584e:	2064      	movs	r0, #100	; 0x64
   d5850:	e7f6      	b.n	d5840 <_ZN15Adafruit_BME2804initEv+0x30>
        digitalWrite(_cs, HIGH);
   d5852:	2101      	movs	r1, #1
   d5854:	b280      	uxth	r0, r0
   d5856:	f002 f928 	bl	d7aaa <digitalWrite>
        pinMode(_cs, OUTPUT);
   d585a:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d585e:	2101      	movs	r1, #1
   d5860:	b280      	uxth	r0, r0
   d5862:	f002 f911 	bl	d7a88 <pinMode>
        if (_sck == -1) {
   d5866:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d586a:	1c43      	adds	r3, r0, #1
   d586c:	d104      	bne.n	d5878 <_ZN15Adafruit_BME2804initEv+0x68>
        instance().begin();
   d586e:	f7ff fbab 	bl	d4fc8 <_ZN8particle8SpiProxyIL19hal_spi_interface_t0EE8instanceEv>
   d5872:	f000 fe51 	bl	d6518 <_ZN8SPIClass5beginEv>
    }
   d5876:	e7d5      	b.n	d5824 <_ZN15Adafruit_BME2804initEv+0x14>
            pinMode(_sck, OUTPUT);
   d5878:	2101      	movs	r1, #1
   d587a:	b280      	uxth	r0, r0
   d587c:	f002 f904 	bl	d7a88 <pinMode>
            pinMode(_mosi, OUTPUT);
   d5880:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d5884:	2101      	movs	r1, #1
   d5886:	b280      	uxth	r0, r0
   d5888:	f002 f8fe 	bl	d7a88 <pinMode>
            pinMode(_miso, INPUT);
   d588c:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d5890:	2100      	movs	r1, #0
   d5892:	b280      	uxth	r0, r0
   d5894:	f002 f8f8 	bl	d7a88 <pinMode>
   d5898:	e7c4      	b.n	d5824 <_ZN15Adafruit_BME2804initEv+0x14>
    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d589a:	4620      	mov	r0, r4
   d589c:	f7ff feb1 	bl	d5602 <_ZN15Adafruit_BME28016readCoefficientsEv>
    setSampling(); // use defaults
   d58a0:	2305      	movs	r3, #5
   d58a2:	9300      	str	r3, [sp, #0]
   d58a4:	461a      	mov	r2, r3
   d58a6:	2103      	movs	r1, #3
   d58a8:	4620      	mov	r0, r4
   d58aa:	e9cd 5501 	strd	r5, r5, [sp, #4]
   d58ae:	f7ff ff65 	bl	d577c <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>
    delay(100);
   d58b2:	2064      	movs	r0, #100	; 0x64
   d58b4:	f001 fa42 	bl	d6d3c <delay>
   d58b8:	2001      	movs	r0, #1
}
   d58ba:	b005      	add	sp, #20
   d58bc:	bd30      	pop	{r4, r5, pc}
        return false;
   d58be:	2000      	movs	r0, #0
   d58c0:	e7fb      	b.n	d58ba <_ZN15Adafruit_BME2804initEv+0xaa>

000d58c2 <_ZN15Adafruit_BME2805beginEv>:
    _i2caddr = BME280_ADDRESS;
   d58c2:	2377      	movs	r3, #119	; 0x77
{
   d58c4:	b510      	push	{r4, lr}
    _i2caddr = BME280_ADDRESS;
   d58c6:	7103      	strb	r3, [r0, #4]
{
   d58c8:	4604      	mov	r4, r0
	_wire = &Wire;
   d58ca:	f002 f933 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d58ce:	6020      	str	r0, [r4, #0]
	status = init();
   d58d0:	4620      	mov	r0, r4
   d58d2:	f7ff ff9d 	bl	d5810 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d58d6:	b930      	cbnz	r0, d58e6 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d58d8:	2376      	movs	r3, #118	; 0x76
   d58da:	7123      	strb	r3, [r4, #4]
 		status = init();
   d58dc:	4620      	mov	r0, r4
}
   d58de:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 		status = init();
   d58e2:	f7ff bf95 	b.w	d5810 <_ZN15Adafruit_BME2804initEv>
}
   d58e6:	bd10      	pop	{r4, pc}

000d58e8 <_ZN15ThingSpeakClassD1Ev>:
class ThingSpeakClass
   d58e8:	b570      	push	{r4, r5, r6, lr}
   d58ea:	4604      	mov	r4, r0
   d58ec:	30c8      	adds	r0, #200	; 0xc8
   d58ee:	f000 ff7f 	bl	d67f0 <_ZN6StringD1Ev>
   d58f2:	f104 00b8 	add.w	r0, r4, #184	; 0xb8
   d58f6:	f000 ff7b 	bl	d67f0 <_ZN6StringD1Ev>
   d58fa:	f104 00a8 	add.w	r0, r4, #168	; 0xa8
   d58fe:	f000 ff77 	bl	d67f0 <_ZN6StringD1Ev>
   d5902:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d5906:	f000 ff73 	bl	d67f0 <_ZN6StringD1Ev>
   d590a:	f104 0588 	add.w	r5, r4, #136	; 0x88
   d590e:	f104 0608 	add.w	r6, r4, #8
   d5912:	42b5      	cmp	r5, r6
   d5914:	d004      	beq.n	d5920 <_ZN15ThingSpeakClassD1Ev+0x38>
   d5916:	3d10      	subs	r5, #16
   d5918:	4628      	mov	r0, r5
   d591a:	f000 ff69 	bl	d67f0 <_ZN6StringD1Ev>
   d591e:	e7f8      	b.n	d5912 <_ZN15ThingSpeakClassD1Ev+0x2a>
   d5920:	4620      	mov	r0, r4
   d5922:	bd70      	pop	{r4, r5, r6, pc}

000d5924 <_ZN15ThingSpeakClassC1Ev>:
	ThingSpeakClass()
   d5924:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
	{
   d5928:	2200      	movs	r2, #0
   d592a:	2350      	movs	r3, #80	; 0x50
   d592c:	e9c0 2300 	strd	r2, r3, [r0]
   d5930:	f100 0508 	add.w	r5, r0, #8
   d5934:	4f24      	ldr	r7, [pc, #144]	; (d59c8 <_ZN15ThingSpeakClassC1Ev+0xa4>)
	ThingSpeakClass()
   d5936:	4604      	mov	r4, r0
   d5938:	f100 0a88 	add.w	sl, r0, #136	; 0x88
	{
   d593c:	462e      	mov	r6, r5
   d593e:	4630      	mov	r0, r6
   d5940:	4639      	mov	r1, r7
   d5942:	3610      	adds	r6, #16
   d5944:	f000 ff9f 	bl	d6886 <_ZN6StringC1EPKc>
   d5948:	4556      	cmp	r6, sl
   d594a:	d1f8      	bne.n	d593e <_ZN15ThingSpeakClassC1Ev+0x1a>
   d594c:	f104 0998 	add.w	r9, r4, #152	; 0x98
   d5950:	491d      	ldr	r1, [pc, #116]	; (d59c8 <_ZN15ThingSpeakClassC1Ev+0xa4>)
			this->nextWriteField[iField] = "";
   d5952:	f8df b074 	ldr.w	fp, [pc, #116]	; d59c8 <_ZN15ThingSpeakClassC1Ev+0xa4>
	{
   d5956:	4648      	mov	r0, r9
   d5958:	f104 08a8 	add.w	r8, r4, #168	; 0xa8
   d595c:	f000 ff93 	bl	d6886 <_ZN6StringC1EPKc>
   d5960:	f104 07b8 	add.w	r7, r4, #184	; 0xb8
   d5964:	4918      	ldr	r1, [pc, #96]	; (d59c8 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d5966:	4640      	mov	r0, r8
   d5968:	f000 ff8d 	bl	d6886 <_ZN6StringC1EPKc>
   d596c:	f104 06c8 	add.w	r6, r4, #200	; 0xc8
   d5970:	4915      	ldr	r1, [pc, #84]	; (d59c8 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d5972:	4638      	mov	r0, r7
   d5974:	f000 ff87 	bl	d6886 <_ZN6StringC1EPKc>
   d5978:	4913      	ldr	r1, [pc, #76]	; (d59c8 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d597a:	4630      	mov	r0, r6
   d597c:	f000 ff83 	bl	d6886 <_ZN6StringC1EPKc>
			this->nextWriteField[iField] = "";
   d5980:	4628      	mov	r0, r5
   d5982:	4659      	mov	r1, fp
   d5984:	3510      	adds	r5, #16
   d5986:	f000 ffd1 	bl	d692c <_ZN6StringaSEPKc>
		for(size_t iField = 0; iField < 8; iField++)
   d598a:	4555      	cmp	r5, sl
   d598c:	d1f8      	bne.n	d5980 <_ZN15ThingSpeakClassC1Ev+0x5c>
		this->nextWriteLatitude = NAN;
   d598e:	4b0f      	ldr	r3, [pc, #60]	; (d59cc <_ZN15ThingSpeakClassC1Ev+0xa8>)
   d5990:	f8c4 3088 	str.w	r3, [r4, #136]	; 0x88
		this->nextWriteLongitude = NAN;
   d5994:	f8c4 308c 	str.w	r3, [r4, #140]	; 0x8c
		this->nextWriteElevation = NAN;
   d5998:	f8c4 3090 	str.w	r3, [r4, #144]	; 0x90
		this->nextWriteStatus = "";
   d599c:	490a      	ldr	r1, [pc, #40]	; (d59c8 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d599e:	4648      	mov	r0, r9
   d59a0:	f000 ffc4 	bl	d692c <_ZN6StringaSEPKc>
		this->nextWriteTwitter = "";
   d59a4:	4908      	ldr	r1, [pc, #32]	; (d59c8 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d59a6:	4640      	mov	r0, r8
   d59a8:	f000 ffc0 	bl	d692c <_ZN6StringaSEPKc>
		this->nextWriteTweet = "";
   d59ac:	4906      	ldr	r1, [pc, #24]	; (d59c8 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d59ae:	4638      	mov	r0, r7
   d59b0:	f000 ffbc 	bl	d692c <_ZN6StringaSEPKc>
		this->nextWriteCreatedAt = "";
   d59b4:	4904      	ldr	r1, [pc, #16]	; (d59c8 <_ZN15ThingSpeakClassC1Ev+0xa4>)
   d59b6:	4630      	mov	r0, r6
   d59b8:	f000 ffb8 	bl	d692c <_ZN6StringaSEPKc>
	    this->lastReadStatus = OK_SUCCESS;
   d59bc:	23c8      	movs	r3, #200	; 0xc8
   d59be:	f8c4 3094 	str.w	r3, [r4, #148]	; 0x94
	};
   d59c2:	4620      	mov	r0, r4
   d59c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d59c8:	000da492 	.word	0x000da492
   d59cc:	7fc00000 	.word	0x7fc00000

000d59d0 <_GLOBAL__sub_I_ThingSpeak>:
 
  See the accompaning licence file for licensing information.
*/

#include "ThingSpeak.h"
ThingSpeakClass ThingSpeak;
   d59d0:	b510      	push	{r4, lr}
   d59d2:	4c05      	ldr	r4, [pc, #20]	; (d59e8 <_GLOBAL__sub_I_ThingSpeak+0x18>)
   d59d4:	4620      	mov	r0, r4
   d59d6:	f7ff ffa5 	bl	d5924 <_ZN15ThingSpeakClassC1Ev>
   d59da:	4620      	mov	r0, r4
   d59dc:	4a03      	ldr	r2, [pc, #12]	; (d59ec <_GLOBAL__sub_I_ThingSpeak+0x1c>)
   d59de:	4904      	ldr	r1, [pc, #16]	; (d59f0 <_GLOBAL__sub_I_ThingSpeak+0x20>)
   d59e0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   d59e4:	f002 b8ce 	b.w	d7b84 <__aeabi_atexit>
   d59e8:	2003e578 	.word	0x2003e578
   d59ec:	2003e404 	.word	0x2003e404
   d59f0:	000d58e9 	.word	0x000d58e9

000d59f4 <_ZN11TinyGPSPlusC1Ev>:
   const RawDegrees &rawLat()     { updated = false; return rawLatData; }
   const RawDegrees &rawLng()     { updated = false; return rawLngData; }
   double lat();
   double lng();

   TinyGPSLocation() : valid(false), updated(false)
   d59f4:	2200      	movs	r2, #0
  ,  customElts(0)
  ,  customCandidates(0)
  ,  encodedCharCount(0)
  ,  sentencesWithFixCount(0)
  ,  failedChecksumCount(0)
  ,  passedChecksumCount(0)
   d59f6:	2102      	movs	r1, #2
   d59f8:	e9c0 2230 	strd	r2, r2, [r0, #192]	; 0xc0
   d59fc:	8002      	strh	r2, [r0, #0]
   RawDegrees() : deg(0), billionths(0), negative(false)
   d59fe:	8082      	strh	r2, [r0, #4]
   d5a00:	6082      	str	r2, [r0, #8]
   d5a02:	7302      	strb	r2, [r0, #12]
   d5a04:	8202      	strh	r2, [r0, #16]
   d5a06:	6142      	str	r2, [r0, #20]
   d5a08:	7602      	strb	r2, [r0, #24]
   d5a0a:	8382      	strh	r2, [r0, #28]
   d5a0c:	6202      	str	r2, [r0, #32]
   d5a0e:	f880 2024 	strb.w	r2, [r0, #36]	; 0x24
   d5a12:	8502      	strh	r2, [r0, #40]	; 0x28
   d5a14:	62c2      	str	r2, [r0, #44]	; 0x2c
   d5a16:	f880 2030 	strb.w	r2, [r0, #48]	; 0x30
   uint32_t value()           { updated = false; return date; }
   uint16_t year();
   uint8_t month();
   uint8_t day();

   TinyGPSDate() : valid(false), updated(false), date(0)
   d5a1a:	8702      	strh	r2, [r0, #56]	; 0x38
   d5a1c:	63c2      	str	r2, [r0, #60]	; 0x3c
   uint8_t hour();
   uint8_t minute();
   uint8_t second();
   uint8_t centisecond();

   TinyGPSTime() : valid(false), updated(false), time(0)
   d5a1e:	f8a0 2048 	strh.w	r2, [r0, #72]	; 0x48
   d5a22:	64c2      	str	r2, [r0, #76]	; 0x4c
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   int32_t value()         { updated = false; return val; }

   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d5a24:	f8a0 2058 	strh.w	r2, [r0, #88]	; 0x58
   d5a28:	6602      	str	r2, [r0, #96]	; 0x60
   d5a2a:	f8a0 2068 	strh.w	r2, [r0, #104]	; 0x68
   d5a2e:	6702      	str	r2, [r0, #112]	; 0x70
   d5a30:	f8a0 2078 	strh.w	r2, [r0, #120]	; 0x78
   d5a34:	f8c0 2080 	str.w	r2, [r0, #128]	; 0x80
   bool isValid() const    { return valid; }
   bool isUpdated() const  { return updated; }
   uint32_t age() const    { return valid ? millis() - lastCommitTime : (uint32_t)ULONG_MAX; }
   uint32_t value()        { updated = false; return val; }

   TinyGPSInteger() : valid(false), updated(false), val(0)
   d5a38:	f8a0 2088 	strh.w	r2, [r0, #136]	; 0x88
   d5a3c:	f8c0 2090 	str.w	r2, [r0, #144]	; 0x90
   TinyGPSDecimal() : valid(false), updated(false), val(0)
   d5a40:	f8a0 2098 	strh.w	r2, [r0, #152]	; 0x98
   d5a44:	f8c0 20a0 	str.w	r2, [r0, #160]	; 0xa0
   d5a48:	f880 10b9 	strb.w	r1, [r0, #185]	; 0xb9
   d5a4c:	f8a0 20ba 	strh.w	r2, [r0, #186]	; 0xba
   d5a50:	f880 20bc 	strb.w	r2, [r0, #188]	; 0xbc
   d5a54:	e9c0 2232 	strd	r2, r2, [r0, #200]	; 0xc8
   d5a58:	e9c0 2234 	strd	r2, r2, [r0, #208]	; 0xd0
   d5a5c:	f8a0 20a8 	strh.w	r2, [r0, #168]	; 0xa8
{
  term[0] = '\0';
   d5a60:	f880 20aa 	strb.w	r2, [r0, #170]	; 0xaa
}
   d5a64:	4770      	bx	lr

000d5a66 <_ZN11TinyGPSPlus7fromHexEc>:
//
// internal utilities
//
int TinyGPSPlus::fromHex(char a)
{
  if (a >= 'A' && a <= 'F')
   d5a66:	f1a1 0341 	sub.w	r3, r1, #65	; 0x41
   d5a6a:	2b05      	cmp	r3, #5
   d5a6c:	d802      	bhi.n	d5a74 <_ZN11TinyGPSPlus7fromHexEc+0xe>
    return a - 'A' + 10;
   d5a6e:	f1a1 0037 	sub.w	r0, r1, #55	; 0x37
   d5a72:	4770      	bx	lr
  else if (a >= 'a' && a <= 'f')
   d5a74:	f1a1 0361 	sub.w	r3, r1, #97	; 0x61
   d5a78:	2b05      	cmp	r3, #5
    return a - 'a' + 10;
   d5a7a:	bf94      	ite	ls
   d5a7c:	f1a1 0057 	subls.w	r0, r1, #87	; 0x57
  else
    return a - '0';
   d5a80:	f1a1 0030 	subhi.w	r0, r1, #48	; 0x30
}
   d5a84:	4770      	bx	lr

000d5a86 <_ZN11TinyGPSPlus12parseDecimalEPKc>:

// static
// Parse a (potentially negative) number with up to 2 decimal digits -xxxx.yy
int32_t TinyGPSPlus::parseDecimal(const char *term)
{
   d5a86:	b538      	push	{r3, r4, r5, lr}
  bool negative = *term == '-';
   d5a88:	7805      	ldrb	r5, [r0, #0]
{
   d5a8a:	4604      	mov	r4, r0
  if (negative) ++term;
   d5a8c:	2d2d      	cmp	r5, #45	; 0x2d
   d5a8e:	bf08      	it	eq
   d5a90:	3401      	addeq	r4, #1
  int32_t ret = 100 * (int32_t)atol(term);
   d5a92:	4620      	mov	r0, r4
   d5a94:	f004 fb62 	bl	da15c <atol>
   d5a98:	2364      	movs	r3, #100	; 0x64
   d5a9a:	4358      	muls	r0, r3
   d5a9c:	4622      	mov	r2, r4
  while (isdigit(*term)) ++term;
   d5a9e:	f814 3b01 	ldrb.w	r3, [r4], #1
   d5aa2:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
   d5aa6:	2909      	cmp	r1, #9
   d5aa8:	d9f8      	bls.n	d5a9c <_ZN11TinyGPSPlus12parseDecimalEPKc+0x16>
  if (*term == '.' && isdigit(term[1]))
   d5aaa:	2b2e      	cmp	r3, #46	; 0x2e
   d5aac:	d10b      	bne.n	d5ac6 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
   d5aae:	7853      	ldrb	r3, [r2, #1]
   d5ab0:	3b30      	subs	r3, #48	; 0x30
   d5ab2:	2b09      	cmp	r3, #9
   d5ab4:	d807      	bhi.n	d5ac6 <_ZN11TinyGPSPlus12parseDecimalEPKc+0x40>
  {
    ret += 10 * (term[1] - '0');
   d5ab6:	210a      	movs	r1, #10
   d5ab8:	fb01 0003 	mla	r0, r1, r3, r0
    if (isdigit(term[2]))
   d5abc:	7893      	ldrb	r3, [r2, #2]
   d5abe:	3b30      	subs	r3, #48	; 0x30
   d5ac0:	2b09      	cmp	r3, #9
      ret += term[2] - '0';
   d5ac2:	bf98      	it	ls
   d5ac4:	18c0      	addls	r0, r0, r3
  }
  return negative ? -ret : ret;
   d5ac6:	2d2d      	cmp	r5, #45	; 0x2d
   d5ac8:	bf08      	it	eq
   d5aca:	4240      	negeq	r0, r0
}
   d5acc:	bd38      	pop	{r3, r4, r5, pc}
	...

000d5ad0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>:

// static
// Parse degrees in that funny NMEA format DDMM.MMMM
void TinyGPSPlus::parseDegrees(const char *term, RawDegrees &deg)
{
   d5ad0:	b538      	push	{r3, r4, r5, lr}
   d5ad2:	460d      	mov	r5, r1
   d5ad4:	4604      	mov	r4, r0
  uint32_t leftOfDecimal = (uint32_t)atol(term);
   d5ad6:	f004 fb41 	bl	da15c <atol>
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d5ada:	2264      	movs	r2, #100	; 0x64
  uint32_t multiplier = 10000000UL;
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d5adc:	4b13      	ldr	r3, [pc, #76]	; (d5b2c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
  uint16_t minutes = (uint16_t)(leftOfDecimal % 100);
   d5ade:	fbb0 f1f2 	udiv	r1, r0, r2
   d5ae2:	fb02 0011 	mls	r0, r2, r1, r0
  uint32_t tenMillionthsOfMinutes = minutes * multiplier;
   d5ae6:	4343      	muls	r3, r0

  deg.deg = (int16_t)(leftOfDecimal / 100);
   d5ae8:	8029      	strh	r1, [r5, #0]
   d5aea:	4620      	mov	r0, r4

  while (isdigit(*term))
   d5aec:	7802      	ldrb	r2, [r0, #0]
   d5aee:	f1a2 0430 	sub.w	r4, r2, #48	; 0x30
   d5af2:	2c09      	cmp	r4, #9
   d5af4:	4601      	mov	r1, r0
   d5af6:	f100 0001 	add.w	r0, r0, #1
   d5afa:	d9f7      	bls.n	d5aec <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x1c>
    ++term;

  if (*term == '.')
   d5afc:	2a2e      	cmp	r2, #46	; 0x2e
   d5afe:	d10b      	bne.n	d5b18 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
  uint32_t multiplier = 10000000UL;
   d5b00:	480a      	ldr	r0, [pc, #40]	; (d5b2c <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x5c>)
    while (isdigit(*++term))
    {
      multiplier /= 10;
   d5b02:	240a      	movs	r4, #10
    while (isdigit(*++term))
   d5b04:	f811 2f01 	ldrb.w	r2, [r1, #1]!
   d5b08:	3a30      	subs	r2, #48	; 0x30
   d5b0a:	2a09      	cmp	r2, #9
   d5b0c:	d804      	bhi.n	d5b18 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x48>
      multiplier /= 10;
   d5b0e:	fbb0 f0f4 	udiv	r0, r0, r4
      tenMillionthsOfMinutes += (*term - '0') * multiplier;
   d5b12:	fb00 3302 	mla	r3, r0, r2, r3
    while (isdigit(*++term))
   d5b16:	e7f5      	b.n	d5b04 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees+0x34>
    }

  deg.billionths = (5 * tenMillionthsOfMinutes + 1) / 3;
   d5b18:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   d5b1c:	3301      	adds	r3, #1
   d5b1e:	2203      	movs	r2, #3
   d5b20:	fbb3 f3f2 	udiv	r3, r3, r2
   d5b24:	606b      	str	r3, [r5, #4]
  deg.negative = false;
   d5b26:	2300      	movs	r3, #0
   d5b28:	722b      	strb	r3, [r5, #8]
}
   d5b2a:	bd38      	pop	{r3, r4, r5, pc}
   d5b2c:	00989680 	.word	0x00989680

000d5b30 <_ZN15TinyGPSLocation6commitEv>:
  int direction = (int)((course + 11.25f) / 22.5f);
  return directions[direction % 16];
}

void TinyGPSLocation::commit()
{
   d5b30:	b510      	push	{r4, lr}
   rawLatData = rawNewLatData;
   d5b32:	4603      	mov	r3, r0
{
   d5b34:	4604      	mov	r4, r0
   rawLatData = rawNewLatData;
   d5b36:	f853 2f1c 	ldr.w	r2, [r3, #28]!
   d5b3a:	6042      	str	r2, [r0, #4]
   d5b3c:	685a      	ldr	r2, [r3, #4]
   d5b3e:	6082      	str	r2, [r0, #8]
   d5b40:	7a1b      	ldrb	r3, [r3, #8]
   d5b42:	7303      	strb	r3, [r0, #12]
   rawLngData = rawNewLngData;
   d5b44:	4603      	mov	r3, r0
   d5b46:	f853 2f28 	ldr.w	r2, [r3, #40]!
   d5b4a:	6102      	str	r2, [r0, #16]
   d5b4c:	685a      	ldr	r2, [r3, #4]
   d5b4e:	6142      	str	r2, [r0, #20]
   d5b50:	7a1b      	ldrb	r3, [r3, #8]
   d5b52:	7603      	strb	r3, [r0, #24]
   d5b54:	f000 fa5e 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5b58:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5b5c:	6360      	str	r0, [r4, #52]	; 0x34
   valid = updated = true;
   d5b5e:	8023      	strh	r3, [r4, #0]
}
   d5b60:	bd10      	pop	{r4, pc}
   d5b62:	0000      	movs	r0, r0
   d5b64:	0000      	movs	r0, r0
	...

000d5b68 <_ZN15TinyGPSLocation3latEv>:
{
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
}

double TinyGPSLocation::lat()
{
   d5b68:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5b6a:	2300      	movs	r3, #0
{
   d5b6c:	4604      	mov	r4, r0
   updated = false;
   d5b6e:	7043      	strb	r3, [r0, #1]
   double ret = rawLatData.deg + rawLatData.billionths / 1000000000.0;
   d5b70:	6880      	ldr	r0, [r0, #8]
   d5b72:	f003 fc61 	bl	d9438 <__aeabi_ui2d>
   d5b76:	a30c      	add	r3, pc, #48	; (adr r3, d5ba8 <_ZN15TinyGPSLocation3latEv+0x40>)
   d5b78:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5b7c:	f003 fe00 	bl	d9780 <__aeabi_ddiv>
   d5b80:	4606      	mov	r6, r0
   d5b82:	88a0      	ldrh	r0, [r4, #4]
   d5b84:	460f      	mov	r7, r1
   d5b86:	f003 fc67 	bl	d9458 <__aeabi_i2d>
   d5b8a:	460b      	mov	r3, r1
   d5b8c:	4602      	mov	r2, r0
   d5b8e:	4639      	mov	r1, r7
   d5b90:	4630      	mov	r0, r6
   d5b92:	f003 fb15 	bl	d91c0 <__adddf3>
   return rawLatData.negative ? -ret : ret;
   d5b96:	7b23      	ldrb	r3, [r4, #12]
   d5b98:	b113      	cbz	r3, d5ba0 <_ZN15TinyGPSLocation3latEv+0x38>
   d5b9a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5b9e:	4619      	mov	r1, r3
}
   d5ba0:	ec41 0b10 	vmov	d0, r0, r1
   d5ba4:	bdd0      	pop	{r4, r6, r7, pc}
   d5ba6:	bf00      	nop
   d5ba8:	00000000 	.word	0x00000000
   d5bac:	41cdcd65 	.word	0x41cdcd65

000d5bb0 <_ZN15TinyGPSLocation3lngEv>:

double TinyGPSLocation::lng()
{
   d5bb0:	b5d0      	push	{r4, r6, r7, lr}
   updated = false;
   d5bb2:	2300      	movs	r3, #0
{
   d5bb4:	4604      	mov	r4, r0
   updated = false;
   d5bb6:	7043      	strb	r3, [r0, #1]
   double ret = rawLngData.deg + rawLngData.billionths / 1000000000.0;
   d5bb8:	6940      	ldr	r0, [r0, #20]
   d5bba:	f003 fc3d 	bl	d9438 <__aeabi_ui2d>
   d5bbe:	a30c      	add	r3, pc, #48	; (adr r3, d5bf0 <_ZN15TinyGPSLocation3lngEv+0x40>)
   d5bc0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d5bc4:	f003 fddc 	bl	d9780 <__aeabi_ddiv>
   d5bc8:	4606      	mov	r6, r0
   d5bca:	8a20      	ldrh	r0, [r4, #16]
   d5bcc:	460f      	mov	r7, r1
   d5bce:	f003 fc43 	bl	d9458 <__aeabi_i2d>
   d5bd2:	460b      	mov	r3, r1
   d5bd4:	4602      	mov	r2, r0
   d5bd6:	4639      	mov	r1, r7
   d5bd8:	4630      	mov	r0, r6
   d5bda:	f003 faf1 	bl	d91c0 <__adddf3>
   return rawLngData.negative ? -ret : ret;
   d5bde:	7e23      	ldrb	r3, [r4, #24]
   d5be0:	b113      	cbz	r3, d5be8 <_ZN15TinyGPSLocation3lngEv+0x38>
   d5be2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d5be6:	4619      	mov	r1, r3
}
   d5be8:	ec41 0b10 	vmov	d0, r0, r1
   d5bec:	bdd0      	pop	{r4, r6, r7, pc}
   d5bee:	bf00      	nop
   d5bf0:	00000000 	.word	0x00000000
   d5bf4:	41cdcd65 	.word	0x41cdcd65

000d5bf8 <_ZN11TinyGPSDate6commitEv>:

void TinyGPSDate::commit()
{
   d5bf8:	b510      	push	{r4, lr}
   date = newDate;
   d5bfa:	6883      	ldr	r3, [r0, #8]
   d5bfc:	6043      	str	r3, [r0, #4]
{
   d5bfe:	4604      	mov	r4, r0
   d5c00:	f000 fa08 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5c04:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5c08:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d5c0a:	8023      	strh	r3, [r4, #0]
}
   d5c0c:	bd10      	pop	{r4, pc}

000d5c0e <_ZN11TinyGPSTime6commitEv>:

void TinyGPSTime::commit()
{
   d5c0e:	b510      	push	{r4, lr}
   time = newTime;
   d5c10:	6883      	ldr	r3, [r0, #8]
   d5c12:	6043      	str	r3, [r0, #4]
{
   d5c14:	4604      	mov	r4, r0
   d5c16:	f000 f9fd 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5c1a:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5c1e:	60e0      	str	r0, [r4, #12]
   valid = updated = true;
   d5c20:	8023      	strh	r3, [r4, #0]
}
   d5c22:	bd10      	pop	{r4, pc}

000d5c24 <_ZN11TinyGPSTime7setTimeEPKc>:

void TinyGPSTime::setTime(const char *term)
{
   d5c24:	b510      	push	{r4, lr}
   d5c26:	4604      	mov	r4, r0
   newTime = (uint32_t)TinyGPSPlus::parseDecimal(term);
   d5c28:	4608      	mov	r0, r1
   d5c2a:	f7ff ff2c 	bl	d5a86 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d5c2e:	60a0      	str	r0, [r4, #8]
}
   d5c30:	bd10      	pop	{r4, pc}

000d5c32 <_ZN11TinyGPSDate7setDateEPKc>:

void TinyGPSDate::setDate(const char *term)
{
   d5c32:	b510      	push	{r4, lr}
   d5c34:	4604      	mov	r4, r0
   newDate = atol(term);
   d5c36:	4608      	mov	r0, r1
   d5c38:	f004 fa90 	bl	da15c <atol>
   d5c3c:	60a0      	str	r0, [r4, #8]
}
   d5c3e:	bd10      	pop	{r4, pc}

000d5c40 <_ZN14TinyGPSDecimal6commitEv>:
   updated = false;
   return time % 100;
}

void TinyGPSDecimal::commit()
{
   d5c40:	b510      	push	{r4, lr}
   val = newval;
   d5c42:	68c3      	ldr	r3, [r0, #12]
   d5c44:	6083      	str	r3, [r0, #8]
{
   d5c46:	4604      	mov	r4, r0
   d5c48:	f000 f9e4 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5c4c:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5c50:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d5c52:	8023      	strh	r3, [r4, #0]
}
   d5c54:	bd10      	pop	{r4, pc}

000d5c56 <_ZN14TinyGPSDecimal3setEPKc>:

void TinyGPSDecimal::set(const char *term)
{
   d5c56:	b510      	push	{r4, lr}
   d5c58:	4604      	mov	r4, r0
   newval = TinyGPSPlus::parseDecimal(term);
   d5c5a:	4608      	mov	r0, r1
   d5c5c:	f7ff ff13 	bl	d5a86 <_ZN11TinyGPSPlus12parseDecimalEPKc>
   d5c60:	60e0      	str	r0, [r4, #12]
}
   d5c62:	bd10      	pop	{r4, pc}

000d5c64 <_ZN14TinyGPSInteger6commitEv>:

void TinyGPSInteger::commit()
{
   d5c64:	b510      	push	{r4, lr}
   val = newval;
   d5c66:	68c3      	ldr	r3, [r0, #12]
   d5c68:	6083      	str	r3, [r0, #8]
{
   d5c6a:	4604      	mov	r4, r0
   d5c6c:	f000 f9d2 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5c70:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5c74:	6060      	str	r0, [r4, #4]
   valid = updated = true;
   d5c76:	8023      	strh	r3, [r4, #0]
}
   d5c78:	bd10      	pop	{r4, pc}

000d5c7a <_ZN14TinyGPSInteger3setEPKc>:

void TinyGPSInteger::set(const char *term)
{
   d5c7a:	b510      	push	{r4, lr}
   d5c7c:	4604      	mov	r4, r0
   newval = atol(term);
   d5c7e:	4608      	mov	r0, r1
   d5c80:	f004 fa6c 	bl	da15c <atol>
   d5c84:	60e0      	str	r0, [r4, #12]
}
   d5c86:	bd10      	pop	{r4, pc}

000d5c88 <_ZN13TinyGPSCustom6commitEv>:
   // Insert this item into the GPS tree
   gps.insertCustom(this, _sentenceName, _termNumber);
}

void TinyGPSCustom::commit()
{
   d5c88:	b510      	push	{r4, lr}
   strcpy(this->buffer, this->stagingBuffer);
   d5c8a:	4601      	mov	r1, r0
{
   d5c8c:	4604      	mov	r4, r0
   strcpy(this->buffer, this->stagingBuffer);
   d5c8e:	3010      	adds	r0, #16
   d5c90:	f004 fac9 	bl	da226 <strcpy>
   d5c94:	f000 f9be 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
   lastCommitTime = millis();
   valid = updated = true;
   d5c98:	f240 1301 	movw	r3, #257	; 0x101
   lastCommitTime = millis();
   d5c9c:	6220      	str	r0, [r4, #32]
   valid = updated = true;
   d5c9e:	84a3      	strh	r3, [r4, #36]	; 0x24
}
   d5ca0:	bd10      	pop	{r4, pc}

000d5ca2 <_ZN13TinyGPSCustom3setEPKc>:

void TinyGPSCustom::set(const char *term)
{
   strncpy(this->stagingBuffer, term, sizeof(this->stagingBuffer));
   d5ca2:	2210      	movs	r2, #16
   d5ca4:	f004 bacf 	b.w	da246 <strncpy>

000d5ca8 <_ZN11TinyGPSPlus16endOfTermHandlerEv>:
{
   d5ca8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
  if (isChecksumTerm)
   d5caa:	f890 50a9 	ldrb.w	r5, [r0, #169]	; 0xa9
{
   d5cae:	4604      	mov	r4, r0
  if (isChecksumTerm)
   d5cb0:	2d00      	cmp	r5, #0
   d5cb2:	d064      	beq.n	d5d7e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd6>
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d5cb4:	f890 10aa 	ldrb.w	r1, [r0, #170]	; 0xaa
   d5cb8:	f7ff fed5 	bl	d5a66 <_ZN11TinyGPSPlus7fromHexEc>
   d5cbc:	f894 10ab 	ldrb.w	r1, [r4, #171]	; 0xab
   d5cc0:	4602      	mov	r2, r0
   d5cc2:	4620      	mov	r0, r4
   d5cc4:	f7ff fecf 	bl	d5a66 <_ZN11TinyGPSPlus7fromHexEc>
    if (checksum == parity)
   d5cc8:	f894 30a8 	ldrb.w	r3, [r4, #168]	; 0xa8
    byte checksum = 16 * fromHex(term[0]) + fromHex(term[1]);
   d5ccc:	eb00 1002 	add.w	r0, r0, r2, lsl #4
    if (checksum == parity)
   d5cd0:	b2c0      	uxtb	r0, r0
   d5cd2:	4283      	cmp	r3, r0
   d5cd4:	d14b      	bne.n	d5d6e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xc6>
      passedChecksumCount++;
   d5cd6:	f8d4 30d4 	ldr.w	r3, [r4, #212]	; 0xd4
   d5cda:	3301      	adds	r3, #1
   d5cdc:	f8c4 30d4 	str.w	r3, [r4, #212]	; 0xd4
      if (sentenceHasFix)
   d5ce0:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d5ce4:	b123      	cbz	r3, d5cf0 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x48>
        ++sentencesWithFixCount;
   d5ce6:	f8d4 30cc 	ldr.w	r3, [r4, #204]	; 0xcc
   d5cea:	3301      	adds	r3, #1
   d5cec:	f8c4 30cc 	str.w	r3, [r4, #204]	; 0xcc
      switch(curSentenceType)
   d5cf0:	f894 30b9 	ldrb.w	r3, [r4, #185]	; 0xb9
   d5cf4:	b333      	cbz	r3, d5d44 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x9c>
   d5cf6:	2b01      	cmp	r3, #1
   d5cf8:	d115      	bne.n	d5d26 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
        date.commit();
   d5cfa:	f104 0038 	add.w	r0, r4, #56	; 0x38
   d5cfe:	f7ff ff7b 	bl	d5bf8 <_ZN11TinyGPSDate6commitEv>
        time.commit();
   d5d02:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5d06:	f7ff ff82 	bl	d5c0e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d5d0a:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d5d0e:	b153      	cbz	r3, d5d26 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7e>
           location.commit();
   d5d10:	4620      	mov	r0, r4
   d5d12:	f7ff ff0d 	bl	d5b30 <_ZN15TinyGPSLocation6commitEv>
           speed.commit();
   d5d16:	f104 0058 	add.w	r0, r4, #88	; 0x58
   d5d1a:	f7ff ff91 	bl	d5c40 <_ZN14TinyGPSDecimal6commitEv>
           course.commit();
   d5d1e:	f104 0068 	add.w	r0, r4, #104	; 0x68
        hdop.commit();
   d5d22:	f7ff ff8d 	bl	d5c40 <_ZN14TinyGPSDecimal6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d5d26:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d5d2a:	b336      	cbz	r6, d5d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d5d2c:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d5d30:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d5d32:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d5d34:	f004 fa6d 	bl	da212 <strcmp>
   d5d38:	b9f8      	cbnz	r0, d5d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
         p->commit();
   d5d3a:	4630      	mov	r0, r6
   d5d3c:	f7ff ffa4 	bl	d5c88 <_ZN13TinyGPSCustom6commitEv>
      for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0; p = p->next)
   d5d40:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d5d42:	e7f2      	b.n	d5d2a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x82>
        time.commit();
   d5d44:	f104 0048 	add.w	r0, r4, #72	; 0x48
   d5d48:	f7ff ff61 	bl	d5c0e <_ZN11TinyGPSTime6commitEv>
        if (sentenceHasFix)
   d5d4c:	f894 30bc 	ldrb.w	r3, [r4, #188]	; 0xbc
   d5d50:	b133      	cbz	r3, d5d60 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xb8>
          location.commit();
   d5d52:	4620      	mov	r0, r4
   d5d54:	f7ff feec 	bl	d5b30 <_ZN15TinyGPSLocation6commitEv>
          altitude.commit();
   d5d58:	f104 0078 	add.w	r0, r4, #120	; 0x78
   d5d5c:	f7ff ff70 	bl	d5c40 <_ZN14TinyGPSDecimal6commitEv>
        satellites.commit();
   d5d60:	f104 0088 	add.w	r0, r4, #136	; 0x88
   d5d64:	f7ff ff7e 	bl	d5c64 <_ZN14TinyGPSInteger6commitEv>
        hdop.commit();
   d5d68:	f104 0098 	add.w	r0, r4, #152	; 0x98
   d5d6c:	e7d9      	b.n	d5d22 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x7a>
      ++failedChecksumCount;
   d5d6e:	f8d4 30d0 	ldr.w	r3, [r4, #208]	; 0xd0
   d5d72:	3301      	adds	r3, #1
   d5d74:	f8c4 30d0 	str.w	r3, [r4, #208]	; 0xd0
    return false;
   d5d78:	2500      	movs	r5, #0
}
   d5d7a:	4628      	mov	r0, r5
   d5d7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
  if (curTermNumber == 0)
   d5d7e:	f890 20ba 	ldrb.w	r2, [r0, #186]	; 0xba
   d5d82:	bb22      	cbnz	r2, d5dce <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x126>
    if (!strcmp(term, _GPRMCterm))
   d5d84:	f100 07aa 	add.w	r7, r0, #170	; 0xaa
   d5d88:	4956      	ldr	r1, [pc, #344]	; (d5ee4 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x23c>)
   d5d8a:	4638      	mov	r0, r7
   d5d8c:	f004 fa41 	bl	da212 <strcmp>
   d5d90:	b918      	cbnz	r0, d5d9a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xf2>
      curSentenceType = GPS_SENTENCE_GPRMC;
   d5d92:	2301      	movs	r3, #1
      curSentenceType = GPS_SENTENCE_OTHER;
   d5d94:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
   d5d98:	e006      	b.n	d5da8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x100>
    else if (!strcmp(term, _GPGGAterm))
   d5d9a:	4953      	ldr	r1, [pc, #332]	; (d5ee8 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x240>)
   d5d9c:	4638      	mov	r0, r7
   d5d9e:	f004 fa38 	bl	da212 <strcmp>
   d5da2:	b990      	cbnz	r0, d5dca <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x122>
      curSentenceType = GPS_SENTENCE_GPGGA;
   d5da4:	f884 50b9 	strb.w	r5, [r4, #185]	; 0xb9
    for (customCandidates = customElts; customCandidates != NULL && strcmp(customCandidates->sentenceName, term) < 0; customCandidates = customCandidates->next);
   d5da8:	f8d4 30c0 	ldr.w	r3, [r4, #192]	; 0xc0
   d5dac:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d5db0:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
   d5db4:	2e00      	cmp	r6, #0
   d5db6:	d0e0      	beq.n	d5d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d5db8:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d5dba:	4639      	mov	r1, r7
   d5dbc:	f004 fa29 	bl	da212 <strcmp>
   d5dc0:	2800      	cmp	r0, #0
   d5dc2:	f280 8088 	bge.w	d5ed6 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x22e>
   d5dc6:	6b33      	ldr	r3, [r6, #48]	; 0x30
   d5dc8:	e7f0      	b.n	d5dac <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x104>
      curSentenceType = GPS_SENTENCE_OTHER;
   d5dca:	2302      	movs	r3, #2
   d5dcc:	e7e2      	b.n	d5d94 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xec>
  if (curSentenceType != GPS_SENTENCE_OTHER && term[0])
   d5dce:	f890 10b9 	ldrb.w	r1, [r0, #185]	; 0xb9
   d5dd2:	2902      	cmp	r1, #2
   d5dd4:	d023      	beq.n	d5e1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
   d5dd6:	f890 30aa 	ldrb.w	r3, [r0, #170]	; 0xaa
   d5dda:	b303      	cbz	r3, d5e1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
    switch(COMBINE(curSentenceType, curTermNumber))
   d5ddc:	ea42 1241 	orr.w	r2, r2, r1, lsl #5
   d5de0:	3a01      	subs	r2, #1
   d5de2:	2a28      	cmp	r2, #40	; 0x28
   d5de4:	d81b      	bhi.n	d5e1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
   d5de6:	e8df f002 	tbb	[pc, r2]
   d5dea:	3b15      	.short	0x3b15
   d5dec:	634c4942 	.word	0x634c4942
   d5df0:	1a726e68 	.word	0x1a726e68
   d5df4:	1a1a1a1a 	.word	0x1a1a1a1a
   d5df8:	1a1a1a1a 	.word	0x1a1a1a1a
   d5dfc:	1a1a1a1a 	.word	0x1a1a1a1a
   d5e00:	1a1a1a1a 	.word	0x1a1a1a1a
   d5e04:	1a1a1a1a 	.word	0x1a1a1a1a
   d5e08:	34151a1a 	.word	0x34151a1a
   d5e0c:	4c49423b 	.word	0x4c49423b
   d5e10:	5953      	.short	0x5953
   d5e12:	5d          	.byte	0x5d
   d5e13:	00          	.byte	0x00
      time.setTime(term);
   d5e14:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5e18:	3048      	adds	r0, #72	; 0x48
   d5e1a:	f7ff ff03 	bl	d5c24 <_ZN11TinyGPSTime7setTimeEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d5e1e:	f8d4 60c4 	ldr.w	r6, [r4, #196]	; 0xc4
         p->set(term);
   d5e22:	f104 07aa 	add.w	r7, r4, #170	; 0xaa
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d5e26:	2e00      	cmp	r6, #0
   d5e28:	d0a7      	beq.n	d5d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d5e2a:	f8d4 30c4 	ldr.w	r3, [r4, #196]	; 0xc4
   d5e2e:	6ab0      	ldr	r0, [r6, #40]	; 0x28
   d5e30:	6a99      	ldr	r1, [r3, #40]	; 0x28
   d5e32:	f004 f9ee 	bl	da212 <strcmp>
   d5e36:	2800      	cmp	r0, #0
   d5e38:	d19f      	bne.n	d5d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d5e3a:	6af2      	ldr	r2, [r6, #44]	; 0x2c
   d5e3c:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d5e40:	429a      	cmp	r2, r3
   d5e42:	dc9a      	bgt.n	d5d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
    if (p->termNumber == curTermNumber)
   d5e44:	d103      	bne.n	d5e4e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1a6>
         p->set(term);
   d5e46:	4639      	mov	r1, r7
   d5e48:	4630      	mov	r0, r6
   d5e4a:	f7ff ff2a 	bl	d5ca2 <_ZN13TinyGPSCustom3setEPKc>
  for (TinyGPSCustom *p = customCandidates; p != NULL && strcmp(p->sentenceName, customCandidates->sentenceName) == 0 && p->termNumber <= curTermNumber; p = p->next)
   d5e4e:	6b36      	ldr	r6, [r6, #48]	; 0x30
   d5e50:	e7e9      	b.n	d5e26 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x17e>
      sentenceHasFix = term[0] == 'A';
   d5e52:	f1a3 0041 	sub.w	r0, r3, #65	; 0x41
   d5e56:	4243      	negs	r3, r0
   d5e58:	4143      	adcs	r3, r0
      sentenceHasFix = term[0] > '0';
   d5e5a:	f884 30bc 	strb.w	r3, [r4, #188]	; 0xbc
      break;
   d5e5e:	e7de      	b.n	d5e1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
   TinyGPSPlus::parseDegrees(term, rawNewLatData);
   d5e60:	f100 011c 	add.w	r1, r0, #28
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d5e64:	f104 00aa 	add.w	r0, r4, #170	; 0xaa
   d5e68:	f7ff fe32 	bl	d5ad0 <_ZN11TinyGPSPlus12parseDegreesEPKcR10RawDegrees>
}
   d5e6c:	e7d7      	b.n	d5e1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      location.rawNewLatData.negative = term[0] == 'S';
   d5e6e:	f1a3 0153 	sub.w	r1, r3, #83	; 0x53
   d5e72:	424b      	negs	r3, r1
   d5e74:	414b      	adcs	r3, r1
   d5e76:	f880 3024 	strb.w	r3, [r0, #36]	; 0x24
      break;
   d5e7a:	e7d0      	b.n	d5e1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
   TinyGPSPlus::parseDegrees(term, rawNewLngData);
   d5e7c:	f100 0128 	add.w	r1, r0, #40	; 0x28
   d5e80:	e7f0      	b.n	d5e64 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1bc>
      location.rawNewLngData.negative = term[0] == 'W';
   d5e82:	f1a3 0257 	sub.w	r2, r3, #87	; 0x57
   d5e86:	4253      	negs	r3, r2
   d5e88:	4153      	adcs	r3, r2
   d5e8a:	f880 3030 	strb.w	r3, [r0, #48]	; 0x30
      break;
   d5e8e:	e7c6      	b.n	d5e1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      speed.set(term);
   d5e90:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5e94:	3058      	adds	r0, #88	; 0x58
      altitude.set(term);
   d5e96:	f7ff fede 	bl	d5c56 <_ZN14TinyGPSDecimal3setEPKc>
      break;
   d5e9a:	e7c0      	b.n	d5e1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      course.set(term);
   d5e9c:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5ea0:	3068      	adds	r0, #104	; 0x68
   d5ea2:	e7f8      	b.n	d5e96 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ee>
      date.setDate(term);
   d5ea4:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5ea8:	3038      	adds	r0, #56	; 0x38
   d5eaa:	f7ff fec2 	bl	d5c32 <_ZN11TinyGPSDate7setDateEPKc>
      break;
   d5eae:	e7b6      	b.n	d5e1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      sentenceHasFix = term[0] > '0';
   d5eb0:	2b30      	cmp	r3, #48	; 0x30
   d5eb2:	bf94      	ite	ls
   d5eb4:	2300      	movls	r3, #0
   d5eb6:	2301      	movhi	r3, #1
   d5eb8:	e7cf      	b.n	d5e5a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1b2>
      satellites.set(term);
   d5eba:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5ebe:	3088      	adds	r0, #136	; 0x88
   d5ec0:	f7ff fedb 	bl	d5c7a <_ZN14TinyGPSInteger3setEPKc>
      break;
   d5ec4:	e7ab      	b.n	d5e1e <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x176>
      hdop.set(term);
   d5ec6:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5eca:	3098      	adds	r0, #152	; 0x98
   d5ecc:	e7e3      	b.n	d5e96 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ee>
      altitude.set(term);
   d5ece:	f100 01aa 	add.w	r1, r0, #170	; 0xaa
   d5ed2:	3078      	adds	r0, #120	; 0x78
   d5ed4:	e7df      	b.n	d5e96 <_ZN11TinyGPSPlus16endOfTermHandlerEv+0x1ee>
    if (customCandidates != NULL && strcmp(customCandidates->sentenceName, term) > 0)
   d5ed6:	f43f af50 	beq.w	d5d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
       customCandidates = NULL;
   d5eda:	2300      	movs	r3, #0
   d5edc:	f8c4 30c4 	str.w	r3, [r4, #196]	; 0xc4
   d5ee0:	e74b      	b.n	d5d7a <_ZN11TinyGPSPlus16endOfTermHandlerEv+0xd2>
   d5ee2:	bf00      	nop
   d5ee4:	000da540 	.word	0x000da540
   d5ee8:	000da546 	.word	0x000da546

000d5eec <_ZN11TinyGPSPlus6encodeEc>:
{
   d5eec:	b538      	push	{r3, r4, r5, lr}
  ++encodedCharCount;
   d5eee:	f8d0 30c8 	ldr.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d5ef2:	2924      	cmp	r1, #36	; 0x24
  ++encodedCharCount;
   d5ef4:	f103 0301 	add.w	r3, r3, #1
{
   d5ef8:	4604      	mov	r4, r0
   d5efa:	460d      	mov	r5, r1
  ++encodedCharCount;
   d5efc:	f8c0 30c8 	str.w	r3, [r0, #200]	; 0xc8
  switch(c)
   d5f00:	d03a      	beq.n	d5f78 <_ZN11TinyGPSPlus6encodeEc+0x8c>
   d5f02:	f890 30bb 	ldrb.w	r3, [r0, #187]	; 0xbb
   d5f06:	d814      	bhi.n	d5f32 <_ZN11TinyGPSPlus6encodeEc+0x46>
   d5f08:	290a      	cmp	r1, #10
   d5f0a:	d01c      	beq.n	d5f46 <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d5f0c:	290d      	cmp	r1, #13
   d5f0e:	d01a      	beq.n	d5f46 <_ZN11TinyGPSPlus6encodeEc+0x5a>
    if (curTermOffset < sizeof(term) - 1)
   d5f10:	2b0d      	cmp	r3, #13
      term[curTermOffset++] = c;
   d5f12:	bf9f      	itttt	ls
   d5f14:	1c5a      	addls	r2, r3, #1
   d5f16:	191b      	addls	r3, r3, r4
   d5f18:	f884 20bb 	strbls.w	r2, [r4, #187]	; 0xbb
   d5f1c:	f883 50aa 	strbls.w	r5, [r3, #170]	; 0xaa
    if (!isChecksumTerm)
   d5f20:	f894 00a9 	ldrb.w	r0, [r4, #169]	; 0xa9
   d5f24:	bb98      	cbnz	r0, d5f8e <_ZN11TinyGPSPlus6encodeEc+0xa2>
      parity ^= c;
   d5f26:	f894 10a8 	ldrb.w	r1, [r4, #168]	; 0xa8
   d5f2a:	404d      	eors	r5, r1
   d5f2c:	f884 50a8 	strb.w	r5, [r4, #168]	; 0xa8
   d5f30:	e021      	b.n	d5f76 <_ZN11TinyGPSPlus6encodeEc+0x8a>
  switch(c)
   d5f32:	292a      	cmp	r1, #42	; 0x2a
   d5f34:	d007      	beq.n	d5f46 <_ZN11TinyGPSPlus6encodeEc+0x5a>
   d5f36:	292c      	cmp	r1, #44	; 0x2c
   d5f38:	d1ea      	bne.n	d5f10 <_ZN11TinyGPSPlus6encodeEc+0x24>
    parity ^= (uint8_t)c;
   d5f3a:	f890 20a8 	ldrb.w	r2, [r0, #168]	; 0xa8
   d5f3e:	f082 022c 	eor.w	r2, r2, #44	; 0x2c
   d5f42:	f880 20a8 	strb.w	r2, [r0, #168]	; 0xa8
      if (curTermOffset < sizeof(term))
   d5f46:	2b0e      	cmp	r3, #14
   d5f48:	f04f 0000 	mov.w	r0, #0
   d5f4c:	d805      	bhi.n	d5f5a <_ZN11TinyGPSPlus6encodeEc+0x6e>
        term[curTermOffset] = 0;
   d5f4e:	4423      	add	r3, r4
   d5f50:	f883 00aa 	strb.w	r0, [r3, #170]	; 0xaa
        isValidSentence = endOfTermHandler();
   d5f54:	4620      	mov	r0, r4
   d5f56:	f7ff fea7 	bl	d5ca8 <_ZN11TinyGPSPlus16endOfTermHandlerEv>
      ++curTermNumber;
   d5f5a:	f894 30ba 	ldrb.w	r3, [r4, #186]	; 0xba
   d5f5e:	3301      	adds	r3, #1
   d5f60:	f884 30ba 	strb.w	r3, [r4, #186]	; 0xba
      curTermOffset = 0;
   d5f64:	2300      	movs	r3, #0
   d5f66:	f884 30bb 	strb.w	r3, [r4, #187]	; 0xbb
      isChecksumTerm = c == '*';
   d5f6a:	f1a5 032a 	sub.w	r3, r5, #42	; 0x2a
   d5f6e:	425d      	negs	r5, r3
   d5f70:	415d      	adcs	r5, r3
   d5f72:	f884 50a9 	strb.w	r5, [r4, #169]	; 0xa9
}
   d5f76:	bd38      	pop	{r3, r4, r5, pc}
    parity = 0;
   d5f78:	2000      	movs	r0, #0
    curSentenceType = GPS_SENTENCE_OTHER;
   d5f7a:	2302      	movs	r3, #2
    parity = 0;
   d5f7c:	f8a4 00a8 	strh.w	r0, [r4, #168]	; 0xa8
    curSentenceType = GPS_SENTENCE_OTHER;
   d5f80:	f884 30b9 	strb.w	r3, [r4, #185]	; 0xb9
    curTermNumber = curTermOffset = 0;
   d5f84:	f8a4 00ba 	strh.w	r0, [r4, #186]	; 0xba
    sentenceHasFix = false;
   d5f88:	f884 00bc 	strb.w	r0, [r4, #188]	; 0xbc
    return false;
   d5f8c:	e7f3      	b.n	d5f76 <_ZN11TinyGPSPlus6encodeEc+0x8a>
    return false;
   d5f8e:	2000      	movs	r0, #0
   d5f90:	e7f1      	b.n	d5f76 <_ZN11TinyGPSPlus6encodeEc+0x8a>
	...

000d5f94 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d5f94:	b508      	push	{r3, lr}
   d5f96:	4b02      	ldr	r3, [pc, #8]	; (d5fa0 <netdb_freeaddrinfo+0xc>)
   d5f98:	681b      	ldr	r3, [r3, #0]
   d5f9a:	689b      	ldr	r3, [r3, #8]
   d5f9c:	9301      	str	r3, [sp, #4]
   d5f9e:	bd08      	pop	{r3, pc}
   d5fa0:	00030268 	.word	0x00030268

000d5fa4 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d5fa4:	b508      	push	{r3, lr}
   d5fa6:	4b02      	ldr	r3, [pc, #8]	; (d5fb0 <netdb_getaddrinfo+0xc>)
   d5fa8:	681b      	ldr	r3, [r3, #0]
   d5faa:	68db      	ldr	r3, [r3, #12]
   d5fac:	9301      	str	r3, [sp, #4]
   d5fae:	bd08      	pop	{r3, pc}
   d5fb0:	00030268 	.word	0x00030268

000d5fb4 <HAL_Pin_Mode>:

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d5fb4:	b508      	push	{r3, lr}
   d5fb6:	4b02      	ldr	r3, [pc, #8]	; (d5fc0 <HAL_Pin_Mode+0xc>)
   d5fb8:	681b      	ldr	r3, [r3, #0]
   d5fba:	689b      	ldr	r3, [r3, #8]
   d5fbc:	9301      	str	r3, [sp, #4]
   d5fbe:	bd08      	pop	{r3, pc}
   d5fc0:	0003022c 	.word	0x0003022c

000d5fc4 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d5fc4:	b508      	push	{r3, lr}
   d5fc6:	4b02      	ldr	r3, [pc, #8]	; (d5fd0 <HAL_Get_Pin_Mode+0xc>)
   d5fc8:	681b      	ldr	r3, [r3, #0]
   d5fca:	68db      	ldr	r3, [r3, #12]
   d5fcc:	9301      	str	r3, [sp, #4]
   d5fce:	bd08      	pop	{r3, pc}
   d5fd0:	0003022c 	.word	0x0003022c

000d5fd4 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d5fd4:	b508      	push	{r3, lr}
   d5fd6:	4b02      	ldr	r3, [pc, #8]	; (d5fe0 <HAL_GPIO_Write+0xc>)
   d5fd8:	681b      	ldr	r3, [r3, #0]
   d5fda:	691b      	ldr	r3, [r3, #16]
   d5fdc:	9301      	str	r3, [sp, #4]
   d5fde:	bd08      	pop	{r3, pc}
   d5fe0:	0003022c 	.word	0x0003022c

000d5fe4 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d5fe4:	b508      	push	{r3, lr}
   d5fe6:	4b02      	ldr	r3, [pc, #8]	; (d5ff0 <HAL_GPIO_Read+0xc>)
   d5fe8:	681b      	ldr	r3, [r3, #0]
   d5fea:	695b      	ldr	r3, [r3, #20]
   d5fec:	9301      	str	r3, [sp, #4]
   d5fee:	bd08      	pop	{r3, pc}
   d5ff0:	0003022c 	.word	0x0003022c

000d5ff4 <if_index_to_name>:
DYNALIB_FN(0, hal_ifapi, if_get_list, int(struct if_list**))
DYNALIB_FN(1, hal_ifapi, if_free_list, int(struct if_list*))
DYNALIB_FN(2, hal_ifapi, if_get_name_index, int(struct if_nameindex**))
DYNALIB_FN(3, hal_ifapi, if_free_name_index, int(struct if_nameindex*))
DYNALIB_FN(4, hal_ifapi, if_name_to_index, int(const char*, uint8_t*))
DYNALIB_FN(5, hal_ifapi, if_index_to_name, int(uint8_t, char*))
   d5ff4:	b508      	push	{r3, lr}
   d5ff6:	4b02      	ldr	r3, [pc, #8]	; (d6000 <if_index_to_name+0xc>)
   d5ff8:	681b      	ldr	r3, [r3, #0]
   d5ffa:	695b      	ldr	r3, [r3, #20]
   d5ffc:	9301      	str	r3, [sp, #4]
   d5ffe:	bd08      	pop	{r3, pc}
   d6000:	0003026c 	.word	0x0003026c

000d6004 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d6004:	b508      	push	{r3, lr}
   d6006:	4b02      	ldr	r3, [pc, #8]	; (d6010 <HAL_RNG_GetRandomNumber+0xc>)
   d6008:	681b      	ldr	r3, [r3, #0]
   d600a:	685b      	ldr	r3, [r3, #4]
   d600c:	9301      	str	r3, [sp, #4]
   d600e:	bd08      	pop	{r3, pc}
   d6010:	00030218 	.word	0x00030218

000d6014 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d6014:	b508      	push	{r3, lr}
   d6016:	4b02      	ldr	r3, [pc, #8]	; (d6020 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d6018:	681b      	ldr	r3, [r3, #0]
   d601a:	695b      	ldr	r3, [r3, #20]
   d601c:	9301      	str	r3, [sp, #4]
   d601e:	bd08      	pop	{r3, pc}
   d6020:	00030218 	.word	0x00030218

000d6024 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d6024:	b508      	push	{r3, lr}
   d6026:	4b02      	ldr	r3, [pc, #8]	; (d6030 <os_mutex_recursive_create+0xc>)
   d6028:	681b      	ldr	r3, [r3, #0]
   d602a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d602c:	9301      	str	r3, [sp, #4]
   d602e:	bd08      	pop	{r3, pc}
   d6030:	00030248 	.word	0x00030248

000d6034 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d6034:	b508      	push	{r3, lr}
   d6036:	4b02      	ldr	r3, [pc, #8]	; (d6040 <os_mutex_recursive_destroy+0xc>)
   d6038:	681b      	ldr	r3, [r3, #0]
   d603a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d603c:	9301      	str	r3, [sp, #4]
   d603e:	bd08      	pop	{r3, pc}
   d6040:	00030248 	.word	0x00030248

000d6044 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d6044:	b508      	push	{r3, lr}
   d6046:	4b02      	ldr	r3, [pc, #8]	; (d6050 <inet_inet_ntop+0xc>)
   d6048:	681b      	ldr	r3, [r3, #0]
   d604a:	695b      	ldr	r3, [r3, #20]
   d604c:	9301      	str	r3, [sp, #4]
   d604e:	bd08      	pop	{r3, pc}
   d6050:	00030264 	.word	0x00030264

000d6054 <inet_htonl>:
DYNALIB_FN(6, hal_inet, inet_inet_pton, int(int, const char*, void*))
DYNALIB_FN(7, hal_inet, inet_ntohl, uint32_t(uint32_t))
DYNALIB_FN(8, hal_inet, inet_htonl, uint32_t(uint32_t))
   d6054:	b508      	push	{r3, lr}
   d6056:	4b02      	ldr	r3, [pc, #8]	; (d6060 <inet_htonl+0xc>)
   d6058:	681b      	ldr	r3, [r3, #0]
   d605a:	6a1b      	ldr	r3, [r3, #32]
   d605c:	9301      	str	r3, [sp, #4]
   d605e:	bd08      	pop	{r3, pc}
   d6060:	00030264 	.word	0x00030264

000d6064 <inet_htons>:
DYNALIB_FN(9, hal_inet, inet_ntohs, uint16_t(uint16_t))
DYNALIB_FN(10, hal_inet, inet_htons, uint16_t(uint16_t))
   d6064:	b508      	push	{r3, lr}
   d6066:	4b02      	ldr	r3, [pc, #8]	; (d6070 <inet_htons+0xc>)
   d6068:	681b      	ldr	r3, [r3, #0]
   d606a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d606c:	9301      	str	r3, [sp, #4]
   d606e:	bd08      	pop	{r3, pc}
   d6070:	00030264 	.word	0x00030264

000d6074 <hal_usart_init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, hal_usart_init, void(hal_usart_interface_t, hal_usart_ring_buffer_t*, hal_usart_ring_buffer_t*))
   d6074:	b508      	push	{r3, lr}
   d6076:	4b02      	ldr	r3, [pc, #8]	; (d6080 <hal_usart_init+0xc>)
   d6078:	681b      	ldr	r3, [r3, #0]
   d607a:	681b      	ldr	r3, [r3, #0]
   d607c:	9301      	str	r3, [sp, #4]
   d607e:	bd08      	pop	{r3, pc}
   d6080:	0003023c 	.word	0x0003023c

000d6084 <hal_usart_write>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, hal_usart_begin, void(hal_usart_interface_t, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, hal_usart_end, void(hal_usart_interface_t))
DYNALIB_FN(BASE_IDX + 3, hal_usart, hal_usart_write, uint32_t(hal_usart_interface_t, uint8_t))
   d6084:	b508      	push	{r3, lr}
   d6086:	4b02      	ldr	r3, [pc, #8]	; (d6090 <hal_usart_write+0xc>)
   d6088:	681b      	ldr	r3, [r3, #0]
   d608a:	68db      	ldr	r3, [r3, #12]
   d608c:	9301      	str	r3, [sp, #4]
   d608e:	bd08      	pop	{r3, pc}
   d6090:	0003023c 	.word	0x0003023c

000d6094 <hal_usart_available>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, hal_usart_available, int32_t(hal_usart_interface_t))
   d6094:	b508      	push	{r3, lr}
   d6096:	4b02      	ldr	r3, [pc, #8]	; (d60a0 <hal_usart_available+0xc>)
   d6098:	681b      	ldr	r3, [r3, #0]
   d609a:	691b      	ldr	r3, [r3, #16]
   d609c:	9301      	str	r3, [sp, #4]
   d609e:	bd08      	pop	{r3, pc}
   d60a0:	0003023c 	.word	0x0003023c

000d60a4 <hal_usart_read>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, hal_usart_read, int32_t(hal_usart_interface_t))
   d60a4:	b508      	push	{r3, lr}
   d60a6:	4b02      	ldr	r3, [pc, #8]	; (d60b0 <hal_usart_read+0xc>)
   d60a8:	681b      	ldr	r3, [r3, #0]
   d60aa:	695b      	ldr	r3, [r3, #20]
   d60ac:	9301      	str	r3, [sp, #4]
   d60ae:	bd08      	pop	{r3, pc}
   d60b0:	0003023c 	.word	0x0003023c

000d60b4 <hal_usart_peek>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, hal_usart_peek, int32_t(hal_usart_interface_t))
   d60b4:	b508      	push	{r3, lr}
   d60b6:	4b02      	ldr	r3, [pc, #8]	; (d60c0 <hal_usart_peek+0xc>)
   d60b8:	681b      	ldr	r3, [r3, #0]
   d60ba:	699b      	ldr	r3, [r3, #24]
   d60bc:	9301      	str	r3, [sp, #4]
   d60be:	bd08      	pop	{r3, pc}
   d60c0:	0003023c 	.word	0x0003023c

000d60c4 <hal_usart_flush>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, hal_usart_flush, void(hal_usart_interface_t))
   d60c4:	b508      	push	{r3, lr}
   d60c6:	4b02      	ldr	r3, [pc, #8]	; (d60d0 <hal_usart_flush+0xc>)
   d60c8:	681b      	ldr	r3, [r3, #0]
   d60ca:	69db      	ldr	r3, [r3, #28]
   d60cc:	9301      	str	r3, [sp, #4]
   d60ce:	bd08      	pop	{r3, pc}
   d60d0:	0003023c 	.word	0x0003023c

000d60d4 <hal_usart_is_enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, hal_usart_is_enabled, bool(hal_usart_interface_t))
   d60d4:	b508      	push	{r3, lr}
   d60d6:	4b02      	ldr	r3, [pc, #8]	; (d60e0 <hal_usart_is_enabled+0xc>)
   d60d8:	681b      	ldr	r3, [r3, #0]
   d60da:	6a1b      	ldr	r3, [r3, #32]
   d60dc:	9301      	str	r3, [sp, #4]
   d60de:	bd08      	pop	{r3, pc}
   d60e0:	0003023c 	.word	0x0003023c

000d60e4 <hal_usart_available_data_for_write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, hal_usart_half_duplex, void(hal_usart_interface_t, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, hal_usart_available_data_for_write, int32_t(hal_usart_interface_t))
   d60e4:	b508      	push	{r3, lr}
   d60e6:	4b02      	ldr	r3, [pc, #8]	; (d60f0 <hal_usart_available_data_for_write+0xc>)
   d60e8:	681b      	ldr	r3, [r3, #0]
   d60ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d60ec:	9301      	str	r3, [sp, #4]
   d60ee:	bd08      	pop	{r3, pc}
   d60f0:	0003023c 	.word	0x0003023c

000d60f4 <hal_usart_begin_config>:
#define BASE_IDX2 (BASE_IDX+13)
#else
#define BASE_IDX2 (BASE_IDX+11)
#endif

DYNALIB_FN(BASE_IDX2 + 0, hal_usart, hal_usart_begin_config, void(hal_usart_interface_t serial, uint32_t baud, uint32_t config, void *ptr))
   d60f4:	b508      	push	{r3, lr}
   d60f6:	4b02      	ldr	r3, [pc, #8]	; (d6100 <hal_usart_begin_config+0xc>)
   d60f8:	681b      	ldr	r3, [r3, #0]
   d60fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d60fc:	9301      	str	r3, [sp, #4]
   d60fe:	bd08      	pop	{r3, pc}
   d6100:	0003023c 	.word	0x0003023c

000d6104 <hal_i2c_begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, hal_i2c_set_speed, void(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, hal_i2c_enable_dma_mode, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, hal_i2c_stretch_clock, void(hal_i2c_interface_t, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, hal_i2c_begin, void(hal_i2c_interface_t, hal_i2c_mode_t, uint8_t, void*))
   d6104:	b508      	push	{r3, lr}
   d6106:	4b02      	ldr	r3, [pc, #8]	; (d6110 <hal_i2c_begin+0xc>)
   d6108:	681b      	ldr	r3, [r3, #0]
   d610a:	68db      	ldr	r3, [r3, #12]
   d610c:	9301      	str	r3, [sp, #4]
   d610e:	bd08      	pop	{r3, pc}
   d6110:	00030228 	.word	0x00030228

000d6114 <hal_i2c_begin_transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, hal_i2c_end, void(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, hal_i2c_request, uint32_t(hal_i2c_interface_t, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, hal_i2c_begin_transmission, void(hal_i2c_interface_t, uint8_t, const hal_i2c_transmission_config_t*))
   d6114:	b508      	push	{r3, lr}
   d6116:	4b02      	ldr	r3, [pc, #8]	; (d6120 <hal_i2c_begin_transmission+0xc>)
   d6118:	681b      	ldr	r3, [r3, #0]
   d611a:	699b      	ldr	r3, [r3, #24]
   d611c:	9301      	str	r3, [sp, #4]
   d611e:	bd08      	pop	{r3, pc}
   d6120:	00030228 	.word	0x00030228

000d6124 <hal_i2c_end_transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, hal_i2c_end_transmission, uint8_t(hal_i2c_interface_t, uint8_t, void*))
   d6124:	b508      	push	{r3, lr}
   d6126:	4b02      	ldr	r3, [pc, #8]	; (d6130 <hal_i2c_end_transmission+0xc>)
   d6128:	681b      	ldr	r3, [r3, #0]
   d612a:	69db      	ldr	r3, [r3, #28]
   d612c:	9301      	str	r3, [sp, #4]
   d612e:	bd08      	pop	{r3, pc}
   d6130:	00030228 	.word	0x00030228

000d6134 <hal_i2c_write>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, hal_i2c_write, uint32_t(hal_i2c_interface_t, uint8_t, void*))
   d6134:	b508      	push	{r3, lr}
   d6136:	4b02      	ldr	r3, [pc, #8]	; (d6140 <hal_i2c_write+0xc>)
   d6138:	681b      	ldr	r3, [r3, #0]
   d613a:	6a1b      	ldr	r3, [r3, #32]
   d613c:	9301      	str	r3, [sp, #4]
   d613e:	bd08      	pop	{r3, pc}
   d6140:	00030228 	.word	0x00030228

000d6144 <hal_i2c_available>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, hal_i2c_available, int32_t(hal_i2c_interface_t, void*))
   d6144:	b508      	push	{r3, lr}
   d6146:	4b02      	ldr	r3, [pc, #8]	; (d6150 <hal_i2c_available+0xc>)
   d6148:	681b      	ldr	r3, [r3, #0]
   d614a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d614c:	9301      	str	r3, [sp, #4]
   d614e:	bd08      	pop	{r3, pc}
   d6150:	00030228 	.word	0x00030228

000d6154 <hal_i2c_read>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, hal_i2c_read, int32_t(hal_i2c_interface_t, void*))
   d6154:	b508      	push	{r3, lr}
   d6156:	4b02      	ldr	r3, [pc, #8]	; (d6160 <hal_i2c_read+0xc>)
   d6158:	681b      	ldr	r3, [r3, #0]
   d615a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d615c:	9301      	str	r3, [sp, #4]
   d615e:	bd08      	pop	{r3, pc}
   d6160:	00030228 	.word	0x00030228

000d6164 <hal_i2c_peek>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, hal_i2c_peek, int32_t(hal_i2c_interface_t, void*))
   d6164:	b508      	push	{r3, lr}
   d6166:	4b02      	ldr	r3, [pc, #8]	; (d6170 <hal_i2c_peek+0xc>)
   d6168:	681b      	ldr	r3, [r3, #0]
   d616a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d616c:	9301      	str	r3, [sp, #4]
   d616e:	bd08      	pop	{r3, pc}
   d6170:	00030228 	.word	0x00030228

000d6174 <hal_i2c_flush>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, hal_i2c_flush, void(hal_i2c_interface_t, void*))
   d6174:	b508      	push	{r3, lr}
   d6176:	4b02      	ldr	r3, [pc, #8]	; (d6180 <hal_i2c_flush+0xc>)
   d6178:	681b      	ldr	r3, [r3, #0]
   d617a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d617c:	9301      	str	r3, [sp, #4]
   d617e:	bd08      	pop	{r3, pc}
   d6180:	00030228 	.word	0x00030228

000d6184 <hal_i2c_is_enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, hal_i2c_is_enabled, bool(hal_i2c_interface_t, void*))
   d6184:	b508      	push	{r3, lr}
   d6186:	4b02      	ldr	r3, [pc, #8]	; (d6190 <hal_i2c_is_enabled+0xc>)
   d6188:	681b      	ldr	r3, [r3, #0]
   d618a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d618c:	9301      	str	r3, [sp, #4]
   d618e:	bd08      	pop	{r3, pc}
   d6190:	00030228 	.word	0x00030228

000d6194 <hal_i2c_init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, hal_i2c_set_callback_on_received, void(hal_i2c_interface_t, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, hal_i2c_set_callback_on_requested, void(hal_i2c_interface_t, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, hal_i2c_init, int(hal_i2c_interface_t, const hal_i2c_config_t*))
   d6194:	b508      	push	{r3, lr}
   d6196:	4b02      	ldr	r3, [pc, #8]	; (d61a0 <hal_i2c_init+0xc>)
   d6198:	681b      	ldr	r3, [r3, #0]
   d619a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d619c:	9301      	str	r3, [sp, #4]
   d619e:	bd08      	pop	{r3, pc}
   d61a0:	00030228 	.word	0x00030228

000d61a4 <hal_i2c_request_ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, hal_i2c_reset, uint8_t(hal_i2c_interface_t, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, hal_i2c_lock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, hal_i2c_unlock, int32_t(hal_i2c_interface_t, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, hal_i2c_request_ex, int32_t(hal_i2c_interface_t, const hal_i2c_transmission_config_t*, void*))
   d61a4:	b508      	push	{r3, lr}
   d61a6:	4b02      	ldr	r3, [pc, #8]	; (d61b0 <hal_i2c_request_ex+0xc>)
   d61a8:	681b      	ldr	r3, [r3, #0]
   d61aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d61ac:	9301      	str	r3, [sp, #4]
   d61ae:	bd08      	pop	{r3, pc}
   d61b0:	00030228 	.word	0x00030228

000d61b4 <sock_setsockopt>:
DYNALIB_FN(1, hal_socket, sock_bind, int(int, const struct sockaddr*, socklen_t))
DYNALIB_FN(2, hal_socket, sock_shutdown, int(int, int))
DYNALIB_FN(3, hal_socket, sock_getpeername, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(4, hal_socket, sock_getsockname, int(int, struct sockaddr*, socklen_t*))
DYNALIB_FN(5, hal_socket, sock_getsockopt, int(int, int, int, void*, socklen_t*))
DYNALIB_FN(6, hal_socket, sock_setsockopt, int(int, int, int, const void*, socklen_t))
   d61b4:	b508      	push	{r3, lr}
   d61b6:	4b02      	ldr	r3, [pc, #8]	; (d61c0 <sock_setsockopt+0xc>)
   d61b8:	681b      	ldr	r3, [r3, #0]
   d61ba:	699b      	ldr	r3, [r3, #24]
   d61bc:	9301      	str	r3, [sp, #4]
   d61be:	bd08      	pop	{r3, pc}
   d61c0:	00030238 	.word	0x00030238

000d61c4 <sock_close>:
DYNALIB_FN(7, hal_socket, sock_close, int(int))
   d61c4:	b508      	push	{r3, lr}
   d61c6:	4b02      	ldr	r3, [pc, #8]	; (d61d0 <sock_close+0xc>)
   d61c8:	681b      	ldr	r3, [r3, #0]
   d61ca:	69db      	ldr	r3, [r3, #28]
   d61cc:	9301      	str	r3, [sp, #4]
   d61ce:	bd08      	pop	{r3, pc}
   d61d0:	00030238 	.word	0x00030238

000d61d4 <sock_connect>:
DYNALIB_FN(8, hal_socket, sock_connect, int(int, const struct sockaddr*, socklen_t))
   d61d4:	b508      	push	{r3, lr}
   d61d6:	4b02      	ldr	r3, [pc, #8]	; (d61e0 <sock_connect+0xc>)
   d61d8:	681b      	ldr	r3, [r3, #0]
   d61da:	6a1b      	ldr	r3, [r3, #32]
   d61dc:	9301      	str	r3, [sp, #4]
   d61de:	bd08      	pop	{r3, pc}
   d61e0:	00030238 	.word	0x00030238

000d61e4 <sock_recv>:
DYNALIB_FN(9, hal_socket, sock_listen, int(int, int))
DYNALIB_FN(10, hal_socket, sock_recv, int(int, void*, size_t, int))
   d61e4:	b508      	push	{r3, lr}
   d61e6:	4b02      	ldr	r3, [pc, #8]	; (d61f0 <sock_recv+0xc>)
   d61e8:	681b      	ldr	r3, [r3, #0]
   d61ea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d61ec:	9301      	str	r3, [sp, #4]
   d61ee:	bd08      	pop	{r3, pc}
   d61f0:	00030238 	.word	0x00030238

000d61f4 <sock_send>:
DYNALIB_FN(11, hal_socket, sock_recvfrom, int(int, void*, size_t, int, struct sockaddr*, socklen_t*))
DYNALIB_FN(12, hal_socket, sock_send, int(int, const void*, size_t, int))
   d61f4:	b508      	push	{r3, lr}
   d61f6:	4b02      	ldr	r3, [pc, #8]	; (d6200 <sock_send+0xc>)
   d61f8:	681b      	ldr	r3, [r3, #0]
   d61fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d61fc:	9301      	str	r3, [sp, #4]
   d61fe:	bd08      	pop	{r3, pc}
   d6200:	00030238 	.word	0x00030238

000d6204 <sock_socket>:
DYNALIB_FN(13, hal_socket, sock_sendto, int(int, const void*, size_t, int, const struct sockaddr*, socklen_t))
DYNALIB_FN(14, hal_socket, sock_socket, int(int, int, int))
   d6204:	b508      	push	{r3, lr}
   d6206:	4b02      	ldr	r3, [pc, #8]	; (d6210 <sock_socket+0xc>)
   d6208:	681b      	ldr	r3, [r3, #0]
   d620a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
   d620c:	9301      	str	r3, [sp, #4]
   d620e:	bd08      	pop	{r3, pc}
   d6210:	00030238 	.word	0x00030238

000d6214 <hal_spi_begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, hal_spi_begin, void(hal_spi_interface_t, uint16_t))
   d6214:	b508      	push	{r3, lr}
   d6216:	4b02      	ldr	r3, [pc, #8]	; (d6220 <hal_spi_begin+0xc>)
   d6218:	681b      	ldr	r3, [r3, #0]
   d621a:	681b      	ldr	r3, [r3, #0]
   d621c:	9301      	str	r3, [sp, #4]
   d621e:	bd08      	pop	{r3, pc}
   d6220:	00030230 	.word	0x00030230

000d6224 <hal_spi_transfer>:
DYNALIB_FN(1, hal_spi, hal_spi_end, void(hal_spi_interface_t))
DYNALIB_FN(2, hal_spi, hal_spi_set_bit_order, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(3, hal_spi, hal_spi_set_data_mode, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(4, hal_spi, hal_spi_set_clock_divider, void(hal_spi_interface_t, uint8_t))
DYNALIB_FN(5, hal_spi, hal_spi_transfer, uint16_t(hal_spi_interface_t, uint16_t))
   d6224:	b508      	push	{r3, lr}
   d6226:	4b02      	ldr	r3, [pc, #8]	; (d6230 <hal_spi_transfer+0xc>)
   d6228:	681b      	ldr	r3, [r3, #0]
   d622a:	695b      	ldr	r3, [r3, #20]
   d622c:	9301      	str	r3, [sp, #4]
   d622e:	bd08      	pop	{r3, pc}
   d6230:	00030230 	.word	0x00030230

000d6234 <hal_spi_init>:
DYNALIB_FN(6, hal_spi, hal_spi_is_enabled_deprecated, bool(void))
DYNALIB_FN(7, hal_spi, hal_spi_init, void(hal_spi_interface_t))
   d6234:	b508      	push	{r3, lr}
   d6236:	4b02      	ldr	r3, [pc, #8]	; (d6240 <hal_spi_init+0xc>)
   d6238:	681b      	ldr	r3, [r3, #0]
   d623a:	69db      	ldr	r3, [r3, #28]
   d623c:	9301      	str	r3, [sp, #4]
   d623e:	bd08      	pop	{r3, pc}
   d6240:	00030230 	.word	0x00030230

000d6244 <hal_spi_is_enabled>:
DYNALIB_FN(8, hal_spi, hal_spi_is_enabled, bool(hal_spi_interface_t))
   d6244:	b508      	push	{r3, lr}
   d6246:	4b02      	ldr	r3, [pc, #8]	; (d6250 <hal_spi_is_enabled+0xc>)
   d6248:	681b      	ldr	r3, [r3, #0]
   d624a:	6a1b      	ldr	r3, [r3, #32]
   d624c:	9301      	str	r3, [sp, #4]
   d624e:	bd08      	pop	{r3, pc}
   d6250:	00030230 	.word	0x00030230

000d6254 <hal_spi_info>:
DYNALIB_FN(9, hal_spi, hal_spi_info, void(hal_spi_interface_t, hal_spi_info_t*, void*))
   d6254:	b508      	push	{r3, lr}
   d6256:	4b02      	ldr	r3, [pc, #8]	; (d6260 <hal_spi_info+0xc>)
   d6258:	681b      	ldr	r3, [r3, #0]
   d625a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d625c:	9301      	str	r3, [sp, #4]
   d625e:	bd08      	pop	{r3, pc}
   d6260:	00030230 	.word	0x00030230

000d6264 <hal_spi_set_settings>:
DYNALIB_FN(10, hal_spi, hal_spi_transfer_dma, void(hal_spi_interface_t, void*, void*, uint32_t, hal_spi_dma_user_callback))
DYNALIB_FN(11, hal_spi, hal_spi_begin_ext, void(hal_spi_interface_t, hal_spi_mode_t, uint16_t, void*))
DYNALIB_FN(12, hal_spi, hal_spi_set_callback_on_selected, void(hal_spi_interface_t, hal_spi_select_user_callback, void*))
DYNALIB_FN(13, hal_spi, hal_spi_transfer_dma_cancel, void(hal_spi_interface_t))
DYNALIB_FN(14, hal_spi, hal_spi_transfer_dma_status, int32_t(hal_spi_interface_t, hal_spi_transfer_status_t*))
DYNALIB_FN(15, hal_spi, hal_spi_set_settings, int32_t(hal_spi_interface_t, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d6264:	b508      	push	{r3, lr}
   d6266:	4b02      	ldr	r3, [pc, #8]	; (d6270 <hal_spi_set_settings+0xc>)
   d6268:	681b      	ldr	r3, [r3, #0]
   d626a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d626c:	9301      	str	r3, [sp, #4]
   d626e:	bd08      	pop	{r3, pc}
   d6270:	00030230 	.word	0x00030230

000d6274 <hal_spi_acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, hal_spi_acquire, int32_t(hal_spi_interface_t, const hal_spi_acquire_config_t*))
   d6274:	b508      	push	{r3, lr}
   d6276:	4b02      	ldr	r3, [pc, #8]	; (d6280 <hal_spi_acquire+0xc>)
   d6278:	681b      	ldr	r3, [r3, #0]
   d627a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d627c:	9301      	str	r3, [sp, #4]
   d627e:	bd08      	pop	{r3, pc}
   d6280:	00030230 	.word	0x00030230

000d6284 <hal_spi_release>:
DYNALIB_FN(17, hal_spi, hal_spi_release, int32_t(hal_spi_interface_t, void*))
   d6284:	b508      	push	{r3, lr}
   d6286:	4b02      	ldr	r3, [pc, #8]	; (d6290 <hal_spi_release+0xc>)
   d6288:	681b      	ldr	r3, [r3, #0]
   d628a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d628c:	9301      	str	r3, [sp, #4]
   d628e:	bd08      	pop	{r3, pc}
   d6290:	00030230 	.word	0x00030230

000d6294 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d6294:	b508      	push	{r3, lr}
   d6296:	4b02      	ldr	r3, [pc, #8]	; (d62a0 <HAL_USB_USART_Init+0xc>)
   d6298:	681b      	ldr	r3, [r3, #0]
   d629a:	681b      	ldr	r3, [r3, #0]
   d629c:	9301      	str	r3, [sp, #4]
   d629e:	bd08      	pop	{r3, pc}
   d62a0:	0003024c 	.word	0x0003024c

000d62a4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d62a4:	b508      	push	{r3, lr}
   d62a6:	4b02      	ldr	r3, [pc, #8]	; (d62b0 <HAL_USB_USART_Begin+0xc>)
   d62a8:	681b      	ldr	r3, [r3, #0]
   d62aa:	685b      	ldr	r3, [r3, #4]
   d62ac:	9301      	str	r3, [sp, #4]
   d62ae:	bd08      	pop	{r3, pc}
   d62b0:	0003024c 	.word	0x0003024c

000d62b4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d62b4:	b508      	push	{r3, lr}
   d62b6:	4b02      	ldr	r3, [pc, #8]	; (d62c0 <HAL_USB_USART_Available_Data+0xc>)
   d62b8:	681b      	ldr	r3, [r3, #0]
   d62ba:	691b      	ldr	r3, [r3, #16]
   d62bc:	9301      	str	r3, [sp, #4]
   d62be:	bd08      	pop	{r3, pc}
   d62c0:	0003024c 	.word	0x0003024c

000d62c4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d62c4:	b508      	push	{r3, lr}
   d62c6:	4b02      	ldr	r3, [pc, #8]	; (d62d0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d62c8:	681b      	ldr	r3, [r3, #0]
   d62ca:	695b      	ldr	r3, [r3, #20]
   d62cc:	9301      	str	r3, [sp, #4]
   d62ce:	bd08      	pop	{r3, pc}
   d62d0:	0003024c 	.word	0x0003024c

000d62d4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d62d4:	b508      	push	{r3, lr}
   d62d6:	4b02      	ldr	r3, [pc, #8]	; (d62e0 <HAL_USB_USART_Receive_Data+0xc>)
   d62d8:	681b      	ldr	r3, [r3, #0]
   d62da:	699b      	ldr	r3, [r3, #24]
   d62dc:	9301      	str	r3, [sp, #4]
   d62de:	bd08      	pop	{r3, pc}
   d62e0:	0003024c 	.word	0x0003024c

000d62e4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d62e4:	b508      	push	{r3, lr}
   d62e6:	4b02      	ldr	r3, [pc, #8]	; (d62f0 <HAL_USB_USART_Send_Data+0xc>)
   d62e8:	681b      	ldr	r3, [r3, #0]
   d62ea:	69db      	ldr	r3, [r3, #28]
   d62ec:	9301      	str	r3, [sp, #4]
   d62ee:	bd08      	pop	{r3, pc}
   d62f0:	0003024c 	.word	0x0003024c

000d62f4 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d62f4:	b508      	push	{r3, lr}
   d62f6:	4b02      	ldr	r3, [pc, #8]	; (d6300 <HAL_USB_USART_Flush_Data+0xc>)
   d62f8:	681b      	ldr	r3, [r3, #0]
   d62fa:	6a1b      	ldr	r3, [r3, #32]
   d62fc:	9301      	str	r3, [sp, #4]
   d62fe:	bd08      	pop	{r3, pc}
   d6300:	0003024c 	.word	0x0003024c

000d6304 <log_message>:
DYNALIB_FN(16, services, log_print_, void(int, int, const char*, const char*, const char*, ...)) // Deprecated
DYNALIB_FN(17, services, LED_RGB_SetChangeHandler, void(led_update_handler_fn, void*))
DYNALIB_FN(18, services, log_print_direct_, void(int, void*, const char*, ...)) // Deprecated
DYNALIB_FN(19, services, LED_GetColor, uint32_t(uint32_t, void*))

DYNALIB_FN(20, services, log_message, void(int, const char*, LogAttributes*, void*, const char*, ...))
   d6304:	b508      	push	{r3, lr}
   d6306:	4b02      	ldr	r3, [pc, #8]	; (d6310 <log_message+0xc>)
   d6308:	681b      	ldr	r3, [r3, #0]
   d630a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d630c:	9301      	str	r3, [sp, #4]
   d630e:	bd08      	pop	{r3, pc}
   d6310:	00030260 	.word	0x00030260

000d6314 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d6314:	b508      	push	{r3, lr}
   d6316:	4b02      	ldr	r3, [pc, #8]	; (d6320 <set_system_mode+0xc>)
   d6318:	681b      	ldr	r3, [r3, #0]
   d631a:	685b      	ldr	r3, [r3, #4]
   d631c:	9301      	str	r3, [sp, #4]
   d631e:	bd08      	pop	{r3, pc}
   d6320:	00030220 	.word	0x00030220

000d6324 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d6324:	b508      	push	{r3, lr}
   d6326:	4b02      	ldr	r3, [pc, #8]	; (d6330 <system_delay_ms+0xc>)
   d6328:	681b      	ldr	r3, [r3, #0]
   d632a:	695b      	ldr	r3, [r3, #20]
   d632c:	9301      	str	r3, [sp, #4]
   d632e:	bd08      	pop	{r3, pc}
   d6330:	00030220 	.word	0x00030220

000d6334 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d6334:	b508      	push	{r3, lr}
   d6336:	4b03      	ldr	r3, [pc, #12]	; (d6344 <system_ctrl_set_app_request_handler+0x10>)
   d6338:	681b      	ldr	r3, [r3, #0]
   d633a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d633e:	9301      	str	r3, [sp, #4]
   d6340:	bd08      	pop	{r3, pc}
   d6342:	0000      	.short	0x0000
   d6344:	00030220 	.word	0x00030220

000d6348 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d6348:	b508      	push	{r3, lr}
   d634a:	4b03      	ldr	r3, [pc, #12]	; (d6358 <system_ctrl_set_result+0x10>)
   d634c:	681b      	ldr	r3, [r3, #0]
   d634e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d6352:	9301      	str	r3, [sp, #4]
   d6354:	bd08      	pop	{r3, pc}
   d6356:	0000      	.short	0x0000
   d6358:	00030220 	.word	0x00030220

000d635c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d635c:	b508      	push	{r3, lr}
   d635e:	4b02      	ldr	r3, [pc, #8]	; (d6368 <network_connect+0xc>)
   d6360:	681b      	ldr	r3, [r3, #0]
   d6362:	685b      	ldr	r3, [r3, #4]
   d6364:	9301      	str	r3, [sp, #4]
   d6366:	bd08      	pop	{r3, pc}
   d6368:	00030240 	.word	0x00030240

000d636c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d636c:	b508      	push	{r3, lr}
   d636e:	4b02      	ldr	r3, [pc, #8]	; (d6378 <network_connecting+0xc>)
   d6370:	681b      	ldr	r3, [r3, #0]
   d6372:	689b      	ldr	r3, [r3, #8]
   d6374:	9301      	str	r3, [sp, #4]
   d6376:	bd08      	pop	{r3, pc}
   d6378:	00030240 	.word	0x00030240

000d637c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d637c:	b508      	push	{r3, lr}
   d637e:	4b02      	ldr	r3, [pc, #8]	; (d6388 <network_disconnect+0xc>)
   d6380:	681b      	ldr	r3, [r3, #0]
   d6382:	68db      	ldr	r3, [r3, #12]
   d6384:	9301      	str	r3, [sp, #4]
   d6386:	bd08      	pop	{r3, pc}
   d6388:	00030240 	.word	0x00030240

000d638c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d638c:	b508      	push	{r3, lr}
   d638e:	4b02      	ldr	r3, [pc, #8]	; (d6398 <network_ready+0xc>)
   d6390:	681b      	ldr	r3, [r3, #0]
   d6392:	691b      	ldr	r3, [r3, #16]
   d6394:	9301      	str	r3, [sp, #4]
   d6396:	bd08      	pop	{r3, pc}
   d6398:	00030240 	.word	0x00030240

000d639c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d639c:	b508      	push	{r3, lr}
   d639e:	4b02      	ldr	r3, [pc, #8]	; (d63a8 <network_on+0xc>)
   d63a0:	681b      	ldr	r3, [r3, #0]
   d63a2:	695b      	ldr	r3, [r3, #20]
   d63a4:	9301      	str	r3, [sp, #4]
   d63a6:	bd08      	pop	{r3, pc}
   d63a8:	00030240 	.word	0x00030240

000d63ac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d63ac:	b508      	push	{r3, lr}
   d63ae:	4b02      	ldr	r3, [pc, #8]	; (d63b8 <network_off+0xc>)
   d63b0:	681b      	ldr	r3, [r3, #0]
   d63b2:	699b      	ldr	r3, [r3, #24]
   d63b4:	9301      	str	r3, [sp, #4]
   d63b6:	bd08      	pop	{r3, pc}
   d63b8:	00030240 	.word	0x00030240

000d63bc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d63bc:	b508      	push	{r3, lr}
   d63be:	4b02      	ldr	r3, [pc, #8]	; (d63c8 <network_listen+0xc>)
   d63c0:	681b      	ldr	r3, [r3, #0]
   d63c2:	69db      	ldr	r3, [r3, #28]
   d63c4:	9301      	str	r3, [sp, #4]
   d63c6:	bd08      	pop	{r3, pc}
   d63c8:	00030240 	.word	0x00030240

000d63cc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d63cc:	b508      	push	{r3, lr}
   d63ce:	4b02      	ldr	r3, [pc, #8]	; (d63d8 <network_listening+0xc>)
   d63d0:	681b      	ldr	r3, [r3, #0]
   d63d2:	6a1b      	ldr	r3, [r3, #32]
   d63d4:	9301      	str	r3, [sp, #4]
   d63d6:	bd08      	pop	{r3, pc}
   d63d8:	00030240 	.word	0x00030240

000d63dc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d63dc:	b508      	push	{r3, lr}
   d63de:	4b02      	ldr	r3, [pc, #8]	; (d63e8 <network_set_listen_timeout+0xc>)
   d63e0:	681b      	ldr	r3, [r3, #0]
   d63e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d63e4:	9301      	str	r3, [sp, #4]
   d63e6:	bd08      	pop	{r3, pc}
   d63e8:	00030240 	.word	0x00030240

000d63ec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d63ec:	b508      	push	{r3, lr}
   d63ee:	4b02      	ldr	r3, [pc, #8]	; (d63f8 <network_get_listen_timeout+0xc>)
   d63f0:	681b      	ldr	r3, [r3, #0]
   d63f2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d63f4:	9301      	str	r3, [sp, #4]
   d63f6:	bd08      	pop	{r3, pc}
   d63f8:	00030240 	.word	0x00030240

000d63fc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time32_t*, time_t*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, const void*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d63fc:	b508      	push	{r3, lr}
   d63fe:	4b02      	ldr	r3, [pc, #8]	; (d6408 <spark_set_random_seed_from_cloud_handler+0xc>)
   d6400:	681b      	ldr	r3, [r3, #0]
   d6402:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6404:	9301      	str	r3, [sp, #4]
   d6406:	bd08      	pop	{r3, pc}
   d6408:	00030244 	.word	0x00030244

000d640c <malloc>:
#include "hal_platform.h"
#endif // defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d640c:	b508      	push	{r3, lr}
   d640e:	4b02      	ldr	r3, [pc, #8]	; (d6418 <malloc+0xc>)
   d6410:	681b      	ldr	r3, [r3, #0]
   d6412:	681b      	ldr	r3, [r3, #0]
   d6414:	9301      	str	r3, [sp, #4]
   d6416:	bd08      	pop	{r3, pc}
   d6418:	0003021c 	.word	0x0003021c

000d641c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d641c:	b508      	push	{r3, lr}
   d641e:	4b02      	ldr	r3, [pc, #8]	; (d6428 <free+0xc>)
   d6420:	681b      	ldr	r3, [r3, #0]
   d6422:	685b      	ldr	r3, [r3, #4]
   d6424:	9301      	str	r3, [sp, #4]
   d6426:	bd08      	pop	{r3, pc}
   d6428:	0003021c 	.word	0x0003021c

000d642c <realloc>:
DYNALIB_FN(2, rt, realloc, void*(void*, size_t))
   d642c:	b508      	push	{r3, lr}
   d642e:	4b02      	ldr	r3, [pc, #8]	; (d6438 <realloc+0xc>)
   d6430:	681b      	ldr	r3, [r3, #0]
   d6432:	689b      	ldr	r3, [r3, #8]
   d6434:	9301      	str	r3, [sp, #4]
   d6436:	bd08      	pop	{r3, pc}
   d6438:	0003021c 	.word	0x0003021c

000d643c <sprintf>:
DYNALIB_FN(3, rt, sprintf, int(char*, const char*, ...))
   d643c:	b508      	push	{r3, lr}
   d643e:	4b02      	ldr	r3, [pc, #8]	; (d6448 <sprintf+0xc>)
   d6440:	681b      	ldr	r3, [r3, #0]
   d6442:	68db      	ldr	r3, [r3, #12]
   d6444:	9301      	str	r3, [sp, #4]
   d6446:	bd08      	pop	{r3, pc}
   d6448:	0003021c 	.word	0x0003021c

000d644c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d644c:	b508      	push	{r3, lr}
   d644e:	4b02      	ldr	r3, [pc, #8]	; (d6458 <vsnprintf+0xc>)
   d6450:	681b      	ldr	r3, [r3, #0]
   d6452:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d6454:	9301      	str	r3, [sp, #4]
   d6456:	bd08      	pop	{r3, pc}
   d6458:	0003021c 	.word	0x0003021c

000d645c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d645c:	b508      	push	{r3, lr}
   d645e:	4b02      	ldr	r3, [pc, #8]	; (d6468 <__errno+0xc>)
   d6460:	681b      	ldr	r3, [r3, #0]
   d6462:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d6464:	9301      	str	r3, [sp, #4]
   d6466:	bd08      	pop	{r3, pc}
   d6468:	0003021c 	.word	0x0003021c

000d646c <newlib_impure_ptr_callback>:
// RT is currently being imported into system-part1 from system-part2,
// which is the reverse direction.

#if defined(DYNALIB_EXPORT) || (defined(DYNALIB_IMPORT) && !defined(RT_DYNALIB_NO_DEPENDENCY_BREAKING_IMPORTS))
DYNALIB_FN(16, rt, __assert_func, void(const char*, int, const char*, const char*))
DYNALIB_FN(17, rt, newlib_impure_ptr_callback, void(void (*)(struct _reent*, size_t, uint32_t, void*), void*))
   d646c:	b508      	push	{r3, lr}
   d646e:	4b02      	ldr	r3, [pc, #8]	; (d6478 <newlib_impure_ptr_callback+0xc>)
   d6470:	681b      	ldr	r3, [r3, #0]
   d6472:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d6474:	9301      	str	r3, [sp, #4]
   d6476:	bd08      	pop	{r3, pc}
   d6478:	0003021c 	.word	0x0003021c

000d647c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d647c:	2200      	movs	r2, #0
   d647e:	6840      	ldr	r0, [r0, #4]
   d6480:	4611      	mov	r1, r2
   d6482:	f7ff bfa3 	b.w	d63cc <network_listening>

000d6486 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d6486:	2200      	movs	r2, #0
   d6488:	6840      	ldr	r0, [r0, #4]
   d648a:	4611      	mov	r1, r2
   d648c:	f7ff bfae 	b.w	d63ec <network_get_listen_timeout>

000d6490 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d6490:	6840      	ldr	r0, [r0, #4]
   d6492:	2200      	movs	r2, #0
   d6494:	f7ff bfa2 	b.w	d63dc <network_set_listen_timeout>

000d6498 <_ZN5spark13EthernetClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d6498:	6840      	ldr	r0, [r0, #4]
   d649a:	2200      	movs	r2, #0
   d649c:	f081 0101 	eor.w	r1, r1, #1
   d64a0:	f7ff bf8c 	b.w	d63bc <network_listen>

000d64a4 <_ZN5spark13EthernetClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d64a4:	2300      	movs	r3, #0
   d64a6:	6840      	ldr	r0, [r0, #4]
   d64a8:	461a      	mov	r2, r3
   d64aa:	4619      	mov	r1, r3
   d64ac:	f7ff bf7e 	b.w	d63ac <network_off>

000d64b0 <_ZN5spark13EthernetClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d64b0:	2300      	movs	r3, #0
   d64b2:	6840      	ldr	r0, [r0, #4]
   d64b4:	461a      	mov	r2, r3
   d64b6:	4619      	mov	r1, r3
   d64b8:	f7ff bf70 	b.w	d639c <network_on>

000d64bc <_ZN5spark13EthernetClass5readyEv>:
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d64bc:	2200      	movs	r2, #0
   d64be:	6840      	ldr	r0, [r0, #4]
   d64c0:	4611      	mov	r1, r2
   d64c2:	f7ff bf63 	b.w	d638c <network_ready>

000d64c6 <_ZN5spark13EthernetClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d64c6:	2200      	movs	r2, #0
   d64c8:	6840      	ldr	r0, [r0, #4]
   d64ca:	4611      	mov	r1, r2
   d64cc:	f7ff bf4e 	b.w	d636c <network_connecting>

000d64d0 <_ZN5spark13EthernetClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d64d0:	6840      	ldr	r0, [r0, #4]
   d64d2:	2200      	movs	r2, #0
   d64d4:	2102      	movs	r1, #2
   d64d6:	f7ff bf51 	b.w	d637c <network_disconnect>

000d64da <_ZN5spark13EthernetClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d64da:	2300      	movs	r3, #0
   d64dc:	6840      	ldr	r0, [r0, #4]
   d64de:	461a      	mov	r2, r3
   d64e0:	f7ff bf3c 	b.w	d635c <network_connect>

000d64e4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d64e4:	4b02      	ldr	r3, [pc, #8]	; (d64f0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d64e6:	2203      	movs	r2, #3
   d64e8:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d64ea:	4a02      	ldr	r2, [pc, #8]	; (d64f4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d64ec:	601a      	str	r2, [r3, #0]

namespace spark {

EthernetClass Ethernet;

} // spark
   d64ee:	4770      	bx	lr
   d64f0:	2003e650 	.word	0x2003e650
   d64f4:	000da554 	.word	0x000da554

000d64f8 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return hal_spi_acquire(_spi, nullptr);
   d64f8:	2100      	movs	r1, #0
   d64fa:	f7ff bebb 	b.w	d6274 <hal_spi_acquire>

000d64fe <_ZN8SPIClass6unlockEv.isra.0>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    hal_spi_release(_spi, nullptr);
   d64fe:	2100      	movs	r1, #0
   d6500:	f7ff bec0 	b.w	d6284 <hal_spi_release>

000d6504 <_ZN8SPIClassC1E19hal_spi_interface_t>:
    }
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(hal_spi_interface_t spi)
   d6504:	b510      	push	{r4, lr}
   d6506:	4604      	mov	r4, r0
   d6508:	4608      	mov	r0, r1
{
    _spi = spi;
   d650a:	7021      	strb	r1, [r4, #0]
    hal_spi_init(_spi);
   d650c:	f7ff fe92 	bl	d6234 <hal_spi_init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d6510:	2300      	movs	r3, #0
   d6512:	6063      	str	r3, [r4, #4]
}
   d6514:	4620      	mov	r0, r4
   d6516:	bd10      	pop	{r4, pc}

000d6518 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d6518:	b510      	push	{r4, lr}
   d651a:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d651c:	7800      	ldrb	r0, [r0, #0]
   d651e:	f7ff ffeb 	bl	d64f8 <_ZN8SPIClass4lockEv.isra.0>
   d6522:	b948      	cbnz	r0, d6538 <_ZN8SPIClass5beginEv+0x20>
    {
        hal_spi_begin(_spi, SPI_DEFAULT_SS);
   d6524:	7820      	ldrb	r0, [r4, #0]
   d6526:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d652a:	f7ff fe73 	bl	d6214 <hal_spi_begin>
        unlock();
   d652e:	7820      	ldrb	r0, [r4, #0]
    }
}
   d6530:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
        unlock();
   d6534:	f7ff bfe3 	b.w	d64fe <_ZN8SPIClass6unlockEv.isra.0>
}
   d6538:	bd10      	pop	{r4, pc}

000d653a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d653a:	7800      	ldrb	r0, [r0, #0]
   d653c:	f7ff bfdf 	b.w	d64fe <_ZN8SPIClass6unlockEv.isra.0>

000d6540 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d6540:	0840      	lsrs	r0, r0, #1
{
   d6542:	b530      	push	{r4, r5, lr}
    clock >>= 1; // div2 is the first
   d6544:	6018      	str	r0, [r3, #0]
   d6546:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d6548:	6818      	ldr	r0, [r3, #0]
   d654a:	4288      	cmp	r0, r1
   d654c:	b2e5      	uxtb	r5, r4
   d654e:	d906      	bls.n	d655e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d6550:	3401      	adds	r4, #1
   d6552:	2c08      	cmp	r4, #8
   d6554:	d002      	beq.n	d655c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d6556:	0840      	lsrs	r0, r0, #1
   d6558:	6018      	str	r0, [r3, #0]
    while (clock > targetSpeed && scale < 7)
   d655a:	e7f5      	b.n	d6548 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d655c:	2507      	movs	r5, #7
        scale++;
    }
    divider = clock_divisors[scale];
   d655e:	4b02      	ldr	r3, [pc, #8]	; (d6568 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d6560:	5d5b      	ldrb	r3, [r3, r5]
   d6562:	7013      	strb	r3, [r2, #0]
}
   d6564:	bd30      	pop	{r4, r5, pc}
   d6566:	bf00      	nop
   d6568:	000da580 	.word	0x000da580

000d656c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE>:
{
   d656c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d6570:	4606      	mov	r6, r0
   d6572:	b08f      	sub	sp, #60	; 0x3c
    CHECK(lock());
   d6574:	7800      	ldrb	r0, [r0, #0]
{
   d6576:	460d      	mov	r5, r1
    CHECK(lock());
   d6578:	f7ff ffbe 	bl	d64f8 <_ZN8SPIClass4lockEv.isra.0>
   d657c:	2800      	cmp	r0, #0
   d657e:	db1b      	blt.n	d65b8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4c>
    querySpiInfo(_spi, &spi_info);
   d6580:	7834      	ldrb	r4, [r6, #0]
    memset(info, 0, sizeof(hal_spi_info_t));
   d6582:	2214      	movs	r2, #20
   d6584:	2100      	movs	r1, #0
   d6586:	a809      	add	r0, sp, #36	; 0x24
   d6588:	f003 fe08 	bl	da19c <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d658c:	230b      	movs	r3, #11
    hal_spi_info(spi, info, nullptr);
   d658e:	2200      	movs	r2, #0
   d6590:	a909      	add	r1, sp, #36	; 0x24
   d6592:	4620      	mov	r0, r4
    info->version = HAL_SPI_INFO_VERSION_1;
   d6594:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    hal_spi_info(spi, info, nullptr);
   d6598:	f7ff fe5c 	bl	d6254 <hal_spi_info>
    if (!info || !info->enabled || info->default_settings)
   d659c:	f89d 302d 	ldrb.w	r3, [sp, #45]	; 0x2d
   d65a0:	b113      	cbz	r3, d65a8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x3c>
   d65a2:	f89d 402c 	ldrb.w	r4, [sp, #44]	; 0x2c
   d65a6:	b154      	cbz	r4, d65be <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x52>
  {
   d65a8:	2700      	movs	r7, #0
   d65aa:	46b9      	mov	r9, r7
   d65ac:	46b8      	mov	r8, r7
   d65ae:	2401      	movs	r4, #1
    if (default_ && other.default_)
   d65b0:	792b      	ldrb	r3, [r5, #4]
   d65b2:	b15c      	cbz	r4, d65cc <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x60>
   d65b4:	b1c3      	cbz	r3, d65e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
    return 0;
   d65b6:	2000      	movs	r0, #0
}
   d65b8:	b00f      	add	sp, #60	; 0x3c
   d65ba:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
    return particle::SPISettings(info->clock, info->bit_order, info->data_mode);
   d65be:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d65c2:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d65c6:	f89d 7035 	ldrb.w	r7, [sp, #53]	; 0x35
  }
   d65ca:	e7f1      	b.n	d65b0 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x44>
    if (default_ == other.default_ &&
   d65cc:	2b00      	cmp	r3, #0
   d65ce:	d135      	bne.n	d663c <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xd0>
   d65d0:	68ab      	ldr	r3, [r5, #8]
   d65d2:	4543      	cmp	r3, r8
   d65d4:	d108      	bne.n	d65e8 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x7c>
        bitOrder_ == other.bitOrder_ &&
   d65d6:	f88d 9020 	strb.w	r9, [sp, #32]
   d65da:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d65de:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d65e2:	89ab      	ldrh	r3, [r5, #12]
   d65e4:	429a      	cmp	r2, r3
   d65e6:	d0e6      	beq.n	d65b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
            uint8_t divisor = 0;
   d65e8:	2300      	movs	r3, #0
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d65ea:	68a9      	ldr	r1, [r5, #8]
            uint8_t divisor = 0;
   d65ec:	f88d 300f 	strb.w	r3, [sp, #15]
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
   d65f0:	980a      	ldr	r0, [sp, #40]	; 0x28
   d65f2:	ab04      	add	r3, sp, #16
   d65f4:	f10d 020f 	add.w	r2, sp, #15
   d65f8:	f7ff ffa2 	bl	d6540 <_ZN8SPIClass19computeClockDividerEjjRhRj>
    if (default_ && other.default_)
   d65fc:	7929      	ldrb	r1, [r5, #4]
   d65fe:	b984      	cbnz	r4, d6622 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xb6>
    if (default_ == other.default_ &&
   d6600:	b989      	cbnz	r1, d6626 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6602:	68ab      	ldr	r3, [r5, #8]
   d6604:	4543      	cmp	r3, r8
   d6606:	d30e      	bcc.n	d6626 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
        bitOrder_ == other.bitOrder_ &&
   d6608:	f88d 9020 	strb.w	r9, [sp, #32]
   d660c:	f88d 7021 	strb.w	r7, [sp, #33]	; 0x21
   d6610:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d6614:	89ab      	ldrh	r3, [r5, #12]
   d6616:	429a      	cmp	r2, r3
   d6618:	d105      	bne.n	d6626 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d661a:	9b04      	ldr	r3, [sp, #16]
   d661c:	4543      	cmp	r3, r8
   d661e:	d102      	bne.n	d6626 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xba>
   d6620:	e7c9      	b.n	d65b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
    if (default_ && other.default_)
   d6622:	2900      	cmp	r1, #0
   d6624:	d1f9      	bne.n	d661a <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xae>
                hal_spi_set_settings(_spi, settings.default_, divisor, settings.bitOrder_,
   d6626:	2300      	movs	r3, #0
   d6628:	9301      	str	r3, [sp, #4]
   d662a:	7b6b      	ldrb	r3, [r5, #13]
   d662c:	9300      	str	r3, [sp, #0]
   d662e:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d6632:	7b2b      	ldrb	r3, [r5, #12]
            hal_spi_set_settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d6634:	7830      	ldrb	r0, [r6, #0]
   d6636:	f7ff fe15 	bl	d6264 <hal_spi_set_settings>
   d663a:	e7bc      	b.n	d65b6 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0x4a>
   d663c:	e9cd 4400 	strd	r4, r4, [sp]
   d6640:	4623      	mov	r3, r4
   d6642:	4622      	mov	r2, r4
   d6644:	2101      	movs	r1, #1
   d6646:	e7f5      	b.n	d6634 <_ZN8SPIClass16beginTransactionERKN8particle11SPISettingsE+0xc8>

000d6648 <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d6648:	b508      	push	{r3, lr}
    return static_cast<byte>(hal_spi_transfer(_spi, _data));
   d664a:	7800      	ldrb	r0, [r0, #0]
   d664c:	f7ff fdea 	bl	d6224 <hal_spi_transfer>
}
   d6650:	b2c0      	uxtb	r0, r0
   d6652:	bd08      	pop	{r3, pc}

000d6654 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>:
    operator SleepResult() {
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
   d6654:	b510      	push	{r4, lr}
   d6656:	4604      	mov	r4, r0
        if (wakeupSource_) {
   d6658:	6800      	ldr	r0, [r0, #0]
   d665a:	b118      	cbz	r0, d6664 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0+0x10>
            free(wakeupSource_);
   d665c:	f7ff fede 	bl	d641c <free>
            wakeupSource_ = nullptr;
   d6660:	2300      	movs	r3, #0
   d6662:	6023      	str	r3, [r4, #0]
        }
    }
   d6664:	bd10      	pop	{r4, pc}

000d6666 <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d6666:	b510      	push	{r4, lr}
   d6668:	4604      	mov	r4, r0
        freeWakeupSourceMemory();
   d666a:	f7ff fff3 	bl	d6654 <_ZN17SystemSleepResult22freeWakeupSourceMemoryEv.isra.0>
class SystemClass {
   d666e:	4620      	mov	r0, r4
   d6670:	bd10      	pop	{r4, pc}
	...

000d6674 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d6674:	b510      	push	{r4, lr}
} // namespace particle

// particle::Flag<TagT, ValueT>
template<typename TagT, typename ValueT>
inline particle::Flag<TagT, ValueT>::Flag(ValueT val) :
        val_(val) {
   d6676:	4b09      	ldr	r3, [pc, #36]	; (d669c <_GLOBAL__sub_I_System+0x28>)
              error_(SYSTEM_ERROR_NONE) {
   d6678:	4c09      	ldr	r4, [pc, #36]	; (d66a0 <_GLOBAL__sub_I_System+0x2c>)
   d667a:	2202      	movs	r2, #2
   d667c:	2000      	movs	r0, #0
   d667e:	601a      	str	r2, [r3, #0]
    SleepResult() {}
   d6680:	4b08      	ldr	r3, [pc, #32]	; (d66a4 <_GLOBAL__sub_I_System+0x30>)
              error_(SYSTEM_ERROR_NONE) {
   d6682:	6020      	str	r0, [r4, #0]
   d6684:	80a0      	strh	r0, [r4, #4]
    SleepResult() {}
   d6686:	71a0      	strb	r0, [r4, #6]
   d6688:	60a3      	str	r3, [r4, #8]
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d668a:	f7ff fe43 	bl	d6314 <set_system_mode>
SystemClass System;
   d668e:	4620      	mov	r0, r4
   d6690:	4a05      	ldr	r2, [pc, #20]	; (d66a8 <_GLOBAL__sub_I_System+0x34>)
   d6692:	4906      	ldr	r1, [pc, #24]	; (d66ac <_GLOBAL__sub_I_System+0x38>)
   d6694:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
SystemClass System;
   d6698:	f001 ba74 	b.w	d7b84 <__aeabi_atexit>
   d669c:	2003e664 	.word	0x2003e664
   d66a0:	2003e658 	.word	0x2003e658
   d66a4:	ffff0000 	.word	0xffff0000
   d66a8:	2003e404 	.word	0x2003e404
   d66ac:	000d6667 	.word	0x000d6667

000d66b0 <_Z11str_reversePc>:

//------------------------------------------------------------------------------------------
#define BUFSIZE (sizeof(long) * 8 + 1)

//utility function used by ultoa()
__attribute__((weak)) void str_reverse(char* buffer){
   d66b0:	b510      	push	{r4, lr}
   d66b2:	4604      	mov	r4, r0
	char *i, *j;
	char c;
	i=buffer;
	j=buffer + strlen(buffer)-1;
   d66b4:	f003 fdbf 	bl	da236 <strlen>
   d66b8:	3801      	subs	r0, #1
   d66ba:	1823      	adds	r3, r4, r0
   d66bc:	4620      	mov	r0, r4
	while(i<j){
   d66be:	4283      	cmp	r3, r0
   d66c0:	d906      	bls.n	d66d0 <_Z11str_reversePc+0x20>
		c = *i;
   d66c2:	7802      	ldrb	r2, [r0, #0]
		*i = *j;
   d66c4:	7819      	ldrb	r1, [r3, #0]
   d66c6:	f800 1b01 	strb.w	r1, [r0], #1
		*j = c;
   d66ca:	f803 2901 	strb.w	r2, [r3], #-1
	while(i<j){
   d66ce:	e7f6      	b.n	d66be <_Z11str_reversePc+0xe>
		++i;
		--j;
	}
}
   d66d0:	bd10      	pop	{r4, pc}

000d66d2 <ultoa>:
      memcpy(head, ++tail, i);
      return str;
}

//convert unsigned long to string
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d66d2:	b570      	push	{r4, r5, r6, lr}
   d66d4:	460c      	mov	r4, r1
	if(radix<2 || radix>36){
   d66d6:	1e91      	subs	r1, r2, #2
   d66d8:	2922      	cmp	r1, #34	; 0x22
__attribute__((weak)) char* ultoa(unsigned long a, char* buffer, int radix, char pad){
   d66da:	4605      	mov	r5, r0
	if(radix<2 || radix>36){
   d66dc:	d822      	bhi.n	d6724 <ultoa+0x52>
		return NULL;
	}
	char* ptr=buffer;
   d66de:	4620      	mov	r0, r4

	div_t result;
	while(a){
   d66e0:	b16d      	cbz	r5, d66fe <ultoa+0x2c>
            /* toolchain bug??
            result = div(a, radix);
            */
            result.quot = a/radix;
   d66e2:	fbb5 f6f2 	udiv	r6, r5, r2
            result.rem = a%radix;
   d66e6:	fb02 5516 	mls	r5, r2, r6, r5
            *ptr = result.rem;
   d66ea:	b2e9      	uxtb	r1, r5
            if(result.rem<10){
   d66ec:	2d09      	cmp	r5, #9
                *ptr += '0';
   d66ee:	bf94      	ite	ls
   d66f0:	3130      	addls	r1, #48	; 0x30
            }else{
                *ptr += 'a'-10;
   d66f2:	3157      	addhi	r1, #87	; 0x57
   d66f4:	b2c9      	uxtb	r1, r1
   d66f6:	f800 1b01 	strb.w	r1, [r0], #1
            }
            ++ptr;
            a = result.quot;
   d66fa:	4635      	mov	r5, r6
	while(a){
   d66fc:	e7f0      	b.n	d66e0 <ultoa+0xe>
   d66fe:	4602      	mov	r2, r0
	}
        while (ptr < buffer+pad)
   d6700:	4423      	add	r3, r4
            *ptr++ = '0';
   d6702:	2130      	movs	r1, #48	; 0x30
        while (ptr < buffer+pad)
   d6704:	4293      	cmp	r3, r2
   d6706:	d902      	bls.n	d670e <ultoa+0x3c>
            *ptr++ = '0';
   d6708:	f802 1b01 	strb.w	r1, [r2], #1
        while (ptr < buffer+pad)
   d670c:	e7fa      	b.n	d6704 <ultoa+0x32>
   d670e:	1a1a      	subs	r2, r3, r0
   d6710:	4283      	cmp	r3, r0
   d6712:	bf38      	it	cc
   d6714:	2200      	movcc	r2, #0

	*ptr = '\0';
   d6716:	2300      	movs	r3, #0
   d6718:	5483      	strb	r3, [r0, r2]
	str_reverse(buffer);
   d671a:	4620      	mov	r0, r4
   d671c:	f7ff ffc8 	bl	d66b0 <_Z11str_reversePc>
	return buffer;
   d6720:	4620      	mov	r0, r4
}
   d6722:	bd70      	pop	{r4, r5, r6, pc}
		return NULL;
   d6724:	2000      	movs	r0, #0
   d6726:	e7fc      	b.n	d6722 <ultoa+0x50>

000d6728 <utoa>:
		ultoa(a, buffer, radix);
	}
	return buffer;
}

__attribute__((weak)) char* utoa(unsigned a, char* buffer, int radix) {
   d6728:	b508      	push	{r3, lr}
    return ultoa(a, buffer, radix);
   d672a:	2301      	movs	r3, #1
   d672c:	f7ff ffd1 	bl	d66d2 <ultoa>
}
   d6730:	bd08      	pop	{r3, pc}
	...

000d6734 <_Z4dtoadhPc>:
#include "string_convert.h"

//These are very crude implementations - will refine later
//------------------------------------------------------------------------------------------

void dtoa (double val, unsigned char prec, char *sout) {
   d6734:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d6738:	ec57 6b10 	vmov	r6, r7, d0
   d673c:	4680      	mov	r8, r0
   d673e:	460c      	mov	r4, r1
    bool negative = val<0;
    if (negative) {
   d6740:	ee10 0a10 	vmov	r0, s0
   d6744:	2200      	movs	r2, #0
   d6746:	2300      	movs	r3, #0
   d6748:	4639      	mov	r1, r7
   d674a:	f003 f961 	bl	d9a10 <__aeabi_dcmplt>
   d674e:	b128      	cbz	r0, d675c <_Z4dtoadhPc+0x28>
        val = -val;
   d6750:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d6754:	461f      	mov	r7, r3
        *sout++ = '-';
   d6756:	232d      	movs	r3, #45	; 0x2d
   d6758:	f804 3b01 	strb.w	r3, [r4], #1
   d675c:	2300      	movs	r3, #0
    }
    long scale = 1;
   d675e:	f04f 0901 	mov.w	r9, #1
    for (uint8_t i=0; i<prec; i++)
        scale *= 10;
   d6762:	220a      	movs	r2, #10
    for (uint8_t i=0; i<prec; i++)
   d6764:	b2d9      	uxtb	r1, r3
   d6766:	4588      	cmp	r8, r1
   d6768:	d903      	bls.n	d6772 <_Z4dtoadhPc+0x3e>
        scale *= 10;
   d676a:	fb02 f909 	mul.w	r9, r2, r9
    for (uint8_t i=0; i<prec; i++)
   d676e:	3301      	adds	r3, #1
   d6770:	e7f8      	b.n	d6764 <_Z4dtoadhPc+0x30>
    val *= scale;   // capture all the significant digits
   d6772:	4648      	mov	r0, r9
   d6774:	f002 fe70 	bl	d9458 <__aeabi_i2d>
   d6778:	4632      	mov	r2, r6
   d677a:	463b      	mov	r3, r7
   d677c:	f002 fed6 	bl	d952c <__aeabi_dmul>
   d6780:	4606      	mov	r6, r0
   d6782:	460f      	mov	r7, r1
    uint64_t fixed = uint64_t(val);
   d6784:	f003 fb68 	bl	d9e58 <__aeabi_d2ulz>
   d6788:	4605      	mov	r5, r0
   d678a:	468a      	mov	sl, r1
    if ((val-fixed)>=0.5)    // round last digit
   d678c:	f002 fe98 	bl	d94c0 <__aeabi_ul2d>
   d6790:	4602      	mov	r2, r0
   d6792:	460b      	mov	r3, r1
   d6794:	4630      	mov	r0, r6
   d6796:	4639      	mov	r1, r7
   d6798:	f002 fd10 	bl	d91bc <__aeabi_dsub>
   d679c:	4b13      	ldr	r3, [pc, #76]	; (d67ec <_Z4dtoadhPc+0xb8>)
   d679e:	2200      	movs	r2, #0
   d67a0:	f003 f94a 	bl	d9a38 <__aeabi_dcmpge>
   d67a4:	b110      	cbz	r0, d67ac <_Z4dtoadhPc+0x78>
        fixed++;
   d67a6:	3501      	adds	r5, #1
   d67a8:	f14a 0a00 	adc.w	sl, sl, #0

    unsigned long first = (unsigned long)(fixed / scale);
   d67ac:	464a      	mov	r2, r9
   d67ae:	4628      	mov	r0, r5
   d67b0:	17d3      	asrs	r3, r2, #31
   d67b2:	4651      	mov	r1, sl
   d67b4:	f003 fb38 	bl	d9e28 <__aeabi_uldivmod>
    unsigned long second = (unsigned long)(fixed % scale);

    ultoa(first, sout, 10, 1);
   d67b8:	2301      	movs	r3, #1
   d67ba:	4615      	mov	r5, r2
   d67bc:	4621      	mov	r1, r4
   d67be:	220a      	movs	r2, #10
   d67c0:	f7ff ff87 	bl	d66d2 <ultoa>
    if (prec) {
   d67c4:	f1b8 0f00 	cmp.w	r8, #0
   d67c8:	d00d      	beq.n	d67e6 <_Z4dtoadhPc+0xb2>
        sout += strlen(sout);
   d67ca:	4620      	mov	r0, r4
   d67cc:	f003 fd33 	bl	da236 <strlen>
        *sout++ = '.';
   d67d0:	232e      	movs	r3, #46	; 0x2e
        sout += strlen(sout);
   d67d2:	1821      	adds	r1, r4, r0
        *sout++ = '.';
   d67d4:	5423      	strb	r3, [r4, r0]
        ultoa(second, sout, 10, prec);
   d67d6:	220a      	movs	r2, #10
   d67d8:	4643      	mov	r3, r8
   d67da:	4628      	mov	r0, r5
   d67dc:	3101      	adds	r1, #1
    }
}
   d67de:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
        ultoa(second, sout, 10, prec);
   d67e2:	f7ff bf76 	b.w	d66d2 <ultoa>
}
   d67e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d67ea:	bf00      	nop
   d67ec:	3fe00000 	.word	0x3fe00000

000d67f0 <_ZN6StringD1Ev>:
	init();
	char buf[33];
	dtoa(value, decimalPlaces, buf);
        *this = buf;
}
String::~String()
   d67f0:	b510      	push	{r4, lr}
   d67f2:	4604      	mov	r4, r0
{
	free(buffer);
   d67f4:	6800      	ldr	r0, [r0, #0]
   d67f6:	f7ff fe11 	bl	d641c <free>
}
   d67fa:	4620      	mov	r0, r4
   d67fc:	bd10      	pop	{r4, pc}

000d67fe <_ZN6String10invalidateEv>:
	len = 0;
	flags = 0;
}

void String::invalidate(void)
{
   d67fe:	b510      	push	{r4, lr}
   d6800:	4604      	mov	r4, r0
	if (buffer) free(buffer);
   d6802:	6800      	ldr	r0, [r0, #0]
   d6804:	b108      	cbz	r0, d680a <_ZN6String10invalidateEv+0xc>
   d6806:	f7ff fe09 	bl	d641c <free>
	buffer = NULL;
   d680a:	2300      	movs	r3, #0
	capacity = len = 0;
   d680c:	e9c4 3301 	strd	r3, r3, [r4, #4]
	buffer = NULL;
   d6810:	6023      	str	r3, [r4, #0]
}
   d6812:	bd10      	pop	{r4, pc}

000d6814 <_ZN6String12changeBufferEj>:
	}
	return 0;
}

unsigned char String::changeBuffer(unsigned int maxStrLen)
{
   d6814:	b538      	push	{r3, r4, r5, lr}
   d6816:	4604      	mov	r4, r0
   d6818:	460d      	mov	r5, r1
	char *newbuffer = (char *)realloc(buffer, maxStrLen + 1);
   d681a:	6800      	ldr	r0, [r0, #0]
   d681c:	3101      	adds	r1, #1
   d681e:	f7ff fe05 	bl	d642c <realloc>
	if (newbuffer) {
   d6822:	b110      	cbz	r0, d682a <_ZN6String12changeBufferEj+0x16>
		buffer = newbuffer;
		capacity = maxStrLen;
   d6824:	e9c4 0500 	strd	r0, r5, [r4]
		return 1;
   d6828:	2001      	movs	r0, #1
	}
	return 0;
}
   d682a:	bd38      	pop	{r3, r4, r5, pc}

000d682c <_ZN6String7reserveEj>:
{
   d682c:	b510      	push	{r4, lr}
	if (buffer && capacity >= size) return 1;
   d682e:	6803      	ldr	r3, [r0, #0]
{
   d6830:	4604      	mov	r4, r0
	if (buffer && capacity >= size) return 1;
   d6832:	b123      	cbz	r3, d683e <_ZN6String7reserveEj+0x12>
   d6834:	6843      	ldr	r3, [r0, #4]
   d6836:	428b      	cmp	r3, r1
   d6838:	d301      	bcc.n	d683e <_ZN6String7reserveEj+0x12>
   d683a:	2001      	movs	r0, #1
}
   d683c:	bd10      	pop	{r4, pc}
	if (changeBuffer(size)) {
   d683e:	4620      	mov	r0, r4
   d6840:	f7ff ffe8 	bl	d6814 <_ZN6String12changeBufferEj>
   d6844:	2800      	cmp	r0, #0
   d6846:	d0f9      	beq.n	d683c <_ZN6String7reserveEj+0x10>
		if (len == 0) buffer[0] = 0;
   d6848:	68a3      	ldr	r3, [r4, #8]
   d684a:	2b00      	cmp	r3, #0
   d684c:	d1f5      	bne.n	d683a <_ZN6String7reserveEj+0xe>
   d684e:	6822      	ldr	r2, [r4, #0]
   d6850:	7013      	strb	r3, [r2, #0]
   d6852:	e7f2      	b.n	d683a <_ZN6String7reserveEj+0xe>

000d6854 <_ZN6String4copyEPKcj>:
/*********************************************/
/*  Copy and Move                            */
/*********************************************/

String & String::copy(const char *cstr, unsigned int length)
{
   d6854:	b537      	push	{r0, r1, r2, r4, r5, lr}
   d6856:	460d      	mov	r5, r1
	if (!reserve(length)) {
   d6858:	4611      	mov	r1, r2
   d685a:	9201      	str	r2, [sp, #4]
{
   d685c:	4604      	mov	r4, r0
	if (!reserve(length)) {
   d685e:	f7ff ffe5 	bl	d682c <_ZN6String7reserveEj>
   d6862:	9a01      	ldr	r2, [sp, #4]
   d6864:	b928      	cbnz	r0, d6872 <_ZN6String4copyEPKcj+0x1e>
		invalidate();
   d6866:	4620      	mov	r0, r4
   d6868:	f7ff ffc9 	bl	d67fe <_ZN6String10invalidateEv>
	}
	len = length;
	memcpy(buffer, cstr, length);
	buffer[len] = 0;
	return *this;
}
   d686c:	4620      	mov	r0, r4
   d686e:	b003      	add	sp, #12
   d6870:	bd30      	pop	{r4, r5, pc}
	len = length;
   d6872:	60a2      	str	r2, [r4, #8]
	memcpy(buffer, cstr, length);
   d6874:	4629      	mov	r1, r5
   d6876:	6820      	ldr	r0, [r4, #0]
   d6878:	f003 fc82 	bl	da180 <memcpy>
	buffer[len] = 0;
   d687c:	6822      	ldr	r2, [r4, #0]
   d687e:	68a3      	ldr	r3, [r4, #8]
   d6880:	2100      	movs	r1, #0
   d6882:	54d1      	strb	r1, [r2, r3]
	return *this;
   d6884:	e7f2      	b.n	d686c <_ZN6String4copyEPKcj+0x18>

000d6886 <_ZN6StringC1EPKc>:
	buffer = NULL;
   d6886:	2300      	movs	r3, #0
String::String(const char *cstr)
   d6888:	b513      	push	{r0, r1, r4, lr}
	capacity = 0;
   d688a:	e9c0 3300 	strd	r3, r3, [r0]
String::String(const char *cstr)
   d688e:	4604      	mov	r4, r0
	len = 0;
   d6890:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6892:	7303      	strb	r3, [r0, #12]
	if (cstr) copy(cstr, strlen(cstr));
   d6894:	b141      	cbz	r1, d68a8 <_ZN6StringC1EPKc+0x22>
   d6896:	4608      	mov	r0, r1
   d6898:	9101      	str	r1, [sp, #4]
   d689a:	f003 fccc 	bl	da236 <strlen>
   d689e:	9901      	ldr	r1, [sp, #4]
   d68a0:	4602      	mov	r2, r0
   d68a2:	4620      	mov	r0, r4
   d68a4:	f7ff ffd6 	bl	d6854 <_ZN6String4copyEPKcj>
}
   d68a8:	4620      	mov	r0, r4
   d68aa:	b002      	add	sp, #8
   d68ac:	bd10      	pop	{r4, pc}

000d68ae <_ZN6String4moveERS_>:
    return copy(reinterpret_cast<const char*>(pstr), length);
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
void String::move(String &rhs)
{
   d68ae:	b538      	push	{r3, r4, r5, lr}
   d68b0:	4605      	mov	r5, r0
	if (buffer) {
   d68b2:	6800      	ldr	r0, [r0, #0]
{
   d68b4:	460c      	mov	r4, r1
	if (buffer) {
   d68b6:	b168      	cbz	r0, d68d4 <_ZN6String4moveERS_+0x26>
		if (capacity >= rhs.len) {
   d68b8:	686a      	ldr	r2, [r5, #4]
   d68ba:	688b      	ldr	r3, [r1, #8]
   d68bc:	429a      	cmp	r2, r3
   d68be:	d307      	bcc.n	d68d0 <_ZN6String4moveERS_+0x22>
			strcpy(buffer, rhs.buffer);
   d68c0:	6809      	ldr	r1, [r1, #0]
   d68c2:	f003 fcb0 	bl	da226 <strcpy>
			len = rhs.len;
   d68c6:	68a3      	ldr	r3, [r4, #8]
   d68c8:	60ab      	str	r3, [r5, #8]
			rhs.len = 0;
   d68ca:	2300      	movs	r3, #0
	buffer = rhs.buffer;
	capacity = rhs.capacity;
	len = rhs.len;
	rhs.buffer = NULL;
	rhs.capacity = 0;
	rhs.len = 0;
   d68cc:	60a3      	str	r3, [r4, #8]
}
   d68ce:	bd38      	pop	{r3, r4, r5, pc}
			free(buffer);
   d68d0:	f7ff fda4 	bl	d641c <free>
	buffer = rhs.buffer;
   d68d4:	6823      	ldr	r3, [r4, #0]
   d68d6:	602b      	str	r3, [r5, #0]
	capacity = rhs.capacity;
   d68d8:	6863      	ldr	r3, [r4, #4]
   d68da:	606b      	str	r3, [r5, #4]
	len = rhs.len;
   d68dc:	68a3      	ldr	r3, [r4, #8]
   d68de:	60ab      	str	r3, [r5, #8]
	rhs.buffer = NULL;
   d68e0:	2300      	movs	r3, #0
	rhs.capacity = 0;
   d68e2:	e9c4 3300 	strd	r3, r3, [r4]
   d68e6:	e7f1      	b.n	d68cc <_ZN6String4moveERS_+0x1e>

000d68e8 <_ZN6StringaSERKS_>:
#endif

String & String::operator = (const String &rhs)
{
	if (this == &rhs) return *this;
   d68e8:	4288      	cmp	r0, r1
{
   d68ea:	b510      	push	{r4, lr}
   d68ec:	4604      	mov	r4, r0
	if (this == &rhs) return *this;
   d68ee:	d005      	beq.n	d68fc <_ZN6StringaSERKS_+0x14>

	if (rhs.buffer) copy(rhs.buffer, rhs.len);
   d68f0:	680b      	ldr	r3, [r1, #0]
   d68f2:	b12b      	cbz	r3, d6900 <_ZN6StringaSERKS_+0x18>
   d68f4:	688a      	ldr	r2, [r1, #8]
   d68f6:	4619      	mov	r1, r3
   d68f8:	f7ff ffac 	bl	d6854 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d68fc:	4620      	mov	r0, r4
   d68fe:	bd10      	pop	{r4, pc}
	else invalidate();
   d6900:	f7ff ff7d 	bl	d67fe <_ZN6String10invalidateEv>
   d6904:	e7fa      	b.n	d68fc <_ZN6StringaSERKS_+0x14>

000d6906 <_ZN6StringC1ERKS_>:
String::String(const String &value)
   d6906:	b510      	push	{r4, lr}
	buffer = NULL;
   d6908:	2300      	movs	r3, #0
String::String(const String &value)
   d690a:	4604      	mov	r4, r0
	capacity = 0;
   d690c:	e9c0 3300 	strd	r3, r3, [r0]
	len = 0;
   d6910:	6083      	str	r3, [r0, #8]
	flags = 0;
   d6912:	7303      	strb	r3, [r0, #12]
	*this = value;
   d6914:	f7ff ffe8 	bl	d68e8 <_ZN6StringaSERKS_>
}
   d6918:	4620      	mov	r0, r4
   d691a:	bd10      	pop	{r4, pc}

000d691c <_ZN6StringaSEOS_>:
}

#ifdef __GXX_EXPERIMENTAL_CXX0X__
String & String::operator = (String &&rval)
{
	if (this != &rval) move(rval);
   d691c:	4288      	cmp	r0, r1
{
   d691e:	b510      	push	{r4, lr}
   d6920:	4604      	mov	r4, r0
	if (this != &rval) move(rval);
   d6922:	d001      	beq.n	d6928 <_ZN6StringaSEOS_+0xc>
   d6924:	f7ff ffc3 	bl	d68ae <_ZN6String4moveERS_>
	return *this;
}
   d6928:	4620      	mov	r0, r4
   d692a:	bd10      	pop	{r4, pc}

000d692c <_ZN6StringaSEPKc>:
	return *this;
}
#endif

String & String::operator = (const char *cstr)
{
   d692c:	b513      	push	{r0, r1, r4, lr}
   d692e:	4604      	mov	r4, r0
	if (cstr) copy(cstr, strlen(cstr));
   d6930:	b159      	cbz	r1, d694a <_ZN6StringaSEPKc+0x1e>
   d6932:	4608      	mov	r0, r1
   d6934:	9101      	str	r1, [sp, #4]
   d6936:	f003 fc7e 	bl	da236 <strlen>
   d693a:	9901      	ldr	r1, [sp, #4]
   d693c:	4602      	mov	r2, r0
   d693e:	4620      	mov	r0, r4
   d6940:	f7ff ff88 	bl	d6854 <_ZN6String4copyEPKcj>
	else invalidate();

	return *this;
}
   d6944:	4620      	mov	r0, r4
   d6946:	b002      	add	sp, #8
   d6948:	bd10      	pop	{r4, pc}
	else invalidate();
   d694a:	f7ff ff58 	bl	d67fe <_ZN6String10invalidateEv>
   d694e:	e7f9      	b.n	d6944 <_ZN6StringaSEPKc+0x18>

000d6950 <_ZN6StringC1Ejh>:
String::String(unsigned int value, unsigned char base)
   d6950:	b510      	push	{r4, lr}
   d6952:	4604      	mov	r4, r0
   d6954:	b08a      	sub	sp, #40	; 0x28
	buffer = NULL;
   d6956:	2300      	movs	r3, #0
	capacity = 0;
   d6958:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d695c:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d695e:	7323      	strb	r3, [r4, #12]
String::String(unsigned int value, unsigned char base)
   d6960:	4608      	mov	r0, r1
	utoa(value, buf, base);
   d6962:	a901      	add	r1, sp, #4
   d6964:	f7ff fee0 	bl	d6728 <utoa>
	*this = buf;
   d6968:	a901      	add	r1, sp, #4
   d696a:	4620      	mov	r0, r4
   d696c:	f7ff ffde 	bl	d692c <_ZN6StringaSEPKc>
}
   d6970:	4620      	mov	r0, r4
   d6972:	b00a      	add	sp, #40	; 0x28
   d6974:	bd10      	pop	{r4, pc}

000d6976 <_ZN6StringC1Efi>:
String::String(float value, int decimalPlaces)
   d6976:	b530      	push	{r4, r5, lr}
   d6978:	4604      	mov	r4, r0
	buffer = NULL;
   d697a:	2300      	movs	r3, #0
String::String(float value, int decimalPlaces)
   d697c:	b08b      	sub	sp, #44	; 0x2c
	capacity = 0;
   d697e:	e9c4 3300 	strd	r3, r3, [r4]
	len = 0;
   d6982:	60a3      	str	r3, [r4, #8]
	flags = 0;
   d6984:	7323      	strb	r3, [r4, #12]
String::String(float value, int decimalPlaces)
   d6986:	ee10 0a10 	vmov	r0, s0
	dtoa(value, decimalPlaces, buf);
   d698a:	b2cd      	uxtb	r5, r1
   d698c:	f002 fd76 	bl	d947c <__aeabi_f2d>
   d6990:	ec41 0b10 	vmov	d0, r0, r1
   d6994:	a901      	add	r1, sp, #4
   d6996:	4628      	mov	r0, r5
   d6998:	f7ff fecc 	bl	d6734 <_Z4dtoadhPc>
        *this = buf;
   d699c:	a901      	add	r1, sp, #4
   d699e:	4620      	mov	r0, r4
   d69a0:	f7ff ffc4 	bl	d692c <_ZN6StringaSEPKc>
}
   d69a4:	4620      	mov	r0, r4
   d69a6:	b00b      	add	sp, #44	; 0x2c
   d69a8:	bd30      	pop	{r4, r5, pc}

000d69aa <_ZN6String6concatEPKcj>:
{
	return concat(s.buffer, s.len);
}

unsigned char String::concat(const char *cstr, unsigned int length)
{
   d69aa:	b570      	push	{r4, r5, r6, lr}
   d69ac:	4605      	mov	r5, r0
	unsigned int newlen = len + length;
	if (!cstr) return 0;
   d69ae:	460e      	mov	r6, r1
   d69b0:	b909      	cbnz	r1, d69b6 <_ZN6String6concatEPKcj+0xc>
   d69b2:	2000      	movs	r0, #0
	if (length == 0) return 1;
	if (!reserve(newlen)) return 0;
	strcpy(buffer + len, cstr);
	len = newlen;
	return 1;
}
   d69b4:	bd70      	pop	{r4, r5, r6, pc}
	if (length == 0) return 1;
   d69b6:	b16a      	cbz	r2, d69d4 <_ZN6String6concatEPKcj+0x2a>
	unsigned int newlen = len + length;
   d69b8:	6884      	ldr	r4, [r0, #8]
   d69ba:	4414      	add	r4, r2
	if (!reserve(newlen)) return 0;
   d69bc:	4621      	mov	r1, r4
   d69be:	f7ff ff35 	bl	d682c <_ZN6String7reserveEj>
   d69c2:	2800      	cmp	r0, #0
   d69c4:	d0f5      	beq.n	d69b2 <_ZN6String6concatEPKcj+0x8>
	strcpy(buffer + len, cstr);
   d69c6:	6828      	ldr	r0, [r5, #0]
   d69c8:	68ab      	ldr	r3, [r5, #8]
   d69ca:	4631      	mov	r1, r6
   d69cc:	4418      	add	r0, r3
   d69ce:	f003 fc2a 	bl	da226 <strcpy>
	len = newlen;
   d69d2:	60ac      	str	r4, [r5, #8]
	if (length == 0) return 1;
   d69d4:	2001      	movs	r0, #1
   d69d6:	e7ed      	b.n	d69b4 <_ZN6String6concatEPKcj+0xa>

000d69d8 <_ZN6String6concatEc>:
unsigned char String::concat(const __FlashStringHelper * str) {
	return concat(reinterpret_cast<const char*>(str));
}

unsigned char String::concat(char c)
{
   d69d8:	b507      	push	{r0, r1, r2, lr}
	char buf[2];
	buf[0] = c;
	buf[1] = 0;
   d69da:	2300      	movs	r3, #0
	buf[0] = c;
   d69dc:	f88d 1004 	strb.w	r1, [sp, #4]
	return concat(buf, 1);
   d69e0:	2201      	movs	r2, #1
   d69e2:	a901      	add	r1, sp, #4
	buf[1] = 0;
   d69e4:	f88d 3005 	strb.w	r3, [sp, #5]
	return concat(buf, 1);
   d69e8:	f7ff ffdf 	bl	d69aa <_ZN6String6concatEPKcj>
}
   d69ec:	b003      	add	sp, #12
   d69ee:	f85d fb04 	ldr.w	pc, [sp], #4

000d69f2 <_ZplRK15StringSumHelperRK6String>:
/*********************************************/
/*  Concatenate                              */
/*********************************************/

StringSumHelper & operator + (const StringSumHelper &lhs, const String &rhs)
{
   d69f2:	b510      	push	{r4, lr}
	StringSumHelper &a = const_cast<StringSumHelper&>(lhs);
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d69f4:	688a      	ldr	r2, [r1, #8]
   d69f6:	6809      	ldr	r1, [r1, #0]
{
   d69f8:	4604      	mov	r4, r0
	if (!a.concat(rhs.buffer, rhs.len)) a.invalidate();
   d69fa:	f7ff ffd6 	bl	d69aa <_ZN6String6concatEPKcj>
   d69fe:	b910      	cbnz	r0, d6a06 <_ZplRK15StringSumHelperRK6String+0x14>
   d6a00:	4620      	mov	r0, r4
   d6a02:	f7ff fefc 	bl	d67fe <_ZN6String10invalidateEv>
	return a;
}
   d6a06:	4620      	mov	r0, r4
   d6a08:	bd10      	pop	{r4, pc}

000d6a0a <_ZNK6StringixEj>:
	return buffer[index];
}

char String::operator[]( unsigned int index ) const
{
	if (index >= len || !buffer) return 0;
   d6a0a:	6883      	ldr	r3, [r0, #8]
   d6a0c:	428b      	cmp	r3, r1
   d6a0e:	d903      	bls.n	d6a18 <_ZNK6StringixEj+0xe>
   d6a10:	6800      	ldr	r0, [r0, #0]
   d6a12:	b110      	cbz	r0, d6a1a <_ZNK6StringixEj+0x10>
	return buffer[index];
   d6a14:	5c40      	ldrb	r0, [r0, r1]
   d6a16:	4770      	bx	lr
	if (index >= len || !buffer) return 0;
   d6a18:	2000      	movs	r0, #0
}
   d6a1a:	4770      	bx	lr

000d6a1c <_ZNK6String6charAtEj>:
	return operator[](loc);
   d6a1c:	f7ff bff5 	b.w	d6a0a <_ZNK6StringixEj>

000d6a20 <_ZNK6String5toIntEv>:
/*  Parsing / Conversion                     */
/*********************************************/

long String::toInt(void) const
{
	if (buffer) return atol(buffer);
   d6a20:	6800      	ldr	r0, [r0, #0]
   d6a22:	b108      	cbz	r0, d6a28 <_ZNK6String5toIntEv+0x8>
   d6a24:	f003 bb9a 	b.w	da15c <atol>
	return 0;
}
   d6a28:	4770      	bx	lr

000d6a2a <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d6a2a:	b510      	push	{r4, lr}
   d6a2c:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d6a2e:	6800      	ldr	r0, [r0, #0]
   d6a30:	b108      	cbz	r0, d6a36 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d6a32:	f7ff faff 	bl	d6034 <os_mutex_recursive_destroy>
    }
   d6a36:	4620      	mov	r0, r4
   d6a38:	bd10      	pop	{r4, pc}
	...

000d6a3c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d6a3c:	b510      	push	{r4, lr}
    RecursiveMutex() : handle_(nullptr)
   d6a3e:	4c06      	ldr	r4, [pc, #24]	; (d6a58 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d6a40:	2300      	movs	r3, #0
        os_mutex_recursive_create(&handle_);
   d6a42:	4620      	mov	r0, r4
    RecursiveMutex() : handle_(nullptr)
   d6a44:	6023      	str	r3, [r4, #0]
        os_mutex_recursive_create(&handle_);
   d6a46:	f7ff faed 	bl	d6024 <os_mutex_recursive_create>
RecursiveMutex WiringBleLock::mutex_;
   d6a4a:	4620      	mov	r0, r4
   d6a4c:	4a03      	ldr	r2, [pc, #12]	; (d6a5c <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d6a4e:	4904      	ldr	r1, [pc, #16]	; (d6a60 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
} /* namespace particle */
   d6a50:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
RecursiveMutex WiringBleLock::mutex_;
   d6a54:	f001 b896 	b.w	d7b84 <__aeabi_atexit>
   d6a58:	2003e668 	.word	0x2003e668
   d6a5c:	2003e404 	.word	0x2003e404
   d6a60:	000d6a2b 	.word	0x000d6a2b

000d6a64 <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d6a64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d6a66:	4606      	mov	r6, r0
   d6a68:	460d      	mov	r5, r1
  size_t n = 0;
   d6a6a:	188f      	adds	r7, r1, r2
   d6a6c:	2400      	movs	r4, #0
  while (size--) {
   d6a6e:	42bd      	cmp	r5, r7
   d6a70:	d00c      	beq.n	d6a8c <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d6a72:	6833      	ldr	r3, [r6, #0]
   d6a74:	f815 1b01 	ldrb.w	r1, [r5], #1
   d6a78:	689b      	ldr	r3, [r3, #8]
   d6a7a:	4630      	mov	r0, r6
   d6a7c:	4798      	blx	r3
     if (chunk>=0)
   d6a7e:	1e03      	subs	r3, r0, #0
   d6a80:	db01      	blt.n	d6a86 <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d6a82:	441c      	add	r4, r3
  while (size--) {
   d6a84:	e7f3      	b.n	d6a6e <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d6a86:	2c00      	cmp	r4, #0
   d6a88:	bf08      	it	eq
   d6a8a:	461c      	moveq	r4, r3
             n = chunk;
         break;
     }
  }
  return n;
}
   d6a8c:	4620      	mov	r0, r4
   d6a8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d6a90 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d6a90:	b513      	push	{r0, r1, r4, lr}
   d6a92:	4604      	mov	r4, r0
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
    }
   d6a94:	4608      	mov	r0, r1
      if (str == NULL) return 0;
   d6a96:	b159      	cbz	r1, d6ab0 <_ZN5Print5writeEPKc+0x20>
      return write((const uint8_t *)str, strlen(str));
   d6a98:	9101      	str	r1, [sp, #4]
   d6a9a:	f003 fbcc 	bl	da236 <strlen>
   d6a9e:	6823      	ldr	r3, [r4, #0]
   d6aa0:	9901      	ldr	r1, [sp, #4]
   d6aa2:	68db      	ldr	r3, [r3, #12]
   d6aa4:	4602      	mov	r2, r0
   d6aa6:	4620      	mov	r0, r4
    }
   d6aa8:	b002      	add	sp, #8
   d6aaa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
      return write((const uint8_t *)str, strlen(str));
   d6aae:	4718      	bx	r3
    }
   d6ab0:	b002      	add	sp, #8
   d6ab2:	bd10      	pop	{r4, pc}

000d6ab4 <_ZN5Print5printEPKc>:

size_t Print::print(const char str[])
{
   d6ab4:	b508      	push	{r3, lr}
  return write(str);
   d6ab6:	f7ff ffeb 	bl	d6a90 <_ZN5Print5writeEPKc>
}
   d6aba:	bd08      	pop	{r3, pc}

000d6abc <_ZN5Print5printEc>:

size_t Print::print(char c)
{
  return write(c);
   d6abc:	6803      	ldr	r3, [r0, #0]
   d6abe:	689b      	ldr	r3, [r3, #8]
   d6ac0:	4718      	bx	r3

000d6ac2 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d6ac2:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d6ac4:	210d      	movs	r1, #13
{
   d6ac6:	4605      	mov	r5, r0
  size_t n = print('\r');
   d6ac8:	f7ff fff8 	bl	d6abc <_ZN5Print5printEc>
  n += print('\n');
   d6acc:	210a      	movs	r1, #10
  size_t n = print('\r');
   d6ace:	4604      	mov	r4, r0
  n += print('\n');
   d6ad0:	4628      	mov	r0, r5
   d6ad2:	f7ff fff3 	bl	d6abc <_ZN5Print5printEc>
  return n;
}
   d6ad6:	4420      	add	r0, r4
   d6ad8:	bd38      	pop	{r3, r4, r5, pc}

000d6ada <_ZN5Print7printlnEPKc>:

size_t Print::println(const char c[])
{
   d6ada:	b538      	push	{r3, r4, r5, lr}
   d6adc:	4605      	mov	r5, r0
  return write(str);
   d6ade:	f7ff ffd7 	bl	d6a90 <_ZN5Print5writeEPKc>
   d6ae2:	4604      	mov	r4, r0
  size_t n = print(c);
  n += println();
   d6ae4:	4628      	mov	r0, r5
   d6ae6:	f7ff ffec 	bl	d6ac2 <_ZN5Print7printlnEv>
  return n;
}
   d6aea:	4420      	add	r0, r4
   d6aec:	bd38      	pop	{r3, r4, r5, pc}

000d6aee <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d6aee:	b530      	push	{r4, r5, lr}
   d6af0:	b08b      	sub	sp, #44	; 0x2c
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d6af2:	2300      	movs	r3, #0
   d6af4:	f88d 3024 	strb.w	r3, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d6af8:	2a01      	cmp	r2, #1
   d6afa:	bf98      	it	ls
   d6afc:	220a      	movls	r2, #10
   d6afe:	ac09      	add	r4, sp, #36	; 0x24

  do {
   decltype(n) m = n;
   n /= base;
   d6b00:	460d      	mov	r5, r1
   d6b02:	fbb1 f1f2 	udiv	r1, r1, r2
   char c = m - base * n;
   d6b06:	fb01 5312 	mls	r3, r1, r2, r5
   d6b0a:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6b0e:	2b09      	cmp	r3, #9
   d6b10:	bf94      	ite	ls
   d6b12:	3330      	addls	r3, #48	; 0x30
   d6b14:	3337      	addhi	r3, #55	; 0x37
   d6b16:	b2db      	uxtb	r3, r3
  } while(n);
   d6b18:	42aa      	cmp	r2, r5
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d6b1a:	f804 3d01 	strb.w	r3, [r4, #-1]!
  } while(n);
   d6b1e:	d9ef      	bls.n	d6b00 <_ZN5Print11printNumberEmh+0x12>

  return write(str);
   d6b20:	4621      	mov	r1, r4
   d6b22:	f7ff ffb5 	bl	d6a90 <_ZN5Print5writeEPKc>
}
   d6b26:	b00b      	add	sp, #44	; 0x2c
   d6b28:	bd30      	pop	{r4, r5, pc}

000d6b2a <_ZN5Print7vprintfEbPKcSt9__va_list>:

  return n;
}

size_t Print::vprintf(bool newline, const char* format, va_list args)
{
   d6b2a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6b2e:	b086      	sub	sp, #24
   d6b30:	af00      	add	r7, sp, #0
   d6b32:	4605      	mov	r5, r0
   d6b34:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list args2;
    va_copy(args2, args);
    size_t n = vsnprintf(test, bufsize, format, args);
   d6b36:	1d38      	adds	r0, r7, #4
   d6b38:	2114      	movs	r1, #20
{
   d6b3a:	4614      	mov	r4, r2
    va_copy(args2, args);
   d6b3c:	603b      	str	r3, [r7, #0]
    size_t n = vsnprintf(test, bufsize, format, args);
   d6b3e:	f7ff fc85 	bl	d644c <vsnprintf>

    if (n<bufsize)
   d6b42:	2813      	cmp	r0, #19
   d6b44:	d80e      	bhi.n	d6b64 <_ZN5Print7vprintfEbPKcSt9__va_list+0x3a>
  return write(str);
   d6b46:	1d39      	adds	r1, r7, #4
   d6b48:	4628      	mov	r0, r5
   d6b4a:	f7ff ffa1 	bl	d6a90 <_ZN5Print5writeEPKc>
   d6b4e:	4604      	mov	r4, r0
    {
        char bigger[n+1];
        n = vsnprintf(bigger, n+1, format, args2);
        n = print(bigger);
    }
    if (newline)
   d6b50:	b11e      	cbz	r6, d6b5a <_ZN5Print7vprintfEbPKcSt9__va_list+0x30>
        n += println();
   d6b52:	4628      	mov	r0, r5
   d6b54:	f7ff ffb5 	bl	d6ac2 <_ZN5Print7printlnEv>
   d6b58:	4404      	add	r4, r0

    va_end(args2);
    return n;
}
   d6b5a:	4620      	mov	r0, r4
   d6b5c:	3718      	adds	r7, #24
   d6b5e:	46bd      	mov	sp, r7
   d6b60:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
        char bigger[n+1];
   d6b64:	f100 0308 	add.w	r3, r0, #8
   d6b68:	f023 0307 	bic.w	r3, r3, #7
        n = print(bigger);
   d6b6c:	46e8      	mov	r8, sp
        char bigger[n+1];
   d6b6e:	ebad 0d03 	sub.w	sp, sp, r3
        n = vsnprintf(bigger, n+1, format, args2);
   d6b72:	4622      	mov	r2, r4
   d6b74:	1c41      	adds	r1, r0, #1
   d6b76:	683b      	ldr	r3, [r7, #0]
   d6b78:	4668      	mov	r0, sp
   d6b7a:	f7ff fc67 	bl	d644c <vsnprintf>
  return write(str);
   d6b7e:	4669      	mov	r1, sp
   d6b80:	4628      	mov	r0, r5
   d6b82:	f7ff ff85 	bl	d6a90 <_ZN5Print5writeEPKc>
   d6b86:	4604      	mov	r4, r0
   d6b88:	46c5      	mov	sp, r8
   d6b8a:	e7e1      	b.n	d6b50 <_ZN5Print7vprintfEbPKcSt9__va_list+0x26>

000d6b8c <_ZN6Stream9timedReadEv>:
#define PARSE_TIMEOUT 1000  // default number of milli-seconds to wait
#define NO_SKIP_CHAR  1  // a magic char not found in a valid ASCII numeric field

// private method to read stream with timeout
int Stream::timedRead()
{
   d6b8c:	b510      	push	{r4, lr}
   d6b8e:	4604      	mov	r4, r0

#ifdef __cplusplus
extern "C" {
#endif

inline system_tick_t millis(void) { return HAL_Timer_Get_Milli_Seconds(); }
   d6b90:	f7ff fa40 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6b94:	60e0      	str	r0, [r4, #12]
  do {
    c = read();
   d6b96:	6823      	ldr	r3, [r4, #0]
   d6b98:	4620      	mov	r0, r4
   d6b9a:	695b      	ldr	r3, [r3, #20]
   d6b9c:	4798      	blx	r3
    if (c >= 0) return c;
   d6b9e:	2800      	cmp	r0, #0
   d6ba0:	da08      	bge.n	d6bb4 <_ZN6Stream9timedReadEv+0x28>
   d6ba2:	f7ff fa37 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d6ba6:	68e3      	ldr	r3, [r4, #12]
   d6ba8:	1ac0      	subs	r0, r0, r3
   d6baa:	68a3      	ldr	r3, [r4, #8]
   d6bac:	4298      	cmp	r0, r3
   d6bae:	d3f2      	bcc.n	d6b96 <_ZN6Stream9timedReadEv+0xa>
  return -1;     // -1 indicates timeout
   d6bb0:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6bb4:	bd10      	pop	{r4, pc}

000d6bb6 <_ZN6Stream9timedPeekEv>:

// private method to peek stream with timeout
int Stream::timedPeek()
{
   d6bb6:	b510      	push	{r4, lr}
   d6bb8:	4604      	mov	r4, r0
   d6bba:	f7ff fa2b 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
  int c;
  _startMillis = millis();
   d6bbe:	60e0      	str	r0, [r4, #12]
  do {
    c = peek();
   d6bc0:	6823      	ldr	r3, [r4, #0]
   d6bc2:	4620      	mov	r0, r4
   d6bc4:	699b      	ldr	r3, [r3, #24]
   d6bc6:	4798      	blx	r3
    if (c >= 0) return c;
   d6bc8:	2800      	cmp	r0, #0
   d6bca:	da08      	bge.n	d6bde <_ZN6Stream9timedPeekEv+0x28>
   d6bcc:	f7ff fa22 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
  } while(millis() - _startMillis < _timeout);
   d6bd0:	68e3      	ldr	r3, [r4, #12]
   d6bd2:	1ac0      	subs	r0, r0, r3
   d6bd4:	68a3      	ldr	r3, [r4, #8]
   d6bd6:	4298      	cmp	r0, r3
   d6bd8:	d3f2      	bcc.n	d6bc0 <_ZN6Stream9timedPeekEv+0xa>
  return -1;     // -1 indicates timeout
   d6bda:	f04f 30ff 	mov.w	r0, #4294967295
}
   d6bde:	bd10      	pop	{r4, pc}

000d6be0 <_ZN6Stream13peekNextDigitEv>:

// returns peek of the next digit in the stream or -1 if timeout
// discards non-numeric characters
int Stream::peekNextDigit()
{
   d6be0:	b510      	push	{r4, lr}
   d6be2:	4604      	mov	r4, r0
  int c = -1;
  while (1) {
    c = timedPeek();
   d6be4:	4620      	mov	r0, r4
   d6be6:	f7ff ffe6 	bl	d6bb6 <_ZN6Stream9timedPeekEv>
    // timeout
    if ((c < 0) || (c == '-') || (c >= '0' && c <= '9'))
   d6bea:	2800      	cmp	r0, #0
   d6bec:	db0a      	blt.n	d6c04 <_ZN6Stream13peekNextDigitEv+0x24>
   d6bee:	282d      	cmp	r0, #45	; 0x2d
   d6bf0:	d008      	beq.n	d6c04 <_ZN6Stream13peekNextDigitEv+0x24>
   d6bf2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6bf6:	2b09      	cmp	r3, #9
   d6bf8:	d904      	bls.n	d6c04 <_ZN6Stream13peekNextDigitEv+0x24>
    {
        break;
    }
    read();  // discard non-numeric
   d6bfa:	6823      	ldr	r3, [r4, #0]
   d6bfc:	4620      	mov	r0, r4
   d6bfe:	695b      	ldr	r3, [r3, #20]
   d6c00:	4798      	blx	r3
    c = timedPeek();
   d6c02:	e7ef      	b.n	d6be4 <_ZN6Stream13peekNextDigitEv+0x4>
  }
  return c;
}
   d6c04:	bd10      	pop	{r4, pc}

000d6c06 <_ZN6Stream9findUntilEPcjS0_j>:

// reads data from the stream until the target string of the given length is found
// search terminated if the terminator string is found
// returns true if target string is found, false if terminated or timed out
bool Stream::findUntil(char *target, size_t targetLen, char *terminator, size_t termLen)
{
   d6c06:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d6c0a:	469b      	mov	fp, r3
  size_t index = 0;  // maximum target string length is 64k bytes!
  size_t termIndex = 0;
  int c;

  if( *target == 0)
   d6c0c:	780b      	ldrb	r3, [r1, #0]
{
   d6c0e:	f8dd 8028 	ldr.w	r8, [sp, #40]	; 0x28
   d6c12:	4681      	mov	r9, r0
   d6c14:	460f      	mov	r7, r1
   d6c16:	4692      	mov	sl, r2
  if( *target == 0)
   d6c18:	b9fb      	cbnz	r3, d6c5a <_ZN6Stream9findUntilEPcjS0_j+0x54>
    return true;   // return true if target is a null string
   d6c1a:	2001      	movs	r0, #1
    }
    else
      termIndex = 0;
  }
  return false;
}
   d6c1c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
      termIndex = 0;
   d6c20:	2400      	movs	r4, #0
  while( (c = timedRead()) > 0){
   d6c22:	4648      	mov	r0, r9
   d6c24:	f7ff ffb2 	bl	d6b8c <_ZN6Stream9timedReadEv>
   d6c28:	1e06      	subs	r6, r0, #0
   d6c2a:	dd14      	ble.n	d6c56 <_ZN6Stream9findUntilEPcjS0_j+0x50>
    if(c != target[index])
   d6c2c:	5d7b      	ldrb	r3, [r7, r5]
   d6c2e:	429e      	cmp	r6, r3
   d6c30:	d004      	beq.n	d6c3c <_ZN6Stream9findUntilEPcjS0_j+0x36>
    if( c == target[index]){
   d6c32:	783b      	ldrb	r3, [r7, #0]
   d6c34:	429e      	cmp	r6, r3
      index = 0; // reset index if any char does not match
   d6c36:	f04f 0500 	mov.w	r5, #0
    if( c == target[index]){
   d6c3a:	d102      	bne.n	d6c42 <_ZN6Stream9findUntilEPcjS0_j+0x3c>
      if(++index >= targetLen){ // return true if all chars in the target match
   d6c3c:	3501      	adds	r5, #1
   d6c3e:	45aa      	cmp	sl, r5
   d6c40:	d9eb      	bls.n	d6c1a <_ZN6Stream9findUntilEPcjS0_j+0x14>
    if(termLen > 0 && c == terminator[termIndex]){
   d6c42:	f1b8 0f00 	cmp.w	r8, #0
   d6c46:	d0eb      	beq.n	d6c20 <_ZN6Stream9findUntilEPcjS0_j+0x1a>
   d6c48:	f81b 3004 	ldrb.w	r3, [fp, r4]
   d6c4c:	429e      	cmp	r6, r3
   d6c4e:	d1e7      	bne.n	d6c20 <_ZN6Stream9findUntilEPcjS0_j+0x1a>
      if(++termIndex >= termLen)
   d6c50:	3401      	adds	r4, #1
   d6c52:	45a0      	cmp	r8, r4
   d6c54:	d8e5      	bhi.n	d6c22 <_ZN6Stream9findUntilEPcjS0_j+0x1c>
  return false;
   d6c56:	2000      	movs	r0, #0
   d6c58:	e7e0      	b.n	d6c1c <_ZN6Stream9findUntilEPcjS0_j+0x16>
  size_t termIndex = 0;
   d6c5a:	2400      	movs	r4, #0
  size_t index = 0;  // maximum target string length is 64k bytes!
   d6c5c:	4625      	mov	r5, r4
   d6c5e:	e7e0      	b.n	d6c22 <_ZN6Stream9findUntilEPcjS0_j+0x1c>

000d6c60 <_ZN6Stream9findUntilEPcS0_>:
{
   d6c60:	b530      	push	{r4, r5, lr}
   d6c62:	b085      	sub	sp, #20
   d6c64:	4605      	mov	r5, r0
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   d6c66:	4608      	mov	r0, r1
{
   d6c68:	4614      	mov	r4, r2
  return findUntil(target, strlen(target), terminator, strlen(terminator));
   d6c6a:	9103      	str	r1, [sp, #12]
   d6c6c:	f003 fae3 	bl	da236 <strlen>
   d6c70:	9002      	str	r0, [sp, #8]
   d6c72:	4620      	mov	r0, r4
   d6c74:	f003 fadf 	bl	da236 <strlen>
   d6c78:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
   d6c7c:	9000      	str	r0, [sp, #0]
   d6c7e:	4623      	mov	r3, r4
   d6c80:	4628      	mov	r0, r5
   d6c82:	f7ff ffc0 	bl	d6c06 <_ZN6Stream9findUntilEPcjS0_j>
}
   d6c86:	b005      	add	sp, #20
   d6c88:	bd30      	pop	{r4, r5, pc}

000d6c8a <_ZN6Stream4findEPc>:
  return findUntil(target, NULL);
   d6c8a:	2200      	movs	r2, #0
   d6c8c:	f7ff bfe8 	b.w	d6c60 <_ZN6Stream9findUntilEPcS0_>

000d6c90 <_ZN6Stream8parseIntEc>:
}

// as above but a given skipChar is ignored
// this allows format characters (typically commas) in values to be ignored
long Stream::parseInt(char skipChar)
{
   d6c90:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d6c94:	4605      	mov	r5, r0
   d6c96:	460e      	mov	r6, r1
  bool isNegative = false;
  long value = 0;
  int c;

  c = peekNextDigit();
   d6c98:	f7ff ffa2 	bl	d6be0 <_ZN6Stream13peekNextDigitEv>
  // ignore non numeric leading characters
  if(c < 0)
   d6c9c:	2800      	cmp	r0, #0
    return 0; // zero returned if timeout
   d6c9e:	f04f 0400 	mov.w	r4, #0
  if(c < 0)
   d6ca2:	db1c      	blt.n	d6cde <_ZN6Stream8parseIntEc+0x4e>
  bool isNegative = false;
   d6ca4:	4627      	mov	r7, r4
    if(c == skipChar) {
      // ignore this charactor
    } else if(c == '-') {
      isNegative = true;
    } else if(c >= '0' && c <= '9') {        // is c a digit?
      value = value * 10 + c - '0';
   d6ca6:	f04f 080a 	mov.w	r8, #10
    if(c == skipChar) {
   d6caa:	4286      	cmp	r6, r0
   d6cac:	d008      	beq.n	d6cc0 <_ZN6Stream8parseIntEc+0x30>
    } else if(c == '-') {
   d6cae:	282d      	cmp	r0, #45	; 0x2d
   d6cb0:	d018      	beq.n	d6ce4 <_ZN6Stream8parseIntEc+0x54>
    } else if(c >= '0' && c <= '9') {        // is c a digit?
   d6cb2:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6cb6:	2b09      	cmp	r3, #9
   d6cb8:	d802      	bhi.n	d6cc0 <_ZN6Stream8parseIntEc+0x30>
      value = value * 10 + c - '0';
   d6cba:	fb08 0404 	mla	r4, r8, r4, r0
   d6cbe:	3c30      	subs	r4, #48	; 0x30
    }
    read();  // consume the character we got with peek
   d6cc0:	682b      	ldr	r3, [r5, #0]
   d6cc2:	4628      	mov	r0, r5
   d6cc4:	695b      	ldr	r3, [r3, #20]
   d6cc6:	4798      	blx	r3
    c = timedPeek();
   d6cc8:	4628      	mov	r0, r5
   d6cca:	f7ff ff74 	bl	d6bb6 <_ZN6Stream9timedPeekEv>
  }
  while( (c >= '0' && c <= '9') || c == skipChar );
   d6cce:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
   d6cd2:	2b09      	cmp	r3, #9
   d6cd4:	d9e9      	bls.n	d6caa <_ZN6Stream8parseIntEc+0x1a>
   d6cd6:	4286      	cmp	r6, r0
   d6cd8:	d0f2      	beq.n	d6cc0 <_ZN6Stream8parseIntEc+0x30>

  if(isNegative)
   d6cda:	b107      	cbz	r7, d6cde <_ZN6Stream8parseIntEc+0x4e>
    value = -value;
   d6cdc:	4264      	negs	r4, r4
  return value;
}
   d6cde:	4620      	mov	r0, r4
   d6ce0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      isNegative = true;
   d6ce4:	2701      	movs	r7, #1
   d6ce6:	e7eb      	b.n	d6cc0 <_ZN6Stream8parseIntEc+0x30>

000d6ce8 <_ZN6Stream8parseIntEv>:
  return parseInt(NO_SKIP_CHAR); // terminate on first non-digit character (or timeout)
   d6ce8:	2101      	movs	r1, #1
   d6cea:	f7ff bfd1 	b.w	d6c90 <_ZN6Stream8parseIntEc>
	...

000d6cf0 <_ZN6Stream10readStringEv>:
  }
  return index; // return number of characters, not including null terminator
}

String Stream::readString()
{
   d6cf0:	b538      	push	{r3, r4, r5, lr}
   d6cf2:	460d      	mov	r5, r1
  String ret;
   d6cf4:	4907      	ldr	r1, [pc, #28]	; (d6d14 <_ZN6Stream10readStringEv+0x24>)
{
   d6cf6:	4604      	mov	r4, r0
  String ret;
   d6cf8:	f7ff fdc5 	bl	d6886 <_ZN6StringC1EPKc>
  int c = timedRead();
   d6cfc:	4628      	mov	r0, r5
   d6cfe:	f7ff ff45 	bl	d6b8c <_ZN6Stream9timedReadEv>
  while (c >= 0)
   d6d02:	2800      	cmp	r0, #0
   d6d04:	db04      	blt.n	d6d10 <_ZN6Stream10readStringEv+0x20>

	// if there's not enough memory for the concatenated value, the string
	// will be left unchanged (but this isn't signalled in any way)
	String & operator += (const String &rhs)	{concat(rhs); return (*this);}
	String & operator += (const char *cstr)		{concat(cstr); return (*this);}
	String & operator += (char c)			{concat(c); return (*this);}
   d6d06:	b2c1      	uxtb	r1, r0
   d6d08:	4620      	mov	r0, r4
   d6d0a:	f7ff fe65 	bl	d69d8 <_ZN6String6concatEc>
  {
    ret += (char)c;
    c = timedRead();
   d6d0e:	e7f5      	b.n	d6cfc <_ZN6Stream10readStringEv+0xc>
  }
  return ret;
}
   d6d10:	4620      	mov	r0, r4
   d6d12:	bd38      	pop	{r3, r4, r5, pc}
   d6d14:	000da492 	.word	0x000da492

000d6d18 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d6d18:	4b01      	ldr	r3, [pc, #4]	; (d6d20 <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d6d1a:	4a02      	ldr	r2, [pc, #8]	; (d6d24 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d6d1c:	601a      	str	r2, [r3, #0]
#if Wiring_LogConfig

// spark::
void spark::logProcessControlRequest(ctrl_request* req) {
    JSONRequestHandler::process(req);
}
   d6d1e:	4770      	bx	lr
   d6d20:	2003e66c 	.word	0x2003e66c
   d6d24:	000da590 	.word	0x000da590

000d6d28 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d6d28:	4b02      	ldr	r3, [pc, #8]	; (d6d34 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d6d2a:	681a      	ldr	r2, [r3, #0]
   d6d2c:	4b02      	ldr	r3, [pc, #8]	; (d6d38 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d6d2e:	601a      	str	r2, [r3, #0]
{
  return isValid();
}


TimeClass Time;
   d6d30:	4770      	bx	lr
   d6d32:	bf00      	nop
   d6d34:	2003e398 	.word	0x2003e398
   d6d38:	2003e670 	.word	0x2003e670

000d6d3c <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d6d3c:	2100      	movs	r1, #0
   d6d3e:	f7ff baf1 	b.w	d6324 <system_delay_ms>

000d6d42 <_ZNSt14_Function_baseD1Ev>:
	{ __functor._M_access<_Functor*>() = new _Functor(std::move(__f)); }
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d6d42:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d6d44:	6883      	ldr	r3, [r0, #8]
    ~_Function_base()
   d6d46:	4604      	mov	r4, r0
      if (_M_manager)
   d6d48:	b113      	cbz	r3, d6d50 <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d6d4a:	2203      	movs	r2, #3
   d6d4c:	4601      	mov	r1, r0
   d6d4e:	4798      	blx	r3
    }
   d6d50:	4620      	mov	r0, r4
   d6d52:	bd10      	pop	{r4, pc}

000d6d54 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d6d54:	b510      	push	{r4, lr}
   d6d56:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d6d58:	f7ff fff3 	bl	d6d42 <_ZNSt14_Function_baseD1Ev>
   d6d5c:	4620      	mov	r0, r4
   d6d5e:	bd10      	pop	{r4, pc}

000d6d60 <_GLOBAL__sub_I_RGB>:
    _Function_base() : _M_manager(nullptr) { }
   d6d60:	4803      	ldr	r0, [pc, #12]	; (d6d70 <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d6d62:	4a04      	ldr	r2, [pc, #16]	; (d6d74 <_GLOBAL__sub_I_RGB+0x14>)
   d6d64:	4904      	ldr	r1, [pc, #16]	; (d6d78 <_GLOBAL__sub_I_RGB+0x18>)
   d6d66:	2300      	movs	r3, #0
   d6d68:	6083      	str	r3, [r0, #8]
   d6d6a:	f000 bf0b 	b.w	d7b84 <__aeabi_atexit>
   d6d6e:	bf00      	nop
   d6d70:	2003e674 	.word	0x2003e674
   d6d74:	2003e404 	.word	0x2003e404
   d6d78:	000d6d55 	.word	0x000d6d55

000d6d7c <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_>:

void module_user_init_hook()
{
#if HAL_PLATFORM_NEWLIB
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
        _impure_ptr = r;
   d6d7c:	4b01      	ldr	r3, [pc, #4]	; (d6d84 <_ZZ21module_user_init_hookENUlP6_reentjmPvE_4_FUNES0_jmS1_+0x8>)
   d6d7e:	6018      	str	r0, [r3, #0]
    }, nullptr);
   d6d80:	4770      	bx	lr
   d6d82:	bf00      	nop
   d6d84:	2003e3a0 	.word	0x2003e3a0

000d6d88 <serialEventRun>:
{
   d6d88:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d6d8a:	4b0b      	ldr	r3, [pc, #44]	; (d6db8 <serialEventRun+0x30>)
   d6d8c:	b143      	cbz	r3, d6da0 <serialEventRun+0x18>
   d6d8e:	f000 f96b 	bl	d7068 <_Z16_fetch_usbserialv>
   d6d92:	6803      	ldr	r3, [r0, #0]
   d6d94:	691b      	ldr	r3, [r3, #16]
   d6d96:	4798      	blx	r3
   d6d98:	2800      	cmp	r0, #0
   d6d9a:	dd01      	ble.n	d6da0 <serialEventRun+0x18>
        serialEvent();
   d6d9c:	f3af 8000 	nop.w
    if (serialEvent1 && Serial1.available()>0)
   d6da0:	4b06      	ldr	r3, [pc, #24]	; (d6dbc <serialEventRun+0x34>)
   d6da2:	b143      	cbz	r3, d6db6 <serialEventRun+0x2e>
   d6da4:	f000 f9e6 	bl	d7174 <_Z22__fetch_global_Serial1v>
   d6da8:	6803      	ldr	r3, [r0, #0]
   d6daa:	691b      	ldr	r3, [r3, #16]
   d6dac:	4798      	blx	r3
   d6dae:	2800      	cmp	r0, #0
   d6db0:	dd01      	ble.n	d6db6 <serialEventRun+0x2e>
        serialEvent1();
   d6db2:	f3af 8000 	nop.w
}
   d6db6:	bd08      	pop	{r3, pc}
	...

000d6dc0 <_post_loop>:
{
   d6dc0:	b508      	push	{r3, lr}
	serialEventRun();
   d6dc2:	f7ff ffe1 	bl	d6d88 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d6dc6:	f7ff f925 	bl	d6014 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d6dca:	4b01      	ldr	r3, [pc, #4]	; (d6dd0 <_post_loop+0x10>)
   d6dcc:	6018      	str	r0, [r3, #0]
}
   d6dce:	bd08      	pop	{r3, pc}
   d6dd0:	2003e7d4 	.word	0x2003e7d4

000d6dd4 <_Z33system_initialize_user_backup_ramv>:
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d6dd4:	4802      	ldr	r0, [pc, #8]	; (d6de0 <_Z33system_initialize_user_backup_ramv+0xc>)
   d6dd6:	4a03      	ldr	r2, [pc, #12]	; (d6de4 <_Z33system_initialize_user_backup_ramv+0x10>)
   d6dd8:	4903      	ldr	r1, [pc, #12]	; (d6de8 <_Z33system_initialize_user_backup_ramv+0x14>)
   d6dda:	1a12      	subs	r2, r2, r0
   d6ddc:	f003 b9d0 	b.w	da180 <memcpy>
   d6de0:	2003f400 	.word	0x2003f400
   d6de4:	2003f404 	.word	0x2003f404
   d6de8:	000da988 	.word	0x000da988

000d6dec <_Z27ctrl_request_custom_handlerP12ctrl_request>:
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d6dec:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6dee:	2300      	movs	r3, #0
   d6df0:	9300      	str	r3, [sp, #0]
   d6df2:	461a      	mov	r2, r3
   d6df4:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6df8:	f7ff faa6 	bl	d6348 <system_ctrl_set_result>
}
   d6dfc:	b003      	add	sp, #12
   d6dfe:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d6e04 <_ZL20ctrl_request_handlerP12ctrl_request>:
static void ctrl_request_handler(ctrl_request* req) {
   d6e04:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d6e06:	8843      	ldrh	r3, [r0, #2]
   d6e08:	2b0a      	cmp	r3, #10
   d6e0a:	d008      	beq.n	d6e1e <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d6e0c:	2b50      	cmp	r3, #80	; 0x50
   d6e0e:	d10b      	bne.n	d6e28 <_ZL20ctrl_request_handlerP12ctrl_request+0x24>
        if (log_process_ctrl_request_callback) {
   d6e10:	4b09      	ldr	r3, [pc, #36]	; (d6e38 <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d6e12:	681b      	ldr	r3, [r3, #0]
   d6e14:	b14b      	cbz	r3, d6e2a <_ZL20ctrl_request_handlerP12ctrl_request+0x26>
}
   d6e16:	b003      	add	sp, #12
   d6e18:	f85d eb04 	ldr.w	lr, [sp], #4
            log_process_ctrl_request_callback(req);
   d6e1c:	4718      	bx	r3
        ctrl_request_custom_handler(req);
   d6e1e:	f7ff ffe5 	bl	d6dec <_Z27ctrl_request_custom_handlerP12ctrl_request>
}
   d6e22:	b003      	add	sp, #12
   d6e24:	f85d fb04 	ldr.w	pc, [sp], #4
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d6e28:	2300      	movs	r3, #0
   d6e2a:	9300      	str	r3, [sp, #0]
   d6e2c:	461a      	mov	r2, r3
   d6e2e:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d6e32:	f7ff fa89 	bl	d6348 <system_ctrl_set_result>
}
   d6e36:	e7f4      	b.n	d6e22 <_ZL20ctrl_request_handlerP12ctrl_request+0x1e>
   d6e38:	2003e688 	.word	0x2003e688

000d6e3c <module_user_init_hook>:
{
   d6e3c:	b538      	push	{r3, r4, r5, lr}
#endif // HAL_PLATFORM_NEWLIB

#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6e3e:	4c12      	ldr	r4, [pc, #72]	; (d6e88 <module_user_init_hook+0x4c>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6e40:	4812      	ldr	r0, [pc, #72]	; (d6e8c <module_user_init_hook+0x50>)
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6e42:	4d13      	ldr	r5, [pc, #76]	; (d6e90 <module_user_init_hook+0x54>)
    newlib_impure_ptr_callback([](struct _reent* r, size_t size, uint32_t version, void* ctx) -> void {
   d6e44:	2100      	movs	r1, #0
   d6e46:	f7ff fb11 	bl	d646c <newlib_impure_ptr_callback>
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d6e4a:	6823      	ldr	r3, [r4, #0]
   d6e4c:	42ab      	cmp	r3, r5
   d6e4e:	4b11      	ldr	r3, [pc, #68]	; (d6e94 <module_user_init_hook+0x58>)
   d6e50:	bf0c      	ite	eq
   d6e52:	2201      	moveq	r2, #1
   d6e54:	2200      	movne	r2, #0
   d6e56:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d6e58:	d002      	beq.n	d6e60 <module_user_init_hook+0x24>
        system_initialize_user_backup_ram();
   d6e5a:	f7ff ffbb 	bl	d6dd4 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d6e5e:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d6e60:	f7ff f8d0 	bl	d6004 <HAL_RNG_GetRandomNumber>
   d6e64:	4604      	mov	r4, r0
    srand(seed);
   d6e66:	f003 f9a1 	bl	da1ac <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d6e6a:	4b0b      	ldr	r3, [pc, #44]	; (d6e98 <module_user_init_hook+0x5c>)
   d6e6c:	b113      	cbz	r3, d6e74 <module_user_init_hook+0x38>
        random_seed_from_cloud(seed);
   d6e6e:	4620      	mov	r0, r4
   d6e70:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d6e74:	2100      	movs	r1, #0
   d6e76:	4808      	ldr	r0, [pc, #32]	; (d6e98 <module_user_init_hook+0x5c>)
   d6e78:	f7ff fac0 	bl	d63fc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
}
   d6e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d6e80:	4806      	ldr	r0, [pc, #24]	; (d6e9c <module_user_init_hook+0x60>)
   d6e82:	2100      	movs	r1, #0
   d6e84:	f7ff ba56 	b.w	d6334 <system_ctrl_set_app_request_handler>
   d6e88:	2003f400 	.word	0x2003f400
   d6e8c:	000d6d7d 	.word	0x000d6d7d
   d6e90:	9a271c1e 	.word	0x9a271c1e
   d6e94:	2003e684 	.word	0x2003e684
   d6e98:	00000000 	.word	0x00000000
   d6e9c:	000d6e05 	.word	0x000d6e05

000d6ea0 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d6ea0:	4770      	bx	lr

000d6ea2 <_ZN9IPAddressD0Ev>:
   d6ea2:	b510      	push	{r4, lr}
   d6ea4:	2118      	movs	r1, #24
   d6ea6:	4604      	mov	r4, r0
   d6ea8:	f000 fe71 	bl	d7b8e <_ZdlPvj>
   d6eac:	4620      	mov	r0, r4
   d6eae:	bd10      	pop	{r4, pc}

000d6eb0 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d6eb0:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d6eb2:	7d03      	ldrb	r3, [r0, #20]
   d6eb4:	2b06      	cmp	r3, #6
{
   d6eb6:	b08d      	sub	sp, #52	; 0x34
   d6eb8:	460e      	mov	r6, r1
   d6eba:	f100 0704 	add.w	r7, r0, #4
   d6ebe:	f04f 0400 	mov.w	r4, #0
	if (address.v==6) {
   d6ec2:	d012      	beq.n	d6eea <_ZNK9IPAddress7printToER5Print+0x3a>
   d6ec4:	f100 0508 	add.w	r5, r0, #8
            val = n;
        }
#if __GNUC__ >= 9
#pragma GCC diagnostic pop
#endif // __GNUC__ >= 9
        return printNumber(val, base) + t;
   d6ec8:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d6ecc:	220a      	movs	r2, #10
   d6ece:	4630      	mov	r0, r6
   d6ed0:	f7ff fe0d 	bl	d6aee <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d6ed4:	42af      	cmp	r7, r5
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d6ed6:	4404      	add	r4, r0
    for (int i = 0; i < 4; i++)
   d6ed8:	d019      	beq.n	d6f0e <_ZNK9IPAddress7printToER5Print+0x5e>
        if (n)
   d6eda:	2c00      	cmp	r4, #0
   d6edc:	d0f4      	beq.n	d6ec8 <_ZNK9IPAddress7printToER5Print+0x18>
            n += p.print('.');
   d6ede:	212e      	movs	r1, #46	; 0x2e
   d6ee0:	4630      	mov	r0, r6
   d6ee2:	f7ff fdeb 	bl	d6abc <_ZN5Print5printEc>
   d6ee6:	4404      	add	r4, r0
   d6ee8:	e7ee      	b.n	d6ec8 <_ZNK9IPAddress7printToER5Print+0x18>
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6eea:	232f      	movs	r3, #47	; 0x2f
   d6eec:	466a      	mov	r2, sp
   d6eee:	4639      	mov	r1, r7
   d6ef0:	200a      	movs	r0, #10
		buf[0] = 0;
   d6ef2:	f88d 4000 	strb.w	r4, [sp]
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d6ef6:	f7ff f8a5 	bl	d6044 <inet_inet_ntop>
      return write((const uint8_t *)str, strlen(str));
   d6efa:	4668      	mov	r0, sp
   d6efc:	f003 f99b 	bl	da236 <strlen>
   d6f00:	6833      	ldr	r3, [r6, #0]
   d6f02:	4602      	mov	r2, r0
   d6f04:	68db      	ldr	r3, [r3, #12]
   d6f06:	4669      	mov	r1, sp
   d6f08:	4630      	mov	r0, r6
   d6f0a:	4798      	blx	r3
   d6f0c:	4604      	mov	r4, r0
    }
    return n;
}
   d6f0e:	4620      	mov	r0, r4
   d6f10:	b00d      	add	sp, #52	; 0x34
   d6f12:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d6f14 <_ZN9IPAddressC1Ev>:
IPAddress::IPAddress()
   d6f14:	b510      	push	{r4, lr}
   d6f16:	4b05      	ldr	r3, [pc, #20]	; (d6f2c <_ZN9IPAddressC1Ev+0x18>)
   d6f18:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d6f1a:	2211      	movs	r2, #17
   d6f1c:	f840 3b04 	str.w	r3, [r0], #4
   d6f20:	2100      	movs	r1, #0
   d6f22:	f003 f93b 	bl	da19c <memset>
}
   d6f26:	4620      	mov	r0, r4
   d6f28:	bd10      	pop	{r4, pc}
   d6f2a:	bf00      	nop
   d6f2c:	000da5b8 	.word	0x000da5b8

000d6f30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:
IPAddress::IPAddress(const HAL_IPAddress& address)
   d6f30:	4603      	mov	r3, r0
   d6f32:	4a07      	ldr	r2, [pc, #28]	; (d6f50 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d6f34:	b510      	push	{r4, lr}
   d6f36:	f843 2b04 	str.w	r2, [r3], #4
    memcpy(&this->address, &address, sizeof(address));
   d6f3a:	f101 0210 	add.w	r2, r1, #16
   d6f3e:	f851 4b04 	ldr.w	r4, [r1], #4
   d6f42:	f843 4b04 	str.w	r4, [r3], #4
   d6f46:	4291      	cmp	r1, r2
   d6f48:	d1f9      	bne.n	d6f3e <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d6f4a:	780a      	ldrb	r2, [r1, #0]
   d6f4c:	701a      	strb	r2, [r3, #0]
}
   d6f4e:	bd10      	pop	{r4, pc}
   d6f50:	000da5b8 	.word	0x000da5b8

000d6f54 <_ZNK9IPAddresscvbEv>:
    if (version() == 4) {
   d6f54:	7d03      	ldrb	r3, [r0, #20]
   d6f56:	2b04      	cmp	r3, #4
   d6f58:	d104      	bne.n	d6f64 <_ZNK9IPAddresscvbEv+0x10>
        return address.ipv4 != 0;
   d6f5a:	6840      	ldr	r0, [r0, #4]
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6f5c:	3800      	subs	r0, #0
   d6f5e:	bf18      	it	ne
   d6f60:	2001      	movne	r0, #1
   d6f62:	4770      	bx	lr
    } else if (version() == 6) {
   d6f64:	2b06      	cmp	r3, #6
   d6f66:	d107      	bne.n	d6f78 <_ZNK9IPAddresscvbEv+0x24>
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6f68:	6843      	ldr	r3, [r0, #4]
   d6f6a:	b93b      	cbnz	r3, d6f7c <_ZNK9IPAddresscvbEv+0x28>
   d6f6c:	6883      	ldr	r3, [r0, #8]
   d6f6e:	b92b      	cbnz	r3, d6f7c <_ZNK9IPAddresscvbEv+0x28>
   d6f70:	68c3      	ldr	r3, [r0, #12]
   d6f72:	b91b      	cbnz	r3, d6f7c <_ZNK9IPAddresscvbEv+0x28>
   d6f74:	6900      	ldr	r0, [r0, #16]
   d6f76:	e7f1      	b.n	d6f5c <_ZNK9IPAddresscvbEv+0x8>
        return false;
   d6f78:	2000      	movs	r0, #0
   d6f7a:	4770      	bx	lr
        return address.ipv6[0] != 0 || address.ipv6[1] != 0 || address.ipv6[2] != 0 || address.ipv6[3] != 0;
   d6f7c:	2001      	movs	r0, #1
}
   d6f7e:	4770      	bx	lr

000d6f80 <_ZN9IPAddress8set_ipv4Ehhhh>:
{
   d6f80:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d6f82:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d6f86:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d6f8a:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d6f8e:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        address.v = version;
   d6f92:	2304      	movs	r3, #4
   d6f94:	6041      	str	r1, [r0, #4]
   d6f96:	7503      	strb	r3, [r0, #20]
}
   d6f98:	bd10      	pop	{r4, pc}

000d6f9a <_ZN9IPAddressaSEPKh>:
{
   d6f9a:	b513      	push	{r0, r1, r4, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d6f9c:	78cb      	ldrb	r3, [r1, #3]
   d6f9e:	9300      	str	r3, [sp, #0]
   d6fa0:	788b      	ldrb	r3, [r1, #2]
   d6fa2:	784a      	ldrb	r2, [r1, #1]
   d6fa4:	7809      	ldrb	r1, [r1, #0]
   d6fa6:	f7ff ffeb 	bl	d6f80 <_ZN9IPAddress8set_ipv4Ehhhh>
}
   d6faa:	b002      	add	sp, #8
   d6fac:	bd10      	pop	{r4, pc}

000d6fae <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d6fae:	7441      	strb	r1, [r0, #17]
}
   d6fb0:	4770      	bx	lr

000d6fb2 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d6fb2:	4770      	bx	lr

000d6fb4 <_ZN9USBSerial4readEv>:
{
   d6fb4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d6fb6:	2100      	movs	r1, #0
   d6fb8:	7c00      	ldrb	r0, [r0, #16]
   d6fba:	f7ff f98b 	bl	d62d4 <HAL_USB_USART_Receive_Data>
}
   d6fbe:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6fc2:	bd08      	pop	{r3, pc}

000d6fc4 <_ZN9USBSerial4peekEv>:

int USBSerial::peek()
{
   d6fc4:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d6fc6:	2101      	movs	r1, #1
   d6fc8:	7c00      	ldrb	r0, [r0, #16]
   d6fca:	f7ff f983 	bl	d62d4 <HAL_USB_USART_Receive_Data>
}
   d6fce:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d6fd2:	bd08      	pop	{r3, pc}

000d6fd4 <_ZN9USBSerial17availableForWriteEv>:
{
   d6fd4:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d6fd6:	7c00      	ldrb	r0, [r0, #16]
   d6fd8:	f7ff f974 	bl	d62c4 <HAL_USB_USART_Available_Data_For_Write>
}
   d6fdc:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6fe0:	bd08      	pop	{r3, pc}

000d6fe2 <_ZN9USBSerial9availableEv>:
{
   d6fe2:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d6fe4:	7c00      	ldrb	r0, [r0, #16]
   d6fe6:	f7ff f965 	bl	d62b4 <HAL_USB_USART_Available_Data>
}
   d6fea:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d6fee:	bd08      	pop	{r3, pc}

000d6ff0 <_ZN9USBSerial5writeEh>:
{
   d6ff0:	b513      	push	{r0, r1, r4, lr}
   d6ff2:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6ff4:	7c00      	ldrb	r0, [r0, #16]
{
   d6ff6:	9101      	str	r1, [sp, #4]
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d6ff8:	f7ff f964 	bl	d62c4 <HAL_USB_USART_Available_Data_For_Write>
   d6ffc:	2800      	cmp	r0, #0
   d6ffe:	9901      	ldr	r1, [sp, #4]
   d7000:	dc01      	bgt.n	d7006 <_ZN9USBSerial5writeEh+0x16>
   d7002:	7c60      	ldrb	r0, [r4, #17]
   d7004:	b120      	cbz	r0, d7010 <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d7006:	7c20      	ldrb	r0, [r4, #16]
   d7008:	f7ff f96c 	bl	d62e4 <HAL_USB_USART_Send_Data>
   d700c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
}
   d7010:	b002      	add	sp, #8
   d7012:	bd10      	pop	{r4, pc}

000d7014 <_ZN9USBSerial5flushEv>:
  HAL_USB_USART_Flush_Data(_serial);
   d7014:	7c00      	ldrb	r0, [r0, #16]
   d7016:	f7ff b96d 	b.w	d62f4 <HAL_USB_USART_Flush_Data>

000d701a <_ZN9USBSerialD0Ev>:
   d701a:	b510      	push	{r4, lr}
   d701c:	2114      	movs	r1, #20
   d701e:	4604      	mov	r4, r0
   d7020:	f000 fdb5 	bl	d7b8e <_ZdlPvj>
   d7024:	4620      	mov	r0, r4
   d7026:	bd10      	pop	{r4, pc}

000d7028 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:
USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d7028:	b510      	push	{r4, lr}
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d702a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d702e:	4604      	mov	r4, r0
   d7030:	4608      	mov	r0, r1
   d7032:	2100      	movs	r1, #0
   d7034:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7038:	4b04      	ldr	r3, [pc, #16]	; (d704c <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d703a:	6023      	str	r3, [r4, #0]
  _blocking = true;
   d703c:	2301      	movs	r3, #1
  _serial = serial;
   d703e:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7040:	7463      	strb	r3, [r4, #17]
  HAL_USB_USART_Init(_serial, &conf);
   d7042:	4611      	mov	r1, r2
   d7044:	f7ff f926 	bl	d6294 <HAL_USB_USART_Init>
}
   d7048:	4620      	mov	r0, r4
   d704a:	bd10      	pop	{r4, pc}
   d704c:	000da5cc 	.word	0x000da5cc

000d7050 <_ZN9USBSerial5beginEl>:
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d7050:	7c00      	ldrb	r0, [r0, #16]
   d7052:	2200      	movs	r2, #0
   d7054:	f7ff b926 	b.w	d62a4 <HAL_USB_USART_Begin>

000d7058 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d7058:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d705a:	2214      	movs	r2, #20
{
   d705c:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d705e:	2100      	movs	r1, #0
   d7060:	f003 f89c 	bl	da19c <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d7064:	4620      	mov	r0, r4
   d7066:	bd10      	pop	{r4, pc}

000d7068 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d7068:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d706a:	4c10      	ldr	r4, [pc, #64]	; (d70ac <_Z16_fetch_usbserialv+0x44>)
{
   d706c:	b088      	sub	sp, #32
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d706e:	a803      	add	r0, sp, #12
   d7070:	f7ff fff2 	bl	d7058 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d7074:	7821      	ldrb	r1, [r4, #0]
   d7076:	f3bf 8f5b 	dmb	ish
   d707a:	f011 0101 	ands.w	r1, r1, #1
   d707e:	d111      	bne.n	d70a4 <_Z16_fetch_usbserialv+0x3c>
   d7080:	4620      	mov	r0, r4
   d7082:	9101      	str	r1, [sp, #4]
   d7084:	f7fd f80d 	bl	d40a2 <__cxa_guard_acquire>
   d7088:	9901      	ldr	r1, [sp, #4]
   d708a:	b158      	cbz	r0, d70a4 <_Z16_fetch_usbserialv+0x3c>
   d708c:	aa03      	add	r2, sp, #12
   d708e:	4808      	ldr	r0, [pc, #32]	; (d70b0 <_Z16_fetch_usbserialv+0x48>)
   d7090:	f7ff ffca 	bl	d7028 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d7094:	4620      	mov	r0, r4
   d7096:	f7fd f809 	bl	d40ac <__cxa_guard_release>
   d709a:	4a06      	ldr	r2, [pc, #24]	; (d70b4 <_Z16_fetch_usbserialv+0x4c>)
   d709c:	4906      	ldr	r1, [pc, #24]	; (d70b8 <_Z16_fetch_usbserialv+0x50>)
   d709e:	4804      	ldr	r0, [pc, #16]	; (d70b0 <_Z16_fetch_usbserialv+0x48>)
   d70a0:	f000 fd70 	bl	d7b84 <__aeabi_atexit>
	return _usbserial;
}
   d70a4:	4802      	ldr	r0, [pc, #8]	; (d70b0 <_Z16_fetch_usbserialv+0x48>)
   d70a6:	b008      	add	sp, #32
   d70a8:	bd10      	pop	{r4, pc}
   d70aa:	bf00      	nop
   d70ac:	2003e68c 	.word	0x2003e68c
   d70b0:	2003e690 	.word	0x2003e690
   d70b4:	2003e404 	.word	0x2003e404
   d70b8:	000d6fb3 	.word	0x000d6fb3

000d70bc <_ZN11USARTSerialD1Ev>:
private:
  hal_usart_interface_t _serial;
  bool _blocking;
public:
  USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer);
  virtual ~USARTSerial() {};
   d70bc:	4770      	bx	lr

000d70be <_ZN11USARTSerial14blockOnOverrunEb>:
    hal_usart_half_duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d70be:	7441      	strb	r1, [r0, #17]
}
   d70c0:	4770      	bx	lr

000d70c2 <_ZN11USARTSerial17availableForWriteEv>:


int USARTSerial::availableForWrite(void)
{
   d70c2:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available_data_for_write(_serial));
   d70c4:	7c00      	ldrb	r0, [r0, #16]
   d70c6:	f7ff f80d 	bl	d60e4 <hal_usart_available_data_for_write>
}
   d70ca:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d70ce:	bd08      	pop	{r3, pc}

000d70d0 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d70d0:	b508      	push	{r3, lr}
  return std::max(0, (int)hal_usart_available(_serial));
   d70d2:	7c00      	ldrb	r0, [r0, #16]
   d70d4:	f7fe ffde 	bl	d6094 <hal_usart_available>
}
   d70d8:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d70dc:	bd08      	pop	{r3, pc}

000d70de <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d70de:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_peek(_serial));
   d70e0:	7c00      	ldrb	r0, [r0, #16]
   d70e2:	f7fe ffe7 	bl	d60b4 <hal_usart_peek>
}
   d70e6:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d70ea:	bd08      	pop	{r3, pc}

000d70ec <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d70ec:	b508      	push	{r3, lr}
  return std::max(-1, (int)hal_usart_read(_serial));
   d70ee:	7c00      	ldrb	r0, [r0, #16]
   d70f0:	f7fe ffd8 	bl	d60a4 <hal_usart_read>
}
   d70f4:	ea40 70e0 	orr.w	r0, r0, r0, asr #31
   d70f8:	bd08      	pop	{r3, pc}

000d70fa <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  hal_usart_flush(_serial);
   d70fa:	7c00      	ldrb	r0, [r0, #16]
   d70fc:	f7fe bfe2 	b.w	d60c4 <hal_usart_flush>

000d7100 <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d7100:	b537      	push	{r0, r1, r2, r4, r5, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7102:	7c45      	ldrb	r5, [r0, #17]
{
   d7104:	4604      	mov	r4, r0
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7106:	b12d      	cbz	r5, d7114 <_ZN11USARTSerial5writeEh+0x14>
    // the HAL always blocks.
	  return hal_usart_write(_serial, c);
   d7108:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d710a:	b003      	add	sp, #12
   d710c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
	  return hal_usart_write(_serial, c);
   d7110:	f7fe bfb8 	b.w	d6084 <hal_usart_write>
  if (_blocking || hal_usart_available_data_for_write(_serial) > 0) {
   d7114:	7c00      	ldrb	r0, [r0, #16]
   d7116:	9101      	str	r1, [sp, #4]
   d7118:	f7fe ffe4 	bl	d60e4 <hal_usart_available_data_for_write>
   d711c:	2800      	cmp	r0, #0
   d711e:	9901      	ldr	r1, [sp, #4]
   d7120:	dcf2      	bgt.n	d7108 <_ZN11USARTSerial5writeEh+0x8>
}
   d7122:	4628      	mov	r0, r5
   d7124:	b003      	add	sp, #12
   d7126:	bd30      	pop	{r4, r5, pc}

000d7128 <_ZN11USARTSerialD0Ev>:
   d7128:	b510      	push	{r4, lr}
   d712a:	2114      	movs	r1, #20
   d712c:	4604      	mov	r4, r0
   d712e:	f000 fd2e 	bl	d7b8e <_ZdlPvj>
   d7132:	4620      	mov	r0, r4
   d7134:	bd10      	pop	{r4, pc}
	...

000d7138 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>:
USARTSerial::USARTSerial(hal_usart_interface_t serial, hal_usart_ring_buffer_t *rx_buffer, hal_usart_ring_buffer_t *tx_buffer)
   d7138:	b510      	push	{r4, lr}
   d713a:	f04f 0c00 	mov.w	ip, #0
   d713e:	4604      	mov	r4, r0
   d7140:	4608      	mov	r0, r1
   d7142:	4611      	mov	r1, r2
   d7144:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d7148:	e9c4 c201 	strd	ip, r2, [r4, #4]
   d714c:	4a04      	ldr	r2, [pc, #16]	; (d7160 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_+0x28>)
   d714e:	6022      	str	r2, [r4, #0]
  _blocking = true;
   d7150:	2201      	movs	r2, #1
  _serial = serial;
   d7152:	7420      	strb	r0, [r4, #16]
  _blocking = true;
   d7154:	7462      	strb	r2, [r4, #17]
  hal_usart_init(serial, rx_buffer, tx_buffer);
   d7156:	461a      	mov	r2, r3
   d7158:	f7fe ff8c 	bl	d6074 <hal_usart_init>
}
   d715c:	4620      	mov	r0, r4
   d715e:	bd10      	pop	{r4, pc}
   d7160:	000da5fc 	.word	0x000da5fc

000d7164 <_ZN11USARTSerial5beginEmm>:
  hal_usart_begin_config(_serial, baud, config, nullptr);
   d7164:	7c00      	ldrb	r0, [r0, #16]
   d7166:	2300      	movs	r3, #0
   d7168:	f7fe bfc4 	b.w	d60f4 <hal_usart_begin_config>

000d716c <_ZN11USARTSerial5beginEm>:
  begin(baud, SERIAL_8N1);
   d716c:	2200      	movs	r2, #0
   d716e:	f7ff bff9 	b.w	d7164 <_ZN11USARTSerial5beginEmm>
	...

000d7174 <_Z22__fetch_global_Serial1v>:
static hal_usart_ring_buffer_t* serial1_rx_buffer = nullptr;
static hal_usart_ring_buffer_t* serial1_tx_buffer = nullptr;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d7174:	b513      	push	{r0, r1, r4, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d7176:	4c0e      	ldr	r4, [pc, #56]	; (d71b0 <_Z22__fetch_global_Serial1v+0x3c>)
   d7178:	7821      	ldrb	r1, [r4, #0]
   d717a:	f3bf 8f5b 	dmb	ish
   d717e:	f011 0101 	ands.w	r1, r1, #1
   d7182:	d112      	bne.n	d71aa <_Z22__fetch_global_Serial1v+0x36>
   d7184:	4620      	mov	r0, r4
   d7186:	9101      	str	r1, [sp, #4]
   d7188:	f7fc ff8b 	bl	d40a2 <__cxa_guard_acquire>
   d718c:	9901      	ldr	r1, [sp, #4]
   d718e:	b160      	cbz	r0, d71aa <_Z22__fetch_global_Serial1v+0x36>
   d7190:	4a08      	ldr	r2, [pc, #32]	; (d71b4 <_Z22__fetch_global_Serial1v+0x40>)
   d7192:	4b09      	ldr	r3, [pc, #36]	; (d71b8 <_Z22__fetch_global_Serial1v+0x44>)
   d7194:	4809      	ldr	r0, [pc, #36]	; (d71bc <_Z22__fetch_global_Serial1v+0x48>)
   d7196:	f7ff ffcf 	bl	d7138 <_ZN11USARTSerialC1E21hal_usart_interface_tP23hal_usart_ring_buffer_tS2_>
   d719a:	4620      	mov	r0, r4
   d719c:	f7fc ff86 	bl	d40ac <__cxa_guard_release>
   d71a0:	4a07      	ldr	r2, [pc, #28]	; (d71c0 <_Z22__fetch_global_Serial1v+0x4c>)
   d71a2:	4908      	ldr	r1, [pc, #32]	; (d71c4 <_Z22__fetch_global_Serial1v+0x50>)
   d71a4:	4805      	ldr	r0, [pc, #20]	; (d71bc <_Z22__fetch_global_Serial1v+0x48>)
   d71a6:	f000 fced 	bl	d7b84 <__aeabi_atexit>
    serial1_tx_buffer = new hal_usart_ring_buffer_t();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d71aa:	4804      	ldr	r0, [pc, #16]	; (d71bc <_Z22__fetch_global_Serial1v+0x48>)
   d71ac:	b002      	add	sp, #8
   d71ae:	bd10      	pop	{r4, pc}
   d71b0:	2003e6a4 	.word	0x2003e6a4
   d71b4:	2003e6a8 	.word	0x2003e6a8
   d71b8:	2003e72c 	.word	0x2003e72c
   d71bc:	2003e7b0 	.word	0x2003e7b0
   d71c0:	2003e404 	.word	0x2003e404
   d71c4:	000d70bd 	.word	0x000d70bd

000d71c8 <_ZN7TwoWireD1Ev>:
private:
  hal_i2c_interface_t _i2c;

public:
  TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& config);
  virtual ~TwoWire() {};
   d71c8:	4770      	bx	lr

000d71ca <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d71ca:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d71cc:	4606      	mov	r6, r0
   d71ce:	4615      	mov	r5, r2
   d71d0:	460c      	mov	r4, r1
   d71d2:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d71d4:	42bc      	cmp	r4, r7
   d71d6:	d006      	beq.n	d71e6 <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d71d8:	6833      	ldr	r3, [r6, #0]
   d71da:	f814 1b01 	ldrb.w	r1, [r4], #1
   d71de:	689b      	ldr	r3, [r3, #8]
   d71e0:	4630      	mov	r0, r6
   d71e2:	4798      	blx	r3
  for(size_t i = 0; i < quantity; ++i)
   d71e4:	e7f6      	b.n	d71d4 <_ZN7TwoWire5writeEPKhj+0xa>
  }

  return quantity;
}
   d71e6:	4628      	mov	r0, r5
   d71e8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d71ea <_ZN7TwoWire5writeEh>:
  return hal_i2c_write(_i2c, data, NULL);
   d71ea:	7c00      	ldrb	r0, [r0, #16]
   d71ec:	2200      	movs	r2, #0
   d71ee:	f7fe bfa1 	b.w	d6134 <hal_i2c_write>

000d71f2 <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return hal_i2c_available(_i2c, NULL);
   d71f2:	7c00      	ldrb	r0, [r0, #16]
   d71f4:	2100      	movs	r1, #0
   d71f6:	f7fe bfa5 	b.w	d6144 <hal_i2c_available>

000d71fa <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return hal_i2c_read(_i2c, NULL);
   d71fa:	7c00      	ldrb	r0, [r0, #16]
   d71fc:	2100      	movs	r1, #0
   d71fe:	f7fe bfa9 	b.w	d6154 <hal_i2c_read>

000d7202 <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return hal_i2c_peek(_i2c, NULL);
   d7202:	7c00      	ldrb	r0, [r0, #16]
   d7204:	2100      	movs	r1, #0
   d7206:	f7fe bfad 	b.w	d6164 <hal_i2c_peek>

000d720a <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  hal_i2c_flush(_i2c, NULL);
   d720a:	7c00      	ldrb	r0, [r0, #16]
   d720c:	2100      	movs	r1, #0
   d720e:	f7fe bfb1 	b.w	d6174 <hal_i2c_flush>

000d7212 <_ZN7TwoWireD0Ev>:
   d7212:	b510      	push	{r4, lr}
   d7214:	2114      	movs	r1, #20
   d7216:	4604      	mov	r4, r0
   d7218:	f000 fcb9 	bl	d7b8e <_ZdlPvj>
   d721c:	4620      	mov	r0, r4
   d721e:	bd10      	pop	{r4, pc}

000d7220 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>:
TwoWire::TwoWire(hal_i2c_interface_t i2c, const hal_i2c_config_t& conf)
   d7220:	b510      	push	{r4, lr}
   d7222:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d7226:	4604      	mov	r4, r0
   d7228:	4608      	mov	r0, r1
   d722a:	2100      	movs	r1, #0
   d722c:	e9c4 1301 	strd	r1, r3, [r4, #4]
   d7230:	4b03      	ldr	r3, [pc, #12]	; (d7240 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t+0x20>)
   d7232:	6023      	str	r3, [r4, #0]
  _i2c = i2c;
   d7234:	7420      	strb	r0, [r4, #16]
  hal_i2c_init(_i2c, &conf);
   d7236:	4611      	mov	r1, r2
   d7238:	f7fe ffac 	bl	d6194 <hal_i2c_init>
}
   d723c:	4620      	mov	r0, r4
   d723e:	bd10      	pop	{r4, pc}
   d7240:	000da62c 	.word	0x000da62c

000d7244 <_ZN7TwoWire5beginEv>:
	hal_i2c_begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d7244:	2300      	movs	r3, #0
   d7246:	7c00      	ldrb	r0, [r0, #16]
   d7248:	461a      	mov	r2, r3
   d724a:	4619      	mov	r1, r3
   d724c:	f7fe bf5a 	b.w	d6104 <hal_i2c_begin>

000d7250 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d7250:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    hal_i2c_transmission_config_t conf = {
   d7252:	2200      	movs	r2, #0
   d7254:	2314      	movs	r3, #20
   d7256:	e9cd 2201 	strd	r2, r2, [sp, #4]
   d725a:	f8ad 3004 	strh.w	r3, [sp, #4]
    };
   d725e:	780b      	ldrb	r3, [r1, #0]
   d7260:	f88d 3008 	strb.w	r3, [sp, #8]
   d7264:	684b      	ldr	r3, [r1, #4]
   d7266:	9303      	str	r3, [sp, #12]
   d7268:	68cb      	ldr	r3, [r1, #12]
   d726a:	9304      	str	r3, [sp, #16]
  return hal_i2c_request_ex(_i2c, &conf, nullptr);
   d726c:	7c00      	ldrb	r0, [r0, #16]
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
   d726e:	7a0b      	ldrb	r3, [r1, #8]
   d7270:	9305      	str	r3, [sp, #20]
   d7272:	a901      	add	r1, sp, #4
   d7274:	f7fe ff96 	bl	d61a4 <hal_i2c_request_ex>
}
   d7278:	b007      	add	sp, #28
   d727a:	f85d fb04 	ldr.w	pc, [sp], #4

000d727e <_ZN7TwoWire11requestFromEhjh>:
{
   d727e:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d7280:	3b00      	subs	r3, #0
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d7282:	f88d 1000 	strb.w	r1, [sp]
   d7286:	f04f 0164 	mov.w	r1, #100	; 0x64
   d728a:	9103      	str	r1, [sp, #12]
   d728c:	bf18      	it	ne
   d728e:	2301      	movne	r3, #1
   d7290:	4669      	mov	r1, sp
    size_ = size;
   d7292:	9201      	str	r2, [sp, #4]
   d7294:	f88d 3008 	strb.w	r3, [sp, #8]
   d7298:	f7ff ffda 	bl	d7250 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d729c:	b005      	add	sp, #20
   d729e:	f85d fb04 	ldr.w	pc, [sp], #4

000d72a2 <_ZN7TwoWire11requestFromEhj>:
  return requestFrom(address, quantity, (uint8_t)true);
   d72a2:	2301      	movs	r3, #1
   d72a4:	f7ff bfeb 	b.w	d727e <_ZN7TwoWire11requestFromEhjh>

000d72a8 <_ZN7TwoWire17beginTransmissionEh>:
	hal_i2c_begin_transmission(_i2c, address, NULL);
   d72a8:	7c00      	ldrb	r0, [r0, #16]
   d72aa:	2200      	movs	r2, #0
   d72ac:	f7fe bf32 	b.w	d6114 <hal_i2c_begin_transmission>

000d72b0 <_ZN7TwoWire17beginTransmissionEi>:
  beginTransmission((uint8_t)address);
   d72b0:	b2c9      	uxtb	r1, r1
   d72b2:	f7ff bff9 	b.w	d72a8 <_ZN7TwoWire17beginTransmissionEh>

000d72b6 <_ZN7TwoWire15endTransmissionEh>:
	return hal_i2c_end_transmission(_i2c, sendStop, NULL);
   d72b6:	7c00      	ldrb	r0, [r0, #16]
   d72b8:	2200      	movs	r2, #0
   d72ba:	f7fe bf33 	b.w	d6124 <hal_i2c_end_transmission>

000d72be <_ZN7TwoWire15endTransmissionEv>:
  return endTransmission(true);
   d72be:	2101      	movs	r1, #1
   d72c0:	f7ff bff9 	b.w	d72b6 <_ZN7TwoWire15endTransmissionEh>

000d72c4 <_ZN9TCPClient5writeEh>:
    done.dismiss();

    return 1; // success
}

size_t TCPClient::write(uint8_t b) {
   d72c4:	b513      	push	{r0, r1, r4, lr}
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d72c6:	6803      	ldr	r3, [r0, #0]
size_t TCPClient::write(uint8_t b) {
   d72c8:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, SOCKET_WAIT_FOREVER);
   d72cc:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d72ce:	2201      	movs	r2, #1
   d72d0:	f04f 33ff 	mov.w	r3, #4294967295
   d72d4:	f10d 0107 	add.w	r1, sp, #7
   d72d8:	47a0      	blx	r4
}
   d72da:	b002      	add	sp, #8
   d72dc:	bd10      	pop	{r4, pc}

000d72de <_ZN9TCPClient5writeEPKhj>:

size_t TCPClient::write(const uint8_t *buffer, size_t size) {
   d72de:	b410      	push	{r4}
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d72e0:	6803      	ldr	r3, [r0, #0]
   d72e2:	6bdc      	ldr	r4, [r3, #60]	; 0x3c
   d72e4:	f04f 33ff 	mov.w	r3, #4294967295
   d72e8:	46a4      	mov	ip, r4
}
   d72ea:	f85d 4b04 	ldr.w	r4, [sp], #4
    return write(buffer, size, SOCKET_WAIT_FOREVER);
   d72ee:	4760      	bx	ip

000d72f0 <_ZN9TCPClient5writeEhm>:

size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d72f0:	b513      	push	{r0, r1, r4, lr}
   d72f2:	4613      	mov	r3, r2
    return write(&b, 1, timeout);
   d72f4:	6802      	ldr	r2, [r0, #0]
size_t TCPClient::write(uint8_t b, system_tick_t timeout) {
   d72f6:	f88d 1007 	strb.w	r1, [sp, #7]
    return write(&b, 1, timeout);
   d72fa:	6bd4      	ldr	r4, [r2, #60]	; 0x3c
   d72fc:	f10d 0107 	add.w	r1, sp, #7
   d7300:	2201      	movs	r2, #1
   d7302:	47a0      	blx	r4
}
   d7304:	b002      	add	sp, #8
   d7306:	bd10      	pop	{r4, pc}

000d7308 <_ZN9TCPClient5flushEv>:
    d_->offset = 0;
    d_->total = 0;
}

void TCPClient::flush() {
}
   d7308:	4770      	bx	lr

000d730a <_ZN9TCPClient9connectedEv>:
    d_->sock = -1;
    d_->remoteIP.clear();
    flush_buffer();
}

uint8_t TCPClient::connected() {
   d730a:	b538      	push	{r3, r4, r5, lr}
      }

    private:
      element_type*
      _M_get() const noexcept
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d730c:	6943      	ldr	r3, [r0, #20]
    bool rv = (status() || bufferCount());
   d730e:	681a      	ldr	r2, [r3, #0]
   d7310:	2a00      	cmp	r2, #0
uint8_t TCPClient::connected() {
   d7312:	4605      	mov	r5, r0
    bool rv = (status() || bufferCount());
   d7314:	da10      	bge.n	d7338 <_ZN9TCPClient9connectedEv+0x2e>
   d7316:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d731a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d731e:	429a      	cmp	r2, r3
   d7320:	d10a      	bne.n	d7338 <_ZN9TCPClient9connectedEv+0x2e>
    if (!rv) {
        rv = available();
   d7322:	6803      	ldr	r3, [r0, #0]
   d7324:	691b      	ldr	r3, [r3, #16]
   d7326:	4798      	blx	r3
        if (!rv) {
   d7328:	4604      	mov	r4, r0
   d732a:	b928      	cbnz	r0, d7338 <_ZN9TCPClient9connectedEv+0x2e>
            stop();
   d732c:	682b      	ldr	r3, [r5, #0]
   d732e:	4628      	mov	r0, r5
   d7330:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d7332:	4798      	blx	r3
        rv = available();
   d7334:	4620      	mov	r0, r4
        }
    }
    return rv;
}
   d7336:	bd38      	pop	{r3, r4, r5, pc}
        rv = available();
   d7338:	2001      	movs	r0, #1
   d733a:	e7fc      	b.n	d7336 <_ZN9TCPClient9connectedEv+0x2c>

000d733c <_ZN9TCPClientcvbEv>:

uint8_t TCPClient::status() {
    return (isOpen(d_->sock));
   d733c:	6943      	ldr	r3, [r0, #20]
    return socket_handle_valid(sd);
   d733e:	6818      	ldr	r0, [r3, #0]
}

TCPClient::operator bool() {
   return (status() != 0);
}
   d7340:	43c0      	mvns	r0, r0
   d7342:	0fc0      	lsrs	r0, r0, #31
   d7344:	4770      	bx	lr

000d7346 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED1Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7346:	4770      	bx	lr

000d7348 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info>:
	    ||
   d7348:	4b06      	ldr	r3, [pc, #24]	; (d7364 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x1c>)
   d734a:	4299      	cmp	r1, r3
      _M_get_deleter(const std::type_info& __ti) noexcept override
   d734c:	b510      	push	{r4, lr}
      __aligned_buffer(std::nullptr_t) { }

      void*
      _M_addr() noexcept
      {
        return static_cast<void*>(&_M_storage);
   d734e:	f100 040c 	add.w	r4, r0, #12
	    ||
   d7352:	d005      	beq.n	d7360 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE14_M_get_deleterERKSt9type_info+0x18>
	    _Sp_make_shared_tag::_S_eq(__ti)
   d7354:	4608      	mov	r0, r1
   d7356:	f000 fc1f 	bl	d7b98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>
	    ||
   d735a:	2800      	cmp	r0, #0
	return nullptr;
   d735c:	bf08      	it	eq
   d735e:	2400      	moveq	r4, #0
      }
   d7360:	4620      	mov	r0, r4
   d7362:	bd10      	pop	{r4, pc}
   d7364:	000da588 	.word	0x000da588

000d7368 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EED0Ev>:
      ~_Sp_counted_ptr_inplace() noexcept { }
   d7368:	b510      	push	{r4, lr}
   d736a:	21ac      	movs	r1, #172	; 0xac
   d736c:	4604      	mov	r4, r0
   d736e:	f000 fc0e 	bl	d7b8e <_ZdlPvj>
   d7372:	4620      	mov	r0, r4
   d7374:	bd10      	pop	{r4, pc}

000d7376 <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_destroyEv>:
	  {
	    ::operator delete(__p, std::align_val_t(alignof(_Tp)));
	    return;
	  }
#endif
	::operator delete(__p);
   d7376:	f7fc be92 	b.w	d409e <_ZdlPv>

000d737a <_ZN9TCPClient5writeEPKhjm>:
size_t TCPClient::write(const uint8_t *buffer, size_t size, system_tick_t timeout) {
   d737a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    void setWriteError(int err = 1) { write_error = err; }
   d737e:	f04f 0800 	mov.w	r8, #0
   d7382:	b086      	sub	sp, #24
   d7384:	461d      	mov	r5, r3
   d7386:	f8c0 8004 	str.w	r8, [r0, #4]
   d738a:	4604      	mov	r4, r0
   d738c:	460e      	mov	r6, r1
   d738e:	4617      	mov	r7, r2
    struct timeval tv = {};
   d7390:	4641      	mov	r1, r8
   d7392:	2210      	movs	r2, #16
   d7394:	a802      	add	r0, sp, #8
   d7396:	f002 ff01 	bl	da19c <memset>
    if (timeout != SOCKET_WAIT_FOREVER) {
   d739a:	1c6b      	adds	r3, r5, #1
   d739c:	d009      	beq.n	d73b2 <_ZN9TCPClient5writeEPKhjm+0x38>
        tv.tv_sec = timeout / 1000;
   d739e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
   d73a2:	fbb5 f3f0 	udiv	r3, r5, r0
   d73a6:	e9cd 3802 	strd	r3, r8, [sp, #8]
        tv.tv_usec = (timeout % 1000) * 1000;
   d73aa:	fb00 5313 	mls	r3, r0, r3, r5
   d73ae:	4358      	muls	r0, r3
   d73b0:	9004      	str	r0, [sp, #16]
    int ret = sock_setsockopt(d_->sock, SOL_SOCKET, SO_SNDTIMEO, &tv, sizeof(tv));
   d73b2:	6960      	ldr	r0, [r4, #20]
   d73b4:	2310      	movs	r3, #16
   d73b6:	9300      	str	r3, [sp, #0]
   d73b8:	6800      	ldr	r0, [r0, #0]
   d73ba:	ab02      	add	r3, sp, #8
   d73bc:	f241 0205 	movw	r2, #4101	; 0x1005
   d73c0:	f640 71ff 	movw	r1, #4095	; 0xfff
   d73c4:	f7fe fef6 	bl	d61b4 <sock_setsockopt>
    if (ret < 0) {
   d73c8:	2800      	cmp	r0, #0
   d73ca:	da07      	bge.n	d73dc <_ZN9TCPClient5writeEPKhjm+0x62>
        setWriteError(errno);
   d73cc:	f7ff f846 	bl	d645c <__errno>
   d73d0:	6803      	ldr	r3, [r0, #0]
   d73d2:	6063      	str	r3, [r4, #4]
        return 0;
   d73d4:	2000      	movs	r0, #0
}
   d73d6:	b006      	add	sp, #24
   d73d8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    ret = sock_send(d_->sock, buffer, size, 0);
   d73dc:	6960      	ldr	r0, [r4, #20]
   d73de:	2300      	movs	r3, #0
   d73e0:	6800      	ldr	r0, [r0, #0]
   d73e2:	463a      	mov	r2, r7
   d73e4:	4631      	mov	r1, r6
   d73e6:	f7fe ff05 	bl	d61f4 <sock_send>
    if (ret < 0) {
   d73ea:	1e03      	subs	r3, r0, #0
   d73ec:	dbee      	blt.n	d73cc <_ZN9TCPClient5writeEPKhjm+0x52>
    return ret;
   d73ee:	4618      	mov	r0, r3
   d73f0:	e7f1      	b.n	d73d6 <_ZN9TCPClient5writeEPKhjm+0x5c>
	...

000d73f4 <_ZN9TCPClient8remoteIPEv>:

IPAddress TCPClient::remoteIP() {
   d73f4:	b570      	push	{r4, r5, r6, lr}
      { return static_cast<const __shared_ptr<_Tp, _Lp>*>(this)->get(); }
   d73f6:	694d      	ldr	r5, [r1, #20]
class IPAddress : public Printable {
   d73f8:	4b05      	ldr	r3, [pc, #20]	; (d7410 <_ZN9TCPClient8remoteIPEv+0x1c>)
   d73fa:	4604      	mov	r4, r0
   d73fc:	358c      	adds	r5, #140	; 0x8c
   d73fe:	f844 3b04 	str.w	r3, [r4], #4
   d7402:	4606      	mov	r6, r0
   d7404:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7406:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7408:	682b      	ldr	r3, [r5, #0]
   d740a:	7023      	strb	r3, [r4, #0]
    return d_->remoteIP;
}
   d740c:	4630      	mov	r0, r6
   d740e:	bd70      	pop	{r4, r5, r6, pc}
   d7410:	000da5b8 	.word	0x000da5b8

000d7414 <_ZN9TCPClient4peekEv>:
int TCPClient::peek() {
   d7414:	b510      	push	{r4, lr}
   d7416:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7418:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d741c:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7420:	429a      	cmp	r2, r3
int TCPClient::peek() {
   d7422:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7424:	d005      	beq.n	d7432 <_ZN9TCPClient4peekEv+0x1e>
   d7426:	6963      	ldr	r3, [r4, #20]
   d7428:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d742c:	4413      	add	r3, r2
   d742e:	7918      	ldrb	r0, [r3, #4]
}
   d7430:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset] : -1;
   d7432:	6803      	ldr	r3, [r0, #0]
   d7434:	691b      	ldr	r3, [r3, #16]
   d7436:	4798      	blx	r3
   d7438:	2800      	cmp	r0, #0
   d743a:	d1f4      	bne.n	d7426 <_ZN9TCPClient4peekEv+0x12>
   d743c:	f04f 30ff 	mov.w	r0, #4294967295
   d7440:	e7f6      	b.n	d7430 <_ZN9TCPClient4peekEv+0x1c>

000d7442 <_ZN9TCPClient4readEv>:
int TCPClient::read() {
   d7442:	b510      	push	{r4, lr}
   d7444:	6943      	ldr	r3, [r0, #20]
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7446:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d744a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d744e:	429a      	cmp	r2, r3
int TCPClient::read() {
   d7450:	4604      	mov	r4, r0
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7452:	d008      	beq.n	d7466 <_ZN9TCPClient4readEv+0x24>
   d7454:	6963      	ldr	r3, [r4, #20]
   d7456:	f8b3 2084 	ldrh.w	r2, [r3, #132]	; 0x84
   d745a:	1c51      	adds	r1, r2, #1
   d745c:	f8a3 1084 	strh.w	r1, [r3, #132]	; 0x84
   d7460:	4413      	add	r3, r2
   d7462:	7918      	ldrb	r0, [r3, #4]
}
   d7464:	bd10      	pop	{r4, pc}
    return (bufferCount() || available()) ? d_->buffer[d_->offset++] : -1;
   d7466:	6803      	ldr	r3, [r0, #0]
   d7468:	691b      	ldr	r3, [r3, #16]
   d746a:	4798      	blx	r3
   d746c:	2800      	cmp	r0, #0
   d746e:	d1f1      	bne.n	d7454 <_ZN9TCPClient4readEv+0x12>
   d7470:	f04f 30ff 	mov.w	r0, #4294967295
   d7474:	e7f6      	b.n	d7464 <_ZN9TCPClient4readEv+0x22>

000d7476 <_ZN9TCPClient4readEPhj>:
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7476:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d7478:	6943      	ldr	r3, [r0, #20]
   d747a:	4617      	mov	r7, r2
    if (bufferCount() || available()) {
   d747c:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7480:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
   d7484:	429a      	cmp	r2, r3
int TCPClient::read(uint8_t *buffer, size_t size) {
   d7486:	4605      	mov	r5, r0
   d7488:	460e      	mov	r6, r1
    if (bufferCount() || available()) {
   d748a:	d016      	beq.n	d74ba <_ZN9TCPClient4readEPhj+0x44>
   d748c:	6969      	ldr	r1, [r5, #20]
    return d_->total - d_->offset;
   d748e:	f8b1 3084 	ldrh.w	r3, [r1, #132]	; 0x84
   d7492:	f8b1 4086 	ldrh.w	r4, [r1, #134]	; 0x86
   d7496:	1ae4      	subs	r4, r4, r3
        read = (size > (size_t) bufferCount()) ? bufferCount() : size;
   d7498:	42bc      	cmp	r4, r7
   d749a:	bf28      	it	cs
   d749c:	463c      	movcs	r4, r7
        memcpy(buffer, &d_->buffer[d_->offset], read);
   d749e:	3304      	adds	r3, #4
   d74a0:	4622      	mov	r2, r4
   d74a2:	4419      	add	r1, r3
   d74a4:	4630      	mov	r0, r6
   d74a6:	f002 fe6b 	bl	da180 <memcpy>
   d74aa:	696a      	ldr	r2, [r5, #20]
        d_->offset += read;
   d74ac:	f8b2 3084 	ldrh.w	r3, [r2, #132]	; 0x84
   d74b0:	4423      	add	r3, r4
   d74b2:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
}
   d74b6:	4620      	mov	r0, r4
   d74b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
    if (bufferCount() || available()) {
   d74ba:	6803      	ldr	r3, [r0, #0]
   d74bc:	691b      	ldr	r3, [r3, #16]
   d74be:	4798      	blx	r3
   d74c0:	2800      	cmp	r0, #0
   d74c2:	d1e3      	bne.n	d748c <_ZN9TCPClient4readEPhj+0x16>
    int read = -1;
   d74c4:	f04f 34ff 	mov.w	r4, #4294967295
   d74c8:	e7f5      	b.n	d74b6 <_ZN9TCPClient4readEPhj+0x40>
	...

000d74cc <_ZN9TCPClient7connectEPKctm>:
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d74cc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d74d0:	4698      	mov	r8, r3
    stop();
   d74d2:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d74d4:	b093      	sub	sp, #76	; 0x4c
   d74d6:	460d      	mov	r5, r1
    struct addrinfo* ais = nullptr;
   d74d8:	2400      	movs	r4, #0
    stop();
   d74da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(const char* host, uint16_t port, network_interface_t nif) {
   d74dc:	4606      	mov	r6, r0
   d74de:	4617      	mov	r7, r2
    stop();
   d74e0:	4798      	blx	r3
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d74e2:	4628      	mov	r0, r5
   d74e4:	466b      	mov	r3, sp
   d74e6:	4622      	mov	r2, r4
   d74e8:	4621      	mov	r1, r4
    struct addrinfo* ais = nullptr;
   d74ea:	9400      	str	r4, [sp, #0]
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d74ec:	f7fe fd5a 	bl	d5fa4 <netdb_getaddrinfo>
   d74f0:	4605      	mov	r5, r0
   d74f2:	2800      	cmp	r0, #0
   d74f4:	d163      	bne.n	d75be <_ZN9TCPClient7connectEPKctm+0xf2>
    if (ais && ais->ai_addr) {
   d74f6:	9b00      	ldr	r3, [sp, #0]
   d74f8:	2b00      	cmp	r3, #0
   d74fa:	d04b      	beq.n	d7594 <_ZN9TCPClient7connectEPKctm+0xc8>
   d74fc:	695b      	ldr	r3, [r3, #20]
   d74fe:	2b00      	cmp	r3, #0
   d7500:	d048      	beq.n	d7594 <_ZN9TCPClient7connectEPKctm+0xc8>
        IPAddress addr;
   d7502:	a806      	add	r0, sp, #24
   d7504:	f7ff fd06 	bl	d6f14 <_ZN9IPAddressC1Ev>
        detail::sockaddrToIpAddressPort(ais->ai_addr, addr, nullptr);
   d7508:	9b00      	ldr	r3, [sp, #0]
   d750a:	695c      	ldr	r4, [r3, #20]
namespace spark {

namespace detail {

inline void sockaddrToIpAddressPort(const struct sockaddr* saddr, IPAddress& addr, uint16_t* port) {
    if (saddr->sa_family == AF_INET) {
   d750c:	7863      	ldrb	r3, [r4, #1]
   d750e:	2b02      	cmp	r3, #2
   d7510:	d104      	bne.n	d751c <_ZN9TCPClient7connectEPKctm+0x50>
        const struct sockaddr_in* inaddr = (const struct sockaddr_in*)saddr;
        addr = (const uint8_t*)(&inaddr->sin_addr.s_addr);
   d7512:	1d21      	adds	r1, r4, #4
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
            a.v = 6;
            addr = IPAddress(a);
        } else {
            auto ptr = (const uint32_t*)(in6addr->sin6_addr.s6_addr);
            addr = (const uint8_t*)(&ptr[3]);
   d7514:	a806      	add	r0, sp, #24
   d7516:	f7ff fd40 	bl	d6f9a <_ZN9IPAddressaSEPKh>
        }
        if (port) {
   d751a:	e026      	b.n	d756a <_ZN9TCPClient7connectEPKctm+0x9e>
    else if (saddr->sa_family == AF_INET6) {
   d751c:	2b0a      	cmp	r3, #10
   d751e:	d124      	bne.n	d756a <_ZN9TCPClient7connectEPKctm+0x9e>
        HAL_IPAddress a = {};
   d7520:	2211      	movs	r2, #17
   d7522:	4629      	mov	r1, r5
   d7524:	a801      	add	r0, sp, #4
   d7526:	f002 fe39 	bl	da19c <memset>
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d752a:	68a3      	ldr	r3, [r4, #8]
   d752c:	2b00      	cmp	r3, #0
   d752e:	d038      	beq.n	d75a2 <_ZN9TCPClient7connectEPKctm+0xd6>
            memcpy(a.ipv6, in6addr->sin6_addr.s6_addr, sizeof(a.ipv6));
   d7530:	f104 0308 	add.w	r3, r4, #8
   d7534:	f10d 0c04 	add.w	ip, sp, #4
   d7538:	3418      	adds	r4, #24
   d753a:	6818      	ldr	r0, [r3, #0]
   d753c:	6859      	ldr	r1, [r3, #4]
   d753e:	4662      	mov	r2, ip
   d7540:	c203      	stmia	r2!, {r0, r1}
   d7542:	3308      	adds	r3, #8
   d7544:	42a3      	cmp	r3, r4
   d7546:	4694      	mov	ip, r2
   d7548:	d1f7      	bne.n	d753a <_ZN9TCPClient7connectEPKctm+0x6e>
            a.v = 6;
   d754a:	2306      	movs	r3, #6
            addr = IPAddress(a);
   d754c:	a901      	add	r1, sp, #4
   d754e:	a80c      	add	r0, sp, #48	; 0x30
            a.v = 6;
   d7550:	f88d 3014 	strb.w	r3, [sp, #20]
            addr = IPAddress(a);
   d7554:	f7ff fcec 	bl	d6f30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d7558:	f10d 0c34 	add.w	ip, sp, #52	; 0x34
   d755c:	e8bc 000f 	ldmia.w	ip!, {r0, r1, r2, r3}
   d7560:	ac07      	add	r4, sp, #28
   d7562:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7564:	f8dc 3000 	ldr.w	r3, [ip]
   d7568:	7023      	strb	r3, [r4, #0]
        return static_cast<const IPAddress*>(this)->operator bool();
   d756a:	a806      	add	r0, sp, #24
   d756c:	f7ff fcf2 	bl	d6f54 <_ZNK9IPAddresscvbEv>
        if (addr) {
   d7570:	b180      	cbz	r0, d7594 <_ZN9TCPClient7connectEPKctm+0xc8>
            return connect(addr, port, nif);
   d7572:	6833      	ldr	r3, [r6, #0]
class IPAddress : public Printable {
   d7574:	ad07      	add	r5, sp, #28
   d7576:	f8d3 9020 	ldr.w	r9, [r3, #32]
   d757a:	4b12      	ldr	r3, [pc, #72]	; (d75c4 <_ZN9TCPClient7connectEPKctm+0xf8>)
   d757c:	930c      	str	r3, [sp, #48]	; 0x30
   d757e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d7580:	ac0d      	add	r4, sp, #52	; 0x34
   d7582:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d7584:	682b      	ldr	r3, [r5, #0]
   d7586:	7023      	strb	r3, [r4, #0]
   d7588:	463a      	mov	r2, r7
   d758a:	4643      	mov	r3, r8
   d758c:	a90c      	add	r1, sp, #48	; 0x30
   d758e:	4630      	mov	r0, r6
   d7590:	47c8      	blx	r9
   d7592:	4605      	mov	r5, r0
    SCOPE_GUARD({
   d7594:	9800      	ldr	r0, [sp, #0]
   d7596:	f7fe fcfd 	bl	d5f94 <netdb_freeaddrinfo>
}
   d759a:	4628      	mov	r0, r5
   d759c:	b013      	add	sp, #76	; 0x4c
   d759e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
        if (!IN6_IS_ADDR_V4MAPPED(&in6addr->sin6_addr)) {
   d75a2:	68e3      	ldr	r3, [r4, #12]
   d75a4:	2b00      	cmp	r3, #0
   d75a6:	d1c3      	bne.n	d7530 <_ZN9TCPClient7connectEPKctm+0x64>
   d75a8:	f64f 70ff 	movw	r0, #65535	; 0xffff
   d75ac:	f8d4 9010 	ldr.w	r9, [r4, #16]
   d75b0:	f7fe fd50 	bl	d6054 <inet_htonl>
   d75b4:	4581      	cmp	r9, r0
   d75b6:	d1bb      	bne.n	d7530 <_ZN9TCPClient7connectEPKctm+0x64>
            addr = (const uint8_t*)(&ptr[3]);
   d75b8:	f104 0114 	add.w	r1, r4, #20
   d75bc:	e7aa      	b.n	d7514 <_ZN9TCPClient7connectEPKctm+0x48>
    CHECK_TRUE(netdb_getaddrinfo(host, nullptr, nullptr, &ais) == 0, 0); // return 0
   d75be:	4625      	mov	r5, r4
   d75c0:	e7e8      	b.n	d7594 <_ZN9TCPClient7connectEPKctm+0xc8>
   d75c2:	bf00      	nop
   d75c4:	000da5b8 	.word	0x000da5b8

000d75c8 <_ZN9TCPClient12flush_bufferEv>:
   d75c8:	6942      	ldr	r2, [r0, #20]
    d_->offset = 0;
   d75ca:	2300      	movs	r3, #0
   d75cc:	f8a2 3084 	strh.w	r3, [r2, #132]	; 0x84
   d75d0:	6942      	ldr	r2, [r0, #20]
    d_->total = 0;
   d75d2:	f8a2 3086 	strh.w	r3, [r2, #134]	; 0x86
}
   d75d6:	4770      	bx	lr

000d75d8 <_ZN9TCPClient7connectE9IPAddresstm>:
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d75d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d75dc:	461f      	mov	r7, r3
    stop();
   d75de:	6803      	ldr	r3, [r0, #0]
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d75e0:	460c      	mov	r4, r1
    stop();
   d75e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
int TCPClient::connect(IPAddress ip, uint16_t port, network_interface_t nif) {
   d75e4:	b08a      	sub	sp, #40	; 0x28
   d75e6:	4605      	mov	r5, r0
   d75e8:	4616      	mov	r6, r2
    stop();
   d75ea:	4798      	blx	r3
    d_->sock = sock_socket(ip.version() == 4 ? AF_INET : AF_INET6, SOCK_STREAM, IPPROTO_TCP);
   d75ec:	7d23      	ldrb	r3, [r4, #20]
   d75ee:	f8d5 8014 	ldr.w	r8, [r5, #20]
   d75f2:	2b04      	cmp	r3, #4
   d75f4:	bf0c      	ite	eq
   d75f6:	2002      	moveq	r0, #2
   d75f8:	200a      	movne	r0, #10
   d75fa:	2206      	movs	r2, #6
   d75fc:	2101      	movs	r1, #1
   d75fe:	f7fe fe01 	bl	d6204 <sock_socket>
   d7602:	f8c8 0000 	str.w	r0, [r8]
    CHECK_TRUE(d_->sock >= 0, 0); // return 0
   d7606:	696b      	ldr	r3, [r5, #20]
   d7608:	681b      	ldr	r3, [r3, #0]
   d760a:	2b00      	cmp	r3, #0
   d760c:	da08      	bge.n	d7620 <_ZN9TCPClient7connectE9IPAddresstm+0x48>
    NAMED_SCOPE_GUARD(done, {
   d760e:	682b      	ldr	r3, [r5, #0]
   d7610:	4628      	mov	r0, r5
   d7612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7614:	2400      	movs	r4, #0
    NAMED_SCOPE_GUARD(done, {
   d7616:	4798      	blx	r3
}
   d7618:	4620      	mov	r0, r4
   d761a:	b00a      	add	sp, #40	; 0x28
   d761c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
    flush_buffer();
   d7620:	4628      	mov	r0, r5
   d7622:	f7ff ffd1 	bl	d75c8 <_ZN9TCPClient12flush_bufferEv>
    if (nif != 0) {
   d7626:	b1b7      	cbz	r7, d7656 <_ZN9TCPClient7connectE9IPAddresstm+0x7e>
        struct ifreq ifr = {};
   d7628:	2300      	movs	r3, #0
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d762a:	a903      	add	r1, sp, #12
   d762c:	b2f8      	uxtb	r0, r7
        struct ifreq ifr = {};
   d762e:	9303      	str	r3, [sp, #12]
   d7630:	f8ad 3010 	strh.w	r3, [sp, #16]
        CHECK_TRUE(if_index_to_name(nif, ifr.ifr_name) == 0, 0); // return 0
   d7634:	f7fe fcde 	bl	d5ff4 <if_index_to_name>
   d7638:	2800      	cmp	r0, #0
   d763a:	d1e8      	bne.n	d760e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
        CHECK_TRUE(sock_setsockopt(d_->sock, SOL_SOCKET, SO_BINDTODEVICE, &ifr, sizeof(ifr)) == 0, 0); // return 0
   d763c:	6968      	ldr	r0, [r5, #20]
   d763e:	2306      	movs	r3, #6
   d7640:	9300      	str	r3, [sp, #0]
   d7642:	6800      	ldr	r0, [r0, #0]
   d7644:	ab03      	add	r3, sp, #12
   d7646:	f241 020b 	movw	r2, #4107	; 0x100b
   d764a:	f640 71ff 	movw	r1, #4095	; 0xfff
   d764e:	f7fe fdb1 	bl	d61b4 <sock_setsockopt>
   d7652:	2800      	cmp	r0, #0
   d7654:	d1db      	bne.n	d760e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
    sockaddr_storage saddr = {};
   d7656:	221c      	movs	r2, #28
   d7658:	2100      	movs	r1, #0
   d765a:	a803      	add	r0, sp, #12
   d765c:	f002 fd9e 	bl	da19c <memset>
    if (ip.version() == 4) {
   d7660:	7d23      	ldrb	r3, [r4, #20]
   d7662:	2b04      	cmp	r3, #4
   d7664:	d11d      	bne.n	d76a2 <_ZN9TCPClient7connectE9IPAddresstm+0xca>
        s->sin_len = sizeof(saddr);
   d7666:	f44f 7307 	mov.w	r3, #540	; 0x21c
        s->sin_port = htons(port);
   d766a:	4630      	mov	r0, r6
        s->sin_len = sizeof(saddr);
   d766c:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin_port = htons(port);
   d7670:	f7fe fcf8 	bl	d6064 <inet_htons>
   d7674:	f8ad 000e 	strh.w	r0, [sp, #14]
        s->sin_addr.s_addr = htonl(ip.raw().ipv4);
   d7678:	6860      	ldr	r0, [r4, #4]
   d767a:	f7fe fceb 	bl	d6054 <inet_htonl>
   d767e:	9004      	str	r0, [sp, #16]
    CHECK_TRUE(sock_connect(d_->sock, (const sockaddr*)&saddr, sizeof(saddr)) == 0, 0); // return 0
   d7680:	696b      	ldr	r3, [r5, #20]
   d7682:	221c      	movs	r2, #28
   d7684:	6818      	ldr	r0, [r3, #0]
   d7686:	a903      	add	r1, sp, #12
   d7688:	f7fe fda4 	bl	d61d4 <sock_connect>
   d768c:	2800      	cmp	r0, #0
   d768e:	d1be      	bne.n	d760e <_ZN9TCPClient7connectE9IPAddresstm+0x36>
   d7690:	3404      	adds	r4, #4
   d7692:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
   d7694:	696d      	ldr	r5, [r5, #20]
   d7696:	358c      	adds	r5, #140	; 0x8c
   d7698:	c50f      	stmia	r5!, {r0, r1, r2, r3}
   d769a:	6823      	ldr	r3, [r4, #0]
   d769c:	702b      	strb	r3, [r5, #0]
    return 1; // success
   d769e:	2401      	movs	r4, #1
   d76a0:	e7ba      	b.n	d7618 <_ZN9TCPClient7connectE9IPAddresstm+0x40>
        s->sin6_len = sizeof(saddr);
   d76a2:	f640 231c 	movw	r3, #2588	; 0xa1c
        s->sin6_port = htons(port);
   d76a6:	4630      	mov	r0, r6
        s->sin6_len = sizeof(saddr);
   d76a8:	f8ad 300c 	strh.w	r3, [sp, #12]
        s->sin6_port = htons(port);
   d76ac:	f7fe fcda 	bl	d6064 <inet_htons>
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d76b0:	ae05      	add	r6, sp, #20
        s->sin6_port = htons(port);
   d76b2:	f8ad 000e 	strh.w	r0, [sp, #14]
        memcpy(s->sin6_addr.s6_addr, ip.raw().ipv6, sizeof(s->sin6_addr.s6_addr));
   d76b6:	1d23      	adds	r3, r4, #4
   d76b8:	f104 0714 	add.w	r7, r4, #20
   d76bc:	6818      	ldr	r0, [r3, #0]
   d76be:	6859      	ldr	r1, [r3, #4]
   d76c0:	4632      	mov	r2, r6
   d76c2:	c203      	stmia	r2!, {r0, r1}
   d76c4:	3308      	adds	r3, #8
   d76c6:	42bb      	cmp	r3, r7
   d76c8:	4616      	mov	r6, r2
   d76ca:	d1f7      	bne.n	d76bc <_ZN9TCPClient7connectE9IPAddresstm+0xe4>
   d76cc:	e7d8      	b.n	d7680 <_ZN9TCPClient7connectE9IPAddresstm+0xa8>
	...

000d76d0 <_ZN9TCPClient9availableEv>:
{
   d76d0:	b530      	push	{r4, r5, lr}
   d76d2:	6942      	ldr	r2, [r0, #20]
    if (d_->total && (d_->offset == d_->total)) {
   d76d4:	f8b2 3086 	ldrh.w	r3, [r2, #134]	; 0x86
{
   d76d8:	b08b      	sub	sp, #44	; 0x2c
   d76da:	4604      	mov	r4, r0
    if (d_->total && (d_->offset == d_->total)) {
   d76dc:	b12b      	cbz	r3, d76ea <_ZN9TCPClient9availableEv+0x1a>
   d76de:	f8b2 2084 	ldrh.w	r2, [r2, #132]	; 0x84
   d76e2:	429a      	cmp	r2, r3
   d76e4:	d101      	bne.n	d76ea <_ZN9TCPClient9availableEv+0x1a>
        flush_buffer();
   d76e6:	f7ff ff6f 	bl	d75c8 <_ZN9TCPClient12flush_bufferEv>
   d76ea:	6961      	ldr	r1, [r4, #20]
    if (isOpen(d_->sock)) {
   d76ec:	6808      	ldr	r0, [r1, #0]
   d76ee:	2800      	cmp	r0, #0
   d76f0:	db18      	blt.n	d7724 <_ZN9TCPClient9availableEv+0x54>
   d76f2:	f8b1 5086 	ldrh.w	r5, [r1, #134]	; 0x86
        if (d_->total < arraySize(d_->buffer)) {
   d76f6:	2d7f      	cmp	r5, #127	; 0x7f
   d76f8:	d814      	bhi.n	d7724 <_ZN9TCPClient9availableEv+0x54>
            int ret = sock_recv(d_->sock, d_->buffer + d_->total, arraySize(d_->buffer) - d_->total, MSG_DONTWAIT);
   d76fa:	3104      	adds	r1, #4
   d76fc:	2308      	movs	r3, #8
   d76fe:	f1c5 0280 	rsb	r2, r5, #128	; 0x80
   d7702:	4429      	add	r1, r5
   d7704:	f7fe fd6e 	bl	d61e4 <sock_recv>
            if (ret > 0) {
   d7708:	2800      	cmp	r0, #0
   d770a:	dd13      	ble.n	d7734 <_ZN9TCPClient9availableEv+0x64>
   d770c:	6963      	ldr	r3, [r4, #20]
                if (d_->total == 0) {
   d770e:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d7712:	b90a      	cbnz	r2, d7718 <_ZN9TCPClient9availableEv+0x48>
                    d_->offset = 0;
   d7714:	f8a3 2084 	strh.w	r2, [r3, #132]	; 0x84
   d7718:	6963      	ldr	r3, [r4, #20]
                d_->total += ret;
   d771a:	f8b3 2086 	ldrh.w	r2, [r3, #134]	; 0x86
   d771e:	4410      	add	r0, r2
   d7720:	f8a3 0086 	strh.w	r0, [r3, #134]	; 0x86
   d7724:	6963      	ldr	r3, [r4, #20]
    return d_->total - d_->offset;
   d7726:	f8b3 0086 	ldrh.w	r0, [r3, #134]	; 0x86
   d772a:	f8b3 3084 	ldrh.w	r3, [r3, #132]	; 0x84
}
   d772e:	1ac0      	subs	r0, r0, r3
   d7730:	b00b      	add	sp, #44	; 0x2c
   d7732:	bd30      	pop	{r4, r5, pc}
                if (errno != EAGAIN && errno != EWOULDBLOCK) {
   d7734:	f7fe fe92 	bl	d645c <__errno>
   d7738:	6803      	ldr	r3, [r0, #0]
   d773a:	2b0b      	cmp	r3, #11
   d773c:	d0f2      	beq.n	d7724 <_ZN9TCPClient9availableEv+0x54>
   d773e:	f7fe fe8d 	bl	d645c <__errno>
   d7742:	6803      	ldr	r3, [r0, #0]
   d7744:	2b0b      	cmp	r3, #11
   d7746:	d0ed      	beq.n	d7724 <_ZN9TCPClient9availableEv+0x54>
                    LOG(ERROR, "recv error = %d", errno);
   d7748:	2320      	movs	r3, #32
   d774a:	2500      	movs	r5, #0
   d774c:	e9cd 3502 	strd	r3, r5, [sp, #8]
   d7750:	f7fe fe84 	bl	d645c <__errno>
   d7754:	6803      	ldr	r3, [r0, #0]
   d7756:	9301      	str	r3, [sp, #4]
   d7758:	4b08      	ldr	r3, [pc, #32]	; (d777c <_ZN9TCPClient9availableEv+0xac>)
   d775a:	4909      	ldr	r1, [pc, #36]	; (d7780 <_ZN9TCPClient9availableEv+0xb0>)
   d775c:	9300      	str	r3, [sp, #0]
   d775e:	aa02      	add	r2, sp, #8
   d7760:	462b      	mov	r3, r5
   d7762:	2032      	movs	r0, #50	; 0x32
   d7764:	f7fe fdce 	bl	d6304 <log_message>
                    sock_close(d_->sock);
   d7768:	6963      	ldr	r3, [r4, #20]
   d776a:	6818      	ldr	r0, [r3, #0]
   d776c:	f7fe fd2a 	bl	d61c4 <sock_close>
   d7770:	6963      	ldr	r3, [r4, #20]
                    d_->sock = -1;
   d7772:	f04f 32ff 	mov.w	r2, #4294967295
   d7776:	601a      	str	r2, [r3, #0]
   d7778:	e7d4      	b.n	d7724 <_ZN9TCPClient9availableEv+0x54>
   d777a:	bf00      	nop
   d777c:	000da653 	.word	0x000da653
   d7780:	000da64c 	.word	0x000da64c

000d7784 <_ZN9TCPClient4stopEv>:
void TCPClient::stop() {
   d7784:	b510      	push	{r4, lr}
    if (isOpen(d_->sock)) {
   d7786:	6943      	ldr	r3, [r0, #20]
void TCPClient::stop() {
   d7788:	4604      	mov	r4, r0
    if (isOpen(d_->sock)) {
   d778a:	6818      	ldr	r0, [r3, #0]
   d778c:	2800      	cmp	r0, #0
   d778e:	db01      	blt.n	d7794 <_ZN9TCPClient4stopEv+0x10>
        sock_close(d_->sock);
   d7790:	f7fe fd18 	bl	d61c4 <sock_close>
   d7794:	6963      	ldr	r3, [r4, #20]
    d_->sock = -1;
   d7796:	f04f 32ff 	mov.w	r2, #4294967295
   d779a:	601a      	str	r2, [r3, #0]
    void clear() { memset(&address, 0, sizeof (address)); }
   d779c:	6960      	ldr	r0, [r4, #20]
   d779e:	2211      	movs	r2, #17
   d77a0:	2100      	movs	r1, #0
   d77a2:	308c      	adds	r0, #140	; 0x8c
   d77a4:	f002 fcfa 	bl	da19c <memset>
    flush_buffer();
   d77a8:	4620      	mov	r0, r4
}
   d77aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    flush_buffer();
   d77ae:	f7ff bf0b 	b.w	d75c8 <_ZN9TCPClient12flush_bufferEv>

000d77b2 <_ZN9TCPClient4DataC1Ei>:

TCPClient::Data::Data(sock_handle_t sock)
   d77b2:	b510      	push	{r4, lr}
        : sock(sock),
          offset(0),
          total(0) {
   d77b4:	2300      	movs	r3, #0
TCPClient::Data::Data(sock_handle_t sock)
   d77b6:	4604      	mov	r4, r0
          total(0) {
   d77b8:	6001      	str	r1, [r0, #0]
   d77ba:	f8c0 3084 	str.w	r3, [r0, #132]	; 0x84
   d77be:	3088      	adds	r0, #136	; 0x88
   d77c0:	f7ff fba8 	bl	d6f14 <_ZN9IPAddressC1Ev>
}
   d77c4:	4620      	mov	r0, r4
   d77c6:	bd10      	pop	{r4, pc}

000d77c8 <_ZN9TCPClientC1Ei>:
TCPClient::TCPClient(sock_handle_t sock)
   d77c8:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d77ca:	2300      	movs	r3, #0
   d77cc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d77d0:	e9c0 3201 	strd	r3, r2, [r0, #4]
        : d_(std::make_shared<Data>(sock)) {
   d77d4:	4a0e      	ldr	r2, [pc, #56]	; (d7810 <_ZN9TCPClientC1Ei+0x48>)
#include "system_network.h"
#include "spark_wiring_print.h"
#include "spark_wiring_stream.h"
#include "spark_wiring_ipaddress.h"

class Client : public Stream {
   d77d6:	6103      	str	r3, [r0, #16]
   d77d8:	6002      	str	r2, [r0, #0]

    protected:
      // This constructor is non-standard, it is used by allocate_shared.
      template<typename _Alloc, typename... _Args>
	__shared_ptr(_Sp_alloc_shared_tag<_Alloc> __tag, _Args&&... __args)
	: _M_ptr(), _M_refcount(_M_ptr, __tag, std::forward<_Args>(__args)...)
   d77da:	6143      	str	r3, [r0, #20]
TCPClient::TCPClient(sock_handle_t sock)
   d77dc:	4604      	mov	r4, r0
	return static_cast<_Tp*>(::operator new(__n * sizeof(_Tp)));
   d77de:	20ac      	movs	r0, #172	; 0xac
   d77e0:	9101      	str	r1, [sp, #4]
   d77e2:	f7fc fc58 	bl	d4096 <_Znwj>
	  auto __pi = ::new (__mem)
   d77e6:	1e05      	subs	r5, r0, #0
   d77e8:	f105 060c 	add.w	r6, r5, #12
   d77ec:	d008      	beq.n	d7800 <_ZN9TCPClientC1Ei+0x38>
      : _M_use_count(1), _M_weak_count(1) { }
   d77ee:	2301      	movs	r3, #1
   d77f0:	e9c5 3301 	strd	r3, r3, [r5, #4]
	: _M_impl(__a)
   d77f4:	4b07      	ldr	r3, [pc, #28]	; (d7814 <_ZN9TCPClientC1Ei+0x4c>)
      template<typename _Up, typename... _Args>
	void
	construct(_Up* __p, _Args&&... __args)
	noexcept(noexcept(::new((void *)__p)
			    _Up(std::forward<_Args>(__args)...)))
	{ ::new((void *)__p) _Up(std::forward<_Args>(__args)...); }
   d77f6:	9901      	ldr	r1, [sp, #4]
   d77f8:	602b      	str	r3, [r5, #0]
   d77fa:	4630      	mov	r0, r6
   d77fc:	f7ff ffd9 	bl	d77b2 <_ZN9TCPClient4DataC1Ei>
    flush_buffer();
   d7800:	4620      	mov	r0, r4
	  __p = __pi->_M_ptr();
   d7802:	e9c4 6505 	strd	r6, r5, [r4, #20]
   d7806:	f7ff fedf 	bl	d75c8 <_ZN9TCPClient12flush_bufferEv>
}
   d780a:	b002      	add	sp, #8
   d780c:	bd70      	pop	{r4, r5, r6, pc}
   d780e:	bf00      	nop
   d7810:	000da688 	.word	0x000da688
   d7814:	000da66c 	.word	0x000da66c

000d7818 <_ZN9TCPClientC1Ev>:
TCPClient::TCPClient()
   d7818:	b510      	push	{r4, lr}
        : TCPClient(-1) {
   d781a:	f04f 31ff 	mov.w	r1, #4294967295
TCPClient::TCPClient()
   d781e:	4604      	mov	r4, r0
        : TCPClient(-1) {
   d7820:	f7ff ffd2 	bl	d77c8 <_ZN9TCPClientC1Ei>
}
   d7824:	4620      	mov	r0, r4
   d7826:	bd10      	pop	{r4, pc}

000d7828 <_ZN9TCPClient4DataD1Ev>:

TCPClient::Data::~Data() {
   d7828:	b510      	push	{r4, lr}
   d782a:	4604      	mov	r4, r0
    if (socket_handle_valid(sock)) {
   d782c:	6800      	ldr	r0, [r0, #0]
   d782e:	2800      	cmp	r0, #0
   d7830:	db01      	blt.n	d7836 <_ZN9TCPClient4DataD1Ev+0xe>
        sock_close(sock);
   d7832:	f7fe fcc7 	bl	d61c4 <sock_close>
    }
}
   d7836:	4620      	mov	r0, r4
   d7838:	bd10      	pop	{r4, pc}

000d783a <_ZNSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE10_M_disposeEv>:

      template<typename _Up>
	void
	destroy(_Up* __p)
	noexcept(noexcept( __p->~_Up()))
	{ __p->~_Up(); }
   d783a:	300c      	adds	r0, #12
   d783c:	f7ff bff4 	b.w	d7828 <_ZN9TCPClient4DataD1Ev>

000d7840 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d7840:	2200      	movs	r2, #0
   d7842:	6840      	ldr	r0, [r0, #4]
   d7844:	4611      	mov	r1, r2
   d7846:	f7fe bda1 	b.w	d638c <network_ready>

000d784a <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d784a:	2200      	movs	r2, #0
   d784c:	6840      	ldr	r0, [r0, #4]
   d784e:	4611      	mov	r1, r2
   d7850:	f7fe bdbc 	b.w	d63cc <network_listening>

000d7854 <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        return network_get_listen_timeout(*this, 0, NULL);
   d7854:	2200      	movs	r2, #0
   d7856:	6840      	ldr	r0, [r0, #4]
   d7858:	4611      	mov	r1, r2
   d785a:	f7fe bdc7 	b.w	d63ec <network_get_listen_timeout>

000d785e <_ZN5spark9WiFiClass16setListenTimeoutEt>:
        network_set_listen_timeout(*this, timeout, NULL);
   d785e:	6840      	ldr	r0, [r0, #4]
   d7860:	2200      	movs	r2, #0
   d7862:	f7fe bdbb 	b.w	d63dc <network_set_listen_timeout>

000d7866 <_ZN5spark9WiFiClass6listenEb>:
        network_listen(*this, begin ? 0 : 1, NULL);
   d7866:	6840      	ldr	r0, [r0, #4]
   d7868:	2200      	movs	r2, #0
   d786a:	f081 0101 	eor.w	r1, r1, #1
   d786e:	f7fe bda5 	b.w	d63bc <network_listen>

000d7872 <_ZN5spark9WiFiClass3offEv>:
        network_off(*this, 0, 0, NULL);
   d7872:	2300      	movs	r3, #0
   d7874:	6840      	ldr	r0, [r0, #4]
   d7876:	461a      	mov	r2, r3
   d7878:	4619      	mov	r1, r3
   d787a:	f7fe bd97 	b.w	d63ac <network_off>

000d787e <_ZN5spark9WiFiClass2onEv>:
        network_on(*this, 0, 0, NULL);
   d787e:	2300      	movs	r3, #0
   d7880:	6840      	ldr	r0, [r0, #4]
   d7882:	461a      	mov	r2, r3
   d7884:	4619      	mov	r1, r3
   d7886:	f7fe bd89 	b.w	d639c <network_on>

000d788a <_ZN5spark9WiFiClass10connectingEv>:
        return network_connecting(*this, 0, NULL);
   d788a:	2200      	movs	r2, #0
   d788c:	6840      	ldr	r0, [r0, #4]
   d788e:	4611      	mov	r1, r2
   d7890:	f7fe bd6c 	b.w	d636c <network_connecting>

000d7894 <_ZN5spark9WiFiClass10disconnectEv>:
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d7894:	6840      	ldr	r0, [r0, #4]
   d7896:	2200      	movs	r2, #0
   d7898:	2102      	movs	r1, #2
   d789a:	f7fe bd6f 	b.w	d637c <network_disconnect>

000d789e <_ZN5spark9WiFiClass7connectEj>:
        network_connect(*this, flags, 0, NULL);
   d789e:	2300      	movs	r3, #0
   d78a0:	6840      	ldr	r0, [r0, #4]
   d78a2:	461a      	mov	r2, r3
   d78a4:	f7fe bd5a 	b.w	d635c <network_connect>

000d78a8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d78a8:	4b02      	ldr	r3, [pc, #8]	; (d78b4 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d78aa:	2204      	movs	r2, #4
   d78ac:	605a      	str	r2, [r3, #4]
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d78ae:	4a02      	ldr	r2, [pc, #8]	; (d78b8 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d78b0:	601a      	str	r2, [r3, #0]
the same way.
*****************************************************************************/

    WiFiClass WiFi;
    // NetworkClass& Network = WiFi;
}
   d78b2:	4770      	bx	lr
   d78b4:	2003e7c4 	.word	0x2003e7c4
   d78b8:	000da6d4 	.word	0x000da6d4

000d78bc <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d78bc:	2300      	movs	r3, #0
   d78be:	6840      	ldr	r0, [r0, #4]
   d78c0:	461a      	mov	r2, r3
   d78c2:	f7fe bd4b 	b.w	d635c <network_connect>

000d78c6 <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d78c6:	6840      	ldr	r0, [r0, #4]
   d78c8:	2200      	movs	r2, #0
   d78ca:	2102      	movs	r1, #2
   d78cc:	f7fe bd56 	b.w	d637c <network_disconnect>

000d78d0 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d78d0:	2200      	movs	r2, #0
   d78d2:	6840      	ldr	r0, [r0, #4]
   d78d4:	4611      	mov	r1, r2
   d78d6:	f7fe bd49 	b.w	d636c <network_connecting>

000d78da <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d78da:	2200      	movs	r2, #0
   d78dc:	6840      	ldr	r0, [r0, #4]
   d78de:	4611      	mov	r1, r2
   d78e0:	f7fe bd54 	b.w	d638c <network_ready>

000d78e4 <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d78e4:	2300      	movs	r3, #0
   d78e6:	6840      	ldr	r0, [r0, #4]
   d78e8:	461a      	mov	r2, r3
   d78ea:	4619      	mov	r1, r3
   d78ec:	f7fe bd56 	b.w	d639c <network_on>

000d78f0 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d78f0:	2300      	movs	r3, #0
   d78f2:	6840      	ldr	r0, [r0, #4]
   d78f4:	461a      	mov	r2, r3
   d78f6:	4619      	mov	r1, r3
   d78f8:	f7fe bd58 	b.w	d63ac <network_off>

000d78fc <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d78fc:	6840      	ldr	r0, [r0, #4]
   d78fe:	2200      	movs	r2, #0
   d7900:	f081 0101 	eor.w	r1, r1, #1
   d7904:	f7fe bd5a 	b.w	d63bc <network_listen>

000d7908 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d7908:	6840      	ldr	r0, [r0, #4]
   d790a:	2200      	movs	r2, #0
   d790c:	f7fe bd66 	b.w	d63dc <network_set_listen_timeout>

000d7910 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d7910:	2200      	movs	r2, #0
   d7912:	6840      	ldr	r0, [r0, #4]
   d7914:	4611      	mov	r1, r2
   d7916:	f7fe bd69 	b.w	d63ec <network_get_listen_timeout>

000d791a <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d791a:	2200      	movs	r2, #0
   d791c:	6840      	ldr	r0, [r0, #4]
   d791e:	4611      	mov	r1, r2
   d7920:	f7fe bd54 	b.w	d63cc <network_listening>

000d7924 <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d7924:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d7928:	2400      	movs	r4, #0
IPAddress NetworkClass::resolve(const char* name) {
   d792a:	b095      	sub	sp, #84	; 0x54
   d792c:	4616      	mov	r6, r2
   d792e:	460d      	mov	r5, r1
   d7930:	4607      	mov	r7, r0
    IPAddress addr;
   d7932:	f7ff faef 	bl	d6f14 <_ZN9IPAddressC1Ev>
    struct addrinfo hints = {};
   d7936:	4621      	mov	r1, r4
   d7938:	2218      	movs	r2, #24
   d793a:	a80e      	add	r0, sp, #56	; 0x38
    struct addrinfo *ai = nullptr;
   d793c:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d793e:	f002 fc2d 	bl	da19c <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d7942:	2340      	movs	r3, #64	; 0x40
    hints.ai_family = AF_UNSPEC;
   d7944:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d7948:	4621      	mov	r1, r4
   d794a:	466b      	mov	r3, sp
   d794c:	aa0c      	add	r2, sp, #48	; 0x30
   d794e:	4630      	mov	r0, r6
   d7950:	f7fe fb28 	bl	d5fa4 <netdb_getaddrinfo>
    if (!r) {
   d7954:	4604      	mov	r4, r0
   d7956:	2800      	cmp	r0, #0
   d7958:	d146      	bne.n	d79e8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d795a:	4602      	mov	r2, r0
   d795c:	2101      	movs	r1, #1
   d795e:	6868      	ldr	r0, [r5, #4]
   d7960:	f7fe fd14 	bl	d638c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7964:	2102      	movs	r1, #2
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d7966:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7968:	4622      	mov	r2, r4
   d796a:	6868      	ldr	r0, [r5, #4]
   d796c:	f7fe fd0e 	bl	d638c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7970:	9e00      	ldr	r6, [sp, #0]
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d7972:	4681      	mov	r9, r0
        bool ok = false;
   d7974:	4621      	mov	r1, r4
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7976:	2e00      	cmp	r6, #0
   d7978:	d036      	beq.n	d79e8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
   d797a:	2900      	cmp	r1, #0
   d797c:	d134      	bne.n	d79e8 <_ZN5spark12NetworkClass7resolveEPKc+0xc4>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d797e:	6873      	ldr	r3, [r6, #4]
   d7980:	2b02      	cmp	r3, #2
   d7982:	d003      	beq.n	d798c <_ZN5spark12NetworkClass7resolveEPKc+0x68>
   d7984:	2b0a      	cmp	r3, #10
   d7986:	d00b      	beq.n	d79a0 <_ZN5spark12NetworkClass7resolveEPKc+0x7c>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d7988:	69f6      	ldr	r6, [r6, #28]
   d798a:	e7f4      	b.n	d7976 <_ZN5spark12NetworkClass7resolveEPKc+0x52>
                case AF_INET: {
                    if (!ipv4) {
   d798c:	f1b8 0f00 	cmp.w	r8, #0
   d7990:	d004      	beq.n	d799c <_ZN5spark12NetworkClass7resolveEPKc+0x78>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d7992:	6971      	ldr	r1, [r6, #20]
   d7994:	4638      	mov	r0, r7
   d7996:	3104      	adds	r1, #4
   d7998:	f7ff faff 	bl	d6f9a <_ZN9IPAddressaSEPKh>
                    ok = true;
                    break;
   d799c:	4641      	mov	r1, r8
   d799e:	e7f3      	b.n	d7988 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                }
                case AF_INET6: {
                    if (!ipv6) {
   d79a0:	f1b9 0f00 	cmp.w	r9, #0
   d79a4:	d101      	bne.n	d79aa <_ZN5spark12NetworkClass7resolveEPKc+0x86>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
                    HAL_IPAddress a = {};
                    a.v = 6;
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
                    addr = IPAddress(a);
                    ok = true;
   d79a6:	4649      	mov	r1, r9
   d79a8:	e7ee      	b.n	d7988 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d79aa:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d79ac:	2210      	movs	r2, #16
   d79ae:	a801      	add	r0, sp, #4
   d79b0:	f002 fbf4 	bl	da19c <memset>
                    a.v = 6;
   d79b4:	2306      	movs	r3, #6
   d79b6:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d79ba:	ad01      	add	r5, sp, #4
   d79bc:	f104 0308 	add.w	r3, r4, #8
   d79c0:	3418      	adds	r4, #24
   d79c2:	6818      	ldr	r0, [r3, #0]
   d79c4:	6859      	ldr	r1, [r3, #4]
   d79c6:	462a      	mov	r2, r5
   d79c8:	c203      	stmia	r2!, {r0, r1}
   d79ca:	3308      	adds	r3, #8
   d79cc:	42a3      	cmp	r3, r4
   d79ce:	4615      	mov	r5, r2
   d79d0:	d1f7      	bne.n	d79c2 <_ZN5spark12NetworkClass7resolveEPKc+0x9e>
                    addr = IPAddress(a);
   d79d2:	a901      	add	r1, sp, #4
   d79d4:	a806      	add	r0, sp, #24
class IPAddress : public Printable {
   d79d6:	ad07      	add	r5, sp, #28
   d79d8:	f7ff faaa 	bl	d6f30 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d79dc:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d79de:	1d3c      	adds	r4, r7, #4
   d79e0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d79e2:	682b      	ldr	r3, [r5, #0]
   d79e4:	7023      	strb	r3, [r4, #0]
   d79e6:	e7de      	b.n	d79a6 <_ZN5spark12NetworkClass7resolveEPKc+0x82>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d79e8:	9800      	ldr	r0, [sp, #0]
   d79ea:	f7fe fad3 	bl	d5f94 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d79ee:	4638      	mov	r0, r7
   d79f0:	b015      	add	sp, #84	; 0x54
   d79f2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
	...

000d79f8 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d79f8:	4b02      	ldr	r3, [pc, #8]	; (d7a04 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d79fa:	4a03      	ldr	r2, [pc, #12]	; (d7a08 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d79fc:	601a      	str	r2, [r3, #0]
   d79fe:	2200      	movs	r2, #0
   d7a00:	605a      	str	r2, [r3, #4]

} // spark
   d7a02:	4770      	bx	lr
   d7a04:	2003e7cc 	.word	0x2003e7cc
   d7a08:	000da708 	.word	0x000da708

000d7a0c <pinAvailable>:
/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
  if (pin >= TOTAL_PINS) {
   d7a0c:	2823      	cmp	r0, #35	; 0x23
bool pinAvailable(uint16_t pin) {
   d7a0e:	b513      	push	{r0, r1, r4, lr}
  if (pin >= TOTAL_PINS) {
   d7a10:	d902      	bls.n	d7a18 <pinAvailable+0xc>
    return false;
   d7a12:	2000      	movs	r0, #0
    return false; // 'pin' is used
  }
#endif

  return true; // 'pin' is available
}
   d7a14:	b002      	add	sp, #8
   d7a16:	bd10      	pop	{r4, pc}
  if((pin == SCK || pin == MOSI || pin == MISO) && hal_spi_is_enabled(SPI.interface()) == true)
   d7a18:	f1a0 030b 	sub.w	r3, r0, #11
   d7a1c:	2b02      	cmp	r3, #2
   d7a1e:	d81a      	bhi.n	d7a56 <pinAvailable+0x4a>

template <hal_spi_interface_t Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d7a20:	4c17      	ldr	r4, [pc, #92]	; (d7a80 <pinAvailable+0x74>)
   d7a22:	7821      	ldrb	r1, [r4, #0]
   d7a24:	f3bf 8f5b 	dmb	ish
   d7a28:	f011 0101 	ands.w	r1, r1, #1
   d7a2c:	d10b      	bne.n	d7a46 <pinAvailable+0x3a>
   d7a2e:	4620      	mov	r0, r4
   d7a30:	9101      	str	r1, [sp, #4]
   d7a32:	f7fc fb36 	bl	d40a2 <__cxa_guard_acquire>
   d7a36:	9901      	ldr	r1, [sp, #4]
   d7a38:	b128      	cbz	r0, d7a46 <pinAvailable+0x3a>
   d7a3a:	4812      	ldr	r0, [pc, #72]	; (d7a84 <pinAvailable+0x78>)
   d7a3c:	f7fe fd62 	bl	d6504 <_ZN8SPIClassC1E19hal_spi_interface_t>
   d7a40:	4620      	mov	r0, r4
   d7a42:	f7fc fb33 	bl	d40ac <__cxa_guard_release>
   d7a46:	4b0f      	ldr	r3, [pc, #60]	; (d7a84 <pinAvailable+0x78>)
   d7a48:	7818      	ldrb	r0, [r3, #0]
   d7a4a:	f7fe fbfb 	bl	d6244 <hal_spi_is_enabled>
   d7a4e:	2800      	cmp	r0, #0
   d7a50:	d1df      	bne.n	d7a12 <pinAvailable+0x6>
  return true; // 'pin' is available
   d7a52:	2001      	movs	r0, #1
   d7a54:	e7de      	b.n	d7a14 <pinAvailable+0x8>
  if((pin == SCL || pin == SDA) && hal_i2c_is_enabled(Wire.interface(), nullptr) == true)
   d7a56:	2801      	cmp	r0, #1
   d7a58:	d809      	bhi.n	d7a6e <pinAvailable+0x62>
   d7a5a:	f000 f86b 	bl	d7b34 <_Z19__fetch_global_Wirev>
   d7a5e:	2100      	movs	r1, #0
   d7a60:	7c00      	ldrb	r0, [r0, #16]
   d7a62:	f7fe fb8f 	bl	d6184 <hal_i2c_is_enabled>
  if((pin == RX || pin == TX) && hal_usart_is_enabled(Serial1.interface()) == true)
   d7a66:	f080 0001 	eor.w	r0, r0, #1
   d7a6a:	b2c0      	uxtb	r0, r0
   d7a6c:	e7d2      	b.n	d7a14 <pinAvailable+0x8>
   d7a6e:	3809      	subs	r0, #9
   d7a70:	2801      	cmp	r0, #1
   d7a72:	d8ee      	bhi.n	d7a52 <pinAvailable+0x46>
   d7a74:	f7ff fb7e 	bl	d7174 <_Z22__fetch_global_Serial1v>
   d7a78:	7c00      	ldrb	r0, [r0, #16]
   d7a7a:	f7fe fb2b 	bl	d60d4 <hal_usart_is_enabled>
   d7a7e:	e7f2      	b.n	d7a66 <pinAvailable+0x5a>
   d7a80:	2003e56c 	.word	0x2003e56c
   d7a84:	2003e570 	.word	0x2003e570

000d7a88 <pinMode>:
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7a88:	2823      	cmp	r0, #35	; 0x23
{
   d7a8a:	b538      	push	{r3, r4, r5, lr}
   d7a8c:	4604      	mov	r4, r0
   d7a8e:	460d      	mov	r5, r1
  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d7a90:	d80a      	bhi.n	d7aa8 <pinMode+0x20>
   d7a92:	29ff      	cmp	r1, #255	; 0xff
   d7a94:	d008      	beq.n	d7aa8 <pinMode+0x20>
  if( !pinAvailable(pin) ) {
   d7a96:	f7ff ffb9 	bl	d7a0c <pinAvailable>
   d7a9a:	b128      	cbz	r0, d7aa8 <pinMode+0x20>
  HAL_Pin_Mode(pin, setMode);
   d7a9c:	4629      	mov	r1, r5
   d7a9e:	4620      	mov	r0, r4
}
   d7aa0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_Pin_Mode(pin, setMode);
   d7aa4:	f7fe ba86 	b.w	d5fb4 <HAL_Pin_Mode>
}
   d7aa8:	bd38      	pop	{r3, r4, r5, pc}

000d7aaa <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d7aaa:	b538      	push	{r3, r4, r5, lr}
   d7aac:	4604      	mov	r4, r0
   d7aae:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7ab0:	f7fe fa88 	bl	d5fc4 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d7ab4:	28ff      	cmp	r0, #255	; 0xff
   d7ab6:	d010      	beq.n	d7ada <digitalWrite+0x30>
            mode == INPUT_PULLDOWN ||
   d7ab8:	2806      	cmp	r0, #6
   d7aba:	d804      	bhi.n	d7ac6 <digitalWrite+0x1c>
   d7abc:	234d      	movs	r3, #77	; 0x4d
   d7abe:	fa23 f000 	lsr.w	r0, r3, r0
   d7ac2:	07c3      	lsls	r3, r0, #31
   d7ac4:	d409      	bmi.n	d7ada <digitalWrite+0x30>
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d7ac6:	4620      	mov	r0, r4
   d7ac8:	f7ff ffa0 	bl	d7a0c <pinAvailable>
   d7acc:	b128      	cbz	r0, d7ada <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d7ace:	4629      	mov	r1, r5
   d7ad0:	4620      	mov	r0, r4
}
   d7ad2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  HAL_GPIO_Write(pin, value);
   d7ad6:	f7fe ba7d 	b.w	d5fd4 <HAL_GPIO_Write>
}
   d7ada:	bd38      	pop	{r3, r4, r5, pc}

000d7adc <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d7adc:	b510      	push	{r4, lr}
   d7ade:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d7ae0:	f7fe fa70 	bl	d5fc4 <HAL_Get_Pin_Mode>
    return mode == AF_OUTPUT_PUSHPULL ||
   d7ae4:	1f03      	subs	r3, r0, #4
    if (is_af_output_mode(mode))
   d7ae6:	b2db      	uxtb	r3, r3
   d7ae8:	2b01      	cmp	r3, #1
   d7aea:	d908      	bls.n	d7afe <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d7aec:	4620      	mov	r0, r4
   d7aee:	f7ff ff8d 	bl	d7a0c <pinAvailable>
   d7af2:	b120      	cbz	r0, d7afe <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d7af4:	4620      	mov	r0, r4
}
   d7af6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    return HAL_GPIO_Read(pin);
   d7afa:	f7fe ba73 	b.w	d5fe4 <HAL_GPIO_Read>
}
   d7afe:	2000      	movs	r0, #0
   d7b00:	bd10      	pop	{r4, pc}
	...

000d7b04 <_Z17acquireWireBufferv>:
}

} // anonymous

hal_i2c_config_t __attribute__((weak)) acquireWireBuffer()
{
   d7b04:	b538      	push	{r3, r4, r5, lr}
	hal_i2c_config_t config = {
   d7b06:	2300      	movs	r3, #0
   d7b08:	2520      	movs	r5, #32
   d7b0a:	8043      	strh	r3, [r0, #2]
   d7b0c:	2314      	movs	r3, #20
{
   d7b0e:	4604      	mov	r4, r0
	hal_i2c_config_t config = {
   d7b10:	8003      	strh	r3, [r0, #0]
   d7b12:	6085      	str	r5, [r0, #8]
   d7b14:	6105      	str	r5, [r0, #16]
		.rx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7b16:	4906      	ldr	r1, [pc, #24]	; (d7b30 <_Z17acquireWireBufferv+0x2c>)
   d7b18:	4628      	mov	r0, r5
   d7b1a:	f000 f83a 	bl	d7b92 <_ZnajRKSt9nothrow_t>
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7b1e:	4904      	ldr	r1, [pc, #16]	; (d7b30 <_Z17acquireWireBufferv+0x2c>)
	};
   d7b20:	6060      	str	r0, [r4, #4]
		.tx_buffer = new (std::nothrow) uint8_t[I2C_BUFFER_LENGTH],
   d7b22:	4628      	mov	r0, r5
   d7b24:	f000 f835 	bl	d7b92 <_ZnajRKSt9nothrow_t>
	};
   d7b28:	60e0      	str	r0, [r4, #12]
	return defaultWireConfig();
}
   d7b2a:	4620      	mov	r0, r4
   d7b2c:	bd38      	pop	{r3, r4, r5, pc}
   d7b2e:	bf00      	nop
   d7b30:	000da734 	.word	0x000da734

000d7b34 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d7b34:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7b36:	4d0f      	ldr	r5, [pc, #60]	; (d7b74 <_Z19__fetch_global_Wirev+0x40>)
   d7b38:	7829      	ldrb	r1, [r5, #0]
   d7b3a:	f3bf 8f5b 	dmb	ish
   d7b3e:	f011 0401 	ands.w	r4, r1, #1
{
   d7b42:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d7b44:	d113      	bne.n	d7b6e <_Z19__fetch_global_Wirev+0x3a>
   d7b46:	4628      	mov	r0, r5
   d7b48:	f7fc faab 	bl	d40a2 <__cxa_guard_acquire>
   d7b4c:	b178      	cbz	r0, d7b6e <_Z19__fetch_global_Wirev+0x3a>
   d7b4e:	a801      	add	r0, sp, #4
   d7b50:	f7ff ffd8 	bl	d7b04 <_Z17acquireWireBufferv>
   d7b54:	aa01      	add	r2, sp, #4
   d7b56:	4621      	mov	r1, r4
   d7b58:	4807      	ldr	r0, [pc, #28]	; (d7b78 <_Z19__fetch_global_Wirev+0x44>)
   d7b5a:	f7ff fb61 	bl	d7220 <_ZN7TwoWireC1E19hal_i2c_interface_tRK16hal_i2c_config_t>
   d7b5e:	4628      	mov	r0, r5
   d7b60:	f7fc faa4 	bl	d40ac <__cxa_guard_release>
   d7b64:	4a05      	ldr	r2, [pc, #20]	; (d7b7c <_Z19__fetch_global_Wirev+0x48>)
   d7b66:	4906      	ldr	r1, [pc, #24]	; (d7b80 <_Z19__fetch_global_Wirev+0x4c>)
   d7b68:	4803      	ldr	r0, [pc, #12]	; (d7b78 <_Z19__fetch_global_Wirev+0x44>)
   d7b6a:	f000 f80b 	bl	d7b84 <__aeabi_atexit>
	return wire;
}
   d7b6e:	4802      	ldr	r0, [pc, #8]	; (d7b78 <_Z19__fetch_global_Wirev+0x44>)
   d7b70:	b007      	add	sp, #28
   d7b72:	bd30      	pop	{r4, r5, pc}
   d7b74:	2003e7d8 	.word	0x2003e7d8
   d7b78:	2003e7dc 	.word	0x2003e7dc
   d7b7c:	2003e404 	.word	0x2003e404
   d7b80:	000d71c9 	.word	0x000d71c9

000d7b84 <__aeabi_atexit>:
   d7b84:	460b      	mov	r3, r1
   d7b86:	4601      	mov	r1, r0
   d7b88:	4618      	mov	r0, r3
   d7b8a:	f002 baeb 	b.w	da164 <__cxa_atexit>

000d7b8e <_ZdlPvj>:
   d7b8e:	f7fc ba86 	b.w	d409e <_ZdlPv>

000d7b92 <_ZnajRKSt9nothrow_t>:
   d7b92:	f7fc ba82 	b.w	d409a <_Znaj>
	...

000d7b98 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info>:
   d7b98:	4901      	ldr	r1, [pc, #4]	; (d7ba0 <_ZNSt19_Sp_make_shared_tag5_S_eqERKSt9type_info+0x8>)
   d7b9a:	f000 b8f9 	b.w	d7d90 <_ZNKSt9type_infoeqERKS_>
   d7b9e:	bf00      	nop
   d7ba0:	000da750 	.word	0x000da750

000d7ba4 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PPv>:
   d7ba4:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d7ba6:	2400      	movs	r4, #0
   d7ba8:	2310      	movs	r3, #16
   d7baa:	e9cd 3402 	strd	r3, r4, [sp, #8]
   d7bae:	6803      	ldr	r3, [r0, #0]
   d7bb0:	9400      	str	r4, [sp, #0]
   d7bb2:	699e      	ldr	r6, [r3, #24]
   d7bb4:	f88d 4004 	strb.w	r4, [sp, #4]
   d7bb8:	4615      	mov	r5, r2
   d7bba:	466b      	mov	r3, sp
   d7bbc:	6812      	ldr	r2, [r2, #0]
   d7bbe:	47b0      	blx	r6
   d7bc0:	f89d 3004 	ldrb.w	r3, [sp, #4]
   d7bc4:	f003 0306 	and.w	r3, r3, #6
   d7bc8:	2b06      	cmp	r3, #6
   d7bca:	bf03      	ittte	eq
   d7bcc:	9b00      	ldreq	r3, [sp, #0]
   d7bce:	602b      	streq	r3, [r5, #0]
   d7bd0:	2001      	moveq	r0, #1
   d7bd2:	4620      	movne	r0, r4
   d7bd4:	b004      	add	sp, #16
   d7bd6:	bd70      	pop	{r4, r5, r6, pc}

000d7bd8 <_ZNK10__cxxabiv117__class_type_info20__do_find_public_srcEiPKvPKS0_S2_>:
   d7bd8:	9800      	ldr	r0, [sp, #0]
   d7bda:	4290      	cmp	r0, r2
   d7bdc:	bf14      	ite	ne
   d7bde:	2001      	movne	r0, #1
   d7be0:	2006      	moveq	r0, #6
   d7be2:	4770      	bx	lr

000d7be4 <_ZN10__cxxabiv117__class_type_infoD1Ev>:
   d7be4:	b510      	push	{r4, lr}
   d7be6:	4b03      	ldr	r3, [pc, #12]	; (d7bf4 <_ZN10__cxxabiv117__class_type_infoD1Ev+0x10>)
   d7be8:	6003      	str	r3, [r0, #0]
   d7bea:	4604      	mov	r4, r0
   d7bec:	f000 f8cd 	bl	d7d8a <_ZNSt9type_infoD1Ev>
   d7bf0:	4620      	mov	r0, r4
   d7bf2:	bd10      	pop	{r4, pc}
   d7bf4:	000da790 	.word	0x000da790

000d7bf8 <_ZN10__cxxabiv117__class_type_infoD0Ev>:
   d7bf8:	b510      	push	{r4, lr}
   d7bfa:	4604      	mov	r4, r0
   d7bfc:	f7ff fff2 	bl	d7be4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7c00:	4620      	mov	r0, r4
   d7c02:	2108      	movs	r1, #8
   d7c04:	f7ff ffc3 	bl	d7b8e <_ZdlPvj>
   d7c08:	4620      	mov	r0, r4
   d7c0a:	bd10      	pop	{r4, pc}

000d7c0c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE>:
   d7c0c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7c10:	461f      	mov	r7, r3
   d7c12:	e9dd 3408 	ldrd	r3, r4, [sp, #32]
   d7c16:	f8dd 8018 	ldr.w	r8, [sp, #24]
   d7c1a:	4598      	cmp	r8, r3
   d7c1c:	4606      	mov	r6, r0
   d7c1e:	4615      	mov	r5, r2
   d7c20:	d107      	bne.n	d7c32 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7c22:	9907      	ldr	r1, [sp, #28]
   d7c24:	f000 f8b4 	bl	d7d90 <_ZNKSt9type_infoeqERKS_>
   d7c28:	b118      	cbz	r0, d7c32 <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x26>
   d7c2a:	7165      	strb	r5, [r4, #5]
   d7c2c:	2000      	movs	r0, #0
   d7c2e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d7c32:	4639      	mov	r1, r7
   d7c34:	4630      	mov	r0, r6
   d7c36:	f000 f8ab 	bl	d7d90 <_ZNKSt9type_infoeqERKS_>
   d7c3a:	2800      	cmp	r0, #0
   d7c3c:	d0f6      	beq.n	d7c2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>
   d7c3e:	2301      	movs	r3, #1
   d7c40:	f8c4 8000 	str.w	r8, [r4]
   d7c44:	7125      	strb	r5, [r4, #4]
   d7c46:	71a3      	strb	r3, [r4, #6]
   d7c48:	e7f0      	b.n	d7c2c <_ZNK10__cxxabiv117__class_type_info12__do_dyncastEiNS0_10__sub_kindEPKS0_PKvS3_S5_RNS0_16__dyncast_resultE+0x20>

000d7c4a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>:
   d7c4a:	b538      	push	{r3, r4, r5, lr}
   d7c4c:	4615      	mov	r5, r2
   d7c4e:	461c      	mov	r4, r3
   d7c50:	f000 f89e 	bl	d7d90 <_ZNKSt9type_infoeqERKS_>
   d7c54:	b120      	cbz	r0, d7c60 <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE+0x16>
   d7c56:	2308      	movs	r3, #8
   d7c58:	60e3      	str	r3, [r4, #12]
   d7c5a:	2306      	movs	r3, #6
   d7c5c:	6025      	str	r5, [r4, #0]
   d7c5e:	7123      	strb	r3, [r4, #4]
   d7c60:	bd38      	pop	{r3, r4, r5, pc}

000d7c62 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj>:
   d7c62:	b573      	push	{r0, r1, r4, r5, r6, lr}
   d7c64:	4605      	mov	r5, r0
   d7c66:	460c      	mov	r4, r1
   d7c68:	9201      	str	r2, [sp, #4]
   d7c6a:	461e      	mov	r6, r3
   d7c6c:	f000 f890 	bl	d7d90 <_ZNKSt9type_infoeqERKS_>
   d7c70:	b950      	cbnz	r0, d7c88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7c72:	2e03      	cmp	r6, #3
   d7c74:	d808      	bhi.n	d7c88 <_ZNK10__cxxabiv117__class_type_info10__do_catchEPKSt9type_infoPPvj+0x26>
   d7c76:	6823      	ldr	r3, [r4, #0]
   d7c78:	9a01      	ldr	r2, [sp, #4]
   d7c7a:	695b      	ldr	r3, [r3, #20]
   d7c7c:	4629      	mov	r1, r5
   d7c7e:	4620      	mov	r0, r4
   d7c80:	b002      	add	sp, #8
   d7c82:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
   d7c86:	4718      	bx	r3
   d7c88:	b002      	add	sp, #8
   d7c8a:	bd70      	pop	{r4, r5, r6, pc}

000d7c8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>:
   d7c8c:	b510      	push	{r4, lr}
   d7c8e:	4b03      	ldr	r3, [pc, #12]	; (d7c9c <_ZN10__cxxabiv120__si_class_type_infoD1Ev+0x10>)
   d7c90:	6003      	str	r3, [r0, #0]
   d7c92:	4604      	mov	r4, r0
   d7c94:	f7ff ffa6 	bl	d7be4 <_ZN10__cxxabiv117__class_type_infoD1Ev>
   d7c98:	4620      	mov	r0, r4
   d7c9a:	bd10      	pop	{r4, pc}
   d7c9c:	000da7f0 	.word	0x000da7f0

000d7ca0 <_ZN10__cxxabiv120__si_class_type_infoD0Ev>:
   d7ca0:	b510      	push	{r4, lr}
   d7ca2:	4604      	mov	r4, r0
   d7ca4:	f7ff fff2 	bl	d7c8c <_ZN10__cxxabiv120__si_class_type_infoD1Ev>
   d7ca8:	4620      	mov	r0, r4
   d7caa:	210c      	movs	r1, #12
   d7cac:	f7ff ff6f 	bl	d7b8e <_ZdlPvj>
   d7cb0:	4620      	mov	r0, r4
   d7cb2:	bd10      	pop	{r4, pc}

000d7cb4 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_>:
   d7cb4:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
   d7cb6:	9f08      	ldr	r7, [sp, #32]
   d7cb8:	4297      	cmp	r7, r2
   d7cba:	4605      	mov	r5, r0
   d7cbc:	460e      	mov	r6, r1
   d7cbe:	4614      	mov	r4, r2
   d7cc0:	d00a      	beq.n	d7cd8 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0x24>
   d7cc2:	68a8      	ldr	r0, [r5, #8]
   d7cc4:	6802      	ldr	r2, [r0, #0]
   d7cc6:	9708      	str	r7, [sp, #32]
   d7cc8:	6a15      	ldr	r5, [r2, #32]
   d7cca:	4631      	mov	r1, r6
   d7ccc:	4622      	mov	r2, r4
   d7cce:	46ac      	mov	ip, r5
   d7cd0:	b003      	add	sp, #12
   d7cd2:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   d7cd6:	4760      	bx	ip
   d7cd8:	4619      	mov	r1, r3
   d7cda:	9301      	str	r3, [sp, #4]
   d7cdc:	f000 f858 	bl	d7d90 <_ZNKSt9type_infoeqERKS_>
   d7ce0:	9b01      	ldr	r3, [sp, #4]
   d7ce2:	2800      	cmp	r0, #0
   d7ce4:	d0ed      	beq.n	d7cc2 <_ZNK10__cxxabiv120__si_class_type_info20__do_find_public_srcEiPKvPKNS_17__class_type_infoES2_+0xe>
   d7ce6:	2006      	movs	r0, #6
   d7ce8:	b003      	add	sp, #12
   d7cea:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d7cec <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE>:
   d7cec:	e92d 4ff1 	stmdb	sp!, {r0, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7cf0:	460d      	mov	r5, r1
   d7cf2:	4619      	mov	r1, r3
   d7cf4:	e9dd 4b0a 	ldrd	r4, fp, [sp, #40]	; 0x28
   d7cf8:	e9dd a60c 	ldrd	sl, r6, [sp, #48]	; 0x30
   d7cfc:	4681      	mov	r9, r0
   d7cfe:	4617      	mov	r7, r2
   d7d00:	4698      	mov	r8, r3
   d7d02:	f000 f845 	bl	d7d90 <_ZNKSt9type_infoeqERKS_>
   d7d06:	b190      	cbz	r0, d7d2e <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x42>
   d7d08:	2d00      	cmp	r5, #0
   d7d0a:	6034      	str	r4, [r6, #0]
   d7d0c:	7137      	strb	r7, [r6, #4]
   d7d0e:	db09      	blt.n	d7d24 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x38>
   d7d10:	1961      	adds	r1, r4, r5
   d7d12:	458a      	cmp	sl, r1
   d7d14:	bf0c      	ite	eq
   d7d16:	2106      	moveq	r1, #6
   d7d18:	2101      	movne	r1, #1
   d7d1a:	71b1      	strb	r1, [r6, #6]
   d7d1c:	2000      	movs	r0, #0
   d7d1e:	b001      	add	sp, #4
   d7d20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7d24:	3502      	adds	r5, #2
   d7d26:	d1f9      	bne.n	d7d1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7d28:	2301      	movs	r3, #1
   d7d2a:	71b3      	strb	r3, [r6, #6]
   d7d2c:	e7f6      	b.n	d7d1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7d2e:	4554      	cmp	r4, sl
   d7d30:	d106      	bne.n	d7d40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7d32:	4659      	mov	r1, fp
   d7d34:	4648      	mov	r0, r9
   d7d36:	f000 f82b 	bl	d7d90 <_ZNKSt9type_infoeqERKS_>
   d7d3a:	b108      	cbz	r0, d7d40 <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x54>
   d7d3c:	7177      	strb	r7, [r6, #5]
   d7d3e:	e7ed      	b.n	d7d1c <_ZNK10__cxxabiv120__si_class_type_info12__do_dyncastEiNS_17__class_type_info10__sub_kindEPKS1_PKvS4_S6_RNS1_16__dyncast_resultE+0x30>
   d7d40:	f8d9 0008 	ldr.w	r0, [r9, #8]
   d7d44:	6803      	ldr	r3, [r0, #0]
   d7d46:	e9cd a60c 	strd	sl, r6, [sp, #48]	; 0x30
   d7d4a:	e9cd 4b0a 	strd	r4, fp, [sp, #40]	; 0x28
   d7d4e:	69dc      	ldr	r4, [r3, #28]
   d7d50:	463a      	mov	r2, r7
   d7d52:	4643      	mov	r3, r8
   d7d54:	4629      	mov	r1, r5
   d7d56:	46a4      	mov	ip, r4
   d7d58:	b001      	add	sp, #4
   d7d5a:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7d5e:	4760      	bx	ip

000d7d60 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE>:
   d7d60:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d7d64:	4607      	mov	r7, r0
   d7d66:	460c      	mov	r4, r1
   d7d68:	4615      	mov	r5, r2
   d7d6a:	461e      	mov	r6, r3
   d7d6c:	f7ff ff6d 	bl	d7c4a <_ZNK10__cxxabiv117__class_type_info11__do_upcastEPKS0_PKvRNS0_15__upcast_resultE>
   d7d70:	b948      	cbnz	r0, d7d86 <_ZNK10__cxxabiv120__si_class_type_info11__do_upcastEPKNS_17__class_type_infoEPKvRNS1_15__upcast_resultE+0x26>
   d7d72:	68b8      	ldr	r0, [r7, #8]
   d7d74:	6803      	ldr	r3, [r0, #0]
   d7d76:	699f      	ldr	r7, [r3, #24]
   d7d78:	462a      	mov	r2, r5
   d7d7a:	4633      	mov	r3, r6
   d7d7c:	4621      	mov	r1, r4
   d7d7e:	46bc      	mov	ip, r7
   d7d80:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d7d84:	4760      	bx	ip
   d7d86:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d7d8a <_ZNSt9type_infoD1Ev>:
   d7d8a:	4770      	bx	lr

000d7d8c <_ZNKSt9type_info14__is_pointer_pEv>:
   d7d8c:	2000      	movs	r0, #0
   d7d8e:	4770      	bx	lr

000d7d90 <_ZNKSt9type_infoeqERKS_>:
   d7d90:	4281      	cmp	r1, r0
   d7d92:	b508      	push	{r3, lr}
   d7d94:	d00e      	beq.n	d7db4 <_ZNKSt9type_infoeqERKS_+0x24>
   d7d96:	6840      	ldr	r0, [r0, #4]
   d7d98:	7803      	ldrb	r3, [r0, #0]
   d7d9a:	2b2a      	cmp	r3, #42	; 0x2a
   d7d9c:	d00c      	beq.n	d7db8 <_ZNKSt9type_infoeqERKS_+0x28>
   d7d9e:	6849      	ldr	r1, [r1, #4]
   d7da0:	780b      	ldrb	r3, [r1, #0]
   d7da2:	2b2a      	cmp	r3, #42	; 0x2a
   d7da4:	bf08      	it	eq
   d7da6:	3101      	addeq	r1, #1
   d7da8:	f002 fa33 	bl	da212 <strcmp>
   d7dac:	fab0 f080 	clz	r0, r0
   d7db0:	0940      	lsrs	r0, r0, #5
   d7db2:	bd08      	pop	{r3, pc}
   d7db4:	2001      	movs	r0, #1
   d7db6:	e7fc      	b.n	d7db2 <_ZNKSt9type_infoeqERKS_+0x22>
   d7db8:	2000      	movs	r0, #0
   d7dba:	e7fa      	b.n	d7db2 <_ZNKSt9type_infoeqERKS_+0x22>
   d7dbc:	0000      	movs	r0, r0
	...

000d7dc0 <pow>:
   d7dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d7dc4:	ed2d 8b02 	vpush	{d8}
   d7dc8:	b08d      	sub	sp, #52	; 0x34
   d7dca:	ec57 6b10 	vmov	r6, r7, d0
   d7dce:	ec55 4b11 	vmov	r4, r5, d1
   d7dd2:	f000 fa09 	bl	d81e8 <__ieee754_pow>
   d7dd6:	4bae      	ldr	r3, [pc, #696]	; (d8090 <pow+0x2d0>)
   d7dd8:	eeb0 8a40 	vmov.f32	s16, s0
   d7ddc:	eef0 8a60 	vmov.f32	s17, s1
   d7de0:	f993 9000 	ldrsb.w	r9, [r3]
   d7de4:	f1b9 3fff 	cmp.w	r9, #4294967295
   d7de8:	d037      	beq.n	d7e5a <pow+0x9a>
   d7dea:	4622      	mov	r2, r4
   d7dec:	462b      	mov	r3, r5
   d7dee:	4620      	mov	r0, r4
   d7df0:	4629      	mov	r1, r5
   d7df2:	f001 fe35 	bl	d9a60 <__aeabi_dcmpun>
   d7df6:	4683      	mov	fp, r0
   d7df8:	bb78      	cbnz	r0, d7e5a <pow+0x9a>
   d7dfa:	4632      	mov	r2, r6
   d7dfc:	463b      	mov	r3, r7
   d7dfe:	4630      	mov	r0, r6
   d7e00:	4639      	mov	r1, r7
   d7e02:	f001 fe2d 	bl	d9a60 <__aeabi_dcmpun>
   d7e06:	4680      	mov	r8, r0
   d7e08:	2800      	cmp	r0, #0
   d7e0a:	f040 8093 	bne.w	d7f34 <pow+0x174>
   d7e0e:	f04f 0a00 	mov.w	sl, #0
   d7e12:	f04f 0b00 	mov.w	fp, #0
   d7e16:	4630      	mov	r0, r6
   d7e18:	4639      	mov	r1, r7
   d7e1a:	4652      	mov	r2, sl
   d7e1c:	465b      	mov	r3, fp
   d7e1e:	f001 fded 	bl	d99fc <__aeabi_dcmpeq>
   d7e22:	b318      	cbz	r0, d7e6c <pow+0xac>
   d7e24:	4652      	mov	r2, sl
   d7e26:	465b      	mov	r3, fp
   d7e28:	4620      	mov	r0, r4
   d7e2a:	4629      	mov	r1, r5
   d7e2c:	f001 fde6 	bl	d99fc <__aeabi_dcmpeq>
   d7e30:	9000      	str	r0, [sp, #0]
   d7e32:	2800      	cmp	r0, #0
   d7e34:	d057      	beq.n	d7ee6 <pow+0x126>
   d7e36:	4b97      	ldr	r3, [pc, #604]	; (d8094 <pow+0x2d4>)
   d7e38:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d7e3c:	2201      	movs	r2, #1
   d7e3e:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7e42:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7e46:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7e4a:	9202      	str	r2, [sp, #8]
   d7e4c:	9303      	str	r3, [sp, #12]
   d7e4e:	f1b9 0f00 	cmp.w	r9, #0
   d7e52:	f000 8089 	beq.w	d7f68 <pow+0x1a8>
   d7e56:	ed9f 8b8a 	vldr	d8, [pc, #552]	; d8080 <pow+0x2c0>
   d7e5a:	eeb0 0a48 	vmov.f32	s0, s16
   d7e5e:	eef0 0a68 	vmov.f32	s1, s17
   d7e62:	b00d      	add	sp, #52	; 0x34
   d7e64:	ecbd 8b02 	vpop	{d8}
   d7e68:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d7e6c:	eeb0 0a48 	vmov.f32	s0, s16
   d7e70:	eef0 0a68 	vmov.f32	s1, s17
   d7e74:	f001 f860 	bl	d8f38 <finite>
   d7e78:	4680      	mov	r8, r0
   d7e7a:	2800      	cmp	r0, #0
   d7e7c:	f000 8082 	beq.w	d7f84 <pow+0x1c4>
   d7e80:	f04f 0800 	mov.w	r8, #0
   d7e84:	f04f 0900 	mov.w	r9, #0
   d7e88:	ec51 0b18 	vmov	r0, r1, d8
   d7e8c:	4642      	mov	r2, r8
   d7e8e:	464b      	mov	r3, r9
   d7e90:	f001 fdb4 	bl	d99fc <__aeabi_dcmpeq>
   d7e94:	2800      	cmp	r0, #0
   d7e96:	d0e0      	beq.n	d7e5a <pow+0x9a>
   d7e98:	ec47 6b10 	vmov	d0, r6, r7
   d7e9c:	f001 f84c 	bl	d8f38 <finite>
   d7ea0:	2800      	cmp	r0, #0
   d7ea2:	d0da      	beq.n	d7e5a <pow+0x9a>
   d7ea4:	ec45 4b10 	vmov	d0, r4, r5
   d7ea8:	f001 f846 	bl	d8f38 <finite>
   d7eac:	2800      	cmp	r0, #0
   d7eae:	d0d4      	beq.n	d7e5a <pow+0x9a>
   d7eb0:	4b77      	ldr	r3, [pc, #476]	; (d8090 <pow+0x2d0>)
   d7eb2:	4a78      	ldr	r2, [pc, #480]	; (d8094 <pow+0x2d4>)
   d7eb4:	f993 3000 	ldrsb.w	r3, [r3]
   d7eb8:	9203      	str	r2, [sp, #12]
   d7eba:	2104      	movs	r1, #4
   d7ebc:	2200      	movs	r2, #0
   d7ebe:	2b02      	cmp	r3, #2
   d7ec0:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7ec4:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7ec8:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d7ecc:	9102      	str	r1, [sp, #8]
   d7ece:	920a      	str	r2, [sp, #40]	; 0x28
   d7ed0:	d004      	beq.n	d7edc <pow+0x11c>
   d7ed2:	a802      	add	r0, sp, #8
   d7ed4:	f001 f83c 	bl	d8f50 <matherr>
   d7ed8:	2800      	cmp	r0, #0
   d7eda:	d14a      	bne.n	d7f72 <pow+0x1b2>
   d7edc:	f7fe fabe 	bl	d645c <__errno>
   d7ee0:	2322      	movs	r3, #34	; 0x22
   d7ee2:	6003      	str	r3, [r0, #0]
   d7ee4:	e045      	b.n	d7f72 <pow+0x1b2>
   d7ee6:	ec45 4b10 	vmov	d0, r4, r5
   d7eea:	f001 f825 	bl	d8f38 <finite>
   d7eee:	2800      	cmp	r0, #0
   d7ef0:	d0b3      	beq.n	d7e5a <pow+0x9a>
   d7ef2:	4652      	mov	r2, sl
   d7ef4:	465b      	mov	r3, fp
   d7ef6:	4620      	mov	r0, r4
   d7ef8:	4629      	mov	r1, r5
   d7efa:	f001 fd89 	bl	d9a10 <__aeabi_dcmplt>
   d7efe:	2800      	cmp	r0, #0
   d7f00:	d0ab      	beq.n	d7e5a <pow+0x9a>
   d7f02:	4b63      	ldr	r3, [pc, #396]	; (d8090 <pow+0x2d0>)
   d7f04:	9900      	ldr	r1, [sp, #0]
   d7f06:	4a63      	ldr	r2, [pc, #396]	; (d8094 <pow+0x2d4>)
   d7f08:	f993 3000 	ldrsb.w	r3, [r3]
   d7f0c:	910a      	str	r1, [sp, #40]	; 0x28
   d7f0e:	2101      	movs	r1, #1
   d7f10:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7f14:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7f18:	e9cd 1202 	strd	r1, r2, [sp, #8]
   d7f1c:	2b00      	cmp	r3, #0
   d7f1e:	d16f      	bne.n	d8000 <pow+0x240>
   d7f20:	e9cd ab08 	strd	sl, fp, [sp, #32]
   d7f24:	a802      	add	r0, sp, #8
   d7f26:	f001 f813 	bl	d8f50 <matherr>
   d7f2a:	2800      	cmp	r0, #0
   d7f2c:	d06e      	beq.n	d800c <pow+0x24c>
   d7f2e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7f30:	b32b      	cbz	r3, d7f7e <pow+0x1be>
   d7f32:	e020      	b.n	d7f76 <pow+0x1b6>
   d7f34:	2200      	movs	r2, #0
   d7f36:	2300      	movs	r3, #0
   d7f38:	4620      	mov	r0, r4
   d7f3a:	4629      	mov	r1, r5
   d7f3c:	f001 fd5e 	bl	d99fc <__aeabi_dcmpeq>
   d7f40:	2800      	cmp	r0, #0
   d7f42:	d08a      	beq.n	d7e5a <pow+0x9a>
   d7f44:	ed9f 8b4e 	vldr	d8, [pc, #312]	; d8080 <pow+0x2c0>
   d7f48:	4b52      	ldr	r3, [pc, #328]	; (d8094 <pow+0x2d4>)
   d7f4a:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   d7f4e:	2201      	movs	r2, #1
   d7f50:	f1b9 0f02 	cmp.w	r9, #2
   d7f54:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7f58:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7f5c:	ed8d 8b08 	vstr	d8, [sp, #32]
   d7f60:	9202      	str	r2, [sp, #8]
   d7f62:	9303      	str	r3, [sp, #12]
   d7f64:	f43f af79 	beq.w	d7e5a <pow+0x9a>
   d7f68:	a802      	add	r0, sp, #8
   d7f6a:	f000 fff1 	bl	d8f50 <matherr>
   d7f6e:	2800      	cmp	r0, #0
   d7f70:	d051      	beq.n	d8016 <pow+0x256>
   d7f72:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7f74:	b11b      	cbz	r3, d7f7e <pow+0x1be>
   d7f76:	f7fe fa71 	bl	d645c <__errno>
   d7f7a:	9b0a      	ldr	r3, [sp, #40]	; 0x28
   d7f7c:	6003      	str	r3, [r0, #0]
   d7f7e:	ed9d 8b08 	vldr	d8, [sp, #32]
   d7f82:	e76a      	b.n	d7e5a <pow+0x9a>
   d7f84:	ec47 6b10 	vmov	d0, r6, r7
   d7f88:	f000 ffd6 	bl	d8f38 <finite>
   d7f8c:	2800      	cmp	r0, #0
   d7f8e:	f43f af77 	beq.w	d7e80 <pow+0xc0>
   d7f92:	ec45 4b10 	vmov	d0, r4, r5
   d7f96:	f000 ffcf 	bl	d8f38 <finite>
   d7f9a:	2800      	cmp	r0, #0
   d7f9c:	f43f af70 	beq.w	d7e80 <pow+0xc0>
   d7fa0:	ec53 2b18 	vmov	r2, r3, d8
   d7fa4:	ee18 0a10 	vmov	r0, s16
   d7fa8:	4619      	mov	r1, r3
   d7faa:	f001 fd59 	bl	d9a60 <__aeabi_dcmpun>
   d7fae:	4b38      	ldr	r3, [pc, #224]	; (d8090 <pow+0x2d0>)
   d7fb0:	2800      	cmp	r0, #0
   d7fb2:	f040 8096 	bne.w	d80e2 <pow+0x322>
   d7fb6:	f993 8000 	ldrsb.w	r8, [r3]
   d7fba:	900a      	str	r0, [sp, #40]	; 0x28
   d7fbc:	2303      	movs	r3, #3
   d7fbe:	9302      	str	r3, [sp, #8]
   d7fc0:	4b34      	ldr	r3, [pc, #208]	; (d8094 <pow+0x2d4>)
   d7fc2:	9303      	str	r3, [sp, #12]
   d7fc4:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d7fc8:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d7fcc:	f1b8 0f00 	cmp.w	r8, #0
   d7fd0:	d126      	bne.n	d8020 <pow+0x260>
   d7fd2:	f8df 90d0 	ldr.w	r9, [pc, #208]	; d80a4 <pow+0x2e4>
   d7fd6:	f04f 4860 	mov.w	r8, #3758096384	; 0xe0000000
   d7fda:	4652      	mov	r2, sl
   d7fdc:	465b      	mov	r3, fp
   d7fde:	4630      	mov	r0, r6
   d7fe0:	4639      	mov	r1, r7
   d7fe2:	e9cd 8908 	strd	r8, r9, [sp, #32]
   d7fe6:	f001 fd13 	bl	d9a10 <__aeabi_dcmplt>
   d7fea:	bb48      	cbnz	r0, d8040 <pow+0x280>
   d7fec:	a802      	add	r0, sp, #8
   d7fee:	f000 ffaf 	bl	d8f50 <matherr>
   d7ff2:	2800      	cmp	r0, #0
   d7ff4:	d19b      	bne.n	d7f2e <pow+0x16e>
   d7ff6:	f7fe fa31 	bl	d645c <__errno>
   d7ffa:	2322      	movs	r3, #34	; 0x22
   d7ffc:	6003      	str	r3, [r0, #0]
   d7ffe:	e796      	b.n	d7f2e <pow+0x16e>
   d8000:	4925      	ldr	r1, [pc, #148]	; (d8098 <pow+0x2d8>)
   d8002:	2000      	movs	r0, #0
   d8004:	2b02      	cmp	r3, #2
   d8006:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d800a:	d18b      	bne.n	d7f24 <pow+0x164>
   d800c:	f7fe fa26 	bl	d645c <__errno>
   d8010:	2321      	movs	r3, #33	; 0x21
   d8012:	6003      	str	r3, [r0, #0]
   d8014:	e78b      	b.n	d7f2e <pow+0x16e>
   d8016:	f7fe fa21 	bl	d645c <__errno>
   d801a:	2321      	movs	r3, #33	; 0x21
   d801c:	6003      	str	r3, [r0, #0]
   d801e:	e7a8      	b.n	d7f72 <pow+0x1b2>
   d8020:	ed9f 7b19 	vldr	d7, [pc, #100]	; d8088 <pow+0x2c8>
   d8024:	4652      	mov	r2, sl
   d8026:	465b      	mov	r3, fp
   d8028:	4630      	mov	r0, r6
   d802a:	4639      	mov	r1, r7
   d802c:	ed8d 7b08 	vstr	d7, [sp, #32]
   d8030:	f001 fcee 	bl	d9a10 <__aeabi_dcmplt>
   d8034:	2800      	cmp	r0, #0
   d8036:	d137      	bne.n	d80a8 <pow+0x2e8>
   d8038:	f1b8 0f02 	cmp.w	r8, #2
   d803c:	d0db      	beq.n	d7ff6 <pow+0x236>
   d803e:	e7d5      	b.n	d7fec <pow+0x22c>
   d8040:	4b16      	ldr	r3, [pc, #88]	; (d809c <pow+0x2dc>)
   d8042:	2200      	movs	r2, #0
   d8044:	4620      	mov	r0, r4
   d8046:	4629      	mov	r1, r5
   d8048:	f001 fa70 	bl	d952c <__aeabi_dmul>
   d804c:	4602      	mov	r2, r0
   d804e:	460b      	mov	r3, r1
   d8050:	ec43 2b10 	vmov	d0, r2, r3
   d8054:	e9cd 2300 	strd	r2, r3, [sp]
   d8058:	f000 ff86 	bl	d8f68 <rint>
   d805c:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8060:	ec51 0b10 	vmov	r0, r1, d0
   d8064:	f001 fcca 	bl	d99fc <__aeabi_dcmpeq>
   d8068:	2800      	cmp	r0, #0
   d806a:	d136      	bne.n	d80da <pow+0x31a>
   d806c:	4b0c      	ldr	r3, [pc, #48]	; (d80a0 <pow+0x2e0>)
   d806e:	4908      	ldr	r1, [pc, #32]	; (d8090 <pow+0x2d0>)
   d8070:	f04f 4260 	mov.w	r2, #3758096384	; 0xe0000000
   d8074:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d8078:	f991 8000 	ldrsb.w	r8, [r1]
   d807c:	e7dc      	b.n	d8038 <pow+0x278>
   d807e:	bf00      	nop
   d8080:	00000000 	.word	0x00000000
   d8084:	3ff00000 	.word	0x3ff00000
   d8088:	00000000 	.word	0x00000000
   d808c:	7ff00000 	.word	0x7ff00000
   d8090:	2003e39c 	.word	0x2003e39c
   d8094:	000da82c 	.word	0x000da82c
   d8098:	fff00000 	.word	0xfff00000
   d809c:	3fe00000 	.word	0x3fe00000
   d80a0:	c7efffff 	.word	0xc7efffff
   d80a4:	47efffff 	.word	0x47efffff
   d80a8:	4b1c      	ldr	r3, [pc, #112]	; (d811c <pow+0x35c>)
   d80aa:	2200      	movs	r2, #0
   d80ac:	4620      	mov	r0, r4
   d80ae:	4629      	mov	r1, r5
   d80b0:	f001 fa3c 	bl	d952c <__aeabi_dmul>
   d80b4:	4602      	mov	r2, r0
   d80b6:	460b      	mov	r3, r1
   d80b8:	ec43 2b10 	vmov	d0, r2, r3
   d80bc:	e9cd 2300 	strd	r2, r3, [sp]
   d80c0:	f000 ff52 	bl	d8f68 <rint>
   d80c4:	e9dd 2300 	ldrd	r2, r3, [sp]
   d80c8:	ec51 0b10 	vmov	r0, r1, d0
   d80cc:	f001 fc96 	bl	d99fc <__aeabi_dcmpeq>
   d80d0:	b918      	cbnz	r0, d80da <pow+0x31a>
   d80d2:	4b13      	ldr	r3, [pc, #76]	; (d8120 <pow+0x360>)
   d80d4:	2200      	movs	r2, #0
   d80d6:	e9cd 2308 	strd	r2, r3, [sp, #32]
   d80da:	4b12      	ldr	r3, [pc, #72]	; (d8124 <pow+0x364>)
   d80dc:	f993 8000 	ldrsb.w	r8, [r3]
   d80e0:	e7aa      	b.n	d8038 <pow+0x278>
   d80e2:	f993 9000 	ldrsb.w	r9, [r3]
   d80e6:	4b10      	ldr	r3, [pc, #64]	; (d8128 <pow+0x368>)
   d80e8:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   d80ec:	2201      	movs	r2, #1
   d80ee:	e9cd 6704 	strd	r6, r7, [sp, #16]
   d80f2:	e9cd 4506 	strd	r4, r5, [sp, #24]
   d80f6:	e9cd 2302 	strd	r2, r3, [sp, #8]
   d80fa:	f1b9 0f00 	cmp.w	r9, #0
   d80fe:	f43f af0f 	beq.w	d7f20 <pow+0x160>
   d8102:	4652      	mov	r2, sl
   d8104:	465b      	mov	r3, fp
   d8106:	4650      	mov	r0, sl
   d8108:	4659      	mov	r1, fp
   d810a:	f001 fb39 	bl	d9780 <__aeabi_ddiv>
   d810e:	f1b9 0f02 	cmp.w	r9, #2
   d8112:	e9cd 0108 	strd	r0, r1, [sp, #32]
   d8116:	f43f af79 	beq.w	d800c <pow+0x24c>
   d811a:	e703      	b.n	d7f24 <pow+0x164>
   d811c:	3fe00000 	.word	0x3fe00000
   d8120:	fff00000 	.word	0xfff00000
   d8124:	2003e39c 	.word	0x2003e39c
   d8128:	000da82c 	.word	0x000da82c

000d812c <sqrt>:
   d812c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d8130:	ed2d 8b02 	vpush	{d8}
   d8134:	b08b      	sub	sp, #44	; 0x2c
   d8136:	ec55 4b10 	vmov	r4, r5, d0
   d813a:	f000 fe2f 	bl	d8d9c <__ieee754_sqrt>
   d813e:	4b28      	ldr	r3, [pc, #160]	; (d81e0 <sqrt+0xb4>)
   d8140:	eeb0 8a40 	vmov.f32	s16, s0
   d8144:	eef0 8a60 	vmov.f32	s17, s1
   d8148:	f993 7000 	ldrsb.w	r7, [r3]
   d814c:	1c7b      	adds	r3, r7, #1
   d814e:	d012      	beq.n	d8176 <sqrt+0x4a>
   d8150:	4622      	mov	r2, r4
   d8152:	462b      	mov	r3, r5
   d8154:	4620      	mov	r0, r4
   d8156:	4629      	mov	r1, r5
   d8158:	f001 fc82 	bl	d9a60 <__aeabi_dcmpun>
   d815c:	4606      	mov	r6, r0
   d815e:	b950      	cbnz	r0, d8176 <sqrt+0x4a>
   d8160:	f04f 0800 	mov.w	r8, #0
   d8164:	f04f 0900 	mov.w	r9, #0
   d8168:	4620      	mov	r0, r4
   d816a:	4629      	mov	r1, r5
   d816c:	4642      	mov	r2, r8
   d816e:	464b      	mov	r3, r9
   d8170:	f001 fc4e 	bl	d9a10 <__aeabi_dcmplt>
   d8174:	b940      	cbnz	r0, d8188 <sqrt+0x5c>
   d8176:	eeb0 0a48 	vmov.f32	s0, s16
   d817a:	eef0 0a68 	vmov.f32	s1, s17
   d817e:	b00b      	add	sp, #44	; 0x2c
   d8180:	ecbd 8b02 	vpop	{d8}
   d8184:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d8188:	4b16      	ldr	r3, [pc, #88]	; (d81e4 <sqrt+0xb8>)
   d818a:	9608      	str	r6, [sp, #32]
   d818c:	2201      	movs	r2, #1
   d818e:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d8192:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d8196:	9200      	str	r2, [sp, #0]
   d8198:	9301      	str	r3, [sp, #4]
   d819a:	b197      	cbz	r7, d81c2 <sqrt+0x96>
   d819c:	4642      	mov	r2, r8
   d819e:	464b      	mov	r3, r9
   d81a0:	4640      	mov	r0, r8
   d81a2:	4649      	mov	r1, r9
   d81a4:	f001 faec 	bl	d9780 <__aeabi_ddiv>
   d81a8:	2f02      	cmp	r7, #2
   d81aa:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d81ae:	d10a      	bne.n	d81c6 <sqrt+0x9a>
   d81b0:	f7fe f954 	bl	d645c <__errno>
   d81b4:	2321      	movs	r3, #33	; 0x21
   d81b6:	6003      	str	r3, [r0, #0]
   d81b8:	9b08      	ldr	r3, [sp, #32]
   d81ba:	b963      	cbnz	r3, d81d6 <sqrt+0xaa>
   d81bc:	ed9d 8b06 	vldr	d8, [sp, #24]
   d81c0:	e7d9      	b.n	d8176 <sqrt+0x4a>
   d81c2:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d81c6:	4668      	mov	r0, sp
   d81c8:	f000 fec2 	bl	d8f50 <matherr>
   d81cc:	2800      	cmp	r0, #0
   d81ce:	d0ef      	beq.n	d81b0 <sqrt+0x84>
   d81d0:	9b08      	ldr	r3, [sp, #32]
   d81d2:	2b00      	cmp	r3, #0
   d81d4:	d0f2      	beq.n	d81bc <sqrt+0x90>
   d81d6:	f7fe f941 	bl	d645c <__errno>
   d81da:	9b08      	ldr	r3, [sp, #32]
   d81dc:	6003      	str	r3, [r0, #0]
   d81de:	e7ed      	b.n	d81bc <sqrt+0x90>
   d81e0:	2003e39c 	.word	0x2003e39c
   d81e4:	000da830 	.word	0x000da830

000d81e8 <__ieee754_pow>:
   d81e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d81ec:	ec57 6b11 	vmov	r6, r7, d1
   d81f0:	ed2d 8b0a 	vpush	{d8-d12}
   d81f4:	f027 4a00 	bic.w	sl, r7, #2147483648	; 0x80000000
   d81f8:	ea5a 0206 	orrs.w	r2, sl, r6
   d81fc:	b089      	sub	sp, #36	; 0x24
   d81fe:	d03d      	beq.n	d827c <__ieee754_pow+0x94>
   d8200:	ec55 4b10 	vmov	r4, r5, d0
   d8204:	4976      	ldr	r1, [pc, #472]	; (d83e0 <__ieee754_pow+0x1f8>)
   d8206:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
   d820a:	4588      	cmp	r8, r1
   d820c:	ee10 2a10 	vmov	r2, s0
   d8210:	46a9      	mov	r9, r5
   d8212:	dc2c      	bgt.n	d826e <__ieee754_pow+0x86>
   d8214:	ee11 3a10 	vmov	r3, s2
   d8218:	46bb      	mov	fp, r7
   d821a:	d03a      	beq.n	d8292 <__ieee754_pow+0xaa>
   d821c:	458a      	cmp	sl, r1
   d821e:	dc26      	bgt.n	d826e <__ieee754_pow+0x86>
   d8220:	496f      	ldr	r1, [pc, #444]	; (d83e0 <__ieee754_pow+0x1f8>)
   d8222:	458a      	cmp	sl, r1
   d8224:	d021      	beq.n	d826a <__ieee754_pow+0x82>
   d8226:	f1b9 0f00 	cmp.w	r9, #0
   d822a:	db3d      	blt.n	d82a8 <__ieee754_pow+0xc0>
   d822c:	2100      	movs	r1, #0
   d822e:	9103      	str	r1, [sp, #12]
   d8230:	2b00      	cmp	r3, #0
   d8232:	d155      	bne.n	d82e0 <__ieee754_pow+0xf8>
   d8234:	4b6a      	ldr	r3, [pc, #424]	; (d83e0 <__ieee754_pow+0x1f8>)
   d8236:	459a      	cmp	sl, r3
   d8238:	f000 80a8 	beq.w	d838c <__ieee754_pow+0x1a4>
   d823c:	4b69      	ldr	r3, [pc, #420]	; (d83e4 <__ieee754_pow+0x1fc>)
   d823e:	459a      	cmp	sl, r3
   d8240:	f000 80b6 	beq.w	d83b0 <__ieee754_pow+0x1c8>
   d8244:	f1bb 4f80 	cmp.w	fp, #1073741824	; 0x40000000
   d8248:	f000 8501 	beq.w	d8c4e <__ieee754_pow+0xa66>
   d824c:	4b66      	ldr	r3, [pc, #408]	; (d83e8 <__ieee754_pow+0x200>)
   d824e:	459b      	cmp	fp, r3
   d8250:	d146      	bne.n	d82e0 <__ieee754_pow+0xf8>
   d8252:	f1b9 0f00 	cmp.w	r9, #0
   d8256:	db43      	blt.n	d82e0 <__ieee754_pow+0xf8>
   d8258:	ec45 4b10 	vmov	d0, r4, r5
   d825c:	b009      	add	sp, #36	; 0x24
   d825e:	ecbd 8b0a 	vpop	{d8-d12}
   d8262:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d8266:	f000 bd99 	b.w	d8d9c <__ieee754_sqrt>
   d826a:	2b00      	cmp	r3, #0
   d826c:	d0db      	beq.n	d8226 <__ieee754_pow+0x3e>
   d826e:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d8272:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d8276:	ea58 0302 	orrs.w	r3, r8, r2
   d827a:	d10d      	bne.n	d8298 <__ieee754_pow+0xb0>
   d827c:	ed9f 7b54 	vldr	d7, [pc, #336]	; d83d0 <__ieee754_pow+0x1e8>
   d8280:	ed8d 7b00 	vstr	d7, [sp]
   d8284:	ed9d 0b00 	vldr	d0, [sp]
   d8288:	b009      	add	sp, #36	; 0x24
   d828a:	ecbd 8b0a 	vpop	{d8-d12}
   d828e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   d8292:	b90c      	cbnz	r4, d8298 <__ieee754_pow+0xb0>
   d8294:	45c2      	cmp	sl, r8
   d8296:	ddc3      	ble.n	d8220 <__ieee754_pow+0x38>
   d8298:	4854      	ldr	r0, [pc, #336]	; (d83ec <__ieee754_pow+0x204>)
   d829a:	b009      	add	sp, #36	; 0x24
   d829c:	ecbd 8b0a 	vpop	{d8-d12}
   d82a0:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   d82a4:	f000 be58 	b.w	d8f58 <nan>
   d82a8:	4951      	ldr	r1, [pc, #324]	; (d83f0 <__ieee754_pow+0x208>)
   d82aa:	458a      	cmp	sl, r1
   d82ac:	f300 8087 	bgt.w	d83be <__ieee754_pow+0x1d6>
   d82b0:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
   d82b4:	458a      	cmp	sl, r1
   d82b6:	dd0f      	ble.n	d82d8 <__ieee754_pow+0xf0>
   d82b8:	ea4f 512a 	mov.w	r1, sl, asr #20
   d82bc:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
   d82c0:	2914      	cmp	r1, #20
   d82c2:	f340 84ce 	ble.w	d8c62 <__ieee754_pow+0xa7a>
   d82c6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
   d82ca:	fa23 f001 	lsr.w	r0, r3, r1
   d82ce:	fa00 f101 	lsl.w	r1, r0, r1
   d82d2:	4299      	cmp	r1, r3
   d82d4:	f000 8520 	beq.w	d8d18 <__ieee754_pow+0xb30>
   d82d8:	2100      	movs	r1, #0
   d82da:	9103      	str	r1, [sp, #12]
   d82dc:	2b00      	cmp	r3, #0
   d82de:	d0ad      	beq.n	d823c <__ieee754_pow+0x54>
   d82e0:	ec45 4b10 	vmov	d0, r4, r5
   d82e4:	9206      	str	r2, [sp, #24]
   d82e6:	f000 fe1d 	bl	d8f24 <fabs>
   d82ea:	9a06      	ldr	r2, [sp, #24]
   d82ec:	ed8d 0b00 	vstr	d0, [sp]
   d82f0:	bb5a      	cbnz	r2, d834a <__ieee754_pow+0x162>
   d82f2:	f1b8 0f00 	cmp.w	r8, #0
   d82f6:	d004      	beq.n	d8302 <__ieee754_pow+0x11a>
   d82f8:	4b3a      	ldr	r3, [pc, #232]	; (d83e4 <__ieee754_pow+0x1fc>)
   d82fa:	f029 4240 	bic.w	r2, r9, #3221225472	; 0xc0000000
   d82fe:	429a      	cmp	r2, r3
   d8300:	d123      	bne.n	d834a <__ieee754_pow+0x162>
   d8302:	f1bb 0f00 	cmp.w	fp, #0
   d8306:	da07      	bge.n	d8318 <__ieee754_pow+0x130>
   d8308:	e9dd 2300 	ldrd	r2, r3, [sp]
   d830c:	4935      	ldr	r1, [pc, #212]	; (d83e4 <__ieee754_pow+0x1fc>)
   d830e:	2000      	movs	r0, #0
   d8310:	f001 fa36 	bl	d9780 <__aeabi_ddiv>
   d8314:	e9cd 0100 	strd	r0, r1, [sp]
   d8318:	f1b9 0f00 	cmp.w	r9, #0
   d831c:	dab2      	bge.n	d8284 <__ieee754_pow+0x9c>
   d831e:	9b03      	ldr	r3, [sp, #12]
   d8320:	f108 4840 	add.w	r8, r8, #3221225472	; 0xc0000000
   d8324:	f508 1880 	add.w	r8, r8, #1048576	; 0x100000
   d8328:	ea58 0303 	orrs.w	r3, r8, r3
   d832c:	f040 84be 	bne.w	d8cac <__ieee754_pow+0xac4>
   d8330:	e9dd 2300 	ldrd	r2, r3, [sp]
   d8334:	4610      	mov	r0, r2
   d8336:	4619      	mov	r1, r3
   d8338:	f000 ff40 	bl	d91bc <__aeabi_dsub>
   d833c:	4602      	mov	r2, r0
   d833e:	460b      	mov	r3, r1
   d8340:	f001 fa1e 	bl	d9780 <__aeabi_ddiv>
   d8344:	e9cd 0100 	strd	r0, r1, [sp]
   d8348:	e79c      	b.n	d8284 <__ieee754_pow+0x9c>
   d834a:	9a03      	ldr	r2, [sp, #12]
   d834c:	ea4f 73d9 	mov.w	r3, r9, lsr #31
   d8350:	3b01      	subs	r3, #1
   d8352:	9306      	str	r3, [sp, #24]
   d8354:	4313      	orrs	r3, r2
   d8356:	d035      	beq.n	d83c4 <__ieee754_pow+0x1dc>
   d8358:	4b26      	ldr	r3, [pc, #152]	; (d83f4 <__ieee754_pow+0x20c>)
   d835a:	459a      	cmp	sl, r3
   d835c:	dd4e      	ble.n	d83fc <__ieee754_pow+0x214>
   d835e:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
   d8362:	459a      	cmp	sl, r3
   d8364:	4b24      	ldr	r3, [pc, #144]	; (d83f8 <__ieee754_pow+0x210>)
   d8366:	f340 83ed 	ble.w	d8b44 <__ieee754_pow+0x95c>
   d836a:	4598      	cmp	r8, r3
   d836c:	f340 836b 	ble.w	d8a46 <__ieee754_pow+0x85e>
   d8370:	f1bb 0f00 	cmp.w	fp, #0
   d8374:	f340 836b 	ble.w	d8a4e <__ieee754_pow+0x866>
   d8378:	a317      	add	r3, pc, #92	; (adr r3, d83d8 <__ieee754_pow+0x1f0>)
   d837a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d837e:	4610      	mov	r0, r2
   d8380:	4619      	mov	r1, r3
   d8382:	f001 f8d3 	bl	d952c <__aeabi_dmul>
   d8386:	e9cd 0100 	strd	r0, r1, [sp]
   d838a:	e77b      	b.n	d8284 <__ieee754_pow+0x9c>
   d838c:	f108 4340 	add.w	r3, r8, #3221225472	; 0xc0000000
   d8390:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
   d8394:	4313      	orrs	r3, r2
   d8396:	f43f af71 	beq.w	d827c <__ieee754_pow+0x94>
   d839a:	4b17      	ldr	r3, [pc, #92]	; (d83f8 <__ieee754_pow+0x210>)
   d839c:	4598      	cmp	r8, r3
   d839e:	f340 8388 	ble.w	d8ab2 <__ieee754_pow+0x8ca>
   d83a2:	f1bb 0f00 	cmp.w	fp, #0
   d83a6:	f2c0 8352 	blt.w	d8a4e <__ieee754_pow+0x866>
   d83aa:	e9cd 6700 	strd	r6, r7, [sp]
   d83ae:	e769      	b.n	d8284 <__ieee754_pow+0x9c>
   d83b0:	f1bb 0f00 	cmp.w	fp, #0
   d83b4:	f2c0 8441 	blt.w	d8c3a <__ieee754_pow+0xa52>
   d83b8:	e9cd 4500 	strd	r4, r5, [sp]
   d83bc:	e762      	b.n	d8284 <__ieee754_pow+0x9c>
   d83be:	2102      	movs	r1, #2
   d83c0:	9103      	str	r1, [sp, #12]
   d83c2:	e735      	b.n	d8230 <__ieee754_pow+0x48>
   d83c4:	4622      	mov	r2, r4
   d83c6:	462b      	mov	r3, r5
   d83c8:	e7b4      	b.n	d8334 <__ieee754_pow+0x14c>
   d83ca:	bf00      	nop
   d83cc:	f3af 8000 	nop.w
   d83d0:	00000000 	.word	0x00000000
   d83d4:	3ff00000 	.word	0x3ff00000
   d83d8:	8800759c 	.word	0x8800759c
   d83dc:	7e37e43c 	.word	0x7e37e43c
   d83e0:	7ff00000 	.word	0x7ff00000
   d83e4:	3ff00000 	.word	0x3ff00000
   d83e8:	3fe00000 	.word	0x3fe00000
   d83ec:	000da834 	.word	0x000da834
   d83f0:	433fffff 	.word	0x433fffff
   d83f4:	41e00000 	.word	0x41e00000
   d83f8:	3fefffff 	.word	0x3fefffff
   d83fc:	4be4      	ldr	r3, [pc, #912]	; (d8790 <__ieee754_pow+0x5a8>)
   d83fe:	ea09 0303 	and.w	r3, r9, r3
   d8402:	2b00      	cmp	r3, #0
   d8404:	f040 8416 	bne.w	d8c34 <__ieee754_pow+0xa4c>
   d8408:	e9dd 0100 	ldrd	r0, r1, [sp]
   d840c:	4be1      	ldr	r3, [pc, #900]	; (d8794 <__ieee754_pow+0x5ac>)
   d840e:	2200      	movs	r2, #0
   d8410:	f001 f88c 	bl	d952c <__aeabi_dmul>
   d8414:	e9cd 0100 	strd	r0, r1, [sp]
   d8418:	f8dd 8004 	ldr.w	r8, [sp, #4]
   d841c:	f06f 0034 	mvn.w	r0, #52	; 0x34
   d8420:	ea4f 5328 	mov.w	r3, r8, asr #20
   d8424:	49dc      	ldr	r1, [pc, #880]	; (d8798 <__ieee754_pow+0x5b0>)
   d8426:	f3c8 0213 	ubfx	r2, r8, #0, #20
   d842a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
   d842e:	f042 587f 	orr.w	r8, r2, #1069547520	; 0x3fc00000
   d8432:	1818      	adds	r0, r3, r0
   d8434:	428a      	cmp	r2, r1
   d8436:	9007      	str	r0, [sp, #28]
   d8438:	f448 1840 	orr.w	r8, r8, #3145728	; 0x300000
   d843c:	f340 83e9 	ble.w	d8c12 <__ieee754_pow+0xa2a>
   d8440:	4bd6      	ldr	r3, [pc, #856]	; (d879c <__ieee754_pow+0x5b4>)
   d8442:	429a      	cmp	r2, r3
   d8444:	f340 843e 	ble.w	d8cc4 <__ieee754_pow+0xadc>
   d8448:	ed9f 7bbb 	vldr	d7, [pc, #748]	; d8738 <__ieee754_pow+0x550>
   d844c:	eeb0 ba47 	vmov.f32	s22, s14
   d8450:	eef0 ba67 	vmov.f32	s23, s15
   d8454:	eeb0 ca47 	vmov.f32	s24, s14
   d8458:	eef0 ca67 	vmov.f32	s25, s15
   d845c:	ed9f 7bb8 	vldr	d7, [pc, #736]	; d8740 <__ieee754_pow+0x558>
   d8460:	3001      	adds	r0, #1
   d8462:	ec54 3b17 	vmov	r3, r4, d7
   d8466:	9007      	str	r0, [sp, #28]
   d8468:	f5a8 1880 	sub.w	r8, r8, #1048576	; 0x100000
   d846c:	f04f 0900 	mov.w	r9, #0
   d8470:	e9dd ab00 	ldrd	sl, fp, [sp]
   d8474:	ec44 3b18 	vmov	d8, r3, r4
   d8478:	461a      	mov	r2, r3
   d847a:	4650      	mov	r0, sl
   d847c:	4623      	mov	r3, r4
   d847e:	4641      	mov	r1, r8
   d8480:	f000 fe9c 	bl	d91bc <__aeabi_dsub>
   d8484:	ec53 2b18 	vmov	r2, r3, d8
   d8488:	4604      	mov	r4, r0
   d848a:	460d      	mov	r5, r1
   d848c:	4650      	mov	r0, sl
   d848e:	4641      	mov	r1, r8
   d8490:	f000 fe96 	bl	d91c0 <__adddf3>
   d8494:	4602      	mov	r2, r0
   d8496:	460b      	mov	r3, r1
   d8498:	2000      	movs	r0, #0
   d849a:	49c1      	ldr	r1, [pc, #772]	; (d87a0 <__ieee754_pow+0x5b8>)
   d849c:	f001 f970 	bl	d9780 <__aeabi_ddiv>
   d84a0:	ec45 4b1a 	vmov	d10, r4, r5
   d84a4:	ec41 0b19 	vmov	d9, r0, r1
   d84a8:	ec51 0b1a 	vmov	r0, r1, d10
   d84ac:	ec53 2b19 	vmov	r2, r3, d9
   d84b0:	f001 f83c 	bl	d952c <__aeabi_dmul>
   d84b4:	46c3      	mov	fp, r8
   d84b6:	ea4f 0868 	mov.w	r8, r8, asr #1
   d84ba:	f048 5800 	orr.w	r8, r8, #536870912	; 0x20000000
   d84be:	f508 2300 	add.w	r3, r8, #524288	; 0x80000
   d84c2:	eb03 0509 	add.w	r5, r3, r9
   d84c6:	460a      	mov	r2, r1
   d84c8:	2300      	movs	r3, #0
   d84ca:	4601      	mov	r1, r0
   d84cc:	e9cd 1200 	strd	r1, r2, [sp]
   d84d0:	9300      	str	r3, [sp, #0]
   d84d2:	e9dd 8900 	ldrd	r8, r9, [sp]
   d84d6:	2400      	movs	r4, #0
   d84d8:	e9cd 1204 	strd	r1, r2, [sp, #16]
   d84dc:	462b      	mov	r3, r5
   d84de:	4622      	mov	r2, r4
   d84e0:	4640      	mov	r0, r8
   d84e2:	4649      	mov	r1, r9
   d84e4:	f001 f822 	bl	d952c <__aeabi_dmul>
   d84e8:	4602      	mov	r2, r0
   d84ea:	460b      	mov	r3, r1
   d84ec:	ec51 0b1a 	vmov	r0, r1, d10
   d84f0:	f000 fe64 	bl	d91bc <__aeabi_dsub>
   d84f4:	ec41 0b17 	vmov	d7, r0, r1
   d84f8:	ec53 2b18 	vmov	r2, r3, d8
   d84fc:	4620      	mov	r0, r4
   d84fe:	4629      	mov	r1, r5
   d8500:	ec55 4b17 	vmov	r4, r5, d7
   d8504:	f000 fe5a 	bl	d91bc <__aeabi_dsub>
   d8508:	4602      	mov	r2, r0
   d850a:	460b      	mov	r3, r1
   d850c:	4650      	mov	r0, sl
   d850e:	4659      	mov	r1, fp
   d8510:	f000 fe54 	bl	d91bc <__aeabi_dsub>
   d8514:	4642      	mov	r2, r8
   d8516:	464b      	mov	r3, r9
   d8518:	f001 f808 	bl	d952c <__aeabi_dmul>
   d851c:	4602      	mov	r2, r0
   d851e:	460b      	mov	r3, r1
   d8520:	4620      	mov	r0, r4
   d8522:	4629      	mov	r1, r5
   d8524:	f000 fe4a 	bl	d91bc <__aeabi_dsub>
   d8528:	ec53 2b19 	vmov	r2, r3, d9
   d852c:	f000 fffe 	bl	d952c <__aeabi_dmul>
   d8530:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   d8534:	4604      	mov	r4, r0
   d8536:	460d      	mov	r5, r1
   d8538:	4652      	mov	r2, sl
   d853a:	465b      	mov	r3, fp
   d853c:	4650      	mov	r0, sl
   d853e:	4659      	mov	r1, fp
   d8540:	f000 fff4 	bl	d952c <__aeabi_dmul>
   d8544:	a380      	add	r3, pc, #512	; (adr r3, d8748 <__ieee754_pow+0x560>)
   d8546:	e9d3 2300 	ldrd	r2, r3, [r3]
   d854a:	ec45 4b1a 	vmov	d10, r4, r5
   d854e:	4604      	mov	r4, r0
   d8550:	460d      	mov	r5, r1
   d8552:	f000 ffeb 	bl	d952c <__aeabi_dmul>
   d8556:	a37e      	add	r3, pc, #504	; (adr r3, d8750 <__ieee754_pow+0x568>)
   d8558:	e9d3 2300 	ldrd	r2, r3, [r3]
   d855c:	f000 fe30 	bl	d91c0 <__adddf3>
   d8560:	4622      	mov	r2, r4
   d8562:	462b      	mov	r3, r5
   d8564:	f000 ffe2 	bl	d952c <__aeabi_dmul>
   d8568:	a37b      	add	r3, pc, #492	; (adr r3, d8758 <__ieee754_pow+0x570>)
   d856a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d856e:	f000 fe27 	bl	d91c0 <__adddf3>
   d8572:	4622      	mov	r2, r4
   d8574:	462b      	mov	r3, r5
   d8576:	f000 ffd9 	bl	d952c <__aeabi_dmul>
   d857a:	a379      	add	r3, pc, #484	; (adr r3, d8760 <__ieee754_pow+0x578>)
   d857c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8580:	f000 fe1e 	bl	d91c0 <__adddf3>
   d8584:	4622      	mov	r2, r4
   d8586:	462b      	mov	r3, r5
   d8588:	f000 ffd0 	bl	d952c <__aeabi_dmul>
   d858c:	a376      	add	r3, pc, #472	; (adr r3, d8768 <__ieee754_pow+0x580>)
   d858e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8592:	f000 fe15 	bl	d91c0 <__adddf3>
   d8596:	4622      	mov	r2, r4
   d8598:	462b      	mov	r3, r5
   d859a:	f000 ffc7 	bl	d952c <__aeabi_dmul>
   d859e:	a374      	add	r3, pc, #464	; (adr r3, d8770 <__ieee754_pow+0x588>)
   d85a0:	e9d3 2300 	ldrd	r2, r3, [r3]
   d85a4:	f000 fe0c 	bl	d91c0 <__adddf3>
   d85a8:	4622      	mov	r2, r4
   d85aa:	462b      	mov	r3, r5
   d85ac:	4604      	mov	r4, r0
   d85ae:	460d      	mov	r5, r1
   d85b0:	4610      	mov	r0, r2
   d85b2:	4619      	mov	r1, r3
   d85b4:	f000 ffba 	bl	d952c <__aeabi_dmul>
   d85b8:	4602      	mov	r2, r0
   d85ba:	460b      	mov	r3, r1
   d85bc:	4620      	mov	r0, r4
   d85be:	4629      	mov	r1, r5
   d85c0:	f000 ffb4 	bl	d952c <__aeabi_dmul>
   d85c4:	4642      	mov	r2, r8
   d85c6:	4604      	mov	r4, r0
   d85c8:	460d      	mov	r5, r1
   d85ca:	464b      	mov	r3, r9
   d85cc:	4650      	mov	r0, sl
   d85ce:	4659      	mov	r1, fp
   d85d0:	e9cd ab04 	strd	sl, fp, [sp, #16]
   d85d4:	f000 fdf4 	bl	d91c0 <__adddf3>
   d85d8:	ec53 2b1a 	vmov	r2, r3, d10
   d85dc:	f000 ffa6 	bl	d952c <__aeabi_dmul>
   d85e0:	4622      	mov	r2, r4
   d85e2:	462b      	mov	r3, r5
   d85e4:	f000 fdec 	bl	d91c0 <__adddf3>
   d85e8:	4642      	mov	r2, r8
   d85ea:	4604      	mov	r4, r0
   d85ec:	460d      	mov	r5, r1
   d85ee:	464b      	mov	r3, r9
   d85f0:	4640      	mov	r0, r8
   d85f2:	4649      	mov	r1, r9
   d85f4:	f000 ff9a 	bl	d952c <__aeabi_dmul>
   d85f8:	ec45 4b19 	vmov	d9, r4, r5
   d85fc:	4b69      	ldr	r3, [pc, #420]	; (d87a4 <__ieee754_pow+0x5bc>)
   d85fe:	2200      	movs	r2, #0
   d8600:	4682      	mov	sl, r0
   d8602:	468b      	mov	fp, r1
   d8604:	f000 fddc 	bl	d91c0 <__adddf3>
   d8608:	ec53 2b19 	vmov	r2, r3, d9
   d860c:	f000 fdd8 	bl	d91c0 <__adddf3>
   d8610:	9c00      	ldr	r4, [sp, #0]
   d8612:	460d      	mov	r5, r1
   d8614:	4622      	mov	r2, r4
   d8616:	462b      	mov	r3, r5
   d8618:	4640      	mov	r0, r8
   d861a:	4649      	mov	r1, r9
   d861c:	f000 ff86 	bl	d952c <__aeabi_dmul>
   d8620:	4b60      	ldr	r3, [pc, #384]	; (d87a4 <__ieee754_pow+0x5bc>)
   d8622:	4680      	mov	r8, r0
   d8624:	4689      	mov	r9, r1
   d8626:	2200      	movs	r2, #0
   d8628:	4620      	mov	r0, r4
   d862a:	4629      	mov	r1, r5
   d862c:	f000 fdc6 	bl	d91bc <__aeabi_dsub>
   d8630:	4652      	mov	r2, sl
   d8632:	465b      	mov	r3, fp
   d8634:	f000 fdc2 	bl	d91bc <__aeabi_dsub>
   d8638:	4602      	mov	r2, r0
   d863a:	460b      	mov	r3, r1
   d863c:	ec51 0b19 	vmov	r0, r1, d9
   d8640:	f000 fdbc 	bl	d91bc <__aeabi_dsub>
   d8644:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   d8648:	f000 ff70 	bl	d952c <__aeabi_dmul>
   d864c:	ec49 8b18 	vmov	d8, r8, r9
   d8650:	4622      	mov	r2, r4
   d8652:	4680      	mov	r8, r0
   d8654:	4689      	mov	r9, r1
   d8656:	462b      	mov	r3, r5
   d8658:	ec51 0b1a 	vmov	r0, r1, d10
   d865c:	f000 ff66 	bl	d952c <__aeabi_dmul>
   d8660:	4602      	mov	r2, r0
   d8662:	460b      	mov	r3, r1
   d8664:	4640      	mov	r0, r8
   d8666:	4649      	mov	r1, r9
   d8668:	f000 fdaa 	bl	d91c0 <__adddf3>
   d866c:	4682      	mov	sl, r0
   d866e:	468b      	mov	fp, r1
   d8670:	4652      	mov	r2, sl
   d8672:	465b      	mov	r3, fp
   d8674:	ec51 0b18 	vmov	r0, r1, d8
   d8678:	f000 fda2 	bl	d91c0 <__adddf3>
   d867c:	9c00      	ldr	r4, [sp, #0]
   d867e:	a33e      	add	r3, pc, #248	; (adr r3, d8778 <__ieee754_pow+0x590>)
   d8680:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8684:	4620      	mov	r0, r4
   d8686:	460d      	mov	r5, r1
   d8688:	f000 ff50 	bl	d952c <__aeabi_dmul>
   d868c:	ec53 2b18 	vmov	r2, r3, d8
   d8690:	4680      	mov	r8, r0
   d8692:	4689      	mov	r9, r1
   d8694:	4620      	mov	r0, r4
   d8696:	4629      	mov	r1, r5
   d8698:	f000 fd90 	bl	d91bc <__aeabi_dsub>
   d869c:	4602      	mov	r2, r0
   d869e:	460b      	mov	r3, r1
   d86a0:	4650      	mov	r0, sl
   d86a2:	4659      	mov	r1, fp
   d86a4:	f000 fd8a 	bl	d91bc <__aeabi_dsub>
   d86a8:	a335      	add	r3, pc, #212	; (adr r3, d8780 <__ieee754_pow+0x598>)
   d86aa:	e9d3 2300 	ldrd	r2, r3, [r3]
   d86ae:	f000 ff3d 	bl	d952c <__aeabi_dmul>
   d86b2:	ec49 8b19 	vmov	d9, r8, r9
   d86b6:	a334      	add	r3, pc, #208	; (adr r3, d8788 <__ieee754_pow+0x5a0>)
   d86b8:	e9d3 2300 	ldrd	r2, r3, [r3]
   d86bc:	4680      	mov	r8, r0
   d86be:	4689      	mov	r9, r1
   d86c0:	4620      	mov	r0, r4
   d86c2:	4629      	mov	r1, r5
   d86c4:	f000 ff32 	bl	d952c <__aeabi_dmul>
   d86c8:	4602      	mov	r2, r0
   d86ca:	460b      	mov	r3, r1
   d86cc:	4640      	mov	r0, r8
   d86ce:	4649      	mov	r1, r9
   d86d0:	f000 fd76 	bl	d91c0 <__adddf3>
   d86d4:	ec53 2b1c 	vmov	r2, r3, d12
   d86d8:	f000 fd72 	bl	d91c0 <__adddf3>
   d86dc:	4682      	mov	sl, r0
   d86de:	9807      	ldr	r0, [sp, #28]
   d86e0:	468b      	mov	fp, r1
   d86e2:	f000 feb9 	bl	d9458 <__aeabi_i2d>
   d86e6:	4652      	mov	r2, sl
   d86e8:	4680      	mov	r8, r0
   d86ea:	4689      	mov	r9, r1
   d86ec:	465b      	mov	r3, fp
   d86ee:	ec51 0b19 	vmov	r0, r1, d9
   d86f2:	f000 fd65 	bl	d91c0 <__adddf3>
   d86f6:	ec53 2b1b 	vmov	r2, r3, d11
   d86fa:	f000 fd61 	bl	d91c0 <__adddf3>
   d86fe:	4642      	mov	r2, r8
   d8700:	464b      	mov	r3, r9
   d8702:	f000 fd5d 	bl	d91c0 <__adddf3>
   d8706:	9c00      	ldr	r4, [sp, #0]
   d8708:	4642      	mov	r2, r8
   d870a:	464b      	mov	r3, r9
   d870c:	4620      	mov	r0, r4
   d870e:	460d      	mov	r5, r1
   d8710:	f000 fd54 	bl	d91bc <__aeabi_dsub>
   d8714:	ec53 2b1b 	vmov	r2, r3, d11
   d8718:	f000 fd50 	bl	d91bc <__aeabi_dsub>
   d871c:	ec53 2b19 	vmov	r2, r3, d9
   d8720:	f000 fd4c 	bl	d91bc <__aeabi_dsub>
   d8724:	4602      	mov	r2, r0
   d8726:	460b      	mov	r3, r1
   d8728:	4650      	mov	r0, sl
   d872a:	4659      	mov	r1, fp
   d872c:	f000 fd46 	bl	d91bc <__aeabi_dsub>
   d8730:	4682      	mov	sl, r0
   d8732:	468b      	mov	fp, r1
   d8734:	e038      	b.n	d87a8 <__ieee754_pow+0x5c0>
   d8736:	bf00      	nop
	...
   d8744:	3ff00000 	.word	0x3ff00000
   d8748:	4a454eef 	.word	0x4a454eef
   d874c:	3fca7e28 	.word	0x3fca7e28
   d8750:	93c9db65 	.word	0x93c9db65
   d8754:	3fcd864a 	.word	0x3fcd864a
   d8758:	a91d4101 	.word	0xa91d4101
   d875c:	3fd17460 	.word	0x3fd17460
   d8760:	518f264d 	.word	0x518f264d
   d8764:	3fd55555 	.word	0x3fd55555
   d8768:	db6fabff 	.word	0xdb6fabff
   d876c:	3fdb6db6 	.word	0x3fdb6db6
   d8770:	33333303 	.word	0x33333303
   d8774:	3fe33333 	.word	0x3fe33333
   d8778:	e0000000 	.word	0xe0000000
   d877c:	3feec709 	.word	0x3feec709
   d8780:	dc3a03fd 	.word	0xdc3a03fd
   d8784:	3feec709 	.word	0x3feec709
   d8788:	145b01f5 	.word	0x145b01f5
   d878c:	be3e2fe0 	.word	0xbe3e2fe0
   d8790:	7ff00000 	.word	0x7ff00000
   d8794:	43400000 	.word	0x43400000
   d8798:	0003988e 	.word	0x0003988e
   d879c:	000bb679 	.word	0x000bb679
   d87a0:	3ff00000 	.word	0x3ff00000
   d87a4:	40080000 	.word	0x40080000
   d87a8:	9b03      	ldr	r3, [sp, #12]
   d87aa:	9a06      	ldr	r2, [sp, #24]
   d87ac:	3b01      	subs	r3, #1
   d87ae:	4313      	orrs	r3, r2
   d87b0:	f040 8178 	bne.w	d8aa4 <__ieee754_pow+0x8bc>
   d87b4:	ed9f 7bc4 	vldr	d7, [pc, #784]	; d8ac8 <__ieee754_pow+0x8e0>
   d87b8:	eeb0 9a47 	vmov.f32	s18, s14
   d87bc:	eef0 9a67 	vmov.f32	s19, s15
   d87c0:	2300      	movs	r3, #0
   d87c2:	e9cd 6700 	strd	r6, r7, [sp]
   d87c6:	9300      	str	r3, [sp, #0]
   d87c8:	e9dd 8900 	ldrd	r8, r9, [sp]
   d87cc:	4630      	mov	r0, r6
   d87ce:	4642      	mov	r2, r8
   d87d0:	4639      	mov	r1, r7
   d87d2:	464b      	mov	r3, r9
   d87d4:	f000 fcf2 	bl	d91bc <__aeabi_dsub>
   d87d8:	4622      	mov	r2, r4
   d87da:	462b      	mov	r3, r5
   d87dc:	f000 fea6 	bl	d952c <__aeabi_dmul>
   d87e0:	4632      	mov	r2, r6
   d87e2:	463b      	mov	r3, r7
   d87e4:	4606      	mov	r6, r0
   d87e6:	460f      	mov	r7, r1
   d87e8:	4650      	mov	r0, sl
   d87ea:	4659      	mov	r1, fp
   d87ec:	f000 fe9e 	bl	d952c <__aeabi_dmul>
   d87f0:	4602      	mov	r2, r0
   d87f2:	460b      	mov	r3, r1
   d87f4:	4630      	mov	r0, r6
   d87f6:	4639      	mov	r1, r7
   d87f8:	f000 fce2 	bl	d91c0 <__adddf3>
   d87fc:	4642      	mov	r2, r8
   d87fe:	4682      	mov	sl, r0
   d8800:	468b      	mov	fp, r1
   d8802:	464b      	mov	r3, r9
   d8804:	4620      	mov	r0, r4
   d8806:	4629      	mov	r1, r5
   d8808:	f000 fe90 	bl	d952c <__aeabi_dmul>
   d880c:	4606      	mov	r6, r0
   d880e:	460f      	mov	r7, r1
   d8810:	463b      	mov	r3, r7
   d8812:	4650      	mov	r0, sl
   d8814:	4659      	mov	r1, fp
   d8816:	4632      	mov	r2, r6
   d8818:	f000 fcd2 	bl	d91c0 <__adddf3>
   d881c:	4bc4      	ldr	r3, [pc, #784]	; (d8b30 <__ieee754_pow+0x948>)
   d881e:	4299      	cmp	r1, r3
   d8820:	4604      	mov	r4, r0
   d8822:	460d      	mov	r5, r1
   d8824:	4688      	mov	r8, r1
   d8826:	f340 8117 	ble.w	d8a58 <__ieee754_pow+0x870>
   d882a:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
   d882e:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
   d8832:	4303      	orrs	r3, r0
   d8834:	f040 822a 	bne.w	d8c8c <__ieee754_pow+0xaa4>
   d8838:	a3a5      	add	r3, pc, #660	; (adr r3, d8ad0 <__ieee754_pow+0x8e8>)
   d883a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d883e:	4650      	mov	r0, sl
   d8840:	4659      	mov	r1, fp
   d8842:	f000 fcbd 	bl	d91c0 <__adddf3>
   d8846:	4632      	mov	r2, r6
   d8848:	ec41 0b18 	vmov	d8, r0, r1
   d884c:	463b      	mov	r3, r7
   d884e:	4620      	mov	r0, r4
   d8850:	4629      	mov	r1, r5
   d8852:	f000 fcb3 	bl	d91bc <__aeabi_dsub>
   d8856:	4602      	mov	r2, r0
   d8858:	460b      	mov	r3, r1
   d885a:	ec51 0b18 	vmov	r0, r1, d8
   d885e:	f001 f8f5 	bl	d9a4c <__aeabi_dcmpgt>
   d8862:	2800      	cmp	r0, #0
   d8864:	f040 8212 	bne.w	d8c8c <__ieee754_pow+0xaa4>
   d8868:	f3c8 530a 	ubfx	r3, r8, #20, #11
   d886c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
   d8870:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
   d8874:	fa42 f303 	asr.w	r3, r2, r3
   d8878:	4443      	add	r3, r8
   d887a:	49ae      	ldr	r1, [pc, #696]	; (d8b34 <__ieee754_pow+0x94c>)
   d887c:	f3c3 520a 	ubfx	r2, r3, #20, #11
   d8880:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
   d8884:	fa41 fc02 	asr.w	ip, r1, r2
   d8888:	f3c3 0513 	ubfx	r5, r3, #0, #20
   d888c:	ea23 010c 	bic.w	r1, r3, ip
   d8890:	f1c2 0414 	rsb	r4, r2, #20
   d8894:	f445 1580 	orr.w	r5, r5, #1048576	; 0x100000
   d8898:	f1b8 0f00 	cmp.w	r8, #0
   d889c:	460b      	mov	r3, r1
   d889e:	fa45 f104 	asr.w	r1, r5, r4
   d88a2:	9103      	str	r1, [sp, #12]
   d88a4:	f04f 0000 	mov.w	r0, #0
   d88a8:	bfb8      	it	lt
   d88aa:	4249      	neglt	r1, r1
   d88ac:	4602      	mov	r2, r0
   d88ae:	bfb8      	it	lt
   d88b0:	9103      	strlt	r1, [sp, #12]
   d88b2:	4630      	mov	r0, r6
   d88b4:	4639      	mov	r1, r7
   d88b6:	f000 fc81 	bl	d91bc <__aeabi_dsub>
   d88ba:	4606      	mov	r6, r0
   d88bc:	460f      	mov	r7, r1
   d88be:	463b      	mov	r3, r7
   d88c0:	4650      	mov	r0, sl
   d88c2:	4659      	mov	r1, fp
   d88c4:	4632      	mov	r2, r6
   d88c6:	f000 fc7b 	bl	d91c0 <__adddf3>
   d88ca:	9b03      	ldr	r3, [sp, #12]
   d88cc:	051b      	lsls	r3, r3, #20
   d88ce:	9300      	str	r3, [sp, #0]
   d88d0:	460d      	mov	r5, r1
   d88d2:	2400      	movs	r4, #0
   d88d4:	a380      	add	r3, pc, #512	; (adr r3, d8ad8 <__ieee754_pow+0x8f0>)
   d88d6:	e9d3 2300 	ldrd	r2, r3, [r3]
   d88da:	4620      	mov	r0, r4
   d88dc:	4629      	mov	r1, r5
   d88de:	f000 fe25 	bl	d952c <__aeabi_dmul>
   d88e2:	4632      	mov	r2, r6
   d88e4:	4680      	mov	r8, r0
   d88e6:	4689      	mov	r9, r1
   d88e8:	463b      	mov	r3, r7
   d88ea:	4620      	mov	r0, r4
   d88ec:	4629      	mov	r1, r5
   d88ee:	f000 fc65 	bl	d91bc <__aeabi_dsub>
   d88f2:	4602      	mov	r2, r0
   d88f4:	460b      	mov	r3, r1
   d88f6:	4650      	mov	r0, sl
   d88f8:	4659      	mov	r1, fp
   d88fa:	f000 fc5f 	bl	d91bc <__aeabi_dsub>
   d88fe:	a378      	add	r3, pc, #480	; (adr r3, d8ae0 <__ieee754_pow+0x8f8>)
   d8900:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8904:	f000 fe12 	bl	d952c <__aeabi_dmul>
   d8908:	a377      	add	r3, pc, #476	; (adr r3, d8ae8 <__ieee754_pow+0x900>)
   d890a:	e9d3 2300 	ldrd	r2, r3, [r3]
   d890e:	4606      	mov	r6, r0
   d8910:	460f      	mov	r7, r1
   d8912:	4620      	mov	r0, r4
   d8914:	4629      	mov	r1, r5
   d8916:	f000 fe09 	bl	d952c <__aeabi_dmul>
   d891a:	4602      	mov	r2, r0
   d891c:	460b      	mov	r3, r1
   d891e:	4630      	mov	r0, r6
   d8920:	4639      	mov	r1, r7
   d8922:	f000 fc4d 	bl	d91c0 <__adddf3>
   d8926:	4606      	mov	r6, r0
   d8928:	460f      	mov	r7, r1
   d892a:	4632      	mov	r2, r6
   d892c:	463b      	mov	r3, r7
   d892e:	4640      	mov	r0, r8
   d8930:	4649      	mov	r1, r9
   d8932:	f000 fc45 	bl	d91c0 <__adddf3>
   d8936:	4642      	mov	r2, r8
   d8938:	464b      	mov	r3, r9
   d893a:	4604      	mov	r4, r0
   d893c:	460d      	mov	r5, r1
   d893e:	f000 fc3d 	bl	d91bc <__aeabi_dsub>
   d8942:	4602      	mov	r2, r0
   d8944:	460b      	mov	r3, r1
   d8946:	4630      	mov	r0, r6
   d8948:	4639      	mov	r1, r7
   d894a:	f000 fc37 	bl	d91bc <__aeabi_dsub>
   d894e:	4622      	mov	r2, r4
   d8950:	4682      	mov	sl, r0
   d8952:	468b      	mov	fp, r1
   d8954:	462b      	mov	r3, r5
   d8956:	4620      	mov	r0, r4
   d8958:	4629      	mov	r1, r5
   d895a:	f000 fde7 	bl	d952c <__aeabi_dmul>
   d895e:	a364      	add	r3, pc, #400	; (adr r3, d8af0 <__ieee754_pow+0x908>)
   d8960:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8964:	4606      	mov	r6, r0
   d8966:	460f      	mov	r7, r1
   d8968:	f000 fde0 	bl	d952c <__aeabi_dmul>
   d896c:	a362      	add	r3, pc, #392	; (adr r3, d8af8 <__ieee754_pow+0x910>)
   d896e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8972:	f000 fc23 	bl	d91bc <__aeabi_dsub>
   d8976:	4632      	mov	r2, r6
   d8978:	463b      	mov	r3, r7
   d897a:	f000 fdd7 	bl	d952c <__aeabi_dmul>
   d897e:	a360      	add	r3, pc, #384	; (adr r3, d8b00 <__ieee754_pow+0x918>)
   d8980:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8984:	f000 fc1c 	bl	d91c0 <__adddf3>
   d8988:	4632      	mov	r2, r6
   d898a:	463b      	mov	r3, r7
   d898c:	f000 fdce 	bl	d952c <__aeabi_dmul>
   d8990:	a35d      	add	r3, pc, #372	; (adr r3, d8b08 <__ieee754_pow+0x920>)
   d8992:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8996:	f000 fc11 	bl	d91bc <__aeabi_dsub>
   d899a:	4632      	mov	r2, r6
   d899c:	463b      	mov	r3, r7
   d899e:	f000 fdc5 	bl	d952c <__aeabi_dmul>
   d89a2:	a35b      	add	r3, pc, #364	; (adr r3, d8b10 <__ieee754_pow+0x928>)
   d89a4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d89a8:	f000 fc0a 	bl	d91c0 <__adddf3>
   d89ac:	4632      	mov	r2, r6
   d89ae:	463b      	mov	r3, r7
   d89b0:	f000 fdbc 	bl	d952c <__aeabi_dmul>
   d89b4:	4602      	mov	r2, r0
   d89b6:	460b      	mov	r3, r1
   d89b8:	4620      	mov	r0, r4
   d89ba:	4629      	mov	r1, r5
   d89bc:	f000 fbfe 	bl	d91bc <__aeabi_dsub>
   d89c0:	4606      	mov	r6, r0
   d89c2:	460f      	mov	r7, r1
   d89c4:	4632      	mov	r2, r6
   d89c6:	463b      	mov	r3, r7
   d89c8:	4620      	mov	r0, r4
   d89ca:	4629      	mov	r1, r5
   d89cc:	f000 fdae 	bl	d952c <__aeabi_dmul>
   d89d0:	2200      	movs	r2, #0
   d89d2:	4680      	mov	r8, r0
   d89d4:	4689      	mov	r9, r1
   d89d6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
   d89da:	4630      	mov	r0, r6
   d89dc:	4639      	mov	r1, r7
   d89de:	f000 fbed 	bl	d91bc <__aeabi_dsub>
   d89e2:	4602      	mov	r2, r0
   d89e4:	460b      	mov	r3, r1
   d89e6:	4640      	mov	r0, r8
   d89e8:	4649      	mov	r1, r9
   d89ea:	f000 fec9 	bl	d9780 <__aeabi_ddiv>
   d89ee:	4652      	mov	r2, sl
   d89f0:	4606      	mov	r6, r0
   d89f2:	460f      	mov	r7, r1
   d89f4:	465b      	mov	r3, fp
   d89f6:	4620      	mov	r0, r4
   d89f8:	4629      	mov	r1, r5
   d89fa:	f000 fd97 	bl	d952c <__aeabi_dmul>
   d89fe:	4652      	mov	r2, sl
   d8a00:	465b      	mov	r3, fp
   d8a02:	f000 fbdd 	bl	d91c0 <__adddf3>
   d8a06:	4602      	mov	r2, r0
   d8a08:	460b      	mov	r3, r1
   d8a0a:	4630      	mov	r0, r6
   d8a0c:	4639      	mov	r1, r7
   d8a0e:	f000 fbd5 	bl	d91bc <__aeabi_dsub>
   d8a12:	4622      	mov	r2, r4
   d8a14:	462b      	mov	r3, r5
   d8a16:	f000 fbd1 	bl	d91bc <__aeabi_dsub>
   d8a1a:	4602      	mov	r2, r0
   d8a1c:	460b      	mov	r3, r1
   d8a1e:	2000      	movs	r0, #0
   d8a20:	4945      	ldr	r1, [pc, #276]	; (d8b38 <__ieee754_pow+0x950>)
   d8a22:	f000 fbcb 	bl	d91bc <__aeabi_dsub>
   d8a26:	460b      	mov	r3, r1
   d8a28:	9900      	ldr	r1, [sp, #0]
   d8a2a:	4419      	add	r1, r3
   d8a2c:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d8a30:	4602      	mov	r2, r0
   d8a32:	f2c0 8169 	blt.w	d8d08 <__ieee754_pow+0xb20>
   d8a36:	4610      	mov	r0, r2
   d8a38:	ec53 2b19 	vmov	r2, r3, d9
   d8a3c:	f000 fd76 	bl	d952c <__aeabi_dmul>
   d8a40:	e9cd 0100 	strd	r0, r1, [sp]
   d8a44:	e41e      	b.n	d8284 <__ieee754_pow+0x9c>
   d8a46:	f1bb 0f00 	cmp.w	fp, #0
   d8a4a:	f6ff ac95 	blt.w	d8378 <__ieee754_pow+0x190>
   d8a4e:	ed9f 7b32 	vldr	d7, [pc, #200]	; d8b18 <__ieee754_pow+0x930>
   d8a52:	ed8d 7b00 	vstr	d7, [sp]
   d8a56:	e415      	b.n	d8284 <__ieee754_pow+0x9c>
   d8a58:	f8df c0e4 	ldr.w	ip, [pc, #228]	; d8b40 <__ieee754_pow+0x958>
   d8a5c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8a60:	4563      	cmp	r3, ip
   d8a62:	f340 810b 	ble.w	d8c7c <__ieee754_pow+0xa94>
   d8a66:	4b35      	ldr	r3, [pc, #212]	; (d8b3c <__ieee754_pow+0x954>)
   d8a68:	440b      	add	r3, r1
   d8a6a:	4303      	orrs	r3, r0
   d8a6c:	d10a      	bne.n	d8a84 <__ieee754_pow+0x89c>
   d8a6e:	4632      	mov	r2, r6
   d8a70:	463b      	mov	r3, r7
   d8a72:	f000 fba3 	bl	d91bc <__aeabi_dsub>
   d8a76:	4652      	mov	r2, sl
   d8a78:	465b      	mov	r3, fp
   d8a7a:	f000 ffdd 	bl	d9a38 <__aeabi_dcmpge>
   d8a7e:	2800      	cmp	r0, #0
   d8a80:	f43f aef2 	beq.w	d8868 <__ieee754_pow+0x680>
   d8a84:	a326      	add	r3, pc, #152	; (adr r3, d8b20 <__ieee754_pow+0x938>)
   d8a86:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a8a:	ec51 0b19 	vmov	r0, r1, d9
   d8a8e:	f000 fd4d 	bl	d952c <__aeabi_dmul>
   d8a92:	a323      	add	r3, pc, #140	; (adr r3, d8b20 <__ieee754_pow+0x938>)
   d8a94:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8a98:	f000 fd48 	bl	d952c <__aeabi_dmul>
   d8a9c:	e9cd 0100 	strd	r0, r1, [sp]
   d8aa0:	f7ff bbf0 	b.w	d8284 <__ieee754_pow+0x9c>
   d8aa4:	ed9f 7b20 	vldr	d7, [pc, #128]	; d8b28 <__ieee754_pow+0x940>
   d8aa8:	eeb0 9a47 	vmov.f32	s18, s14
   d8aac:	eef0 9a67 	vmov.f32	s19, s15
   d8ab0:	e686      	b.n	d87c0 <__ieee754_pow+0x5d8>
   d8ab2:	f1bb 0f00 	cmp.w	fp, #0
   d8ab6:	daca      	bge.n	d8a4e <__ieee754_pow+0x866>
   d8ab8:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   d8abc:	9600      	str	r6, [sp, #0]
   d8abe:	9301      	str	r3, [sp, #4]
   d8ac0:	f7ff bbe0 	b.w	d8284 <__ieee754_pow+0x9c>
   d8ac4:	f3af 8000 	nop.w
   d8ac8:	00000000 	.word	0x00000000
   d8acc:	bff00000 	.word	0xbff00000
   d8ad0:	652b82fe 	.word	0x652b82fe
   d8ad4:	3c971547 	.word	0x3c971547
   d8ad8:	00000000 	.word	0x00000000
   d8adc:	3fe62e43 	.word	0x3fe62e43
   d8ae0:	fefa39ef 	.word	0xfefa39ef
   d8ae4:	3fe62e42 	.word	0x3fe62e42
   d8ae8:	0ca86c39 	.word	0x0ca86c39
   d8aec:	be205c61 	.word	0xbe205c61
   d8af0:	72bea4d0 	.word	0x72bea4d0
   d8af4:	3e663769 	.word	0x3e663769
   d8af8:	c5d26bf1 	.word	0xc5d26bf1
   d8afc:	3ebbbd41 	.word	0x3ebbbd41
   d8b00:	af25de2c 	.word	0xaf25de2c
   d8b04:	3f11566a 	.word	0x3f11566a
   d8b08:	16bebd93 	.word	0x16bebd93
   d8b0c:	3f66c16c 	.word	0x3f66c16c
   d8b10:	5555553e 	.word	0x5555553e
   d8b14:	3fc55555 	.word	0x3fc55555
	...
   d8b20:	c2f8f359 	.word	0xc2f8f359
   d8b24:	01a56e1f 	.word	0x01a56e1f
   d8b28:	00000000 	.word	0x00000000
   d8b2c:	3ff00000 	.word	0x3ff00000
   d8b30:	408fffff 	.word	0x408fffff
   d8b34:	000fffff 	.word	0x000fffff
   d8b38:	3ff00000 	.word	0x3ff00000
   d8b3c:	3f6f3400 	.word	0x3f6f3400
   d8b40:	4090cbff 	.word	0x4090cbff
   d8b44:	4598      	cmp	r8, r3
   d8b46:	f6ff af7e 	blt.w	d8a46 <__ieee754_pow+0x85e>
   d8b4a:	4b91      	ldr	r3, [pc, #580]	; (d8d90 <__ieee754_pow+0xba8>)
   d8b4c:	4598      	cmp	r8, r3
   d8b4e:	f73f ac0f 	bgt.w	d8370 <__ieee754_pow+0x188>
   d8b52:	4b8f      	ldr	r3, [pc, #572]	; (d8d90 <__ieee754_pow+0xba8>)
   d8b54:	2200      	movs	r2, #0
   d8b56:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8b5a:	f000 fb2f 	bl	d91bc <__aeabi_dsub>
   d8b5e:	a378      	add	r3, pc, #480	; (adr r3, d8d40 <__ieee754_pow+0xb58>)
   d8b60:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b64:	4604      	mov	r4, r0
   d8b66:	460d      	mov	r5, r1
   d8b68:	f000 fce0 	bl	d952c <__aeabi_dmul>
   d8b6c:	a376      	add	r3, pc, #472	; (adr r3, d8d48 <__ieee754_pow+0xb60>)
   d8b6e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8b72:	4682      	mov	sl, r0
   d8b74:	468b      	mov	fp, r1
   d8b76:	4620      	mov	r0, r4
   d8b78:	4629      	mov	r1, r5
   d8b7a:	f000 fcd7 	bl	d952c <__aeabi_dmul>
   d8b7e:	4b85      	ldr	r3, [pc, #532]	; (d8d94 <__ieee754_pow+0xbac>)
   d8b80:	4680      	mov	r8, r0
   d8b82:	4689      	mov	r9, r1
   d8b84:	2200      	movs	r2, #0
   d8b86:	4620      	mov	r0, r4
   d8b88:	4629      	mov	r1, r5
   d8b8a:	f000 fccf 	bl	d952c <__aeabi_dmul>
   d8b8e:	4602      	mov	r2, r0
   d8b90:	460b      	mov	r3, r1
   d8b92:	a16f      	add	r1, pc, #444	; (adr r1, d8d50 <__ieee754_pow+0xb68>)
   d8b94:	e9d1 0100 	ldrd	r0, r1, [r1]
   d8b98:	f000 fb10 	bl	d91bc <__aeabi_dsub>
   d8b9c:	4622      	mov	r2, r4
   d8b9e:	462b      	mov	r3, r5
   d8ba0:	f000 fcc4 	bl	d952c <__aeabi_dmul>
   d8ba4:	4602      	mov	r2, r0
   d8ba6:	460b      	mov	r3, r1
   d8ba8:	2000      	movs	r0, #0
   d8baa:	497b      	ldr	r1, [pc, #492]	; (d8d98 <__ieee754_pow+0xbb0>)
   d8bac:	f000 fb06 	bl	d91bc <__aeabi_dsub>
   d8bb0:	4622      	mov	r2, r4
   d8bb2:	462b      	mov	r3, r5
   d8bb4:	4604      	mov	r4, r0
   d8bb6:	460d      	mov	r5, r1
   d8bb8:	4610      	mov	r0, r2
   d8bba:	4619      	mov	r1, r3
   d8bbc:	f000 fcb6 	bl	d952c <__aeabi_dmul>
   d8bc0:	4602      	mov	r2, r0
   d8bc2:	460b      	mov	r3, r1
   d8bc4:	4620      	mov	r0, r4
   d8bc6:	4629      	mov	r1, r5
   d8bc8:	f000 fcb0 	bl	d952c <__aeabi_dmul>
   d8bcc:	a362      	add	r3, pc, #392	; (adr r3, d8d58 <__ieee754_pow+0xb70>)
   d8bce:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8bd2:	f000 fcab 	bl	d952c <__aeabi_dmul>
   d8bd6:	4602      	mov	r2, r0
   d8bd8:	460b      	mov	r3, r1
   d8bda:	4640      	mov	r0, r8
   d8bdc:	4649      	mov	r1, r9
   d8bde:	f000 faed 	bl	d91bc <__aeabi_dsub>
   d8be2:	4680      	mov	r8, r0
   d8be4:	4689      	mov	r9, r1
   d8be6:	4650      	mov	r0, sl
   d8be8:	4659      	mov	r1, fp
   d8bea:	4642      	mov	r2, r8
   d8bec:	464b      	mov	r3, r9
   d8bee:	f000 fae7 	bl	d91c0 <__adddf3>
   d8bf2:	2400      	movs	r4, #0
   d8bf4:	4652      	mov	r2, sl
   d8bf6:	465b      	mov	r3, fp
   d8bf8:	4620      	mov	r0, r4
   d8bfa:	460d      	mov	r5, r1
   d8bfc:	f000 fade 	bl	d91bc <__aeabi_dsub>
   d8c00:	4602      	mov	r2, r0
   d8c02:	460b      	mov	r3, r1
   d8c04:	4640      	mov	r0, r8
   d8c06:	4649      	mov	r1, r9
   d8c08:	f000 fad8 	bl	d91bc <__aeabi_dsub>
   d8c0c:	4682      	mov	sl, r0
   d8c0e:	468b      	mov	fp, r1
   d8c10:	e5ca      	b.n	d87a8 <__ieee754_pow+0x5c0>
   d8c12:	ed9f 7b53 	vldr	d7, [pc, #332]	; d8d60 <__ieee754_pow+0xb78>
   d8c16:	eeb0 ba47 	vmov.f32	s22, s14
   d8c1a:	eef0 ba67 	vmov.f32	s23, s15
   d8c1e:	eeb0 ca47 	vmov.f32	s24, s14
   d8c22:	eef0 ca67 	vmov.f32	s25, s15
   d8c26:	ed9f 7b50 	vldr	d7, [pc, #320]	; d8d68 <__ieee754_pow+0xb80>
   d8c2a:	f04f 0900 	mov.w	r9, #0
   d8c2e:	ec54 3b17 	vmov	r3, r4, d7
   d8c32:	e41d      	b.n	d8470 <__ieee754_pow+0x288>
   d8c34:	2000      	movs	r0, #0
   d8c36:	f7ff bbf3 	b.w	d8420 <__ieee754_pow+0x238>
   d8c3a:	4955      	ldr	r1, [pc, #340]	; (d8d90 <__ieee754_pow+0xba8>)
   d8c3c:	4622      	mov	r2, r4
   d8c3e:	462b      	mov	r3, r5
   d8c40:	2000      	movs	r0, #0
   d8c42:	f000 fd9d 	bl	d9780 <__aeabi_ddiv>
   d8c46:	e9cd 0100 	strd	r0, r1, [sp]
   d8c4a:	f7ff bb1b 	b.w	d8284 <__ieee754_pow+0x9c>
   d8c4e:	4622      	mov	r2, r4
   d8c50:	462b      	mov	r3, r5
   d8c52:	4620      	mov	r0, r4
   d8c54:	4629      	mov	r1, r5
   d8c56:	f000 fc69 	bl	d952c <__aeabi_dmul>
   d8c5a:	e9cd 0100 	strd	r0, r1, [sp]
   d8c5e:	f7ff bb11 	b.w	d8284 <__ieee754_pow+0x9c>
   d8c62:	2b00      	cmp	r3, #0
   d8c64:	d142      	bne.n	d8cec <__ieee754_pow+0xb04>
   d8c66:	f1c1 0114 	rsb	r1, r1, #20
   d8c6a:	fa4a f001 	asr.w	r0, sl, r1
   d8c6e:	fa00 f101 	lsl.w	r1, r0, r1
   d8c72:	4551      	cmp	r1, sl
   d8c74:	d05a      	beq.n	d8d2c <__ieee754_pow+0xb44>
   d8c76:	9303      	str	r3, [sp, #12]
   d8c78:	f7ff bae0 	b.w	d823c <__ieee754_pow+0x54>
   d8c7c:	4a46      	ldr	r2, [pc, #280]	; (d8d98 <__ieee754_pow+0xbb0>)
   d8c7e:	4293      	cmp	r3, r2
   d8c80:	dc5b      	bgt.n	d8d3a <__ieee754_pow+0xb52>
   d8c82:	e9dd 1200 	ldrd	r1, r2, [sp]
   d8c86:	9100      	str	r1, [sp, #0]
   d8c88:	9103      	str	r1, [sp, #12]
   d8c8a:	e622      	b.n	d88d2 <__ieee754_pow+0x6ea>
   d8c8c:	a338      	add	r3, pc, #224	; (adr r3, d8d70 <__ieee754_pow+0xb88>)
   d8c8e:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8c92:	ec51 0b19 	vmov	r0, r1, d9
   d8c96:	f000 fc49 	bl	d952c <__aeabi_dmul>
   d8c9a:	a335      	add	r3, pc, #212	; (adr r3, d8d70 <__ieee754_pow+0xb88>)
   d8c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d8ca0:	f000 fc44 	bl	d952c <__aeabi_dmul>
   d8ca4:	e9cd 0100 	strd	r0, r1, [sp]
   d8ca8:	f7ff baec 	b.w	d8284 <__ieee754_pow+0x9c>
   d8cac:	9b03      	ldr	r3, [sp, #12]
   d8cae:	2b01      	cmp	r3, #1
   d8cb0:	f47f aae8 	bne.w	d8284 <__ieee754_pow+0x9c>
   d8cb4:	e9dd 2100 	ldrd	r2, r1, [sp]
   d8cb8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
   d8cbc:	e9cd 2300 	strd	r2, r3, [sp]
   d8cc0:	f7ff bae0 	b.w	d8284 <__ieee754_pow+0x9c>
   d8cc4:	ed9f 7b2c 	vldr	d7, [pc, #176]	; d8d78 <__ieee754_pow+0xb90>
   d8cc8:	eeb0 ba47 	vmov.f32	s22, s14
   d8ccc:	eef0 ba67 	vmov.f32	s23, s15
   d8cd0:	ed9f 7b2b 	vldr	d7, [pc, #172]	; d8d80 <__ieee754_pow+0xb98>
   d8cd4:	eeb0 ca47 	vmov.f32	s24, s14
   d8cd8:	eef0 ca67 	vmov.f32	s25, s15
   d8cdc:	ed9f 7b2a 	vldr	d7, [pc, #168]	; d8d88 <__ieee754_pow+0xba0>
   d8ce0:	f44f 2980 	mov.w	r9, #262144	; 0x40000
   d8ce4:	ec54 3b17 	vmov	r3, r4, d7
   d8ce8:	f7ff bbc2 	b.w	d8470 <__ieee754_pow+0x288>
   d8cec:	ec45 4b10 	vmov	d0, r4, r5
   d8cf0:	9203      	str	r2, [sp, #12]
   d8cf2:	f000 f917 	bl	d8f24 <fabs>
   d8cf6:	9a03      	ldr	r2, [sp, #12]
   d8cf8:	ed8d 0b00 	vstr	d0, [sp]
   d8cfc:	2a00      	cmp	r2, #0
   d8cfe:	f47f ab61 	bne.w	d83c4 <__ieee754_pow+0x1dc>
   d8d02:	9203      	str	r2, [sp, #12]
   d8d04:	f7ff baf5 	b.w	d82f2 <__ieee754_pow+0x10a>
   d8d08:	9803      	ldr	r0, [sp, #12]
   d8d0a:	ec43 2b10 	vmov	d0, r2, r3
   d8d0e:	f000 f9bf 	bl	d9090 <scalbn>
   d8d12:	ec51 0b10 	vmov	r0, r1, d0
   d8d16:	e68f      	b.n	d8a38 <__ieee754_pow+0x850>
   d8d18:	f000 0001 	and.w	r0, r0, #1
   d8d1c:	f1c0 0102 	rsb	r1, r0, #2
   d8d20:	9103      	str	r1, [sp, #12]
   d8d22:	2b00      	cmp	r3, #0
   d8d24:	f43f aa8a 	beq.w	d823c <__ieee754_pow+0x54>
   d8d28:	f7ff bada 	b.w	d82e0 <__ieee754_pow+0xf8>
   d8d2c:	f000 0001 	and.w	r0, r0, #1
   d8d30:	f1c0 0302 	rsb	r3, r0, #2
   d8d34:	9303      	str	r3, [sp, #12]
   d8d36:	f7ff ba81 	b.w	d823c <__ieee754_pow+0x54>
   d8d3a:	151b      	asrs	r3, r3, #20
   d8d3c:	e596      	b.n	d886c <__ieee754_pow+0x684>
   d8d3e:	bf00      	nop
   d8d40:	60000000 	.word	0x60000000
   d8d44:	3ff71547 	.word	0x3ff71547
   d8d48:	f85ddf44 	.word	0xf85ddf44
   d8d4c:	3e54ae0b 	.word	0x3e54ae0b
   d8d50:	55555555 	.word	0x55555555
   d8d54:	3fd55555 	.word	0x3fd55555
   d8d58:	652b82fe 	.word	0x652b82fe
   d8d5c:	3ff71547 	.word	0x3ff71547
	...
   d8d6c:	3ff00000 	.word	0x3ff00000
   d8d70:	8800759c 	.word	0x8800759c
   d8d74:	7e37e43c 	.word	0x7e37e43c
   d8d78:	40000000 	.word	0x40000000
   d8d7c:	3fe2b803 	.word	0x3fe2b803
   d8d80:	43cfd006 	.word	0x43cfd006
   d8d84:	3e4cfdeb 	.word	0x3e4cfdeb
   d8d88:	00000000 	.word	0x00000000
   d8d8c:	3ff80000 	.word	0x3ff80000
   d8d90:	3ff00000 	.word	0x3ff00000
   d8d94:	3fd00000 	.word	0x3fd00000
   d8d98:	3fe00000 	.word	0x3fe00000

000d8d9c <__ieee754_sqrt>:
   d8d9c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d8da0:	4a5f      	ldr	r2, [pc, #380]	; (d8f20 <__ieee754_sqrt+0x184>)
   d8da2:	ec57 6b10 	vmov	r6, r7, d0
   d8da6:	43ba      	bics	r2, r7
   d8da8:	f000 8098 	beq.w	d8edc <__ieee754_sqrt+0x140>
   d8dac:	2f00      	cmp	r7, #0
   d8dae:	ee10 4a10 	vmov	r4, s0
   d8db2:	463b      	mov	r3, r7
   d8db4:	dd4e      	ble.n	d8e54 <__ieee754_sqrt+0xb8>
   d8db6:	1539      	asrs	r1, r7, #20
   d8db8:	d05b      	beq.n	d8e72 <__ieee754_sqrt+0xd6>
   d8dba:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d8dbe:	07ca      	lsls	r2, r1, #31
   d8dc0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d8dc4:	f2a1 3eff 	subw	lr, r1, #1023	; 0x3ff
   d8dc8:	d403      	bmi.n	d8dd2 <__ieee754_sqrt+0x36>
   d8dca:	005b      	lsls	r3, r3, #1
   d8dcc:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8dd0:	0064      	lsls	r4, r4, #1
   d8dd2:	0fe2      	lsrs	r2, r4, #31
   d8dd4:	f04f 0c00 	mov.w	ip, #0
   d8dd8:	eb02 0343 	add.w	r3, r2, r3, lsl #1
   d8ddc:	ea4f 0e6e 	mov.w	lr, lr, asr #1
   d8de0:	0064      	lsls	r4, r4, #1
   d8de2:	4666      	mov	r6, ip
   d8de4:	2516      	movs	r5, #22
   d8de6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
   d8dea:	18b1      	adds	r1, r6, r2
   d8dec:	4299      	cmp	r1, r3
   d8dee:	dc02      	bgt.n	d8df6 <__ieee754_sqrt+0x5a>
   d8df0:	1a5b      	subs	r3, r3, r1
   d8df2:	188e      	adds	r6, r1, r2
   d8df4:	4494      	add	ip, r2
   d8df6:	005b      	lsls	r3, r3, #1
   d8df8:	3d01      	subs	r5, #1
   d8dfa:	eb03 73d4 	add.w	r3, r3, r4, lsr #31
   d8dfe:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8e02:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8e06:	d1f0      	bne.n	d8dea <__ieee754_sqrt+0x4e>
   d8e08:	462f      	mov	r7, r5
   d8e0a:	2020      	movs	r0, #32
   d8e0c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
   d8e10:	e009      	b.n	d8e26 <__ieee754_sqrt+0x8a>
   d8e12:	d03e      	beq.n	d8e92 <__ieee754_sqrt+0xf6>
   d8e14:	0fe1      	lsrs	r1, r4, #31
   d8e16:	3801      	subs	r0, #1
   d8e18:	ea4f 0252 	mov.w	r2, r2, lsr #1
   d8e1c:	eb01 0343 	add.w	r3, r1, r3, lsl #1
   d8e20:	ea4f 0444 	mov.w	r4, r4, lsl #1
   d8e24:	d03e      	beq.n	d8ea4 <__ieee754_sqrt+0x108>
   d8e26:	42b3      	cmp	r3, r6
   d8e28:	eb02 0105 	add.w	r1, r2, r5
   d8e2c:	ddf1      	ble.n	d8e12 <__ieee754_sqrt+0x76>
   d8e2e:	2900      	cmp	r1, #0
   d8e30:	eb01 0502 	add.w	r5, r1, r2
   d8e34:	db09      	blt.n	d8e4a <__ieee754_sqrt+0xae>
   d8e36:	46b0      	mov	r8, r6
   d8e38:	1b9b      	subs	r3, r3, r6
   d8e3a:	42a1      	cmp	r1, r4
   d8e3c:	bf88      	it	hi
   d8e3e:	f103 33ff 	addhi.w	r3, r3, #4294967295
   d8e42:	1a64      	subs	r4, r4, r1
   d8e44:	4417      	add	r7, r2
   d8e46:	4646      	mov	r6, r8
   d8e48:	e7e4      	b.n	d8e14 <__ieee754_sqrt+0x78>
   d8e4a:	2d00      	cmp	r5, #0
   d8e4c:	dbf3      	blt.n	d8e36 <__ieee754_sqrt+0x9a>
   d8e4e:	f106 0801 	add.w	r8, r6, #1
   d8e52:	e7f1      	b.n	d8e38 <__ieee754_sqrt+0x9c>
   d8e54:	f027 4200 	bic.w	r2, r7, #2147483648	; 0x80000000
   d8e58:	4332      	orrs	r2, r6
   d8e5a:	d036      	beq.n	d8eca <__ieee754_sqrt+0x12e>
   d8e5c:	2f00      	cmp	r7, #0
   d8e5e:	d14d      	bne.n	d8efc <__ieee754_sqrt+0x160>
   d8e60:	4639      	mov	r1, r7
   d8e62:	0ae2      	lsrs	r2, r4, #11
   d8e64:	3915      	subs	r1, #21
   d8e66:	0564      	lsls	r4, r4, #21
   d8e68:	4613      	mov	r3, r2
   d8e6a:	2a00      	cmp	r2, #0
   d8e6c:	d0f9      	beq.n	d8e62 <__ieee754_sqrt+0xc6>
   d8e6e:	02d7      	lsls	r7, r2, #11
   d8e70:	d451      	bmi.n	d8f16 <__ieee754_sqrt+0x17a>
   d8e72:	2000      	movs	r0, #0
   d8e74:	005b      	lsls	r3, r3, #1
   d8e76:	02de      	lsls	r6, r3, #11
   d8e78:	4605      	mov	r5, r0
   d8e7a:	f100 0001 	add.w	r0, r0, #1
   d8e7e:	d5f9      	bpl.n	d8e74 <__ieee754_sqrt+0xd8>
   d8e80:	461a      	mov	r2, r3
   d8e82:	4623      	mov	r3, r4
   d8e84:	4084      	lsls	r4, r0
   d8e86:	f1c0 0020 	rsb	r0, r0, #32
   d8e8a:	40c3      	lsrs	r3, r0
   d8e8c:	4313      	orrs	r3, r2
   d8e8e:	1b49      	subs	r1, r1, r5
   d8e90:	e793      	b.n	d8dba <__ieee754_sqrt+0x1e>
   d8e92:	42a1      	cmp	r1, r4
   d8e94:	d8be      	bhi.n	d8e14 <__ieee754_sqrt+0x78>
   d8e96:	2900      	cmp	r1, #0
   d8e98:	eb01 0502 	add.w	r5, r1, r2
   d8e9c:	dbd5      	blt.n	d8e4a <__ieee754_sqrt+0xae>
   d8e9e:	4698      	mov	r8, r3
   d8ea0:	2300      	movs	r3, #0
   d8ea2:	e7ce      	b.n	d8e42 <__ieee754_sqrt+0xa6>
   d8ea4:	4323      	orrs	r3, r4
   d8ea6:	d112      	bne.n	d8ece <__ieee754_sqrt+0x132>
   d8ea8:	0878      	lsrs	r0, r7, #1
   d8eaa:	ea4f 016c 	mov.w	r1, ip, asr #1
   d8eae:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d8eb2:	f01c 0f01 	tst.w	ip, #1
   d8eb6:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d8eba:	bf18      	it	ne
   d8ebc:	f040 4000 	orrne.w	r0, r0, #2147483648	; 0x80000000
   d8ec0:	eb01 530e 	add.w	r3, r1, lr, lsl #20
   d8ec4:	4602      	mov	r2, r0
   d8ec6:	ec43 2b10 	vmov	d0, r2, r3
   d8eca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8ece:	1c7b      	adds	r3, r7, #1
   d8ed0:	bf16      	itet	ne
   d8ed2:	1c78      	addne	r0, r7, #1
   d8ed4:	f10c 0c01 	addeq.w	ip, ip, #1
   d8ed8:	0840      	lsrne	r0, r0, #1
   d8eda:	e7e6      	b.n	d8eaa <__ieee754_sqrt+0x10e>
   d8edc:	ee10 2a10 	vmov	r2, s0
   d8ee0:	ee10 0a10 	vmov	r0, s0
   d8ee4:	463b      	mov	r3, r7
   d8ee6:	4639      	mov	r1, r7
   d8ee8:	f000 fb20 	bl	d952c <__aeabi_dmul>
   d8eec:	4632      	mov	r2, r6
   d8eee:	463b      	mov	r3, r7
   d8ef0:	f000 f966 	bl	d91c0 <__adddf3>
   d8ef4:	ec41 0b10 	vmov	d0, r0, r1
   d8ef8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d8efc:	ee10 2a10 	vmov	r2, s0
   d8f00:	4630      	mov	r0, r6
   d8f02:	4639      	mov	r1, r7
   d8f04:	f000 f95a 	bl	d91bc <__aeabi_dsub>
   d8f08:	4602      	mov	r2, r0
   d8f0a:	460b      	mov	r3, r1
   d8f0c:	f000 fc38 	bl	d9780 <__aeabi_ddiv>
   d8f10:	ec41 0b10 	vmov	d0, r0, r1
   d8f14:	e7d9      	b.n	d8eca <__ieee754_sqrt+0x12e>
   d8f16:	4623      	mov	r3, r4
   d8f18:	2020      	movs	r0, #32
   d8f1a:	f04f 35ff 	mov.w	r5, #4294967295
   d8f1e:	e7b4      	b.n	d8e8a <__ieee754_sqrt+0xee>
   d8f20:	7ff00000 	.word	0x7ff00000

000d8f24 <fabs>:
   d8f24:	ec51 0b10 	vmov	r0, r1, d0
   d8f28:	ee10 2a10 	vmov	r2, s0
   d8f2c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d8f30:	ec43 2b10 	vmov	d0, r2, r3
   d8f34:	4770      	bx	lr
   d8f36:	bf00      	nop

000d8f38 <finite>:
   d8f38:	b082      	sub	sp, #8
   d8f3a:	ed8d 0b00 	vstr	d0, [sp]
   d8f3e:	9801      	ldr	r0, [sp, #4]
   d8f40:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
   d8f44:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
   d8f48:	0fc0      	lsrs	r0, r0, #31
   d8f4a:	b002      	add	sp, #8
   d8f4c:	4770      	bx	lr
   d8f4e:	bf00      	nop

000d8f50 <matherr>:
   d8f50:	2000      	movs	r0, #0
   d8f52:	4770      	bx	lr
   d8f54:	0000      	movs	r0, r0
	...

000d8f58 <nan>:
   d8f58:	ed9f 0b01 	vldr	d0, [pc, #4]	; d8f60 <nan+0x8>
   d8f5c:	4770      	bx	lr
   d8f5e:	bf00      	nop
   d8f60:	00000000 	.word	0x00000000
   d8f64:	7ff80000 	.word	0x7ff80000

000d8f68 <rint>:
   d8f68:	b5f0      	push	{r4, r5, r6, r7, lr}
   d8f6a:	ec53 2b10 	vmov	r2, r3, d0
   d8f6e:	f3c3 560a 	ubfx	r6, r3, #20, #11
   d8f72:	f2a6 30ff 	subw	r0, r6, #1023	; 0x3ff
   d8f76:	2813      	cmp	r0, #19
   d8f78:	ee10 5a10 	vmov	r5, s0
   d8f7c:	b083      	sub	sp, #12
   d8f7e:	4619      	mov	r1, r3
   d8f80:	ea4f 74d3 	mov.w	r4, r3, lsr #31
   d8f84:	dc31      	bgt.n	d8fea <rint+0x82>
   d8f86:	2800      	cmp	r0, #0
   d8f88:	db4c      	blt.n	d9024 <rint+0xbc>
   d8f8a:	4e3e      	ldr	r6, [pc, #248]	; (d9084 <rint+0x11c>)
   d8f8c:	4106      	asrs	r6, r0
   d8f8e:	ea03 0706 	and.w	r7, r3, r6
   d8f92:	4317      	orrs	r7, r2
   d8f94:	d02e      	beq.n	d8ff4 <rint+0x8c>
   d8f96:	ea03 0356 	and.w	r3, r3, r6, lsr #1
   d8f9a:	431d      	orrs	r5, r3
   d8f9c:	ea4f 0656 	mov.w	r6, r6, lsr #1
   d8fa0:	d00c      	beq.n	d8fbc <rint+0x54>
   d8fa2:	f44f 2380 	mov.w	r3, #262144	; 0x40000
   d8fa6:	2813      	cmp	r0, #19
   d8fa8:	ea21 0606 	bic.w	r6, r1, r6
   d8fac:	fa43 f100 	asr.w	r1, r3, r0
   d8fb0:	ea41 0106 	orr.w	r1, r1, r6
   d8fb4:	bf0c      	ite	eq
   d8fb6:	f04f 4500 	moveq.w	r5, #2147483648	; 0x80000000
   d8fba:	2500      	movne	r5, #0
   d8fbc:	4832      	ldr	r0, [pc, #200]	; (d9088 <rint+0x120>)
   d8fbe:	eb00 04c4 	add.w	r4, r0, r4, lsl #3
   d8fc2:	462a      	mov	r2, r5
   d8fc4:	e9d4 4500 	ldrd	r4, r5, [r4]
   d8fc8:	460b      	mov	r3, r1
   d8fca:	4620      	mov	r0, r4
   d8fcc:	4629      	mov	r1, r5
   d8fce:	f000 f8f7 	bl	d91c0 <__adddf3>
   d8fd2:	e9cd 0100 	strd	r0, r1, [sp]
   d8fd6:	e9dd 0100 	ldrd	r0, r1, [sp]
   d8fda:	4622      	mov	r2, r4
   d8fdc:	462b      	mov	r3, r5
   d8fde:	f000 f8ed 	bl	d91bc <__aeabi_dsub>
   d8fe2:	ec41 0b10 	vmov	d0, r0, r1
   d8fe6:	b003      	add	sp, #12
   d8fe8:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8fea:	2833      	cmp	r0, #51	; 0x33
   d8fec:	dd06      	ble.n	d8ffc <rint+0x94>
   d8fee:	f5b0 6f80 	cmp.w	r0, #1024	; 0x400
   d8ff2:	d040      	beq.n	d9076 <rint+0x10e>
   d8ff4:	ec43 2b10 	vmov	d0, r2, r3
   d8ff8:	b003      	add	sp, #12
   d8ffa:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d8ffc:	f2a6 4613 	subw	r6, r6, #1043	; 0x413
   d9000:	f04f 30ff 	mov.w	r0, #4294967295
   d9004:	40f0      	lsrs	r0, r6
   d9006:	4202      	tst	r2, r0
   d9008:	d0f4      	beq.n	d8ff4 <rint+0x8c>
   d900a:	ea15 0250 	ands.w	r2, r5, r0, lsr #1
   d900e:	ea4f 0350 	mov.w	r3, r0, lsr #1
   d9012:	d0d3      	beq.n	d8fbc <rint+0x54>
   d9014:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
   d9018:	ea25 0503 	bic.w	r5, r5, r3
   d901c:	fa42 f606 	asr.w	r6, r2, r6
   d9020:	4335      	orrs	r5, r6
   d9022:	e7cb      	b.n	d8fbc <rint+0x54>
   d9024:	f023 4000 	bic.w	r0, r3, #2147483648	; 0x80000000
   d9028:	4310      	orrs	r0, r2
   d902a:	d0e3      	beq.n	d8ff4 <rint+0x8c>
   d902c:	f3c3 0013 	ubfx	r0, r3, #0, #20
   d9030:	4310      	orrs	r0, r2
   d9032:	4245      	negs	r5, r0
   d9034:	4305      	orrs	r5, r0
   d9036:	4814      	ldr	r0, [pc, #80]	; (d9088 <rint+0x120>)
   d9038:	eb00 00c4 	add.w	r0, r0, r4, lsl #3
   d903c:	e9d0 6700 	ldrd	r6, r7, [r0]
   d9040:	0c59      	lsrs	r1, r3, #17
   d9042:	0b2d      	lsrs	r5, r5, #12
   d9044:	0449      	lsls	r1, r1, #17
   d9046:	f405 2500 	and.w	r5, r5, #524288	; 0x80000
   d904a:	ea45 0301 	orr.w	r3, r5, r1
   d904e:	4630      	mov	r0, r6
   d9050:	4639      	mov	r1, r7
   d9052:	f000 f8b5 	bl	d91c0 <__adddf3>
   d9056:	e9cd 0100 	strd	r0, r1, [sp]
   d905a:	463b      	mov	r3, r7
   d905c:	e9dd 0100 	ldrd	r0, r1, [sp]
   d9060:	4632      	mov	r2, r6
   d9062:	f000 f8ab 	bl	d91bc <__aeabi_dsub>
   d9066:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
   d906a:	ea43 71c4 	orr.w	r1, r3, r4, lsl #31
   d906e:	ec41 0b10 	vmov	d0, r0, r1
   d9072:	b003      	add	sp, #12
   d9074:	bdf0      	pop	{r4, r5, r6, r7, pc}
   d9076:	ee10 0a10 	vmov	r0, s0
   d907a:	f000 f8a1 	bl	d91c0 <__adddf3>
   d907e:	ec41 0b10 	vmov	d0, r0, r1
   d9082:	e7b9      	b.n	d8ff8 <rint+0x90>
   d9084:	000fffff 	.word	0x000fffff
   d9088:	000da838 	.word	0x000da838
   d908c:	00000000 	.word	0x00000000

000d9090 <scalbn>:
   d9090:	b538      	push	{r3, r4, r5, lr}
   d9092:	ec53 2b10 	vmov	r2, r3, d0
   d9096:	f3c3 510a 	ubfx	r1, r3, #20, #11
   d909a:	461c      	mov	r4, r3
   d909c:	4605      	mov	r5, r0
   d909e:	bb81      	cbnz	r1, d9102 <scalbn+0x72>
   d90a0:	ee10 1a10 	vmov	r1, s0
   d90a4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
   d90a8:	4321      	orrs	r1, r4
   d90aa:	d029      	beq.n	d9100 <scalbn+0x70>
   d90ac:	4619      	mov	r1, r3
   d90ae:	2200      	movs	r2, #0
   d90b0:	4b3d      	ldr	r3, [pc, #244]	; (d91a8 <scalbn+0x118>)
   d90b2:	4c3e      	ldr	r4, [pc, #248]	; (d91ac <scalbn+0x11c>)
   d90b4:	ee10 0a10 	vmov	r0, s0
   d90b8:	f000 fa38 	bl	d952c <__aeabi_dmul>
   d90bc:	42a5      	cmp	r5, r4
   d90be:	4602      	mov	r2, r0
   d90c0:	460b      	mov	r3, r1
   d90c2:	db16      	blt.n	d90f2 <scalbn+0x62>
   d90c4:	460c      	mov	r4, r1
   d90c6:	f3c1 510a 	ubfx	r1, r1, #20, #11
   d90ca:	3936      	subs	r1, #54	; 0x36
   d90cc:	4429      	add	r1, r5
   d90ce:	f240 70fe 	movw	r0, #2046	; 0x7fe
   d90d2:	4281      	cmp	r1, r0
   d90d4:	dc21      	bgt.n	d911a <scalbn+0x8a>
   d90d6:	2900      	cmp	r1, #0
   d90d8:	dc47      	bgt.n	d916a <scalbn+0xda>
   d90da:	f111 0f35 	cmn.w	r1, #53	; 0x35
   d90de:	da34      	bge.n	d914a <scalbn+0xba>
   d90e0:	f24c 3150 	movw	r1, #50000	; 0xc350
   d90e4:	428d      	cmp	r5, r1
   d90e6:	dc18      	bgt.n	d911a <scalbn+0x8a>
   d90e8:	2b00      	cmp	r3, #0
   d90ea:	a127      	add	r1, pc, #156	; (adr r1, d9188 <scalbn+0xf8>)
   d90ec:	e9d1 0100 	ldrd	r0, r1, [r1]
   d90f0:	db44      	blt.n	d917c <scalbn+0xec>
   d90f2:	a325      	add	r3, pc, #148	; (adr r3, d9188 <scalbn+0xf8>)
   d90f4:	e9d3 2300 	ldrd	r2, r3, [r3]
   d90f8:	f000 fa18 	bl	d952c <__aeabi_dmul>
   d90fc:	ec41 0b10 	vmov	d0, r0, r1
   d9100:	bd38      	pop	{r3, r4, r5, pc}
   d9102:	f240 70ff 	movw	r0, #2047	; 0x7ff
   d9106:	4281      	cmp	r1, r0
   d9108:	d1e0      	bne.n	d90cc <scalbn+0x3c>
   d910a:	ee10 0a10 	vmov	r0, s0
   d910e:	4619      	mov	r1, r3
   d9110:	f000 f856 	bl	d91c0 <__adddf3>
   d9114:	ec41 0b10 	vmov	d0, r0, r1
   d9118:	bd38      	pop	{r3, r4, r5, pc}
   d911a:	2b00      	cmp	r3, #0
   d911c:	a11c      	add	r1, pc, #112	; (adr r1, d9190 <scalbn+0x100>)
   d911e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9122:	db07      	blt.n	d9134 <scalbn+0xa4>
   d9124:	a31a      	add	r3, pc, #104	; (adr r3, d9190 <scalbn+0x100>)
   d9126:	e9d3 2300 	ldrd	r2, r3, [r3]
   d912a:	f000 f9ff 	bl	d952c <__aeabi_dmul>
   d912e:	ec41 0b10 	vmov	d0, r0, r1
   d9132:	bd38      	pop	{r3, r4, r5, pc}
   d9134:	a118      	add	r1, pc, #96	; (adr r1, d9198 <scalbn+0x108>)
   d9136:	e9d1 0100 	ldrd	r0, r1, [r1]
   d913a:	a315      	add	r3, pc, #84	; (adr r3, d9190 <scalbn+0x100>)
   d913c:	e9d3 2300 	ldrd	r2, r3, [r3]
   d9140:	f000 f9f4 	bl	d952c <__aeabi_dmul>
   d9144:	ec41 0b10 	vmov	d0, r0, r1
   d9148:	e7f3      	b.n	d9132 <scalbn+0xa2>
   d914a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d914e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d9152:	3136      	adds	r1, #54	; 0x36
   d9154:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d9158:	4610      	mov	r0, r2
   d915a:	4619      	mov	r1, r3
   d915c:	2200      	movs	r2, #0
   d915e:	4b14      	ldr	r3, [pc, #80]	; (d91b0 <scalbn+0x120>)
   d9160:	f000 f9e4 	bl	d952c <__aeabi_dmul>
   d9164:	ec41 0b10 	vmov	d0, r0, r1
   d9168:	bd38      	pop	{r3, r4, r5, pc}
   d916a:	f024 44ff 	bic.w	r4, r4, #2139095040	; 0x7f800000
   d916e:	f424 04e0 	bic.w	r4, r4, #7340032	; 0x700000
   d9172:	ea44 5301 	orr.w	r3, r4, r1, lsl #20
   d9176:	ec43 2b10 	vmov	d0, r2, r3
   d917a:	bd38      	pop	{r3, r4, r5, pc}
   d917c:	a108      	add	r1, pc, #32	; (adr r1, d91a0 <scalbn+0x110>)
   d917e:	e9d1 0100 	ldrd	r0, r1, [r1]
   d9182:	e7b6      	b.n	d90f2 <scalbn+0x62>
   d9184:	f3af 8000 	nop.w
   d9188:	c2f8f359 	.word	0xc2f8f359
   d918c:	01a56e1f 	.word	0x01a56e1f
   d9190:	8800759c 	.word	0x8800759c
   d9194:	7e37e43c 	.word	0x7e37e43c
   d9198:	8800759c 	.word	0x8800759c
   d919c:	fe37e43c 	.word	0xfe37e43c
   d91a0:	c2f8f359 	.word	0xc2f8f359
   d91a4:	81a56e1f 	.word	0x81a56e1f
   d91a8:	43500000 	.word	0x43500000
   d91ac:	ffff3cb0 	.word	0xffff3cb0
   d91b0:	3c900000 	.word	0x3c900000

000d91b4 <__aeabi_drsub>:
   d91b4:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d91b8:	e002      	b.n	d91c0 <__adddf3>
   d91ba:	bf00      	nop

000d91bc <__aeabi_dsub>:
   d91bc:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d91c0 <__adddf3>:
   d91c0:	b530      	push	{r4, r5, lr}
   d91c2:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d91c6:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d91ca:	ea94 0f05 	teq	r4, r5
   d91ce:	bf08      	it	eq
   d91d0:	ea90 0f02 	teqeq	r0, r2
   d91d4:	bf1f      	itttt	ne
   d91d6:	ea54 0c00 	orrsne.w	ip, r4, r0
   d91da:	ea55 0c02 	orrsne.w	ip, r5, r2
   d91de:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d91e2:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d91e6:	f000 80e2 	beq.w	d93ae <__adddf3+0x1ee>
   d91ea:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d91ee:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d91f2:	bfb8      	it	lt
   d91f4:	426d      	neglt	r5, r5
   d91f6:	dd0c      	ble.n	d9212 <__adddf3+0x52>
   d91f8:	442c      	add	r4, r5
   d91fa:	ea80 0202 	eor.w	r2, r0, r2
   d91fe:	ea81 0303 	eor.w	r3, r1, r3
   d9202:	ea82 0000 	eor.w	r0, r2, r0
   d9206:	ea83 0101 	eor.w	r1, r3, r1
   d920a:	ea80 0202 	eor.w	r2, r0, r2
   d920e:	ea81 0303 	eor.w	r3, r1, r3
   d9212:	2d36      	cmp	r5, #54	; 0x36
   d9214:	bf88      	it	hi
   d9216:	bd30      	pophi	{r4, r5, pc}
   d9218:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d921c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d9220:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d9224:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d9228:	d002      	beq.n	d9230 <__adddf3+0x70>
   d922a:	4240      	negs	r0, r0
   d922c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9230:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d9234:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d9238:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d923c:	d002      	beq.n	d9244 <__adddf3+0x84>
   d923e:	4252      	negs	r2, r2
   d9240:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9244:	ea94 0f05 	teq	r4, r5
   d9248:	f000 80a7 	beq.w	d939a <__adddf3+0x1da>
   d924c:	f1a4 0401 	sub.w	r4, r4, #1
   d9250:	f1d5 0e20 	rsbs	lr, r5, #32
   d9254:	db0d      	blt.n	d9272 <__adddf3+0xb2>
   d9256:	fa02 fc0e 	lsl.w	ip, r2, lr
   d925a:	fa22 f205 	lsr.w	r2, r2, r5
   d925e:	1880      	adds	r0, r0, r2
   d9260:	f141 0100 	adc.w	r1, r1, #0
   d9264:	fa03 f20e 	lsl.w	r2, r3, lr
   d9268:	1880      	adds	r0, r0, r2
   d926a:	fa43 f305 	asr.w	r3, r3, r5
   d926e:	4159      	adcs	r1, r3
   d9270:	e00e      	b.n	d9290 <__adddf3+0xd0>
   d9272:	f1a5 0520 	sub.w	r5, r5, #32
   d9276:	f10e 0e20 	add.w	lr, lr, #32
   d927a:	2a01      	cmp	r2, #1
   d927c:	fa03 fc0e 	lsl.w	ip, r3, lr
   d9280:	bf28      	it	cs
   d9282:	f04c 0c02 	orrcs.w	ip, ip, #2
   d9286:	fa43 f305 	asr.w	r3, r3, r5
   d928a:	18c0      	adds	r0, r0, r3
   d928c:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d9290:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9294:	d507      	bpl.n	d92a6 <__adddf3+0xe6>
   d9296:	f04f 0e00 	mov.w	lr, #0
   d929a:	f1dc 0c00 	rsbs	ip, ip, #0
   d929e:	eb7e 0000 	sbcs.w	r0, lr, r0
   d92a2:	eb6e 0101 	sbc.w	r1, lr, r1
   d92a6:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d92aa:	d31b      	bcc.n	d92e4 <__adddf3+0x124>
   d92ac:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d92b0:	d30c      	bcc.n	d92cc <__adddf3+0x10c>
   d92b2:	0849      	lsrs	r1, r1, #1
   d92b4:	ea5f 0030 	movs.w	r0, r0, rrx
   d92b8:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d92bc:	f104 0401 	add.w	r4, r4, #1
   d92c0:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d92c4:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d92c8:	f080 809a 	bcs.w	d9400 <__adddf3+0x240>
   d92cc:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d92d0:	bf08      	it	eq
   d92d2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d92d6:	f150 0000 	adcs.w	r0, r0, #0
   d92da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d92de:	ea41 0105 	orr.w	r1, r1, r5
   d92e2:	bd30      	pop	{r4, r5, pc}
   d92e4:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d92e8:	4140      	adcs	r0, r0
   d92ea:	eb41 0101 	adc.w	r1, r1, r1
   d92ee:	3c01      	subs	r4, #1
   d92f0:	bf28      	it	cs
   d92f2:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
   d92f6:	d2e9      	bcs.n	d92cc <__adddf3+0x10c>
   d92f8:	f091 0f00 	teq	r1, #0
   d92fc:	bf04      	itt	eq
   d92fe:	4601      	moveq	r1, r0
   d9300:	2000      	moveq	r0, #0
   d9302:	fab1 f381 	clz	r3, r1
   d9306:	bf08      	it	eq
   d9308:	3320      	addeq	r3, #32
   d930a:	f1a3 030b 	sub.w	r3, r3, #11
   d930e:	f1b3 0220 	subs.w	r2, r3, #32
   d9312:	da0c      	bge.n	d932e <__adddf3+0x16e>
   d9314:	320c      	adds	r2, #12
   d9316:	dd08      	ble.n	d932a <__adddf3+0x16a>
   d9318:	f102 0c14 	add.w	ip, r2, #20
   d931c:	f1c2 020c 	rsb	r2, r2, #12
   d9320:	fa01 f00c 	lsl.w	r0, r1, ip
   d9324:	fa21 f102 	lsr.w	r1, r1, r2
   d9328:	e00c      	b.n	d9344 <__adddf3+0x184>
   d932a:	f102 0214 	add.w	r2, r2, #20
   d932e:	bfd8      	it	le
   d9330:	f1c2 0c20 	rsble	ip, r2, #32
   d9334:	fa01 f102 	lsl.w	r1, r1, r2
   d9338:	fa20 fc0c 	lsr.w	ip, r0, ip
   d933c:	bfdc      	itt	le
   d933e:	ea41 010c 	orrle.w	r1, r1, ip
   d9342:	4090      	lslle	r0, r2
   d9344:	1ae4      	subs	r4, r4, r3
   d9346:	bfa2      	ittt	ge
   d9348:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d934c:	4329      	orrge	r1, r5
   d934e:	bd30      	popge	{r4, r5, pc}
   d9350:	ea6f 0404 	mvn.w	r4, r4
   d9354:	3c1f      	subs	r4, #31
   d9356:	da1c      	bge.n	d9392 <__adddf3+0x1d2>
   d9358:	340c      	adds	r4, #12
   d935a:	dc0e      	bgt.n	d937a <__adddf3+0x1ba>
   d935c:	f104 0414 	add.w	r4, r4, #20
   d9360:	f1c4 0220 	rsb	r2, r4, #32
   d9364:	fa20 f004 	lsr.w	r0, r0, r4
   d9368:	fa01 f302 	lsl.w	r3, r1, r2
   d936c:	ea40 0003 	orr.w	r0, r0, r3
   d9370:	fa21 f304 	lsr.w	r3, r1, r4
   d9374:	ea45 0103 	orr.w	r1, r5, r3
   d9378:	bd30      	pop	{r4, r5, pc}
   d937a:	f1c4 040c 	rsb	r4, r4, #12
   d937e:	f1c4 0220 	rsb	r2, r4, #32
   d9382:	fa20 f002 	lsr.w	r0, r0, r2
   d9386:	fa01 f304 	lsl.w	r3, r1, r4
   d938a:	ea40 0003 	orr.w	r0, r0, r3
   d938e:	4629      	mov	r1, r5
   d9390:	bd30      	pop	{r4, r5, pc}
   d9392:	fa21 f004 	lsr.w	r0, r1, r4
   d9396:	4629      	mov	r1, r5
   d9398:	bd30      	pop	{r4, r5, pc}
   d939a:	f094 0f00 	teq	r4, #0
   d939e:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d93a2:	bf06      	itte	eq
   d93a4:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d93a8:	3401      	addeq	r4, #1
   d93aa:	3d01      	subne	r5, #1
   d93ac:	e74e      	b.n	d924c <__adddf3+0x8c>
   d93ae:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d93b2:	bf18      	it	ne
   d93b4:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d93b8:	d029      	beq.n	d940e <__adddf3+0x24e>
   d93ba:	ea94 0f05 	teq	r4, r5
   d93be:	bf08      	it	eq
   d93c0:	ea90 0f02 	teqeq	r0, r2
   d93c4:	d005      	beq.n	d93d2 <__adddf3+0x212>
   d93c6:	ea54 0c00 	orrs.w	ip, r4, r0
   d93ca:	bf04      	itt	eq
   d93cc:	4619      	moveq	r1, r3
   d93ce:	4610      	moveq	r0, r2
   d93d0:	bd30      	pop	{r4, r5, pc}
   d93d2:	ea91 0f03 	teq	r1, r3
   d93d6:	bf1e      	ittt	ne
   d93d8:	2100      	movne	r1, #0
   d93da:	2000      	movne	r0, #0
   d93dc:	bd30      	popne	{r4, r5, pc}
   d93de:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d93e2:	d105      	bne.n	d93f0 <__adddf3+0x230>
   d93e4:	0040      	lsls	r0, r0, #1
   d93e6:	4149      	adcs	r1, r1
   d93e8:	bf28      	it	cs
   d93ea:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d93ee:	bd30      	pop	{r4, r5, pc}
   d93f0:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d93f4:	bf3c      	itt	cc
   d93f6:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d93fa:	bd30      	popcc	{r4, r5, pc}
   d93fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d9400:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d9404:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9408:	f04f 0000 	mov.w	r0, #0
   d940c:	bd30      	pop	{r4, r5, pc}
   d940e:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d9412:	bf1a      	itte	ne
   d9414:	4619      	movne	r1, r3
   d9416:	4610      	movne	r0, r2
   d9418:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d941c:	bf1c      	itt	ne
   d941e:	460b      	movne	r3, r1
   d9420:	4602      	movne	r2, r0
   d9422:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d9426:	bf06      	itte	eq
   d9428:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d942c:	ea91 0f03 	teqeq	r1, r3
   d9430:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d9434:	bd30      	pop	{r4, r5, pc}
   d9436:	bf00      	nop

000d9438 <__aeabi_ui2d>:
   d9438:	f090 0f00 	teq	r0, #0
   d943c:	bf04      	itt	eq
   d943e:	2100      	moveq	r1, #0
   d9440:	4770      	bxeq	lr
   d9442:	b530      	push	{r4, r5, lr}
   d9444:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9448:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d944c:	f04f 0500 	mov.w	r5, #0
   d9450:	f04f 0100 	mov.w	r1, #0
   d9454:	e750      	b.n	d92f8 <__adddf3+0x138>
   d9456:	bf00      	nop

000d9458 <__aeabi_i2d>:
   d9458:	f090 0f00 	teq	r0, #0
   d945c:	bf04      	itt	eq
   d945e:	2100      	moveq	r1, #0
   d9460:	4770      	bxeq	lr
   d9462:	b530      	push	{r4, r5, lr}
   d9464:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d9468:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d946c:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d9470:	bf48      	it	mi
   d9472:	4240      	negmi	r0, r0
   d9474:	f04f 0100 	mov.w	r1, #0
   d9478:	e73e      	b.n	d92f8 <__adddf3+0x138>
   d947a:	bf00      	nop

000d947c <__aeabi_f2d>:
   d947c:	0042      	lsls	r2, r0, #1
   d947e:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d9482:	ea4f 0131 	mov.w	r1, r1, rrx
   d9486:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d948a:	bf1f      	itttt	ne
   d948c:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d9490:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d9494:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d9498:	4770      	bxne	lr
   d949a:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
   d949e:	bf08      	it	eq
   d94a0:	4770      	bxeq	lr
   d94a2:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
   d94a6:	bf04      	itt	eq
   d94a8:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
   d94ac:	4770      	bxeq	lr
   d94ae:	b530      	push	{r4, r5, lr}
   d94b0:	f44f 7460 	mov.w	r4, #896	; 0x380
   d94b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d94b8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d94bc:	e71c      	b.n	d92f8 <__adddf3+0x138>
   d94be:	bf00      	nop

000d94c0 <__aeabi_ul2d>:
   d94c0:	ea50 0201 	orrs.w	r2, r0, r1
   d94c4:	bf08      	it	eq
   d94c6:	4770      	bxeq	lr
   d94c8:	b530      	push	{r4, r5, lr}
   d94ca:	f04f 0500 	mov.w	r5, #0
   d94ce:	e00a      	b.n	d94e6 <__aeabi_l2d+0x16>

000d94d0 <__aeabi_l2d>:
   d94d0:	ea50 0201 	orrs.w	r2, r0, r1
   d94d4:	bf08      	it	eq
   d94d6:	4770      	bxeq	lr
   d94d8:	b530      	push	{r4, r5, lr}
   d94da:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d94de:	d502      	bpl.n	d94e6 <__aeabi_l2d+0x16>
   d94e0:	4240      	negs	r0, r0
   d94e2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d94e6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d94ea:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d94ee:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d94f2:	f43f aed8 	beq.w	d92a6 <__adddf3+0xe6>
   d94f6:	f04f 0203 	mov.w	r2, #3
   d94fa:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d94fe:	bf18      	it	ne
   d9500:	3203      	addne	r2, #3
   d9502:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d9506:	bf18      	it	ne
   d9508:	3203      	addne	r2, #3
   d950a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d950e:	f1c2 0320 	rsb	r3, r2, #32
   d9512:	fa00 fc03 	lsl.w	ip, r0, r3
   d9516:	fa20 f002 	lsr.w	r0, r0, r2
   d951a:	fa01 fe03 	lsl.w	lr, r1, r3
   d951e:	ea40 000e 	orr.w	r0, r0, lr
   d9522:	fa21 f102 	lsr.w	r1, r1, r2
   d9526:	4414      	add	r4, r2
   d9528:	e6bd      	b.n	d92a6 <__adddf3+0xe6>
   d952a:	bf00      	nop

000d952c <__aeabi_dmul>:
   d952c:	b570      	push	{r4, r5, r6, lr}
   d952e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9532:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d9536:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d953a:	bf1d      	ittte	ne
   d953c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9540:	ea94 0f0c 	teqne	r4, ip
   d9544:	ea95 0f0c 	teqne	r5, ip
   d9548:	f000 f8de 	bleq	d9708 <__aeabi_dmul+0x1dc>
   d954c:	442c      	add	r4, r5
   d954e:	ea81 0603 	eor.w	r6, r1, r3
   d9552:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d9556:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d955a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d955e:	bf18      	it	ne
   d9560:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d9564:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9568:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d956c:	d038      	beq.n	d95e0 <__aeabi_dmul+0xb4>
   d956e:	fba0 ce02 	umull	ip, lr, r0, r2
   d9572:	f04f 0500 	mov.w	r5, #0
   d9576:	fbe1 e502 	umlal	lr, r5, r1, r2
   d957a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d957e:	fbe0 e503 	umlal	lr, r5, r0, r3
   d9582:	f04f 0600 	mov.w	r6, #0
   d9586:	fbe1 5603 	umlal	r5, r6, r1, r3
   d958a:	f09c 0f00 	teq	ip, #0
   d958e:	bf18      	it	ne
   d9590:	f04e 0e01 	orrne.w	lr, lr, #1
   d9594:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d9598:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d959c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d95a0:	d204      	bcs.n	d95ac <__aeabi_dmul+0x80>
   d95a2:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d95a6:	416d      	adcs	r5, r5
   d95a8:	eb46 0606 	adc.w	r6, r6, r6
   d95ac:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d95b0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d95b4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d95b8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d95bc:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d95c0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d95c4:	bf88      	it	hi
   d95c6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d95ca:	d81e      	bhi.n	d960a <__aeabi_dmul+0xde>
   d95cc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d95d0:	bf08      	it	eq
   d95d2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d95d6:	f150 0000 	adcs.w	r0, r0, #0
   d95da:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d95de:	bd70      	pop	{r4, r5, r6, pc}
   d95e0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d95e4:	ea46 0101 	orr.w	r1, r6, r1
   d95e8:	ea40 0002 	orr.w	r0, r0, r2
   d95ec:	ea81 0103 	eor.w	r1, r1, r3
   d95f0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d95f4:	bfc2      	ittt	gt
   d95f6:	ebd4 050c 	rsbsgt	r5, r4, ip
   d95fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d95fe:	bd70      	popgt	{r4, r5, r6, pc}
   d9600:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9604:	f04f 0e00 	mov.w	lr, #0
   d9608:	3c01      	subs	r4, #1
   d960a:	f300 80ab 	bgt.w	d9764 <__aeabi_dmul+0x238>
   d960e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d9612:	bfde      	ittt	le
   d9614:	2000      	movle	r0, #0
   d9616:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d961a:	bd70      	pople	{r4, r5, r6, pc}
   d961c:	f1c4 0400 	rsb	r4, r4, #0
   d9620:	3c20      	subs	r4, #32
   d9622:	da35      	bge.n	d9690 <__aeabi_dmul+0x164>
   d9624:	340c      	adds	r4, #12
   d9626:	dc1b      	bgt.n	d9660 <__aeabi_dmul+0x134>
   d9628:	f104 0414 	add.w	r4, r4, #20
   d962c:	f1c4 0520 	rsb	r5, r4, #32
   d9630:	fa00 f305 	lsl.w	r3, r0, r5
   d9634:	fa20 f004 	lsr.w	r0, r0, r4
   d9638:	fa01 f205 	lsl.w	r2, r1, r5
   d963c:	ea40 0002 	orr.w	r0, r0, r2
   d9640:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d9644:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d9648:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d964c:	fa21 f604 	lsr.w	r6, r1, r4
   d9650:	eb42 0106 	adc.w	r1, r2, r6
   d9654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9658:	bf08      	it	eq
   d965a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d965e:	bd70      	pop	{r4, r5, r6, pc}
   d9660:	f1c4 040c 	rsb	r4, r4, #12
   d9664:	f1c4 0520 	rsb	r5, r4, #32
   d9668:	fa00 f304 	lsl.w	r3, r0, r4
   d966c:	fa20 f005 	lsr.w	r0, r0, r5
   d9670:	fa01 f204 	lsl.w	r2, r1, r4
   d9674:	ea40 0002 	orr.w	r0, r0, r2
   d9678:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d967c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d9680:	f141 0100 	adc.w	r1, r1, #0
   d9684:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d9688:	bf08      	it	eq
   d968a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d968e:	bd70      	pop	{r4, r5, r6, pc}
   d9690:	f1c4 0520 	rsb	r5, r4, #32
   d9694:	fa00 f205 	lsl.w	r2, r0, r5
   d9698:	ea4e 0e02 	orr.w	lr, lr, r2
   d969c:	fa20 f304 	lsr.w	r3, r0, r4
   d96a0:	fa01 f205 	lsl.w	r2, r1, r5
   d96a4:	ea43 0302 	orr.w	r3, r3, r2
   d96a8:	fa21 f004 	lsr.w	r0, r1, r4
   d96ac:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d96b0:	fa21 f204 	lsr.w	r2, r1, r4
   d96b4:	ea20 0002 	bic.w	r0, r0, r2
   d96b8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d96bc:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d96c0:	bf08      	it	eq
   d96c2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d96c6:	bd70      	pop	{r4, r5, r6, pc}
   d96c8:	f094 0f00 	teq	r4, #0
   d96cc:	d10f      	bne.n	d96ee <__aeabi_dmul+0x1c2>
   d96ce:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d96d2:	0040      	lsls	r0, r0, #1
   d96d4:	eb41 0101 	adc.w	r1, r1, r1
   d96d8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d96dc:	bf08      	it	eq
   d96de:	3c01      	subeq	r4, #1
   d96e0:	d0f7      	beq.n	d96d2 <__aeabi_dmul+0x1a6>
   d96e2:	ea41 0106 	orr.w	r1, r1, r6
   d96e6:	f095 0f00 	teq	r5, #0
   d96ea:	bf18      	it	ne
   d96ec:	4770      	bxne	lr
   d96ee:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d96f2:	0052      	lsls	r2, r2, #1
   d96f4:	eb43 0303 	adc.w	r3, r3, r3
   d96f8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d96fc:	bf08      	it	eq
   d96fe:	3d01      	subeq	r5, #1
   d9700:	d0f7      	beq.n	d96f2 <__aeabi_dmul+0x1c6>
   d9702:	ea43 0306 	orr.w	r3, r3, r6
   d9706:	4770      	bx	lr
   d9708:	ea94 0f0c 	teq	r4, ip
   d970c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d9710:	bf18      	it	ne
   d9712:	ea95 0f0c 	teqne	r5, ip
   d9716:	d00c      	beq.n	d9732 <__aeabi_dmul+0x206>
   d9718:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d971c:	bf18      	it	ne
   d971e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9722:	d1d1      	bne.n	d96c8 <__aeabi_dmul+0x19c>
   d9724:	ea81 0103 	eor.w	r1, r1, r3
   d9728:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d972c:	f04f 0000 	mov.w	r0, #0
   d9730:	bd70      	pop	{r4, r5, r6, pc}
   d9732:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9736:	bf06      	itte	eq
   d9738:	4610      	moveq	r0, r2
   d973a:	4619      	moveq	r1, r3
   d973c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d9740:	d019      	beq.n	d9776 <__aeabi_dmul+0x24a>
   d9742:	ea94 0f0c 	teq	r4, ip
   d9746:	d102      	bne.n	d974e <__aeabi_dmul+0x222>
   d9748:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d974c:	d113      	bne.n	d9776 <__aeabi_dmul+0x24a>
   d974e:	ea95 0f0c 	teq	r5, ip
   d9752:	d105      	bne.n	d9760 <__aeabi_dmul+0x234>
   d9754:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d9758:	bf1c      	itt	ne
   d975a:	4610      	movne	r0, r2
   d975c:	4619      	movne	r1, r3
   d975e:	d10a      	bne.n	d9776 <__aeabi_dmul+0x24a>
   d9760:	ea81 0103 	eor.w	r1, r1, r3
   d9764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d9768:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d976c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d9770:	f04f 0000 	mov.w	r0, #0
   d9774:	bd70      	pop	{r4, r5, r6, pc}
   d9776:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d977a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d977e:	bd70      	pop	{r4, r5, r6, pc}

000d9780 <__aeabi_ddiv>:
   d9780:	b570      	push	{r4, r5, r6, lr}
   d9782:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d9786:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d978a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d978e:	bf1d      	ittte	ne
   d9790:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d9794:	ea94 0f0c 	teqne	r4, ip
   d9798:	ea95 0f0c 	teqne	r5, ip
   d979c:	f000 f8a7 	bleq	d98ee <__aeabi_ddiv+0x16e>
   d97a0:	eba4 0405 	sub.w	r4, r4, r5
   d97a4:	ea81 0e03 	eor.w	lr, r1, r3
   d97a8:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d97ac:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d97b0:	f000 8088 	beq.w	d98c4 <__aeabi_ddiv+0x144>
   d97b4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d97b8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d97bc:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d97c0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d97c4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d97c8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d97cc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d97d0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d97d4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d97d8:	429d      	cmp	r5, r3
   d97da:	bf08      	it	eq
   d97dc:	4296      	cmpeq	r6, r2
   d97de:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d97e2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d97e6:	d202      	bcs.n	d97ee <__aeabi_ddiv+0x6e>
   d97e8:	085b      	lsrs	r3, r3, #1
   d97ea:	ea4f 0232 	mov.w	r2, r2, rrx
   d97ee:	1ab6      	subs	r6, r6, r2
   d97f0:	eb65 0503 	sbc.w	r5, r5, r3
   d97f4:	085b      	lsrs	r3, r3, #1
   d97f6:	ea4f 0232 	mov.w	r2, r2, rrx
   d97fa:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d97fe:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d9802:	ebb6 0e02 	subs.w	lr, r6, r2
   d9806:	eb75 0e03 	sbcs.w	lr, r5, r3
   d980a:	bf22      	ittt	cs
   d980c:	1ab6      	subcs	r6, r6, r2
   d980e:	4675      	movcs	r5, lr
   d9810:	ea40 000c 	orrcs.w	r0, r0, ip
   d9814:	085b      	lsrs	r3, r3, #1
   d9816:	ea4f 0232 	mov.w	r2, r2, rrx
   d981a:	ebb6 0e02 	subs.w	lr, r6, r2
   d981e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9822:	bf22      	ittt	cs
   d9824:	1ab6      	subcs	r6, r6, r2
   d9826:	4675      	movcs	r5, lr
   d9828:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d982c:	085b      	lsrs	r3, r3, #1
   d982e:	ea4f 0232 	mov.w	r2, r2, rrx
   d9832:	ebb6 0e02 	subs.w	lr, r6, r2
   d9836:	eb75 0e03 	sbcs.w	lr, r5, r3
   d983a:	bf22      	ittt	cs
   d983c:	1ab6      	subcs	r6, r6, r2
   d983e:	4675      	movcs	r5, lr
   d9840:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d9844:	085b      	lsrs	r3, r3, #1
   d9846:	ea4f 0232 	mov.w	r2, r2, rrx
   d984a:	ebb6 0e02 	subs.w	lr, r6, r2
   d984e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d9852:	bf22      	ittt	cs
   d9854:	1ab6      	subcs	r6, r6, r2
   d9856:	4675      	movcs	r5, lr
   d9858:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d985c:	ea55 0e06 	orrs.w	lr, r5, r6
   d9860:	d018      	beq.n	d9894 <__aeabi_ddiv+0x114>
   d9862:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d9866:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d986a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d986e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d9872:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d9876:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d987a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d987e:	d1c0      	bne.n	d9802 <__aeabi_ddiv+0x82>
   d9880:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9884:	d10b      	bne.n	d989e <__aeabi_ddiv+0x11e>
   d9886:	ea41 0100 	orr.w	r1, r1, r0
   d988a:	f04f 0000 	mov.w	r0, #0
   d988e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d9892:	e7b6      	b.n	d9802 <__aeabi_ddiv+0x82>
   d9894:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d9898:	bf04      	itt	eq
   d989a:	4301      	orreq	r1, r0
   d989c:	2000      	moveq	r0, #0
   d989e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d98a2:	bf88      	it	hi
   d98a4:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d98a8:	f63f aeaf 	bhi.w	d960a <__aeabi_dmul+0xde>
   d98ac:	ebb5 0c03 	subs.w	ip, r5, r3
   d98b0:	bf04      	itt	eq
   d98b2:	ebb6 0c02 	subseq.w	ip, r6, r2
   d98b6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d98ba:	f150 0000 	adcs.w	r0, r0, #0
   d98be:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d98c2:	bd70      	pop	{r4, r5, r6, pc}
   d98c4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d98c8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d98cc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d98d0:	bfc2      	ittt	gt
   d98d2:	ebd4 050c 	rsbsgt	r5, r4, ip
   d98d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d98da:	bd70      	popgt	{r4, r5, r6, pc}
   d98dc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d98e0:	f04f 0e00 	mov.w	lr, #0
   d98e4:	3c01      	subs	r4, #1
   d98e6:	e690      	b.n	d960a <__aeabi_dmul+0xde>
   d98e8:	ea45 0e06 	orr.w	lr, r5, r6
   d98ec:	e68d      	b.n	d960a <__aeabi_dmul+0xde>
   d98ee:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d98f2:	ea94 0f0c 	teq	r4, ip
   d98f6:	bf08      	it	eq
   d98f8:	ea95 0f0c 	teqeq	r5, ip
   d98fc:	f43f af3b 	beq.w	d9776 <__aeabi_dmul+0x24a>
   d9900:	ea94 0f0c 	teq	r4, ip
   d9904:	d10a      	bne.n	d991c <__aeabi_ddiv+0x19c>
   d9906:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d990a:	f47f af34 	bne.w	d9776 <__aeabi_dmul+0x24a>
   d990e:	ea95 0f0c 	teq	r5, ip
   d9912:	f47f af25 	bne.w	d9760 <__aeabi_dmul+0x234>
   d9916:	4610      	mov	r0, r2
   d9918:	4619      	mov	r1, r3
   d991a:	e72c      	b.n	d9776 <__aeabi_dmul+0x24a>
   d991c:	ea95 0f0c 	teq	r5, ip
   d9920:	d106      	bne.n	d9930 <__aeabi_ddiv+0x1b0>
   d9922:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d9926:	f43f aefd 	beq.w	d9724 <__aeabi_dmul+0x1f8>
   d992a:	4610      	mov	r0, r2
   d992c:	4619      	mov	r1, r3
   d992e:	e722      	b.n	d9776 <__aeabi_dmul+0x24a>
   d9930:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d9934:	bf18      	it	ne
   d9936:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d993a:	f47f aec5 	bne.w	d96c8 <__aeabi_dmul+0x19c>
   d993e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d9942:	f47f af0d 	bne.w	d9760 <__aeabi_dmul+0x234>
   d9946:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d994a:	f47f aeeb 	bne.w	d9724 <__aeabi_dmul+0x1f8>
   d994e:	e712      	b.n	d9776 <__aeabi_dmul+0x24a>

000d9950 <__gedf2>:
   d9950:	f04f 3cff 	mov.w	ip, #4294967295
   d9954:	e006      	b.n	d9964 <__cmpdf2+0x4>
   d9956:	bf00      	nop

000d9958 <__ledf2>:
   d9958:	f04f 0c01 	mov.w	ip, #1
   d995c:	e002      	b.n	d9964 <__cmpdf2+0x4>
   d995e:	bf00      	nop

000d9960 <__cmpdf2>:
   d9960:	f04f 0c01 	mov.w	ip, #1
   d9964:	f84d cd04 	str.w	ip, [sp, #-4]!
   d9968:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d996c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9974:	bf18      	it	ne
   d9976:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d997a:	d01b      	beq.n	d99b4 <__cmpdf2+0x54>
   d997c:	b001      	add	sp, #4
   d997e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d9982:	bf0c      	ite	eq
   d9984:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d9988:	ea91 0f03 	teqne	r1, r3
   d998c:	bf02      	ittt	eq
   d998e:	ea90 0f02 	teqeq	r0, r2
   d9992:	2000      	moveq	r0, #0
   d9994:	4770      	bxeq	lr
   d9996:	f110 0f00 	cmn.w	r0, #0
   d999a:	ea91 0f03 	teq	r1, r3
   d999e:	bf58      	it	pl
   d99a0:	4299      	cmppl	r1, r3
   d99a2:	bf08      	it	eq
   d99a4:	4290      	cmpeq	r0, r2
   d99a6:	bf2c      	ite	cs
   d99a8:	17d8      	asrcs	r0, r3, #31
   d99aa:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d99ae:	f040 0001 	orr.w	r0, r0, #1
   d99b2:	4770      	bx	lr
   d99b4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d99b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d99bc:	d102      	bne.n	d99c4 <__cmpdf2+0x64>
   d99be:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d99c2:	d107      	bne.n	d99d4 <__cmpdf2+0x74>
   d99c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d99c8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d99cc:	d1d6      	bne.n	d997c <__cmpdf2+0x1c>
   d99ce:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d99d2:	d0d3      	beq.n	d997c <__cmpdf2+0x1c>
   d99d4:	f85d 0b04 	ldr.w	r0, [sp], #4
   d99d8:	4770      	bx	lr
   d99da:	bf00      	nop

000d99dc <__aeabi_cdrcmple>:
   d99dc:	4684      	mov	ip, r0
   d99de:	4610      	mov	r0, r2
   d99e0:	4662      	mov	r2, ip
   d99e2:	468c      	mov	ip, r1
   d99e4:	4619      	mov	r1, r3
   d99e6:	4663      	mov	r3, ip
   d99e8:	e000      	b.n	d99ec <__aeabi_cdcmpeq>
   d99ea:	bf00      	nop

000d99ec <__aeabi_cdcmpeq>:
   d99ec:	b501      	push	{r0, lr}
   d99ee:	f7ff ffb7 	bl	d9960 <__cmpdf2>
   d99f2:	2800      	cmp	r0, #0
   d99f4:	bf48      	it	mi
   d99f6:	f110 0f00 	cmnmi.w	r0, #0
   d99fa:	bd01      	pop	{r0, pc}

000d99fc <__aeabi_dcmpeq>:
   d99fc:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a00:	f7ff fff4 	bl	d99ec <__aeabi_cdcmpeq>
   d9a04:	bf0c      	ite	eq
   d9a06:	2001      	moveq	r0, #1
   d9a08:	2000      	movne	r0, #0
   d9a0a:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a0e:	bf00      	nop

000d9a10 <__aeabi_dcmplt>:
   d9a10:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a14:	f7ff ffea 	bl	d99ec <__aeabi_cdcmpeq>
   d9a18:	bf34      	ite	cc
   d9a1a:	2001      	movcc	r0, #1
   d9a1c:	2000      	movcs	r0, #0
   d9a1e:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a22:	bf00      	nop

000d9a24 <__aeabi_dcmple>:
   d9a24:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a28:	f7ff ffe0 	bl	d99ec <__aeabi_cdcmpeq>
   d9a2c:	bf94      	ite	ls
   d9a2e:	2001      	movls	r0, #1
   d9a30:	2000      	movhi	r0, #0
   d9a32:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a36:	bf00      	nop

000d9a38 <__aeabi_dcmpge>:
   d9a38:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a3c:	f7ff ffce 	bl	d99dc <__aeabi_cdrcmple>
   d9a40:	bf94      	ite	ls
   d9a42:	2001      	movls	r0, #1
   d9a44:	2000      	movhi	r0, #0
   d9a46:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a4a:	bf00      	nop

000d9a4c <__aeabi_dcmpgt>:
   d9a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d9a50:	f7ff ffc4 	bl	d99dc <__aeabi_cdrcmple>
   d9a54:	bf34      	ite	cc
   d9a56:	2001      	movcc	r0, #1
   d9a58:	2000      	movcs	r0, #0
   d9a5a:	f85d fb08 	ldr.w	pc, [sp], #8
   d9a5e:	bf00      	nop

000d9a60 <__aeabi_dcmpun>:
   d9a60:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d9a64:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a68:	d102      	bne.n	d9a70 <__aeabi_dcmpun+0x10>
   d9a6a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d9a6e:	d10a      	bne.n	d9a86 <__aeabi_dcmpun+0x26>
   d9a70:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d9a74:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d9a78:	d102      	bne.n	d9a80 <__aeabi_dcmpun+0x20>
   d9a7a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d9a7e:	d102      	bne.n	d9a86 <__aeabi_dcmpun+0x26>
   d9a80:	f04f 0000 	mov.w	r0, #0
   d9a84:	4770      	bx	lr
   d9a86:	f04f 0001 	mov.w	r0, #1
   d9a8a:	4770      	bx	lr

000d9a8c <__aeabi_d2uiz>:
   d9a8c:	004a      	lsls	r2, r1, #1
   d9a8e:	d211      	bcs.n	d9ab4 <__aeabi_d2uiz+0x28>
   d9a90:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   d9a94:	d211      	bcs.n	d9aba <__aeabi_d2uiz+0x2e>
   d9a96:	d50d      	bpl.n	d9ab4 <__aeabi_d2uiz+0x28>
   d9a98:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   d9a9c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   d9aa0:	d40e      	bmi.n	d9ac0 <__aeabi_d2uiz+0x34>
   d9aa2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9aa6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   d9aaa:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   d9aae:	fa23 f002 	lsr.w	r0, r3, r2
   d9ab2:	4770      	bx	lr
   d9ab4:	f04f 0000 	mov.w	r0, #0
   d9ab8:	4770      	bx	lr
   d9aba:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   d9abe:	d102      	bne.n	d9ac6 <__aeabi_d2uiz+0x3a>
   d9ac0:	f04f 30ff 	mov.w	r0, #4294967295
   d9ac4:	4770      	bx	lr
   d9ac6:	f04f 0000 	mov.w	r0, #0
   d9aca:	4770      	bx	lr

000d9acc <__aeabi_d2f>:
   d9acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d9ad0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d9ad4:	bf24      	itt	cs
   d9ad6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d9ada:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d9ade:	d90d      	bls.n	d9afc <__aeabi_d2f+0x30>
   d9ae0:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d9ae4:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d9ae8:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d9aec:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d9af0:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d9af4:	bf08      	it	eq
   d9af6:	f020 0001 	biceq.w	r0, r0, #1
   d9afa:	4770      	bx	lr
   d9afc:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d9b00:	d121      	bne.n	d9b46 <__aeabi_d2f+0x7a>
   d9b02:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d9b06:	bfbc      	itt	lt
   d9b08:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d9b0c:	4770      	bxlt	lr
   d9b0e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d9b12:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d9b16:	f1c2 0218 	rsb	r2, r2, #24
   d9b1a:	f1c2 0c20 	rsb	ip, r2, #32
   d9b1e:	fa10 f30c 	lsls.w	r3, r0, ip
   d9b22:	fa20 f002 	lsr.w	r0, r0, r2
   d9b26:	bf18      	it	ne
   d9b28:	f040 0001 	orrne.w	r0, r0, #1
   d9b2c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d9b30:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d9b34:	fa03 fc0c 	lsl.w	ip, r3, ip
   d9b38:	ea40 000c 	orr.w	r0, r0, ip
   d9b3c:	fa23 f302 	lsr.w	r3, r3, r2
   d9b40:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d9b44:	e7cc      	b.n	d9ae0 <__aeabi_d2f+0x14>
   d9b46:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d9b4a:	d107      	bne.n	d9b5c <__aeabi_d2f+0x90>
   d9b4c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d9b50:	bf1e      	ittt	ne
   d9b52:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d9b56:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d9b5a:	4770      	bxne	lr
   d9b5c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d9b60:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d9b64:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9b68:	4770      	bx	lr
   d9b6a:	bf00      	nop

000d9b6c <__aeabi_frsub>:
   d9b6c:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
   d9b70:	e002      	b.n	d9b78 <__addsf3>
   d9b72:	bf00      	nop

000d9b74 <__aeabi_fsub>:
   d9b74:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

000d9b78 <__addsf3>:
   d9b78:	0042      	lsls	r2, r0, #1
   d9b7a:	bf1f      	itttt	ne
   d9b7c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
   d9b80:	ea92 0f03 	teqne	r2, r3
   d9b84:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
   d9b88:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d9b8c:	d06a      	beq.n	d9c64 <__addsf3+0xec>
   d9b8e:	ea4f 6212 	mov.w	r2, r2, lsr #24
   d9b92:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
   d9b96:	bfc1      	itttt	gt
   d9b98:	18d2      	addgt	r2, r2, r3
   d9b9a:	4041      	eorgt	r1, r0
   d9b9c:	4048      	eorgt	r0, r1
   d9b9e:	4041      	eorgt	r1, r0
   d9ba0:	bfb8      	it	lt
   d9ba2:	425b      	neglt	r3, r3
   d9ba4:	2b19      	cmp	r3, #25
   d9ba6:	bf88      	it	hi
   d9ba8:	4770      	bxhi	lr
   d9baa:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
   d9bae:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9bb2:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
   d9bb6:	bf18      	it	ne
   d9bb8:	4240      	negne	r0, r0
   d9bba:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d9bbe:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
   d9bc2:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
   d9bc6:	bf18      	it	ne
   d9bc8:	4249      	negne	r1, r1
   d9bca:	ea92 0f03 	teq	r2, r3
   d9bce:	d03f      	beq.n	d9c50 <__addsf3+0xd8>
   d9bd0:	f1a2 0201 	sub.w	r2, r2, #1
   d9bd4:	fa41 fc03 	asr.w	ip, r1, r3
   d9bd8:	eb10 000c 	adds.w	r0, r0, ip
   d9bdc:	f1c3 0320 	rsb	r3, r3, #32
   d9be0:	fa01 f103 	lsl.w	r1, r1, r3
   d9be4:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d9be8:	d502      	bpl.n	d9bf0 <__addsf3+0x78>
   d9bea:	4249      	negs	r1, r1
   d9bec:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
   d9bf0:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
   d9bf4:	d313      	bcc.n	d9c1e <__addsf3+0xa6>
   d9bf6:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
   d9bfa:	d306      	bcc.n	d9c0a <__addsf3+0x92>
   d9bfc:	0840      	lsrs	r0, r0, #1
   d9bfe:	ea4f 0131 	mov.w	r1, r1, rrx
   d9c02:	f102 0201 	add.w	r2, r2, #1
   d9c06:	2afe      	cmp	r2, #254	; 0xfe
   d9c08:	d251      	bcs.n	d9cae <__addsf3+0x136>
   d9c0a:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
   d9c0e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
   d9c12:	bf08      	it	eq
   d9c14:	f020 0001 	biceq.w	r0, r0, #1
   d9c18:	ea40 0003 	orr.w	r0, r0, r3
   d9c1c:	4770      	bx	lr
   d9c1e:	0049      	lsls	r1, r1, #1
   d9c20:	eb40 0000 	adc.w	r0, r0, r0
   d9c24:	3a01      	subs	r2, #1
   d9c26:	bf28      	it	cs
   d9c28:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
   d9c2c:	d2ed      	bcs.n	d9c0a <__addsf3+0x92>
   d9c2e:	fab0 fc80 	clz	ip, r0
   d9c32:	f1ac 0c08 	sub.w	ip, ip, #8
   d9c36:	ebb2 020c 	subs.w	r2, r2, ip
   d9c3a:	fa00 f00c 	lsl.w	r0, r0, ip
   d9c3e:	bfaa      	itet	ge
   d9c40:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
   d9c44:	4252      	neglt	r2, r2
   d9c46:	4318      	orrge	r0, r3
   d9c48:	bfbc      	itt	lt
   d9c4a:	40d0      	lsrlt	r0, r2
   d9c4c:	4318      	orrlt	r0, r3
   d9c4e:	4770      	bx	lr
   d9c50:	f092 0f00 	teq	r2, #0
   d9c54:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
   d9c58:	bf06      	itte	eq
   d9c5a:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
   d9c5e:	3201      	addeq	r2, #1
   d9c60:	3b01      	subne	r3, #1
   d9c62:	e7b5      	b.n	d9bd0 <__addsf3+0x58>
   d9c64:	ea4f 0341 	mov.w	r3, r1, lsl #1
   d9c68:	ea7f 6c22 	mvns.w	ip, r2, asr #24
   d9c6c:	bf18      	it	ne
   d9c6e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
   d9c72:	d021      	beq.n	d9cb8 <__addsf3+0x140>
   d9c74:	ea92 0f03 	teq	r2, r3
   d9c78:	d004      	beq.n	d9c84 <__addsf3+0x10c>
   d9c7a:	f092 0f00 	teq	r2, #0
   d9c7e:	bf08      	it	eq
   d9c80:	4608      	moveq	r0, r1
   d9c82:	4770      	bx	lr
   d9c84:	ea90 0f01 	teq	r0, r1
   d9c88:	bf1c      	itt	ne
   d9c8a:	2000      	movne	r0, #0
   d9c8c:	4770      	bxne	lr
   d9c8e:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
   d9c92:	d104      	bne.n	d9c9e <__addsf3+0x126>
   d9c94:	0040      	lsls	r0, r0, #1
   d9c96:	bf28      	it	cs
   d9c98:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
   d9c9c:	4770      	bx	lr
   d9c9e:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
   d9ca2:	bf3c      	itt	cc
   d9ca4:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
   d9ca8:	4770      	bxcc	lr
   d9caa:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
   d9cae:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
   d9cb2:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d9cb6:	4770      	bx	lr
   d9cb8:	ea7f 6222 	mvns.w	r2, r2, asr #24
   d9cbc:	bf16      	itet	ne
   d9cbe:	4608      	movne	r0, r1
   d9cc0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
   d9cc4:	4601      	movne	r1, r0
   d9cc6:	0242      	lsls	r2, r0, #9
   d9cc8:	bf06      	itte	eq
   d9cca:	ea5f 2341 	movseq.w	r3, r1, lsl #9
   d9cce:	ea90 0f01 	teqeq	r0, r1
   d9cd2:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
   d9cd6:	4770      	bx	lr

000d9cd8 <__aeabi_ui2f>:
   d9cd8:	f04f 0300 	mov.w	r3, #0
   d9cdc:	e004      	b.n	d9ce8 <__aeabi_i2f+0x8>
   d9cde:	bf00      	nop

000d9ce0 <__aeabi_i2f>:
   d9ce0:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
   d9ce4:	bf48      	it	mi
   d9ce6:	4240      	negmi	r0, r0
   d9ce8:	ea5f 0c00 	movs.w	ip, r0
   d9cec:	bf08      	it	eq
   d9cee:	4770      	bxeq	lr
   d9cf0:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
   d9cf4:	4601      	mov	r1, r0
   d9cf6:	f04f 0000 	mov.w	r0, #0
   d9cfa:	e01c      	b.n	d9d36 <__aeabi_l2f+0x2a>

000d9cfc <__aeabi_ul2f>:
   d9cfc:	ea50 0201 	orrs.w	r2, r0, r1
   d9d00:	bf08      	it	eq
   d9d02:	4770      	bxeq	lr
   d9d04:	f04f 0300 	mov.w	r3, #0
   d9d08:	e00a      	b.n	d9d20 <__aeabi_l2f+0x14>
   d9d0a:	bf00      	nop

000d9d0c <__aeabi_l2f>:
   d9d0c:	ea50 0201 	orrs.w	r2, r0, r1
   d9d10:	bf08      	it	eq
   d9d12:	4770      	bxeq	lr
   d9d14:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
   d9d18:	d502      	bpl.n	d9d20 <__aeabi_l2f+0x14>
   d9d1a:	4240      	negs	r0, r0
   d9d1c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9d20:	ea5f 0c01 	movs.w	ip, r1
   d9d24:	bf02      	ittt	eq
   d9d26:	4684      	moveq	ip, r0
   d9d28:	4601      	moveq	r1, r0
   d9d2a:	2000      	moveq	r0, #0
   d9d2c:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
   d9d30:	bf08      	it	eq
   d9d32:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
   d9d36:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
   d9d3a:	fabc f28c 	clz	r2, ip
   d9d3e:	3a08      	subs	r2, #8
   d9d40:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
   d9d44:	db10      	blt.n	d9d68 <__aeabi_l2f+0x5c>
   d9d46:	fa01 fc02 	lsl.w	ip, r1, r2
   d9d4a:	4463      	add	r3, ip
   d9d4c:	fa00 fc02 	lsl.w	ip, r0, r2
   d9d50:	f1c2 0220 	rsb	r2, r2, #32
   d9d54:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d9d58:	fa20 f202 	lsr.w	r2, r0, r2
   d9d5c:	eb43 0002 	adc.w	r0, r3, r2
   d9d60:	bf08      	it	eq
   d9d62:	f020 0001 	biceq.w	r0, r0, #1
   d9d66:	4770      	bx	lr
   d9d68:	f102 0220 	add.w	r2, r2, #32
   d9d6c:	fa01 fc02 	lsl.w	ip, r1, r2
   d9d70:	f1c2 0220 	rsb	r2, r2, #32
   d9d74:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
   d9d78:	fa21 f202 	lsr.w	r2, r1, r2
   d9d7c:	eb43 0002 	adc.w	r0, r3, r2
   d9d80:	bf08      	it	eq
   d9d82:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
   d9d86:	4770      	bx	lr

000d9d88 <__aeabi_ldivmod>:
   d9d88:	b97b      	cbnz	r3, d9daa <__aeabi_ldivmod+0x22>
   d9d8a:	b972      	cbnz	r2, d9daa <__aeabi_ldivmod+0x22>
   d9d8c:	2900      	cmp	r1, #0
   d9d8e:	bfbe      	ittt	lt
   d9d90:	2000      	movlt	r0, #0
   d9d92:	f04f 4100 	movlt.w	r1, #2147483648	; 0x80000000
   d9d96:	e006      	blt.n	d9da6 <__aeabi_ldivmod+0x1e>
   d9d98:	bf08      	it	eq
   d9d9a:	2800      	cmpeq	r0, #0
   d9d9c:	bf1c      	itt	ne
   d9d9e:	f06f 4100 	mvnne.w	r1, #2147483648	; 0x80000000
   d9da2:	f04f 30ff 	movne.w	r0, #4294967295
   d9da6:	f000 b9d7 	b.w	da158 <__aeabi_idiv0>
   d9daa:	f1ad 0c08 	sub.w	ip, sp, #8
   d9dae:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9db2:	2900      	cmp	r1, #0
   d9db4:	db09      	blt.n	d9dca <__aeabi_ldivmod+0x42>
   d9db6:	2b00      	cmp	r3, #0
   d9db8:	db1a      	blt.n	d9df0 <__aeabi_ldivmod+0x68>
   d9dba:	f000 f86b 	bl	d9e94 <__udivmoddi4>
   d9dbe:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9dc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9dc6:	b004      	add	sp, #16
   d9dc8:	4770      	bx	lr
   d9dca:	4240      	negs	r0, r0
   d9dcc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9dd0:	2b00      	cmp	r3, #0
   d9dd2:	db1b      	blt.n	d9e0c <__aeabi_ldivmod+0x84>
   d9dd4:	f000 f85e 	bl	d9e94 <__udivmoddi4>
   d9dd8:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9ddc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9de0:	b004      	add	sp, #16
   d9de2:	4240      	negs	r0, r0
   d9de4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9de8:	4252      	negs	r2, r2
   d9dea:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9dee:	4770      	bx	lr
   d9df0:	4252      	negs	r2, r2
   d9df2:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9df6:	f000 f84d 	bl	d9e94 <__udivmoddi4>
   d9dfa:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9dfe:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9e02:	b004      	add	sp, #16
   d9e04:	4240      	negs	r0, r0
   d9e06:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d9e0a:	4770      	bx	lr
   d9e0c:	4252      	negs	r2, r2
   d9e0e:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9e12:	f000 f83f 	bl	d9e94 <__udivmoddi4>
   d9e16:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9e1a:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9e1e:	b004      	add	sp, #16
   d9e20:	4252      	negs	r2, r2
   d9e22:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d9e26:	4770      	bx	lr

000d9e28 <__aeabi_uldivmod>:
   d9e28:	b953      	cbnz	r3, d9e40 <__aeabi_uldivmod+0x18>
   d9e2a:	b94a      	cbnz	r2, d9e40 <__aeabi_uldivmod+0x18>
   d9e2c:	2900      	cmp	r1, #0
   d9e2e:	bf08      	it	eq
   d9e30:	2800      	cmpeq	r0, #0
   d9e32:	bf1c      	itt	ne
   d9e34:	f04f 31ff 	movne.w	r1, #4294967295
   d9e38:	f04f 30ff 	movne.w	r0, #4294967295
   d9e3c:	f000 b98c 	b.w	da158 <__aeabi_idiv0>
   d9e40:	f1ad 0c08 	sub.w	ip, sp, #8
   d9e44:	e96d ce04 	strd	ip, lr, [sp, #-16]!
   d9e48:	f000 f824 	bl	d9e94 <__udivmoddi4>
   d9e4c:	f8dd e004 	ldr.w	lr, [sp, #4]
   d9e50:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
   d9e54:	b004      	add	sp, #16
   d9e56:	4770      	bx	lr

000d9e58 <__aeabi_d2ulz>:
   d9e58:	b5d0      	push	{r4, r6, r7, lr}
   d9e5a:	4b0c      	ldr	r3, [pc, #48]	; (d9e8c <__aeabi_d2ulz+0x34>)
   d9e5c:	2200      	movs	r2, #0
   d9e5e:	4606      	mov	r6, r0
   d9e60:	460f      	mov	r7, r1
   d9e62:	f7ff fb63 	bl	d952c <__aeabi_dmul>
   d9e66:	f7ff fe11 	bl	d9a8c <__aeabi_d2uiz>
   d9e6a:	4604      	mov	r4, r0
   d9e6c:	f7ff fae4 	bl	d9438 <__aeabi_ui2d>
   d9e70:	4b07      	ldr	r3, [pc, #28]	; (d9e90 <__aeabi_d2ulz+0x38>)
   d9e72:	2200      	movs	r2, #0
   d9e74:	f7ff fb5a 	bl	d952c <__aeabi_dmul>
   d9e78:	4602      	mov	r2, r0
   d9e7a:	460b      	mov	r3, r1
   d9e7c:	4630      	mov	r0, r6
   d9e7e:	4639      	mov	r1, r7
   d9e80:	f7ff f99c 	bl	d91bc <__aeabi_dsub>
   d9e84:	f7ff fe02 	bl	d9a8c <__aeabi_d2uiz>
   d9e88:	4621      	mov	r1, r4
   d9e8a:	bdd0      	pop	{r4, r6, r7, pc}
   d9e8c:	3df00000 	.word	0x3df00000
   d9e90:	41f00000 	.word	0x41f00000

000d9e94 <__udivmoddi4>:
   d9e94:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d9e98:	9d08      	ldr	r5, [sp, #32]
   d9e9a:	4604      	mov	r4, r0
   d9e9c:	468c      	mov	ip, r1
   d9e9e:	2b00      	cmp	r3, #0
   d9ea0:	f040 8083 	bne.w	d9faa <__udivmoddi4+0x116>
   d9ea4:	428a      	cmp	r2, r1
   d9ea6:	4617      	mov	r7, r2
   d9ea8:	d947      	bls.n	d9f3a <__udivmoddi4+0xa6>
   d9eaa:	fab2 f282 	clz	r2, r2
   d9eae:	b142      	cbz	r2, d9ec2 <__udivmoddi4+0x2e>
   d9eb0:	f1c2 0020 	rsb	r0, r2, #32
   d9eb4:	fa24 f000 	lsr.w	r0, r4, r0
   d9eb8:	4091      	lsls	r1, r2
   d9eba:	4097      	lsls	r7, r2
   d9ebc:	ea40 0c01 	orr.w	ip, r0, r1
   d9ec0:	4094      	lsls	r4, r2
   d9ec2:	ea4f 4817 	mov.w	r8, r7, lsr #16
   d9ec6:	0c23      	lsrs	r3, r4, #16
   d9ec8:	fbbc f6f8 	udiv	r6, ip, r8
   d9ecc:	fa1f fe87 	uxth.w	lr, r7
   d9ed0:	fb08 c116 	mls	r1, r8, r6, ip
   d9ed4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   d9ed8:	fb06 f10e 	mul.w	r1, r6, lr
   d9edc:	4299      	cmp	r1, r3
   d9ede:	d909      	bls.n	d9ef4 <__udivmoddi4+0x60>
   d9ee0:	18fb      	adds	r3, r7, r3
   d9ee2:	f106 30ff 	add.w	r0, r6, #4294967295
   d9ee6:	f080 8119 	bcs.w	da11c <__udivmoddi4+0x288>
   d9eea:	4299      	cmp	r1, r3
   d9eec:	f240 8116 	bls.w	da11c <__udivmoddi4+0x288>
   d9ef0:	3e02      	subs	r6, #2
   d9ef2:	443b      	add	r3, r7
   d9ef4:	1a5b      	subs	r3, r3, r1
   d9ef6:	b2a4      	uxth	r4, r4
   d9ef8:	fbb3 f0f8 	udiv	r0, r3, r8
   d9efc:	fb08 3310 	mls	r3, r8, r0, r3
   d9f00:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
   d9f04:	fb00 fe0e 	mul.w	lr, r0, lr
   d9f08:	45a6      	cmp	lr, r4
   d9f0a:	d909      	bls.n	d9f20 <__udivmoddi4+0x8c>
   d9f0c:	193c      	adds	r4, r7, r4
   d9f0e:	f100 33ff 	add.w	r3, r0, #4294967295
   d9f12:	f080 8105 	bcs.w	da120 <__udivmoddi4+0x28c>
   d9f16:	45a6      	cmp	lr, r4
   d9f18:	f240 8102 	bls.w	da120 <__udivmoddi4+0x28c>
   d9f1c:	3802      	subs	r0, #2
   d9f1e:	443c      	add	r4, r7
   d9f20:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
   d9f24:	eba4 040e 	sub.w	r4, r4, lr
   d9f28:	2600      	movs	r6, #0
   d9f2a:	b11d      	cbz	r5, d9f34 <__udivmoddi4+0xa0>
   d9f2c:	40d4      	lsrs	r4, r2
   d9f2e:	2300      	movs	r3, #0
   d9f30:	e9c5 4300 	strd	r4, r3, [r5]
   d9f34:	4631      	mov	r1, r6
   d9f36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9f3a:	b902      	cbnz	r2, d9f3e <__udivmoddi4+0xaa>
   d9f3c:	deff      	udf	#255	; 0xff
   d9f3e:	fab2 f282 	clz	r2, r2
   d9f42:	2a00      	cmp	r2, #0
   d9f44:	d150      	bne.n	d9fe8 <__udivmoddi4+0x154>
   d9f46:	1bcb      	subs	r3, r1, r7
   d9f48:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d9f4c:	fa1f f887 	uxth.w	r8, r7
   d9f50:	2601      	movs	r6, #1
   d9f52:	fbb3 fcfe 	udiv	ip, r3, lr
   d9f56:	0c21      	lsrs	r1, r4, #16
   d9f58:	fb0e 331c 	mls	r3, lr, ip, r3
   d9f5c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   d9f60:	fb08 f30c 	mul.w	r3, r8, ip
   d9f64:	428b      	cmp	r3, r1
   d9f66:	d907      	bls.n	d9f78 <__udivmoddi4+0xe4>
   d9f68:	1879      	adds	r1, r7, r1
   d9f6a:	f10c 30ff 	add.w	r0, ip, #4294967295
   d9f6e:	d202      	bcs.n	d9f76 <__udivmoddi4+0xe2>
   d9f70:	428b      	cmp	r3, r1
   d9f72:	f200 80e9 	bhi.w	da148 <__udivmoddi4+0x2b4>
   d9f76:	4684      	mov	ip, r0
   d9f78:	1ac9      	subs	r1, r1, r3
   d9f7a:	b2a3      	uxth	r3, r4
   d9f7c:	fbb1 f0fe 	udiv	r0, r1, lr
   d9f80:	fb0e 1110 	mls	r1, lr, r0, r1
   d9f84:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
   d9f88:	fb08 f800 	mul.w	r8, r8, r0
   d9f8c:	45a0      	cmp	r8, r4
   d9f8e:	d907      	bls.n	d9fa0 <__udivmoddi4+0x10c>
   d9f90:	193c      	adds	r4, r7, r4
   d9f92:	f100 33ff 	add.w	r3, r0, #4294967295
   d9f96:	d202      	bcs.n	d9f9e <__udivmoddi4+0x10a>
   d9f98:	45a0      	cmp	r8, r4
   d9f9a:	f200 80d9 	bhi.w	da150 <__udivmoddi4+0x2bc>
   d9f9e:	4618      	mov	r0, r3
   d9fa0:	eba4 0408 	sub.w	r4, r4, r8
   d9fa4:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
   d9fa8:	e7bf      	b.n	d9f2a <__udivmoddi4+0x96>
   d9faa:	428b      	cmp	r3, r1
   d9fac:	d909      	bls.n	d9fc2 <__udivmoddi4+0x12e>
   d9fae:	2d00      	cmp	r5, #0
   d9fb0:	f000 80b1 	beq.w	da116 <__udivmoddi4+0x282>
   d9fb4:	2600      	movs	r6, #0
   d9fb6:	e9c5 0100 	strd	r0, r1, [r5]
   d9fba:	4630      	mov	r0, r6
   d9fbc:	4631      	mov	r1, r6
   d9fbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d9fc2:	fab3 f683 	clz	r6, r3
   d9fc6:	2e00      	cmp	r6, #0
   d9fc8:	d14a      	bne.n	da060 <__udivmoddi4+0x1cc>
   d9fca:	428b      	cmp	r3, r1
   d9fcc:	d302      	bcc.n	d9fd4 <__udivmoddi4+0x140>
   d9fce:	4282      	cmp	r2, r0
   d9fd0:	f200 80b8 	bhi.w	da144 <__udivmoddi4+0x2b0>
   d9fd4:	1a84      	subs	r4, r0, r2
   d9fd6:	eb61 0103 	sbc.w	r1, r1, r3
   d9fda:	2001      	movs	r0, #1
   d9fdc:	468c      	mov	ip, r1
   d9fde:	2d00      	cmp	r5, #0
   d9fe0:	d0a8      	beq.n	d9f34 <__udivmoddi4+0xa0>
   d9fe2:	e9c5 4c00 	strd	r4, ip, [r5]
   d9fe6:	e7a5      	b.n	d9f34 <__udivmoddi4+0xa0>
   d9fe8:	f1c2 0320 	rsb	r3, r2, #32
   d9fec:	fa20 f603 	lsr.w	r6, r0, r3
   d9ff0:	4097      	lsls	r7, r2
   d9ff2:	fa01 f002 	lsl.w	r0, r1, r2
   d9ff6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
   d9ffa:	40d9      	lsrs	r1, r3
   d9ffc:	4330      	orrs	r0, r6
   d9ffe:	0c03      	lsrs	r3, r0, #16
   da000:	fbb1 f6fe 	udiv	r6, r1, lr
   da004:	fa1f f887 	uxth.w	r8, r7
   da008:	fb0e 1116 	mls	r1, lr, r6, r1
   da00c:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
   da010:	fb06 f108 	mul.w	r1, r6, r8
   da014:	4299      	cmp	r1, r3
   da016:	fa04 f402 	lsl.w	r4, r4, r2
   da01a:	d909      	bls.n	da030 <__udivmoddi4+0x19c>
   da01c:	18fb      	adds	r3, r7, r3
   da01e:	f106 3cff 	add.w	ip, r6, #4294967295
   da022:	f080 808d 	bcs.w	da140 <__udivmoddi4+0x2ac>
   da026:	4299      	cmp	r1, r3
   da028:	f240 808a 	bls.w	da140 <__udivmoddi4+0x2ac>
   da02c:	3e02      	subs	r6, #2
   da02e:	443b      	add	r3, r7
   da030:	1a5b      	subs	r3, r3, r1
   da032:	b281      	uxth	r1, r0
   da034:	fbb3 f0fe 	udiv	r0, r3, lr
   da038:	fb0e 3310 	mls	r3, lr, r0, r3
   da03c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
   da040:	fb00 f308 	mul.w	r3, r0, r8
   da044:	428b      	cmp	r3, r1
   da046:	d907      	bls.n	da058 <__udivmoddi4+0x1c4>
   da048:	1879      	adds	r1, r7, r1
   da04a:	f100 3cff 	add.w	ip, r0, #4294967295
   da04e:	d273      	bcs.n	da138 <__udivmoddi4+0x2a4>
   da050:	428b      	cmp	r3, r1
   da052:	d971      	bls.n	da138 <__udivmoddi4+0x2a4>
   da054:	3802      	subs	r0, #2
   da056:	4439      	add	r1, r7
   da058:	1acb      	subs	r3, r1, r3
   da05a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
   da05e:	e778      	b.n	d9f52 <__udivmoddi4+0xbe>
   da060:	f1c6 0c20 	rsb	ip, r6, #32
   da064:	fa03 f406 	lsl.w	r4, r3, r6
   da068:	fa22 f30c 	lsr.w	r3, r2, ip
   da06c:	431c      	orrs	r4, r3
   da06e:	fa20 f70c 	lsr.w	r7, r0, ip
   da072:	fa01 f306 	lsl.w	r3, r1, r6
   da076:	ea4f 4e14 	mov.w	lr, r4, lsr #16
   da07a:	fa21 f10c 	lsr.w	r1, r1, ip
   da07e:	431f      	orrs	r7, r3
   da080:	0c3b      	lsrs	r3, r7, #16
   da082:	fbb1 f9fe 	udiv	r9, r1, lr
   da086:	fa1f f884 	uxth.w	r8, r4
   da08a:	fb0e 1119 	mls	r1, lr, r9, r1
   da08e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
   da092:	fb09 fa08 	mul.w	sl, r9, r8
   da096:	458a      	cmp	sl, r1
   da098:	fa02 f206 	lsl.w	r2, r2, r6
   da09c:	fa00 f306 	lsl.w	r3, r0, r6
   da0a0:	d908      	bls.n	da0b4 <__udivmoddi4+0x220>
   da0a2:	1861      	adds	r1, r4, r1
   da0a4:	f109 30ff 	add.w	r0, r9, #4294967295
   da0a8:	d248      	bcs.n	da13c <__udivmoddi4+0x2a8>
   da0aa:	458a      	cmp	sl, r1
   da0ac:	d946      	bls.n	da13c <__udivmoddi4+0x2a8>
   da0ae:	f1a9 0902 	sub.w	r9, r9, #2
   da0b2:	4421      	add	r1, r4
   da0b4:	eba1 010a 	sub.w	r1, r1, sl
   da0b8:	b2bf      	uxth	r7, r7
   da0ba:	fbb1 f0fe 	udiv	r0, r1, lr
   da0be:	fb0e 1110 	mls	r1, lr, r0, r1
   da0c2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
   da0c6:	fb00 f808 	mul.w	r8, r0, r8
   da0ca:	45b8      	cmp	r8, r7
   da0cc:	d907      	bls.n	da0de <__udivmoddi4+0x24a>
   da0ce:	19e7      	adds	r7, r4, r7
   da0d0:	f100 31ff 	add.w	r1, r0, #4294967295
   da0d4:	d22e      	bcs.n	da134 <__udivmoddi4+0x2a0>
   da0d6:	45b8      	cmp	r8, r7
   da0d8:	d92c      	bls.n	da134 <__udivmoddi4+0x2a0>
   da0da:	3802      	subs	r0, #2
   da0dc:	4427      	add	r7, r4
   da0de:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
   da0e2:	eba7 0708 	sub.w	r7, r7, r8
   da0e6:	fba0 8902 	umull	r8, r9, r0, r2
   da0ea:	454f      	cmp	r7, r9
   da0ec:	46c6      	mov	lr, r8
   da0ee:	4649      	mov	r1, r9
   da0f0:	d31a      	bcc.n	da128 <__udivmoddi4+0x294>
   da0f2:	d017      	beq.n	da124 <__udivmoddi4+0x290>
   da0f4:	b15d      	cbz	r5, da10e <__udivmoddi4+0x27a>
   da0f6:	ebb3 020e 	subs.w	r2, r3, lr
   da0fa:	eb67 0701 	sbc.w	r7, r7, r1
   da0fe:	fa07 fc0c 	lsl.w	ip, r7, ip
   da102:	40f2      	lsrs	r2, r6
   da104:	ea4c 0202 	orr.w	r2, ip, r2
   da108:	40f7      	lsrs	r7, r6
   da10a:	e9c5 2700 	strd	r2, r7, [r5]
   da10e:	2600      	movs	r6, #0
   da110:	4631      	mov	r1, r6
   da112:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da116:	462e      	mov	r6, r5
   da118:	4628      	mov	r0, r5
   da11a:	e70b      	b.n	d9f34 <__udivmoddi4+0xa0>
   da11c:	4606      	mov	r6, r0
   da11e:	e6e9      	b.n	d9ef4 <__udivmoddi4+0x60>
   da120:	4618      	mov	r0, r3
   da122:	e6fd      	b.n	d9f20 <__udivmoddi4+0x8c>
   da124:	4543      	cmp	r3, r8
   da126:	d2e5      	bcs.n	da0f4 <__udivmoddi4+0x260>
   da128:	ebb8 0e02 	subs.w	lr, r8, r2
   da12c:	eb69 0104 	sbc.w	r1, r9, r4
   da130:	3801      	subs	r0, #1
   da132:	e7df      	b.n	da0f4 <__udivmoddi4+0x260>
   da134:	4608      	mov	r0, r1
   da136:	e7d2      	b.n	da0de <__udivmoddi4+0x24a>
   da138:	4660      	mov	r0, ip
   da13a:	e78d      	b.n	da058 <__udivmoddi4+0x1c4>
   da13c:	4681      	mov	r9, r0
   da13e:	e7b9      	b.n	da0b4 <__udivmoddi4+0x220>
   da140:	4666      	mov	r6, ip
   da142:	e775      	b.n	da030 <__udivmoddi4+0x19c>
   da144:	4630      	mov	r0, r6
   da146:	e74a      	b.n	d9fde <__udivmoddi4+0x14a>
   da148:	f1ac 0c02 	sub.w	ip, ip, #2
   da14c:	4439      	add	r1, r7
   da14e:	e713      	b.n	d9f78 <__udivmoddi4+0xe4>
   da150:	3802      	subs	r0, #2
   da152:	443c      	add	r4, r7
   da154:	e724      	b.n	d9fa0 <__udivmoddi4+0x10c>
   da156:	bf00      	nop

000da158 <__aeabi_idiv0>:
   da158:	4770      	bx	lr
   da15a:	bf00      	nop

000da15c <atol>:
   da15c:	220a      	movs	r2, #10
   da15e:	2100      	movs	r1, #0
   da160:	f000 b8fe 	b.w	da360 <strtol>

000da164 <__cxa_atexit>:
   da164:	b510      	push	{r4, lr}
   da166:	4c05      	ldr	r4, [pc, #20]	; (da17c <__cxa_atexit+0x18>)
   da168:	4613      	mov	r3, r2
   da16a:	b12c      	cbz	r4, da178 <__cxa_atexit+0x14>
   da16c:	460a      	mov	r2, r1
   da16e:	4601      	mov	r1, r0
   da170:	2002      	movs	r0, #2
   da172:	f3af 8000 	nop.w
   da176:	bd10      	pop	{r4, pc}
   da178:	4620      	mov	r0, r4
   da17a:	e7fc      	b.n	da176 <__cxa_atexit+0x12>
   da17c:	00000000 	.word	0x00000000

000da180 <memcpy>:
   da180:	440a      	add	r2, r1
   da182:	4291      	cmp	r1, r2
   da184:	f100 33ff 	add.w	r3, r0, #4294967295
   da188:	d100      	bne.n	da18c <memcpy+0xc>
   da18a:	4770      	bx	lr
   da18c:	b510      	push	{r4, lr}
   da18e:	f811 4b01 	ldrb.w	r4, [r1], #1
   da192:	f803 4f01 	strb.w	r4, [r3, #1]!
   da196:	4291      	cmp	r1, r2
   da198:	d1f9      	bne.n	da18e <memcpy+0xe>
   da19a:	bd10      	pop	{r4, pc}

000da19c <memset>:
   da19c:	4402      	add	r2, r0
   da19e:	4603      	mov	r3, r0
   da1a0:	4293      	cmp	r3, r2
   da1a2:	d100      	bne.n	da1a6 <memset+0xa>
   da1a4:	4770      	bx	lr
   da1a6:	f803 1b01 	strb.w	r1, [r3], #1
   da1aa:	e7f9      	b.n	da1a0 <memset+0x4>

000da1ac <srand>:
   da1ac:	b538      	push	{r3, r4, r5, lr}
   da1ae:	4b0d      	ldr	r3, [pc, #52]	; (da1e4 <srand+0x38>)
   da1b0:	681d      	ldr	r5, [r3, #0]
   da1b2:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da1b4:	4604      	mov	r4, r0
   da1b6:	b97b      	cbnz	r3, da1d8 <srand+0x2c>
   da1b8:	2018      	movs	r0, #24
   da1ba:	f7fc f927 	bl	d640c <malloc>
   da1be:	4a0a      	ldr	r2, [pc, #40]	; (da1e8 <srand+0x3c>)
   da1c0:	4b0a      	ldr	r3, [pc, #40]	; (da1ec <srand+0x40>)
   da1c2:	63a8      	str	r0, [r5, #56]	; 0x38
   da1c4:	e9c0 2300 	strd	r2, r3, [r0]
   da1c8:	4b09      	ldr	r3, [pc, #36]	; (da1f0 <srand+0x44>)
   da1ca:	6083      	str	r3, [r0, #8]
   da1cc:	230b      	movs	r3, #11
   da1ce:	8183      	strh	r3, [r0, #12]
   da1d0:	2201      	movs	r2, #1
   da1d2:	2300      	movs	r3, #0
   da1d4:	e9c0 2304 	strd	r2, r3, [r0, #16]
   da1d8:	6bab      	ldr	r3, [r5, #56]	; 0x38
   da1da:	2200      	movs	r2, #0
   da1dc:	611c      	str	r4, [r3, #16]
   da1de:	615a      	str	r2, [r3, #20]
   da1e0:	bd38      	pop	{r3, r4, r5, pc}
   da1e2:	bf00      	nop
   da1e4:	2003e3a0 	.word	0x2003e3a0
   da1e8:	abcd330e 	.word	0xabcd330e
   da1ec:	e66d1234 	.word	0xe66d1234
   da1f0:	0005deec 	.word	0x0005deec

000da1f4 <strcat>:
   da1f4:	b510      	push	{r4, lr}
   da1f6:	4602      	mov	r2, r0
   da1f8:	7814      	ldrb	r4, [r2, #0]
   da1fa:	4613      	mov	r3, r2
   da1fc:	3201      	adds	r2, #1
   da1fe:	2c00      	cmp	r4, #0
   da200:	d1fa      	bne.n	da1f8 <strcat+0x4>
   da202:	3b01      	subs	r3, #1
   da204:	f811 2b01 	ldrb.w	r2, [r1], #1
   da208:	f803 2f01 	strb.w	r2, [r3, #1]!
   da20c:	2a00      	cmp	r2, #0
   da20e:	d1f9      	bne.n	da204 <strcat+0x10>
   da210:	bd10      	pop	{r4, pc}

000da212 <strcmp>:
   da212:	f810 2b01 	ldrb.w	r2, [r0], #1
   da216:	f811 3b01 	ldrb.w	r3, [r1], #1
   da21a:	2a01      	cmp	r2, #1
   da21c:	bf28      	it	cs
   da21e:	429a      	cmpcs	r2, r3
   da220:	d0f7      	beq.n	da212 <strcmp>
   da222:	1ad0      	subs	r0, r2, r3
   da224:	4770      	bx	lr

000da226 <strcpy>:
   da226:	4603      	mov	r3, r0
   da228:	f811 2b01 	ldrb.w	r2, [r1], #1
   da22c:	f803 2b01 	strb.w	r2, [r3], #1
   da230:	2a00      	cmp	r2, #0
   da232:	d1f9      	bne.n	da228 <strcpy+0x2>
   da234:	4770      	bx	lr

000da236 <strlen>:
   da236:	4603      	mov	r3, r0
   da238:	f813 2b01 	ldrb.w	r2, [r3], #1
   da23c:	2a00      	cmp	r2, #0
   da23e:	d1fb      	bne.n	da238 <strlen+0x2>
   da240:	1a18      	subs	r0, r3, r0
   da242:	3801      	subs	r0, #1
   da244:	4770      	bx	lr

000da246 <strncpy>:
   da246:	b510      	push	{r4, lr}
   da248:	3901      	subs	r1, #1
   da24a:	4603      	mov	r3, r0
   da24c:	b132      	cbz	r2, da25c <strncpy+0x16>
   da24e:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   da252:	f803 4b01 	strb.w	r4, [r3], #1
   da256:	3a01      	subs	r2, #1
   da258:	2c00      	cmp	r4, #0
   da25a:	d1f7      	bne.n	da24c <strncpy+0x6>
   da25c:	441a      	add	r2, r3
   da25e:	2100      	movs	r1, #0
   da260:	4293      	cmp	r3, r2
   da262:	d100      	bne.n	da266 <strncpy+0x20>
   da264:	bd10      	pop	{r4, pc}
   da266:	f803 1b01 	strb.w	r1, [r3], #1
   da26a:	e7f9      	b.n	da260 <strncpy+0x1a>

000da26c <_strtol_l.isra.0>:
   da26c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   da270:	4e3a      	ldr	r6, [pc, #232]	; (da35c <_strtol_l.isra.0+0xf0>)
   da272:	4686      	mov	lr, r0
   da274:	468c      	mov	ip, r1
   da276:	4660      	mov	r0, ip
   da278:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da27c:	5da5      	ldrb	r5, [r4, r6]
   da27e:	f015 0508 	ands.w	r5, r5, #8
   da282:	d1f8      	bne.n	da276 <_strtol_l.isra.0+0xa>
   da284:	2c2d      	cmp	r4, #45	; 0x2d
   da286:	d133      	bne.n	da2f0 <_strtol_l.isra.0+0x84>
   da288:	f89c 4000 	ldrb.w	r4, [ip]
   da28c:	f04f 0801 	mov.w	r8, #1
   da290:	f100 0c02 	add.w	ip, r0, #2
   da294:	2b00      	cmp	r3, #0
   da296:	d05c      	beq.n	da352 <_strtol_l.isra.0+0xe6>
   da298:	2b10      	cmp	r3, #16
   da29a:	d10c      	bne.n	da2b6 <_strtol_l.isra.0+0x4a>
   da29c:	2c30      	cmp	r4, #48	; 0x30
   da29e:	d10a      	bne.n	da2b6 <_strtol_l.isra.0+0x4a>
   da2a0:	f89c 0000 	ldrb.w	r0, [ip]
   da2a4:	f000 00df 	and.w	r0, r0, #223	; 0xdf
   da2a8:	2858      	cmp	r0, #88	; 0x58
   da2aa:	d14d      	bne.n	da348 <_strtol_l.isra.0+0xdc>
   da2ac:	f89c 4001 	ldrb.w	r4, [ip, #1]
   da2b0:	2310      	movs	r3, #16
   da2b2:	f10c 0c02 	add.w	ip, ip, #2
   da2b6:	f108 4700 	add.w	r7, r8, #2147483648	; 0x80000000
   da2ba:	3f01      	subs	r7, #1
   da2bc:	2600      	movs	r6, #0
   da2be:	fbb7 f9f3 	udiv	r9, r7, r3
   da2c2:	4630      	mov	r0, r6
   da2c4:	fb03 7a19 	mls	sl, r3, r9, r7
   da2c8:	f1a4 0530 	sub.w	r5, r4, #48	; 0x30
   da2cc:	2d09      	cmp	r5, #9
   da2ce:	d818      	bhi.n	da302 <_strtol_l.isra.0+0x96>
   da2d0:	462c      	mov	r4, r5
   da2d2:	42a3      	cmp	r3, r4
   da2d4:	dd24      	ble.n	da320 <_strtol_l.isra.0+0xb4>
   da2d6:	1c75      	adds	r5, r6, #1
   da2d8:	d007      	beq.n	da2ea <_strtol_l.isra.0+0x7e>
   da2da:	4581      	cmp	r9, r0
   da2dc:	d31d      	bcc.n	da31a <_strtol_l.isra.0+0xae>
   da2de:	d101      	bne.n	da2e4 <_strtol_l.isra.0+0x78>
   da2e0:	45a2      	cmp	sl, r4
   da2e2:	db1a      	blt.n	da31a <_strtol_l.isra.0+0xae>
   da2e4:	fb00 4003 	mla	r0, r0, r3, r4
   da2e8:	2601      	movs	r6, #1
   da2ea:	f81c 4b01 	ldrb.w	r4, [ip], #1
   da2ee:	e7eb      	b.n	da2c8 <_strtol_l.isra.0+0x5c>
   da2f0:	2c2b      	cmp	r4, #43	; 0x2b
   da2f2:	bf08      	it	eq
   da2f4:	f89c 4000 	ldrbeq.w	r4, [ip]
   da2f8:	46a8      	mov	r8, r5
   da2fa:	bf08      	it	eq
   da2fc:	f100 0c02 	addeq.w	ip, r0, #2
   da300:	e7c8      	b.n	da294 <_strtol_l.isra.0+0x28>
   da302:	f1a4 0541 	sub.w	r5, r4, #65	; 0x41
   da306:	2d19      	cmp	r5, #25
   da308:	d801      	bhi.n	da30e <_strtol_l.isra.0+0xa2>
   da30a:	3c37      	subs	r4, #55	; 0x37
   da30c:	e7e1      	b.n	da2d2 <_strtol_l.isra.0+0x66>
   da30e:	f1a4 0561 	sub.w	r5, r4, #97	; 0x61
   da312:	2d19      	cmp	r5, #25
   da314:	d804      	bhi.n	da320 <_strtol_l.isra.0+0xb4>
   da316:	3c57      	subs	r4, #87	; 0x57
   da318:	e7db      	b.n	da2d2 <_strtol_l.isra.0+0x66>
   da31a:	f04f 36ff 	mov.w	r6, #4294967295
   da31e:	e7e4      	b.n	da2ea <_strtol_l.isra.0+0x7e>
   da320:	1c73      	adds	r3, r6, #1
   da322:	d106      	bne.n	da332 <_strtol_l.isra.0+0xc6>
   da324:	2322      	movs	r3, #34	; 0x22
   da326:	f8ce 3000 	str.w	r3, [lr]
   da32a:	4638      	mov	r0, r7
   da32c:	b942      	cbnz	r2, da340 <_strtol_l.isra.0+0xd4>
   da32e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   da332:	f1b8 0f00 	cmp.w	r8, #0
   da336:	d000      	beq.n	da33a <_strtol_l.isra.0+0xce>
   da338:	4240      	negs	r0, r0
   da33a:	2a00      	cmp	r2, #0
   da33c:	d0f7      	beq.n	da32e <_strtol_l.isra.0+0xc2>
   da33e:	b10e      	cbz	r6, da344 <_strtol_l.isra.0+0xd8>
   da340:	f10c 31ff 	add.w	r1, ip, #4294967295
   da344:	6011      	str	r1, [r2, #0]
   da346:	e7f2      	b.n	da32e <_strtol_l.isra.0+0xc2>
   da348:	2430      	movs	r4, #48	; 0x30
   da34a:	2b00      	cmp	r3, #0
   da34c:	d1b3      	bne.n	da2b6 <_strtol_l.isra.0+0x4a>
   da34e:	2308      	movs	r3, #8
   da350:	e7b1      	b.n	da2b6 <_strtol_l.isra.0+0x4a>
   da352:	2c30      	cmp	r4, #48	; 0x30
   da354:	d0a4      	beq.n	da2a0 <_strtol_l.isra.0+0x34>
   da356:	230a      	movs	r3, #10
   da358:	e7ad      	b.n	da2b6 <_strtol_l.isra.0+0x4a>
   da35a:	bf00      	nop
   da35c:	000da849 	.word	0x000da849

000da360 <strtol>:
   da360:	4613      	mov	r3, r2
   da362:	460a      	mov	r2, r1
   da364:	4601      	mov	r1, r0
   da366:	4802      	ldr	r0, [pc, #8]	; (da370 <strtol+0x10>)
   da368:	6800      	ldr	r0, [r0, #0]
   da36a:	f7ff bf7f 	b.w	da26c <_strtol_l.isra.0>
   da36e:	bf00      	nop
   da370:	2003e3a0 	.word	0x2003e3a0

000da374 <dynalib_user>:
   da374:	000d4021 000d405d 000d4085 000d4089     !@..]@...@...@..
   da384:	00000000 66352e25 25252500 00583230     ....%.5f.%%%02X.
   da394:	50545448 312e312f 69706100 6968742e     HTTP/1.1.api.thi
   da3a4:	7073676e 2e6b6165 006d6f63 61656826     ngspeak.com.&hea
   da3b4:	73726564 6c61663d 50006573 2054534f     ders=false.POST 
   da3c4:	6470752f 20657461 50545448 312e312f     /update HTTP/1.1
   da3d4:	48000a0d 3a74736f 69706120 6968742e     ...Host: api.thi
   da3e4:	7073676e 2e6b6165 0d6d6f63 6f43000a     ngspeak.com...Co
   da3f4:	63656e6e 6e6f6974 6c63203a 0d65736f     nnection: close.
   da404:	7355000a 412d7265 746e6567 7400203a     ..User-Agent: .t
   da414:	62696c73 6472612d 6f6e6975 352e312f     slib-arduino/1.5
   da424:	61702820 63697472 6120656c 6e6f6772      (particle argon
   da434:	2d580029 4e494854 45505347 50414b41     ).X-THINGSPEAKAP
   da444:	59454b49 4300203a 65746e6f 542d746e     IKEY: .Content-T
   da454:	3a657079 70706120 6163696c 6e6f6974     ype: application
   da464:	772d782f 662d7777 2d6d726f 656c7275     /x-www-form-urle
   da474:	646f636e 0a0d6465 6e6f4300 746e6574     ncoded...Content
   da484:	6e654c2d 3a687467 0a0d0020 26000a0d     -Length: ......&
   da494:	65696600 6c00646c 003d7461 676e6f6c     .field.lat=.long
   da4a4:	6c65003d 74617665 3d6e6f69 61747300     =.elevation=.sta
   da4b4:	3d737574 69777400 72657474 7774003d     tus=.twitter=.tw
   da4c4:	3d746565 65726300 64657461 3d74615f     eet=.created_at=
   da4d4:	49002e00 35525a45 4b434949 34445035     ...IEZR5IICK5PD4
   da4e4:	00425638 61666564 20746c75 42534d00     8VB.default .MSB
   da4f4:	42534c00 50533c00 74655349 676e6974     .LSB.<SPISetting
   da504:	65642073 6c756166 3c003e74 53495053     s default>.<SPIS
   da514:	69747465 2073676e 75257325 20732520     ettings %s%u %s 
   da524:	45444f4d 003e7525                       MODE%u>.

000da52c <_ZTVN8particle11SPISettingsE>:
	...
   da534:	000d4f6d 000d4f41 000d4f43 4d525047     mO..AO..CO..GPRM
   da544:	50470043 00414747                       C.GPGGA.

000da54c <_ZTVN5spark13EthernetClassE>:
	...
   da554:	000d64db 000d64d1 000d64c7 000d64bd     .d...d...d...d..
   da564:	000d64b1 000d64a5 000d6499 000d6491     .d...d...d...d..
   da574:	000d6487 000d647d 000d7925              .d..}d..%y..

000da580 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   da580:	18100800 38302820                       .... (08

000da588 <_ZZNSt19_Sp_make_shared_tag5_S_tiEvE5__tag>:
	...
   da590:	00707061 252d5925 64252d6d 3a482554     app.%Y-%m-%dT%H:
   da5a0:	253a4d25 007a2553 74637361 00656d69     %M:%S%z.asctime.

000da5b0 <_ZTV9IPAddress>:
	...
   da5b8:	000d6eb1 000d6ea1 000d6ea3              .n...n...n..

000da5c4 <_ZTV9USBSerial>:
	...
   da5cc:	000d6fb3 000d701b 000d6ff1 000d6a65     .o...p...o..ej..
   da5dc:	000d6fe3 000d6fb5 000d6fc5 000d7015     .o...o...o...p..
   da5ec:	000d6fd5 000d6faf                       .o...o..

000da5f4 <_ZTV11USARTSerial>:
	...
   da5fc:	000d70bd 000d7129 000d7101 000d6a65     .p..)q...q..ej..
   da60c:	000d70d1 000d70ed 000d70df 000d70fb     .p...p...p...p..
   da61c:	000d70bf 000d70c3                       .p...p..

000da624 <_ZTV7TwoWire>:
	...
   da62c:	000d71c9 000d7213 000d71eb 000d71cb     .q...r...q...q..
   da63c:	000d71f3 000d71fb 000d7203 000d720b     .q...q...r...r..
   da64c:	69726977 7200676e 20766365 6f727265     wiring.recv erro
   da65c:	203d2072 00006425                       r = %d..

000da664 <_ZTVSt23_Sp_counted_ptr_inplaceIN9TCPClient4DataESaIS1_ELN9__gnu_cxx12_Lock_policyE0EE>:
	...
   da66c:	000d7347 000d7369 000d783b 000d7377     Gs..is..;x..ws..
   da67c:	000d7349                                Is..

000da680 <_ZTV9TCPClient>:
	...
   da688:	000d40b5 000d4101 000d72c5 000d72df     .@...A...r...r..
   da698:	000d76d1 000d7443 000d7415 000d7309     .v..Ct...t...s..
   da6a8:	000d75d9 000d74cd 000d7477 000d7785     .u...t..wt...w..
   da6b8:	000d730b 000d733d 000d72f1 000d737b     .s..=s...r..{s..
   da6c8:	000d73f5                                .s..

000da6cc <_ZTVN5spark9WiFiClassE>:
	...
   da6d4:	000d789f 000d7895 000d788b 000d7841     .x...x...x..Ax..
   da6e4:	000d787f 000d7873 000d7867 000d785f     .x..sx..gx.._x..
   da6f4:	000d7855 000d784b 000d7925              Ux..Kx..%y..

000da700 <_ZTVN5spark12NetworkClassE>:
	...
   da708:	000d78bd 000d78c7 000d78d1 000d78db     .x...x...x...x..
   da718:	000d78e5 000d78f1 000d78fd 000d7909     .x...x...x...y..
   da728:	000d7911 000d791b 000d7925              .y...y..%y..

000da734 <_ZSt7nothrow>:
	...

000da735 <_ZTSSt19_Sp_make_shared_tag>:
   da735:	39317453 5f70535f 656b616d 6168735f     St19_Sp_make_sha
   da745:	5f646572 00676174                        red_tag....

000da750 <_ZTISt19_Sp_make_shared_tag>:
   da750:	000da790 000da735                       ....5...

000da758 <_ZTIN10__cxxabiv117__class_type_infoE>:
   da758:	000da7f0 000da764 000da814              ....d.......

000da764 <_ZTSN10__cxxabiv117__class_type_infoE>:
   da764:	5f30314e 7878635f 76696261 5f373131     N10__cxxabiv117_
   da774:	616c635f 745f7373 5f657079 6f666e69     _class_type_info
   da784:	00000045                                E...

000da788 <_ZTVN10__cxxabiv117__class_type_infoE>:
   da788:	00000000 000da758 000d7be5 000d7bf9     ....X....{...{..
   da798:	000d7d8d 000d7d8d 000d7c63 000d7ba5     .}...}..c|...{..
   da7a8:	000d7c4b 000d7c0d 000d7bd9              K|...|...{..

000da7b4 <_ZTIN10__cxxabiv120__si_class_type_infoE>:
   da7b4:	000da7f0 000da7c0 000da758              ........X...

000da7c0 <_ZTSN10__cxxabiv120__si_class_type_infoE>:
   da7c0:	5f30314e 7878635f 76696261 5f303231     N10__cxxabiv120_
   da7d0:	5f69735f 73616c63 79745f73 695f6570     _si_class_type_i
   da7e0:	456f666e 00000000                       nfoE....

000da7e8 <_ZTVN10__cxxabiv120__si_class_type_infoE>:
   da7e8:	00000000 000da7b4 000d7c8d 000d7ca1     .........|...|..
   da7f8:	000d7d8d 000d7d8d 000d7c63 000d7ba5     .}...}..c|...{..
   da808:	000d7d61 000d7ced 000d7cb5              a}...|...|..

000da814 <_ZTISt9type_info>:
   da814:	000da790 000da81c                       ........

000da81c <_ZTSSt9type_info>:
   da81c:	74397453 5f657079 6f666e69 00000000     St9type_info....
   da82c:	00776f70 74727173 00000000              pow.sqrt....

000da838 <TWO52>:
   da838:	00000000 43300000 00000000 c3300000     ......0C......0.

000da848 <_ctype_>:
   da848:	20202000 20202020 28282020 20282828     .         ((((( 
   da858:	20202020 20202020 20202020 20202020                     
   da868:	10108820 10101010 10101010 10101010      ...............
   da878:	04040410 04040404 10040404 10101010     ................
   da888:	41411010 41414141 01010101 01010101     ..AAAAAA........
   da898:	01010101 01010101 01010101 10101010     ................
   da8a8:	42421010 42424242 02020202 02020202     ..BBBBBB........
   da8b8:	02020202 02020202 02020202 10101010     ................
   da8c8:	00000020 00000000 00000000 00000000      ...............
	...

000da949 <link_const_variable_data_end>:
   da949:	00          	.byte	0x00
	...

000da94c <link_constructors_location>:
   da94c:	000d4f09 	.word	0x000d4f09
   da950:	000d59d1 	.word	0x000d59d1
   da954:	000d64e5 	.word	0x000d64e5
   da958:	000d6675 	.word	0x000d6675
   da95c:	000d6a3d 	.word	0x000d6a3d
   da960:	000d6d19 	.word	0x000d6d19
   da964:	000d6d29 	.word	0x000d6d29
   da968:	000d6d61 	.word	0x000d6d61
   da96c:	000d78a9 	.word	0x000d78a9
   da970:	000d79f9 	.word	0x000d79f9

000da974 <link_constructors_end>:
	...
