
c:/Users/Saige/Documents/IoT/Beacon-of-Hope/beacon_code/target/1.5.2/argon/beacon_code.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .module_info  00000018  000d4000  000d4000  00004000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .dynalib      00000004  000d4018  000d4018  00004018  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .text         00002e14  000d401c  000d401c  0000401c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  3 .backup       00000004  2003f400  000d6e30  0000f400  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  4 .data         0000006c  2003e308  000d6e34  0001e308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  5 .bss          0000047c  2003e374  2003e374  0002e374  2**2
                  ALLOC
  6 .module_info_suffix 00000028  000d6ea0  000d6ea0  00026ea0  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .module_info_crc 00000004  000d6ec8  000d6ec8  00026ec8  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .debug_info   000d16ce  00000000  00000000  00026ecc  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_abbrev 00010a93  00000000  00000000  000f859a  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0001c0c6  00000000  00000000  0010902d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_aranges 00002338  00000000  00000000  001250f3  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00004290  00000000  00000000  0012742b  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_macro  00036392  00000000  00000000  0012b6bb  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_line   0002883c  00000000  00000000  00161a4d  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_str    0010403c  00000000  00000000  0018a289  2**0
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_frame  0000c8ec  00000000  00000000  0028e2c8  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

000d401c <module_user_pre_init>:
/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d401c:	4809      	ldr	r0, [pc, #36]	; (d4044 <link_dynalib_end+0x28>)
   d401e:	490a      	ldr	r1, [pc, #40]	; (d4048 <link_dynalib_end+0x2c>)
   d4020:	4288      	cmp	r0, r1
extern constructor_ptr_t link_constructors_end;

/**
 * Initializes this user module. Returns the start of the heap.
 */
void* module_user_pre_init() {
   d4022:	b508      	push	{r3, lr}

    if ( (&link_global_data_start!=&link_global_data_initial_values) && (link_global_data_size != 0))
   d4024:	d005      	beq.n	d4032 <module_user_pre_init+0x16>
   d4026:	4a09      	ldr	r2, [pc, #36]	; (d404c <link_dynalib_end+0x30>)
   d4028:	4282      	cmp	r2, r0
   d402a:	d002      	beq.n	d4032 <module_user_pre_init+0x16>
    {
        memcpy(&link_global_data_start, &link_global_data_initial_values, link_global_data_size);
   d402c:	1a12      	subs	r2, r2, r0
   d402e:	f002 fcbb 	bl	d69a8 <memcpy>
    }

    memset(&link_bss_location, 0, link_bss_size );
   d4032:	4807      	ldr	r0, [pc, #28]	; (d4050 <link_dynalib_end+0x34>)
   d4034:	4a07      	ldr	r2, [pc, #28]	; (d4054 <link_dynalib_end+0x38>)
   d4036:	2100      	movs	r1, #0
   d4038:	1a12      	subs	r2, r2, r0
   d403a:	f002 fcc0 	bl	d69be <memset>
    return &link_global_data_start;
}
   d403e:	4801      	ldr	r0, [pc, #4]	; (d4044 <link_dynalib_end+0x28>)
   d4040:	bd08      	pop	{r3, pc}
   d4042:	bf00      	nop
   d4044:	2003e308 	.word	0x2003e308
   d4048:	000d6e34 	.word	0x000d6e34
   d404c:	2003e374 	.word	0x2003e374
   d4050:	2003e374 	.word	0x2003e374
   d4054:	2003e7f0 	.word	0x2003e7f0

000d4058 <module_user_init>:
extern constructor_ptr_t link_constructors_location[];
extern constructor_ptr_t link_constructors_end;
#define link_constructors_size   ((unsigned long)&link_constructors_end  -  (unsigned long)&link_constructors_location )

void module_user_init()
{
   d4058:	b570      	push	{r4, r5, r6, lr}
    module_user_init_hook();
   d405a:	f001 f8c1 	bl	d51e0 <module_user_init_hook>
   d405e:	4c07      	ldr	r4, [pc, #28]	; (d407c <module_user_init+0x24>)
   d4060:	4b07      	ldr	r3, [pc, #28]	; (d4080 <module_user_init+0x28>)
   d4062:	1ae4      	subs	r4, r4, r3
   d4064:	08a4      	lsrs	r4, r4, #2

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4066:	2500      	movs	r5, #0
   d4068:	461e      	mov	r6, r3
   d406a:	42a5      	cmp	r5, r4
   d406c:	d004      	beq.n	d4078 <module_user_init+0x20>
    {
        link_constructors_location[ctor_num]();
   d406e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
   d4072:	4798      	blx	r3
{
    module_user_init_hook();

    // invoke constructors
    int ctor_num;
    for (ctor_num=0; ctor_num < link_constructors_size/sizeof(constructor_ptr_t); ctor_num++ )
   d4074:	3501      	adds	r5, #1
   d4076:	e7f8      	b.n	d406a <module_user_init+0x12>
    {
        link_constructors_location[ctor_num]();
    }
}
   d4078:	bd70      	pop	{r4, r5, r6, pc}
   d407a:	bf00      	nop
   d407c:	000d6e2c 	.word	0x000d6e2c
   d4080:	000d6dec 	.word	0x000d6dec

000d4084 <module_user_setup>:

/**
 * Export these functions with a fuller name so they don't clash with the setup/loop wrappers in the system module.
 */
void module_user_setup() {
    setup();
   d4084:	f000 b872 	b.w	d416c <setup>

000d4088 <module_user_loop>:
}

void module_user_loop() {
   d4088:	b508      	push	{r3, lr}
    loop();
   d408a:	f000 f92b 	bl	d42e4 <loop>
    _post_loop();
}
   d408e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    setup();
}

void module_user_loop() {
    loop();
    _post_loop();
   d4092:	f001 b867 	b.w	d5164 <_post_loop>

000d4096 <_ZdlPv>:
   d4096:	f000 be41 	b.w	d4d1c <free>

000d409a <_ZdaPv>:
	free(p);
}

void operator delete[](void *p)
{
	free(p);
   d409a:	f000 be3f 	b.w	d4d1c <free>

000d409e <__cxa_guard_acquire>:

/* Provide default implemenation for __cxa_guard_acquire() and
 * __cxa_guard_release(). Note: these must be revisited if a multitasking
 * OS is ported to this platform. */
__extension__ typedef int __guard __attribute__((mode (__DI__)));
int __cxa_guard_acquire(__guard *g) {return !*(char *)(g);};
   d409e:	7800      	ldrb	r0, [r0, #0]
   d40a0:	fab0 f080 	clz	r0, r0
   d40a4:	0940      	lsrs	r0, r0, #5
   d40a6:	4770      	bx	lr

000d40a8 <__cxa_guard_release>:
void __cxa_guard_release (__guard *g) {*(char *)g = 1;};
   d40a8:	2301      	movs	r3, #1
   d40aa:	7003      	strb	r3, [r0, #0]
   d40ac:	4770      	bx	lr

000d40ae <_ZN11SystemClassD1Ev>:
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ae:	b510      	push	{r4, lr}
   d40b0:	4604      	mov	r4, r0
        return toSleepResult();
    }

private:
    void freeWakeupSourceMemory() {
        if (wakeupSource_) {
   d40b2:	6800      	ldr	r0, [r0, #0]
   d40b4:	b108      	cbz	r0, d40ba <_ZN11SystemClassD1Ev+0xc>
            free(wakeupSource_);
   d40b6:	f000 fe31 	bl	d4d1c <free>
    system_error_t error_;
    SleepResult compatResult_;
};


class SystemClass {
   d40ba:	4620      	mov	r0, r4
   d40bc:	bd10      	pop	{r4, pc}

000d40be <_ZN7TwoWire5writeEi>:
  bool unlock();

  inline size_t write(unsigned long n) { return write((uint8_t)n); }
  inline size_t write(long n) { return write((uint8_t)n); }
  inline size_t write(unsigned int n) { return write((uint8_t)n); }
  inline size_t write(int n) { return write((uint8_t)n); }
   d40be:	6803      	ldr	r3, [r0, #0]
   d40c0:	b2c9      	uxtb	r1, r1
   d40c2:	689b      	ldr	r3, [r3, #8]
   d40c4:	4718      	bx	r3

000d40c6 <_Z8beginMPUv>:
    Serial.printf("Pressure: %0.2f hPa\t", bme.readPressure() / 100.0F);
    Serial.printf("Temperature: %0.2f *F\t", bme.readTemperature() * 1.8 + 32.0);
    Serial.printf("Humidity: %0.2f%%\n\n", bme.readHumidity());
}

void beginMPU() {
   d40c6:	b508      	push	{r3, lr}
  Wire.begin();
   d40c8:	f001 fce6 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d40cc:	f001 fa6e 	bl	d55ac <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(MPU_ADDRESS);
   d40d0:	f001 fce2 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d40d4:	2168      	movs	r1, #104	; 0x68
   d40d6:	f001 faa4 	bl	d5622 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x6B);
   d40da:	f001 fcdd 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d40de:	216b      	movs	r1, #107	; 0x6b
   d40e0:	f7ff ffed 	bl	d40be <_ZN7TwoWire5writeEi>
  Wire.write(0);
   d40e4:	f001 fcd8 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d40e8:	2100      	movs	r1, #0
   d40ea:	f7ff ffe8 	bl	d40be <_ZN7TwoWire5writeEi>
  Wire.endTransmission(true);
   d40ee:	f001 fcd3 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d40f2:	2101      	movs	r1, #1
}
   d40f4:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void beginMPU() {
  Wire.begin();
  Wire.beginTransmission(MPU_ADDRESS);
  Wire.write(0x6B);
  Wire.write(0);
  Wire.endTransmission(true);
   d40f8:	f001 ba96 	b.w	d5628 <_ZN7TwoWire15endTransmissionEh>

000d40fc <_Z12configureACCi>:
   *                         1    |       +- 4 g     |   8192 LSB/g
   *                         2    |       +- 8 g     |   4096 LSB/g
   *                         3    |       +- 16 g    |   2048 LSB/g
   */

  switch (select) {
   d40fc:	2802      	cmp	r0, #2
  Wire.write(0x6B);
  Wire.write(0);
  Wire.endTransmission(true);
}

void configureACC(int select) {
   d40fe:	b510      	push	{r4, lr}
   d4100:	4b19      	ldr	r3, [pc, #100]	; (d4168 <_Z12configureACCi+0x6c>)
   *                         1    |       +- 4 g     |   8192 LSB/g
   *                         2    |       +- 8 g     |   4096 LSB/g
   *                         3    |       +- 16 g    |   2048 LSB/g
   */

  switch (select) {
   d4102:	d008      	beq.n	d4116 <_Z12configureACCi+0x1a>
   d4104:	2803      	cmp	r0, #3
   d4106:	d00b      	beq.n	d4120 <_Z12configureACCi+0x24>
   d4108:	2801      	cmp	r0, #1
   d410a:	d10e      	bne.n	d412a <_Z12configureACCi+0x2e>
    case 1:
      select = 0x08;
      sensitivity = 8192.0;
   d410c:	f04f 428c 	mov.w	r2, #1174405120	; 0x46000000
   d4110:	601a      	str	r2, [r3, #0]
   *                         3    |       +- 16 g    |   2048 LSB/g
   */

  switch (select) {
    case 1:
      select = 0x08;
   d4112:	2408      	movs	r4, #8
      sensitivity = 8192.0;
      break;
   d4114:	e00d      	b.n	d4132 <_Z12configureACCi+0x36>
    case 2:
      select = 0x10;
      sensitivity = 4096.0;
   d4116:	f04f 428b 	mov.w	r2, #1166016512	; 0x45800000
   d411a:	601a      	str	r2, [r3, #0]
    case 1:
      select = 0x08;
      sensitivity = 8192.0;
      break;
    case 2:
      select = 0x10;
   d411c:	2410      	movs	r4, #16
      sensitivity = 4096.0;
      break;
   d411e:	e008      	b.n	d4132 <_Z12configureACCi+0x36>
    case 3:
      select = 0x18;
      sensitivity = 2048.0;
   d4120:	f04f 428a 	mov.w	r2, #1157627904	; 0x45000000
   d4124:	601a      	str	r2, [r3, #0]
    case 2:
      select = 0x10;
      sensitivity = 4096.0;
      break;
    case 3:
      select = 0x18;
   d4126:	2418      	movs	r4, #24
      sensitivity = 2048.0;
      break;
   d4128:	e003      	b.n	d4132 <_Z12configureACCi+0x36>
    default:
      select = 0x00;
      sensitivity = 16384.0;
   d412a:	f04f 428d 	mov.w	r2, #1182793728	; 0x46800000
   d412e:	601a      	str	r2, [r3, #0]
    case 3:
      select = 0x18;
      sensitivity = 2048.0;
      break;
    default:
      select = 0x00;
   d4130:	2400      	movs	r4, #0
      sensitivity = 16384.0;
      break;
  }

  Wire.begin();
   d4132:	f001 fcb1 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d4136:	f001 fa39 	bl	d55ac <_ZN7TwoWire5beginEv>
  Wire.beginTransmission(MPU_ADDRESS);
   d413a:	f001 fcad 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d413e:	2168      	movs	r1, #104	; 0x68
   d4140:	f001 fa6f 	bl	d5622 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x1C);
   d4144:	f001 fca8 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d4148:	211c      	movs	r1, #28
   d414a:	f7ff ffb8 	bl	d40be <_ZN7TwoWire5writeEi>
  Wire.write(select);
   d414e:	f001 fca3 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d4152:	4621      	mov	r1, r4
   d4154:	f7ff ffb3 	bl	d40be <_ZN7TwoWire5writeEi>
  Wire.endTransmission(true);
   d4158:	f001 fc9e 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d415c:	2101      	movs	r1, #1
}
   d415e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

  Wire.begin();
  Wire.beginTransmission(MPU_ADDRESS);
  Wire.write(0x1C);
  Wire.write(select);
  Wire.endTransmission(true);
   d4162:	f001 ba61 	b.w	d5628 <_ZN7TwoWire15endTransmissionEh>
   d4166:	bf00      	nop
   d4168:	2003e378 	.word	0x2003e378

000d416c <setup>:
const int MPU_ADDRESS = 0x68;
float sensitivity, acceleration;

const int LED = 11;

void setup() {
   d416c:	b508      	push	{r3, lr}
  Serial.begin(9600);
   d416e:	f001 f937 	bl	d53e0 <_Z16_fetch_usbserialv>
   d4172:	f44f 5116 	mov.w	r1, #9600	; 0x2580
   d4176:	f001 f927 	bl	d53c8 <_ZN9USBSerial5beginEl>
  pinMode(LED, OUTPUT);
   d417a:	2101      	movs	r1, #1
   d417c:	200b      	movs	r0, #11
   d417e:	f001 fc33 	bl	d59e8 <pinMode>
  bme.begin();
   d4182:	4805      	ldr	r0, [pc, #20]	; (d4198 <setup+0x2c>)
   d4184:	f000 fba6 	bl	d48d4 <_ZN15Adafruit_BME2805beginEv>
  beginMPU();
   d4188:	f7ff ff9d 	bl	d40c6 <_Z8beginMPUv>
  configureACC(3);
   d418c:	2003      	movs	r0, #3
}
   d418e:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
void setup() {
  Serial.begin(9600);
  pinMode(LED, OUTPUT);
  bme.begin();
  beginMPU();
  configureACC(3);
   d4192:	f7ff bfb3 	b.w	d40fc <_Z12configureACCi>
   d4196:	bf00      	nop
   d4198:	2003e37c 	.word	0x2003e37c

000d419c <_Z6getACCv>:
  Wire.write(0x1C);
  Wire.write(select);
  Wire.endTransmission(true);
}

float getACC() {
   d419c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   d41a0:	ed2d 8b02 	vpush	{d8}

  int16_t xRaw, yRaw, zRaw;
  float xCal, yCal, zCal, accel;

  // Request most recent accelerometer measurements.
  Wire.beginTransmission(MPU_ADDRESS);
   d41a4:	f001 fc78 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d41a8:	2168      	movs	r1, #104	; 0x68
   d41aa:	f001 fa3a 	bl	d5622 <_ZN7TwoWire17beginTransmissionEi>
  Wire.write(0x3B); // Start at 0x3B ACCEL_XOUT[15:8]
   d41ae:	f001 fc73 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d41b2:	213b      	movs	r1, #59	; 0x3b
   d41b4:	f7ff ff83 	bl	d40be <_ZN7TwoWire5writeEi>
  Wire.endTransmission(false);
   d41b8:	f001 fc6e 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d41bc:	2100      	movs	r1, #0
   d41be:	f001 fa33 	bl	d5628 <_ZN7TwoWire15endTransmissionEh>
  Wire.requestFrom(MPU_ADDRESS, 6, true); // Read six registers.
   d41c2:	f001 fc69 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d41c6:	2206      	movs	r2, #6
   d41c8:	2168      	movs	r1, #104	; 0x68
   d41ca:	2301      	movs	r3, #1
   d41cc:	f001 fa10 	bl	d55f0 <_ZN7TwoWire11requestFromEhjh>

  // Shift bits.
  xRaw = Wire.read() << 8 | Wire.read(); // 0x3B ACCEL_XOUT[15:8] & 0x3C ACCEL_XOUT[7:0]
   d41d0:	f001 fc62 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d41d4:	6803      	ldr	r3, [r0, #0]
   d41d6:	695b      	ldr	r3, [r3, #20]
   d41d8:	4798      	blx	r3
   d41da:	4604      	mov	r4, r0
   d41dc:	f001 fc5c 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d41e0:	6803      	ldr	r3, [r0, #0]
   d41e2:	695b      	ldr	r3, [r3, #20]
   d41e4:	4798      	blx	r3
   d41e6:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d41ea:	b206      	sxth	r6, r0
  yRaw = Wire.read() << 8 | Wire.read(); // 0x3D ACCEL_YOUT[15:8] & 0x3E ACCEL_YOUT[7:0]
   d41ec:	f001 fc54 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d41f0:	6803      	ldr	r3, [r0, #0]
   d41f2:	695b      	ldr	r3, [r3, #20]
   d41f4:	4798      	blx	r3
   d41f6:	4604      	mov	r4, r0
   d41f8:	f001 fc4e 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d41fc:	6803      	ldr	r3, [r0, #0]
   d41fe:	695b      	ldr	r3, [r3, #20]
   d4200:	4798      	blx	r3
   d4202:	ea40 2004 	orr.w	r0, r0, r4, lsl #8
   d4206:	b205      	sxth	r5, r0
  zRaw = Wire.read() << 8 | Wire.read(); // 0x3F ACCEL_ZOUT[15:8] & 0x40 ACCEL_ZOUT[7:0]
   d4208:	f001 fc46 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d420c:	6803      	ldr	r3, [r0, #0]
   d420e:	695b      	ldr	r3, [r3, #20]
   d4210:	4798      	blx	r3
   d4212:	4682      	mov	sl, r0
   d4214:	f001 fc40 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d4218:	6803      	ldr	r3, [r0, #0]
   d421a:	695b      	ldr	r3, [r3, #20]
   d421c:	4798      	blx	r3
  
  // Calibrate measurements to least significant bit sensitivity.
  xCal = xRaw / sensitivity * (-1);
   d421e:	4b30      	ldr	r3, [pc, #192]	; (d42e0 <_Z6getACCv+0x144>)
  yCal = yRaw / sensitivity * (-1);
  zCal = zRaw / sensitivity * (-1);

  // Calculate total acceleration.
  accel = sqrt(pow(xCal, 2) + pow(yCal, 2) + pow(zCal, 2));
   d4220:	ee07 6a90 	vmov	s15, r6
  xRaw = Wire.read() << 8 | Wire.read(); // 0x3B ACCEL_XOUT[15:8] & 0x3C ACCEL_XOUT[7:0]
  yRaw = Wire.read() << 8 | Wire.read(); // 0x3D ACCEL_YOUT[15:8] & 0x3E ACCEL_YOUT[7:0]
  zRaw = Wire.read() << 8 | Wire.read(); // 0x3F ACCEL_ZOUT[15:8] & 0x40 ACCEL_ZOUT[7:0]
  
  // Calibrate measurements to least significant bit sensitivity.
  xCal = xRaw / sensitivity * (-1);
   d4224:	ed93 8a00 	vldr	s16, [r3]
  yCal = yRaw / sensitivity * (-1);
  zCal = zRaw / sensitivity * (-1);

  // Calculate total acceleration.
  accel = sqrt(pow(xCal, 2) + pow(yCal, 2) + pow(zCal, 2));
   d4228:	eef8 7ae7 	vcvt.f32.s32	s15, s15
  Wire.requestFrom(MPU_ADDRESS, 6, true); // Read six registers.

  // Shift bits.
  xRaw = Wire.read() << 8 | Wire.read(); // 0x3B ACCEL_XOUT[15:8] & 0x3C ACCEL_XOUT[7:0]
  yRaw = Wire.read() << 8 | Wire.read(); // 0x3D ACCEL_YOUT[15:8] & 0x3E ACCEL_YOUT[7:0]
  zRaw = Wire.read() << 8 | Wire.read(); // 0x3F ACCEL_ZOUT[15:8] & 0x40 ACCEL_ZOUT[7:0]
   d422c:	4604      	mov	r4, r0
  xCal = xRaw / sensitivity * (-1);
  yCal = yRaw / sensitivity * (-1);
  zCal = zRaw / sensitivity * (-1);

  // Calculate total acceleration.
  accel = sqrt(pow(xCal, 2) + pow(yCal, 2) + pow(zCal, 2));
   d422e:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d4232:	ea44 240a 	orr.w	r4, r4, sl, lsl #8
   d4236:	b224      	sxth	r4, r4
   d4238:	eef1 7a47 	vneg.f32	s15, s14
   d423c:	ee17 0a90 	vmov	r0, s15
   d4240:	f002 f850 	bl	d62e4 <__aeabi_f2d>
   d4244:	ee07 5a90 	vmov	s15, r5
   d4248:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d424c:	4606      	mov	r6, r0
   d424e:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d4252:	460f      	mov	r7, r1
   d4254:	eef1 7a47 	vneg.f32	s15, s14
   d4258:	ee17 0a90 	vmov	r0, s15
   d425c:	f002 f842 	bl	d62e4 <__aeabi_f2d>
   d4260:	ee07 4a90 	vmov	s15, r4
   d4264:	eef8 7ae7 	vcvt.f32.s32	s15, s15
   d4268:	4680      	mov	r8, r0
   d426a:	ee87 7a88 	vdiv.f32	s14, s15, s16
   d426e:	4689      	mov	r9, r1
   d4270:	eef1 7a47 	vneg.f32	s15, s14
   d4274:	ee17 0a90 	vmov	r0, s15
   d4278:	f002 f834 	bl	d62e4 <__aeabi_f2d>
   d427c:	4642      	mov	r2, r8
   d427e:	4604      	mov	r4, r0
   d4280:	460d      	mov	r5, r1
   d4282:	464b      	mov	r3, r9
   d4284:	4640      	mov	r0, r8
   d4286:	4649      	mov	r1, r9
   d4288:	f002 f880 	bl	d638c <__aeabi_dmul>
   d428c:	4632      	mov	r2, r6
   d428e:	463b      	mov	r3, r7
   d4290:	4680      	mov	r8, r0
   d4292:	4689      	mov	r9, r1
   d4294:	4630      	mov	r0, r6
   d4296:	4639      	mov	r1, r7
   d4298:	f002 f878 	bl	d638c <__aeabi_dmul>
   d429c:	4602      	mov	r2, r0
   d429e:	460b      	mov	r3, r1
   d42a0:	4640      	mov	r0, r8
   d42a2:	4649      	mov	r1, r9
   d42a4:	f001 fec0 	bl	d6028 <__adddf3>
   d42a8:	4622      	mov	r2, r4
   d42aa:	4606      	mov	r6, r0
   d42ac:	460f      	mov	r7, r1
   d42ae:	462b      	mov	r3, r5
   d42b0:	4620      	mov	r0, r4
   d42b2:	4629      	mov	r1, r5
   d42b4:	f002 f86a 	bl	d638c <__aeabi_dmul>
   d42b8:	4602      	mov	r2, r0
   d42ba:	460b      	mov	r3, r1
   d42bc:	4630      	mov	r0, r6
   d42be:	4639      	mov	r1, r7
   d42c0:	f001 feb2 	bl	d6028 <__adddf3>
   d42c4:	ec41 0b10 	vmov	d0, r0, r1
   d42c8:	f001 fd76 	bl	d5db8 <sqrt>
  
  return accel;
   d42cc:	ec51 0b10 	vmov	r0, r1, d0
   d42d0:	f002 fb0c 	bl	d68ec <__aeabi_d2f>
   d42d4:	ecbd 8b02 	vpop	{d8}
   d42d8:	ee00 0a10 	vmov	s0, r0
   d42dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   d42e0:	2003e378 	.word	0x2003e378

000d42e4 <loop>:
  bme.begin();
  beginMPU();
  configureACC(3);
}

void loop() {
   d42e4:	b537      	push	{r0, r1, r2, r4, r5, lr}
  acceleration = getACC();
   d42e6:	f7ff ff59 	bl	d419c <_Z6getACCv>
  if(acceleration > 27) {
   d42ea:	eef3 7a0b 	vmov.f32	s15, #59	; 0x41d80000  27.0
  beginMPU();
  configureACC(3);
}

void loop() {
  acceleration = getACC();
   d42ee:	4c0b      	ldr	r4, [pc, #44]	; (d431c <loop+0x38>)
  if(acceleration > 27) {
   d42f0:	eeb4 0ae7 	vcmpe.f32	s0, s15
   d42f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
  beginMPU();
  configureACC(3);
}

void loop() {
  acceleration = getACC();
   d42f8:	ed84 0a00 	vstr	s0, [r4]
  if(acceleration > 27) {
   d42fc:	dd0c      	ble.n	d4318 <loop+0x34>
    Serial.printlnf("Acceleration: %0.2f", acceleration);
   d42fe:	f001 f86f 	bl	d53e0 <_Z16_fetch_usbserialv>
   d4302:	4605      	mov	r5, r0
    }

    template <typename... Args>
    inline size_t printlnf(const char* format, Args... args)
    {
        return this->printf_impl(true, format, args...);
   d4304:	6820      	ldr	r0, [r4, #0]
   d4306:	f001 ffed 	bl	d62e4 <__aeabi_f2d>
   d430a:	4a05      	ldr	r2, [pc, #20]	; (d4320 <loop+0x3c>)
   d430c:	e9cd 0100 	strd	r0, r1, [sp]
   d4310:	2101      	movs	r1, #1
   d4312:	4628      	mov	r0, r5
   d4314:	f000 fe9b 	bl	d504e <_ZN5Print11printf_implEbPKcz>
  }
}
   d4318:	b003      	add	sp, #12
   d431a:	bd30      	pop	{r4, r5, pc}
   d431c:	2003e3cc 	.word	0x2003e3cc
   d4320:	000d6a97 	.word	0x000d6a97

000d4324 <_GLOBAL__sub_I_SystemMode>:

  // Calculate total acceleration.
  accel = sqrt(pow(xCal, 2) + pow(yCal, 2) + pow(zCal, 2));
  
  return accel;
   d4324:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4326:	4c0c      	ldr	r4, [pc, #48]	; (d4358 <_GLOBAL__sub_I_SystemMode+0x34>)

inline void pinSetFast(pin_t _pin) __attribute__((always_inline));
inline void pinResetFast(pin_t _pin) __attribute__((always_inline));
inline int32_t pinReadFast(pin_t _pin) __attribute__((always_inline));

static Hal_Pin_Info* PIN_MAP = HAL_Pin_Map();
   d4328:	f000 fafc 	bl	d4924 <HAL_Pin_Map>
   d432c:	2300      	movs	r3, #0
   d432e:	6023      	str	r3, [r4, #0]
   d4330:	80a3      	strh	r3, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4332:	71a3      	strb	r3, [r4, #6]
   d4334:	8123      	strh	r3, [r4, #8]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4336:	2002      	movs	r0, #2
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4338:	f64f 73ff 	movw	r3, #65535	; 0xffff
   d433c:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d433e:	f000 fc69 	bl	d4c14 <set_system_mode>
SYSTEM_MODE(SEMI_AUTOMATIC);
   d4342:	4620      	mov	r0, r4
   d4344:	4a05      	ldr	r2, [pc, #20]	; (d435c <_GLOBAL__sub_I_SystemMode+0x38>)
   d4346:	4906      	ldr	r1, [pc, #24]	; (d4360 <_GLOBAL__sub_I_SystemMode+0x3c>)
   d4348:	f001 fbcc 	bl	d5ae4 <__aeabi_atexit>
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

Adafruit_BME280 bme;
   d434c:	4805      	ldr	r0, [pc, #20]	; (d4364 <_GLOBAL__sub_I_SystemMode+0x40>)

  // Calculate total acceleration.
  accel = sqrt(pow(xCal, 2) + pow(yCal, 2) + pow(zCal, 2));
  
  return accel;
   d434e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
#include <Wire.h>
#include <SPI.h>
#include <Adafruit_Sensor.h>
#include <Adafruit_BME280.h>

Adafruit_BME280 bme;
   d4352:	f000 b835 	b.w	d43c0 <_ZN15Adafruit_BME280C1Ev>
   d4356:	bf00      	nop
   d4358:	2003e3c0 	.word	0x2003e3c0
   d435c:	2003e374 	.word	0x2003e374
   d4360:	000d40af 	.word	0x000d40af
   d4364:	2003e37c 	.word	0x2003e37c

000d4368 <_ZNK8particle13__SPISettings7printToER5Print>:
  bool operator!=(const __SPISettings& other) const
  {
    return !(other == *this);
  }

  virtual size_t printTo(Print& p) const
   d4368:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
   d436a:	4602      	mov	r2, r0
   d436c:	4608      	mov	r0, r1
  {
    if (default_ && clock_ == 0)
   d436e:	7913      	ldrb	r3, [r2, #4]
   d4370:	6895      	ldr	r5, [r2, #8]
   d4372:	b133      	cbz	r3, d4382 <_ZNK8particle13__SPISettings7printToER5Print+0x1a>
   d4374:	b93d      	cbnz	r5, d4386 <_ZNK8particle13__SPISettings7printToER5Print+0x1e>
      return p.print("<SPISettings default>");
   d4376:	490c      	ldr	r1, [pc, #48]	; (d43a8 <_ZNK8particle13__SPISettings7printToER5Print+0x40>)
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
  }
   d4378:	b004      	add	sp, #16
   d437a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
  }

  virtual size_t printTo(Print& p) const
  {
    if (default_ && clock_ == 0)
      return p.print("<SPISettings default>");
   d437e:	f000 be33 	b.w	d4fe8 <_ZN5Print5printEPKc>
    else
      return p.printf("<SPISettings %s%lu %s MODE%d>", default_ ? "default " : "", clock_, bitOrder_ == MSBFIRST ? "MSB" : "LSB", dataMode_);
   d4382:	4b0a      	ldr	r3, [pc, #40]	; (d43ac <_ZNK8particle13__SPISettings7printToER5Print+0x44>)
   d4384:	e000      	b.n	d4388 <_ZNK8particle13__SPISettings7printToER5Print+0x20>
   d4386:	4b0a      	ldr	r3, [pc, #40]	; (d43b0 <_ZNK8particle13__SPISettings7printToER5Print+0x48>)
   d4388:	7b16      	ldrb	r6, [r2, #12]
   d438a:	4c0a      	ldr	r4, [pc, #40]	; (d43b4 <_ZNK8particle13__SPISettings7printToER5Print+0x4c>)
   d438c:	490a      	ldr	r1, [pc, #40]	; (d43b8 <_ZNK8particle13__SPISettings7printToER5Print+0x50>)
    size_t println(const __FlashStringHelper*);

    template <typename... Args>
    inline size_t printf(const char* format, Args... args)
    {
        return this->printf_impl(false, format, args...);
   d438e:	7b52      	ldrb	r2, [r2, #13]
   d4390:	9202      	str	r2, [sp, #8]
   d4392:	2e01      	cmp	r6, #1
   d4394:	bf08      	it	eq
   d4396:	4621      	moveq	r1, r4
   d4398:	9101      	str	r1, [sp, #4]
   d439a:	9500      	str	r5, [sp, #0]
   d439c:	4a07      	ldr	r2, [pc, #28]	; (d43bc <_ZNK8particle13__SPISettings7printToER5Print+0x54>)
   d439e:	2100      	movs	r1, #0
   d43a0:	f000 fe55 	bl	d504e <_ZN5Print11printf_implEbPKcz>
  }
   d43a4:	b004      	add	sp, #16
   d43a6:	bd70      	pop	{r4, r5, r6, pc}
   d43a8:	000d6ac9 	.word	0x000d6ac9
   d43ac:	000d6a82 	.word	0x000d6a82
   d43b0:	000d6ab8 	.word	0x000d6ab8
   d43b4:	000d6ac1 	.word	0x000d6ac1
   d43b8:	000d6ac5 	.word	0x000d6ac5
   d43bc:	000d6adf 	.word	0x000d6adf

000d43c0 <_ZN15Adafruit_BME280C1Ev>:
/*! 
    @brief  class constructor
*/
/**************************************************************************/
Adafruit_BME280::Adafruit_BME280()
    : _cs(-1), _mosi(-1), _miso(-1), _sck(-1)
   d43c0:	22ff      	movs	r2, #255	; 0xff
   d43c2:	7402      	strb	r2, [r0, #16]
   d43c4:	7442      	strb	r2, [r0, #17]
   d43c6:	7482      	strb	r2, [r0, #18]
   d43c8:	74c2      	strb	r2, [r0, #19]
{ }
   d43ca:	4770      	bx	lr

000d43cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>:
namespace particle {

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
   d43cc:	b538      	push	{r3, r4, r5, lr}
        static SPIClass instance(Interface);
   d43ce:	4d09      	ldr	r5, [pc, #36]	; (d43f4 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x28>)
   d43d0:	6829      	ldr	r1, [r5, #0]
   d43d2:	f011 0401 	ands.w	r4, r1, #1
   d43d6:	d10a      	bne.n	d43ee <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d43d8:	4628      	mov	r0, r5
   d43da:	f7ff fe60 	bl	d409e <__cxa_guard_acquire>
   d43de:	b130      	cbz	r0, d43ee <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x22>
   d43e0:	4621      	mov	r1, r4
   d43e2:	4805      	ldr	r0, [pc, #20]	; (d43f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d43e4:	f000 fcf6 	bl	d4dd4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d43e8:	4628      	mov	r0, r5
   d43ea:	f7ff fe5d 	bl	d40a8 <__cxa_guard_release>
        return instance;
    }
   d43ee:	4802      	ldr	r0, [pc, #8]	; (d43f8 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv+0x2c>)
   d43f0:	bd38      	pop	{r3, r4, r5, pc}
   d43f2:	bf00      	nop
   d43f4:	2003e3d0 	.word	0x2003e3d0
   d43f8:	2003e3d4 	.word	0x2003e3d4

000d43fc <_ZN15Adafruit_BME2807spixferEh>:
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d43fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
    // hardware SPI
    if (_sck == -1)
   d4400:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4404:	3301      	adds	r3, #1
    @brief  Encapsulate hardware and software SPI transfer into one function
    @param x the data byte to transfer
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::spixfer(uint8_t x) {
   d4406:	4605      	mov	r5, r0
   d4408:	460f      	mov	r7, r1
    // hardware SPI
    if (_sck == -1)
   d440a:	d106      	bne.n	d441a <_ZN15Adafruit_BME2807spixferEh+0x1e>
    }
    static void computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider, unsigned& clock) {
        instance().computeClockDivider(reference, targetSpeed, divider, clock);
    }
    byte transfer(byte data) {
        return instance().transfer(data);
   d440c:	f7ff ffde 	bl	d43cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4410:	4639      	mov	r1, r7
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4412:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   d4416:	f000 bd81 	b.w	d4f1c <_ZN8SPIClass8transferEh>
   d441a:	2607      	movs	r6, #7
   d441c:	2400      	movs	r4, #0
    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
   d441e:	f04f 0801 	mov.w	r8, #1

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
        digitalWrite(_sck, LOW);
   d4422:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4426:	2100      	movs	r1, #0
   d4428:	b280      	uxth	r0, r0
   d442a:	f001 faee 	bl	d5a0a <digitalWrite>
        digitalWrite(_mosi, x & (1<<i));
   d442e:	f995 0011 	ldrsb.w	r0, [r5, #17]
   d4432:	fa08 f106 	lsl.w	r1, r8, r6
   d4436:	4039      	ands	r1, r7
   d4438:	b280      	uxth	r0, r0
   d443a:	f001 fae6 	bl	d5a0a <digitalWrite>
        digitalWrite(_sck, HIGH);
   d443e:	f995 0013 	ldrsb.w	r0, [r5, #19]
   d4442:	2101      	movs	r1, #1
   d4444:	b280      	uxth	r0, r0
   d4446:	f001 fae0 	bl	d5a0a <digitalWrite>
        if (digitalRead(_miso))
   d444a:	f995 0012 	ldrsb.w	r0, [r5, #18]
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d444e:	0064      	lsls	r4, r4, #1
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4450:	b280      	uxth	r0, r0
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
        reply <<= 1;
   d4452:	b2e4      	uxtb	r4, r4
        digitalWrite(_sck, LOW);
        digitalWrite(_mosi, x & (1<<i));
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
   d4454:	f001 faf2 	bl	d5a3c <digitalRead>
   d4458:	b108      	cbz	r0, d445e <_ZN15Adafruit_BME2807spixferEh+0x62>
            reply |= 1;
   d445a:	f044 0401 	orr.w	r4, r4, #1
    if (_sck == -1)
        return SPI.transfer(x);

    // software SPI
    uint8_t reply = 0;
    for (int i=7; i>=0; i--) {
   d445e:	f116 36ff 	adds.w	r6, r6, #4294967295
   d4462:	d2de      	bcs.n	d4422 <_ZN15Adafruit_BME2807spixferEh+0x26>
        digitalWrite(_sck, HIGH);
        if (digitalRead(_miso))
            reply |= 1;
        }
    return reply;
}
   d4464:	4620      	mov	r0, r4
   d4466:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000d446a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>:
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
   d446a:	b508      	push	{r3, lr}
        instance().endTransaction();
   d446c:	f7ff ffae 	bl	d43cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
    }
   d4470:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
    }
    void endTransaction() {
        instance().endTransaction();
   d4474:	f000 bcc9 	b.w	d4e0a <_ZN8SPIClass14endTransactionEv>

000d4478 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>:
        instance().usingInterrupt(arg);
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
   d4478:	b510      	push	{r4, lr}
   d447a:	4604      	mov	r4, r0
        return instance().beginTransaction(settings);
   d447c:	f7ff ffa6 	bl	d43cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4480:	4621      	mov	r1, r4
    }
   d4482:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    }
    int32_t beginTransaction() {
        return instance().beginTransaction();
    }
    int32_t beginTransaction(const particle::__SPISettings& settings) {
        return instance().beginTransaction(settings);
   d4486:	f000 bcd9 	b.w	d4e3c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>
	...

000d448c <_ZN15Adafruit_BME2806read16Eh>:
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d448c:	b530      	push	{r4, r5, lr}
    uint16_t value;

    if (_cs == -1) {
   d448e:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4492:	3301      	adds	r3, #1
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16(byte reg)
{
   d4494:	b085      	sub	sp, #20
   d4496:	4604      	mov	r4, r0
   d4498:	460d      	mov	r5, r1
    uint16_t value;

    if (_cs == -1) {
   d449a:	d11d      	bne.n	d44d8 <_ZN15Adafruit_BME2806read16Eh+0x4c>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d449c:	7901      	ldrb	r1, [r0, #4]
   d449e:	6800      	ldr	r0, [r0, #0]
   d44a0:	f001 f8bb 	bl	d561a <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d44a4:	6820      	ldr	r0, [r4, #0]
   d44a6:	6803      	ldr	r3, [r0, #0]
   d44a8:	4629      	mov	r1, r5
   d44aa:	689b      	ldr	r3, [r3, #8]
   d44ac:	4798      	blx	r3
        _wire -> endTransmission();
   d44ae:	6820      	ldr	r0, [r4, #0]
   d44b0:	f001 f8be 	bl	d5630 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)2);
   d44b4:	2202      	movs	r2, #2
   d44b6:	7921      	ldrb	r1, [r4, #4]
   d44b8:	6820      	ldr	r0, [r4, #0]
   d44ba:	f001 f8ab 	bl	d5614 <_ZN7TwoWire11requestFromEhj>
        value = (_wire -> read() << 8) | _wire -> read();
   d44be:	6820      	ldr	r0, [r4, #0]
   d44c0:	6803      	ldr	r3, [r0, #0]
   d44c2:	695b      	ldr	r3, [r3, #20]
   d44c4:	4798      	blx	r3
   d44c6:	4605      	mov	r5, r0
   d44c8:	6820      	ldr	r0, [r4, #0]
   d44ca:	6803      	ldr	r3, [r0, #0]
   d44cc:	695b      	ldr	r3, [r3, #20]
   d44ce:	4798      	blx	r3
   d44d0:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d44d4:	b285      	uxth	r5, r0
   d44d6:	e035      	b.n	d4544 <_ZN15Adafruit_BME2806read16Eh+0xb8>
    } else {
        if (_sck == -1)
   d44d8:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d44dc:	3301      	adds	r3, #1
   d44de:	d10e      	bne.n	d44fe <_ZN15Adafruit_BME2806read16Eh+0x72>
public:
  __SPISettings(uint32_t clock, uint8_t bitOrder, uint8_t dataMode)
    : default_{false},
      clock_{clock},
      bitOrder_{bitOrder},
      dataMode_{dataMode}
   d44e0:	4b1a      	ldr	r3, [pc, #104]	; (d454c <_ZN15Adafruit_BME2806read16Eh+0xc0>)
   d44e2:	4a1b      	ldr	r2, [pc, #108]	; (d4550 <_ZN15Adafruit_BME2806read16Eh+0xc4>)
   d44e4:	9300      	str	r3, [sp, #0]
   d44e6:	9202      	str	r2, [sp, #8]
   d44e8:	2300      	movs	r3, #0
   d44ea:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d44ec:	4668      	mov	r0, sp
   d44ee:	f88d 3004 	strb.w	r3, [sp, #4]
   d44f2:	f88d 200c 	strb.w	r2, [sp, #12]
   d44f6:	f88d 300d 	strb.w	r3, [sp, #13]
   d44fa:	f7ff ffbd 	bl	d4478 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d44fe:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4502:	2100      	movs	r1, #0
   d4504:	b280      	uxth	r0, r0
   d4506:	f001 fa80 	bl	d5a0a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d450a:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d450e:	4620      	mov	r0, r4
   d4510:	f7ff ff74 	bl	d43fc <_ZN15Adafruit_BME2807spixferEh>
        value = (spixfer(0) << 8) | spixfer(0);
   d4514:	2100      	movs	r1, #0
   d4516:	4620      	mov	r0, r4
   d4518:	f7ff ff70 	bl	d43fc <_ZN15Adafruit_BME2807spixferEh>
   d451c:	2100      	movs	r1, #0
   d451e:	4605      	mov	r5, r0
   d4520:	4620      	mov	r0, r4
   d4522:	f7ff ff6b 	bl	d43fc <_ZN15Adafruit_BME2807spixferEh>
   d4526:	ea40 2005 	orr.w	r0, r0, r5, lsl #8
   d452a:	b285      	uxth	r5, r0
        digitalWrite(_cs, HIGH);
   d452c:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4530:	2101      	movs	r1, #1
   d4532:	b280      	uxth	r0, r0
   d4534:	f001 fa69 	bl	d5a0a <digitalWrite>
        if (_sck == -1)
   d4538:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d453c:	3301      	adds	r3, #1
   d453e:	d101      	bne.n	d4544 <_ZN15Adafruit_BME2806read16Eh+0xb8>
            SPI.endTransaction(); // release the SPI bus
   d4540:	f7ff ff93 	bl	d446a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }

    return value;
}
   d4544:	4628      	mov	r0, r5
   d4546:	b005      	add	sp, #20
   d4548:	bd30      	pop	{r4, r5, pc}
   d454a:	bf00      	nop
   d454c:	000d6ab4 	.word	0x000d6ab4
   d4550:	0007a120 	.word	0x0007a120

000d4554 <_ZN15Adafruit_BME2809read16_LEEh>:
    @brief  Reads a signed 16 bit little endian value over I2C or SPI
    @param reg the register address to read from
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
uint16_t Adafruit_BME280::read16_LE(byte reg) {
   d4554:	b508      	push	{r3, lr}
    uint16_t temp = read16(reg);
   d4556:	f7ff ff99 	bl	d448c <_ZN15Adafruit_BME2806read16Eh>
    return (temp >> 8) | (temp << 8);
   d455a:	ba40      	rev16	r0, r0
}
   d455c:	b280      	uxth	r0, r0
   d455e:	bd08      	pop	{r3, pc}

000d4560 <_ZN15Adafruit_BME2805read8Eh>:
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4560:	b530      	push	{r4, r5, lr}
    uint8_t value;
    
    if (_cs == -1) {
   d4562:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4566:	3301      	adds	r3, #1
    @brief  Reads an 8 bit value over I2C or SPI
    @param reg the register address to read from
    @returns the data byte read from the device
*/
/**************************************************************************/
uint8_t Adafruit_BME280::read8(byte reg) {
   d4568:	b085      	sub	sp, #20
   d456a:	4604      	mov	r4, r0
   d456c:	460d      	mov	r5, r1
    uint8_t value;
    
    if (_cs == -1) {
   d456e:	d116      	bne.n	d459e <_ZN15Adafruit_BME2805read8Eh+0x3e>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d4570:	7901      	ldrb	r1, [r0, #4]
   d4572:	6800      	ldr	r0, [r0, #0]
   d4574:	f001 f851 	bl	d561a <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4578:	6820      	ldr	r0, [r4, #0]
   d457a:	6803      	ldr	r3, [r0, #0]
   d457c:	4629      	mov	r1, r5
   d457e:	689b      	ldr	r3, [r3, #8]
   d4580:	4798      	blx	r3
        _wire -> endTransmission();
   d4582:	6820      	ldr	r0, [r4, #0]
   d4584:	f001 f854 	bl	d5630 <_ZN7TwoWire15endTransmissionEv>
        _wire -> requestFrom((uint8_t)_i2caddr, (byte)1);
   d4588:	2201      	movs	r2, #1
   d458a:	7921      	ldrb	r1, [r4, #4]
   d458c:	6820      	ldr	r0, [r4, #0]
   d458e:	f001 f841 	bl	d5614 <_ZN7TwoWire11requestFromEhj>
        value = _wire -> read();
   d4592:	6820      	ldr	r0, [r4, #0]
   d4594:	6803      	ldr	r3, [r0, #0]
   d4596:	695b      	ldr	r3, [r3, #20]
   d4598:	4798      	blx	r3
   d459a:	b2c5      	uxtb	r5, r0
   d459c:	e02e      	b.n	d45fc <_ZN15Adafruit_BME2805read8Eh+0x9c>
    } else {
        if (_sck == -1)
   d459e:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d45a2:	3301      	adds	r3, #1
   d45a4:	d10e      	bne.n	d45c4 <_ZN15Adafruit_BME2805read8Eh+0x64>
   d45a6:	4b17      	ldr	r3, [pc, #92]	; (d4604 <_ZN15Adafruit_BME2805read8Eh+0xa4>)
   d45a8:	4a17      	ldr	r2, [pc, #92]	; (d4608 <_ZN15Adafruit_BME2805read8Eh+0xa8>)
   d45aa:	9300      	str	r3, [sp, #0]
   d45ac:	9202      	str	r2, [sp, #8]
   d45ae:	2300      	movs	r3, #0
   d45b0:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d45b2:	4668      	mov	r0, sp
   d45b4:	f88d 3004 	strb.w	r3, [sp, #4]
   d45b8:	f88d 200c 	strb.w	r2, [sp, #12]
   d45bc:	f88d 300d 	strb.w	r3, [sp, #13]
   d45c0:	f7ff ff5a 	bl	d4478 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d45c4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d45c8:	2100      	movs	r1, #0
   d45ca:	b280      	uxth	r0, r0
   d45cc:	f001 fa1d 	bl	d5a0a <digitalWrite>
        spixfer(reg | 0x80); // read, bit 7 high
   d45d0:	f045 0180 	orr.w	r1, r5, #128	; 0x80
   d45d4:	4620      	mov	r0, r4
   d45d6:	f7ff ff11 	bl	d43fc <_ZN15Adafruit_BME2807spixferEh>
        value = spixfer(0);
   d45da:	2100      	movs	r1, #0
   d45dc:	4620      	mov	r0, r4
   d45de:	f7ff ff0d 	bl	d43fc <_ZN15Adafruit_BME2807spixferEh>
   d45e2:	4605      	mov	r5, r0
        digitalWrite(_cs, HIGH);
   d45e4:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d45e8:	2101      	movs	r1, #1
   d45ea:	b280      	uxth	r0, r0
   d45ec:	f001 fa0d 	bl	d5a0a <digitalWrite>
        if (_sck == -1)
   d45f0:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d45f4:	3301      	adds	r3, #1
   d45f6:	d101      	bne.n	d45fc <_ZN15Adafruit_BME2805read8Eh+0x9c>
            SPI.endTransaction(); // release the SPI bus
   d45f8:	f7ff ff37 	bl	d446a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
    return value;
}
   d45fc:	4628      	mov	r0, r5
   d45fe:	b005      	add	sp, #20
   d4600:	bd30      	pop	{r4, r5, pc}
   d4602:	bf00      	nop
   d4604:	000d6ab4 	.word	0x000d6ab4
   d4608:	0007a120 	.word	0x0007a120

000d460c <_ZN15Adafruit_BME28020isReadingCalibrationEv>:
    @brief return true if chip is busy reading cal data
    @returns true if reading calibration, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::isReadingCalibration(void)
{
   d460c:	b508      	push	{r3, lr}
  uint8_t const rStatus = read8(BME280_REGISTER_STATUS);
   d460e:	21f3      	movs	r1, #243	; 0xf3
   d4610:	f7ff ffa6 	bl	d4560 <_ZN15Adafruit_BME2805read8Eh>

  return (rStatus & (1 << 0)) != 0;
}
   d4614:	f000 0001 	and.w	r0, r0, #1
   d4618:	bd08      	pop	{r3, pc}

000d461a <_ZN15Adafruit_BME28016readCoefficientsEv>:
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d461a:	b538      	push	{r3, r4, r5, lr}
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d461c:	2188      	movs	r1, #136	; 0x88
/*!
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
   d461e:	4604      	mov	r4, r0
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4620:	f7ff ff98 	bl	d4554 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4624:	218a      	movs	r1, #138	; 0x8a
    @brief  Reads the factory-set coefficients
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
   d4626:	82a0      	strh	r0, [r4, #20]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4628:	4620      	mov	r0, r4
   d462a:	f7ff ff93 	bl	d4554 <_ZN15Adafruit_BME2809read16_LEEh>
   d462e:	218c      	movs	r1, #140	; 0x8c
*/
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
   d4630:	82e0      	strh	r0, [r4, #22]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4632:	4620      	mov	r0, r4
   d4634:	f7ff ff8e 	bl	d4554 <_ZN15Adafruit_BME2809read16_LEEh>
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4638:	218e      	movs	r1, #142	; 0x8e
/**************************************************************************/
void Adafruit_BME280::readCoefficients(void)
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);
   d463a:	8320      	strh	r0, [r4, #24]

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d463c:	4620      	mov	r0, r4
   d463e:	f7ff ff89 	bl	d4554 <_ZN15Adafruit_BME2809read16_LEEh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4642:	2190      	movs	r1, #144	; 0x90
{
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
   d4644:	8360      	strh	r0, [r4, #26]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4646:	4620      	mov	r0, r4
   d4648:	f7ff ff84 	bl	d4554 <_ZN15Adafruit_BME2809read16_LEEh>
   d464c:	2192      	movs	r1, #146	; 0x92
    _bme280_calib.dig_T1 = read16_LE(BME280_REGISTER_DIG_T1);
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
   d464e:	83a0      	strh	r0, [r4, #28]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4650:	4620      	mov	r0, r4
   d4652:	f7ff ff7f 	bl	d4554 <_ZN15Adafruit_BME2809read16_LEEh>
   d4656:	2194      	movs	r1, #148	; 0x94
    _bme280_calib.dig_T2 = readS16_LE(BME280_REGISTER_DIG_T2);
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
   d4658:	83e0      	strh	r0, [r4, #30]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d465a:	4620      	mov	r0, r4
   d465c:	f7ff ff7a 	bl	d4554 <_ZN15Adafruit_BME2809read16_LEEh>
   d4660:	2196      	movs	r1, #150	; 0x96
    _bme280_calib.dig_T3 = readS16_LE(BME280_REGISTER_DIG_T3);

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
   d4662:	8420      	strh	r0, [r4, #32]
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4664:	4620      	mov	r0, r4
   d4666:	f7ff ff75 	bl	d4554 <_ZN15Adafruit_BME2809read16_LEEh>
   d466a:	2198      	movs	r1, #152	; 0x98

    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
   d466c:	8460      	strh	r0, [r4, #34]	; 0x22
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d466e:	4620      	mov	r0, r4
   d4670:	f7ff ff70 	bl	d4554 <_ZN15Adafruit_BME2809read16_LEEh>
   d4674:	219a      	movs	r1, #154	; 0x9a
    _bme280_calib.dig_P1 = read16_LE(BME280_REGISTER_DIG_P1);
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
   d4676:	84a0      	strh	r0, [r4, #36]	; 0x24
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4678:	4620      	mov	r0, r4
   d467a:	f7ff ff6b 	bl	d4554 <_ZN15Adafruit_BME2809read16_LEEh>
   d467e:	219c      	movs	r1, #156	; 0x9c
    _bme280_calib.dig_P2 = readS16_LE(BME280_REGISTER_DIG_P2);
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
   d4680:	84e0      	strh	r0, [r4, #38]	; 0x26
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d4682:	4620      	mov	r0, r4
   d4684:	f7ff ff66 	bl	d4554 <_ZN15Adafruit_BME2809read16_LEEh>
   d4688:	219e      	movs	r1, #158	; 0x9e
    _bme280_calib.dig_P3 = readS16_LE(BME280_REGISTER_DIG_P3);
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
   d468a:	8520      	strh	r0, [r4, #40]	; 0x28
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d468c:	4620      	mov	r0, r4
   d468e:	f7ff ff61 	bl	d4554 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4692:	21a1      	movs	r1, #161	; 0xa1
    _bme280_calib.dig_P4 = readS16_LE(BME280_REGISTER_DIG_P4);
    _bme280_calib.dig_P5 = readS16_LE(BME280_REGISTER_DIG_P5);
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);
   d4694:	8560      	strh	r0, [r4, #42]	; 0x2a

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d4696:	4620      	mov	r0, r4
   d4698:	f7ff ff62 	bl	d4560 <_ZN15Adafruit_BME2805read8Eh>
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d469c:	21e1      	movs	r1, #225	; 0xe1
    _bme280_calib.dig_P6 = readS16_LE(BME280_REGISTER_DIG_P6);
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
   d469e:	f884 002c 	strb.w	r0, [r4, #44]	; 0x2c
    @returns the 16 bit data value read from the device
*/
/**************************************************************************/
int16_t Adafruit_BME280::readS16_LE(byte reg)
{
    return (int16_t)read16_LE(reg);
   d46a2:	4620      	mov	r0, r4
   d46a4:	f7ff ff56 	bl	d4554 <_ZN15Adafruit_BME2809read16_LEEh>
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d46a8:	21e3      	movs	r1, #227	; 0xe3
    _bme280_calib.dig_P7 = readS16_LE(BME280_REGISTER_DIG_P7);
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
   d46aa:	85e0      	strh	r0, [r4, #46]	; 0x2e
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d46ac:	4620      	mov	r0, r4
   d46ae:	f7ff ff57 	bl	d4560 <_ZN15Adafruit_BME2805read8Eh>
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d46b2:	21e4      	movs	r1, #228	; 0xe4
    _bme280_calib.dig_P8 = readS16_LE(BME280_REGISTER_DIG_P8);
    _bme280_calib.dig_P9 = readS16_LE(BME280_REGISTER_DIG_P9);

    _bme280_calib.dig_H1 = read8(BME280_REGISTER_DIG_H1);
    _bme280_calib.dig_H2 = readS16_LE(BME280_REGISTER_DIG_H2);
    _bme280_calib.dig_H3 = read8(BME280_REGISTER_DIG_H3);
   d46b4:	f884 0030 	strb.w	r0, [r4, #48]	; 0x30
    _bme280_calib.dig_H4 = (read8(BME280_REGISTER_DIG_H4) << 4) | (read8(BME280_REGISTER_DIG_H4+1) & 0xF);
   d46b8:	4620      	mov	r0, r4
   d46ba:	f7ff ff51 	bl	d4560 <_ZN15Adafruit_BME2805read8Eh>
   d46be:	21e5      	movs	r1, #229	; 0xe5
   d46c0:	4605      	mov	r5, r0
   d46c2:	4620      	mov	r0, r4
   d46c4:	f7ff ff4c 	bl	d4560 <_ZN15Adafruit_BME2805read8Eh>
   d46c8:	f000 000f 	and.w	r0, r0, #15
   d46cc:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d46d0:	8660      	strh	r0, [r4, #50]	; 0x32
    _bme280_calib.dig_H5 = (read8(BME280_REGISTER_DIG_H5+1) << 4) | (read8(BME280_REGISTER_DIG_H5) >> 4);
   d46d2:	21e6      	movs	r1, #230	; 0xe6
   d46d4:	4620      	mov	r0, r4
   d46d6:	f7ff ff43 	bl	d4560 <_ZN15Adafruit_BME2805read8Eh>
   d46da:	21e5      	movs	r1, #229	; 0xe5
   d46dc:	4605      	mov	r5, r0
   d46de:	4620      	mov	r0, r4
   d46e0:	f7ff ff3e 	bl	d4560 <_ZN15Adafruit_BME2805read8Eh>
   d46e4:	1100      	asrs	r0, r0, #4
   d46e6:	ea40 1005 	orr.w	r0, r0, r5, lsl #4
   d46ea:	86a0      	strh	r0, [r4, #52]	; 0x34
    _bme280_calib.dig_H6 = (int8_t)read8(BME280_REGISTER_DIG_H6);
   d46ec:	21e7      	movs	r1, #231	; 0xe7
   d46ee:	4620      	mov	r0, r4
   d46f0:	f7ff ff36 	bl	d4560 <_ZN15Adafruit_BME2805read8Eh>
   d46f4:	f884 0036 	strb.w	r0, [r4, #54]	; 0x36
   d46f8:	bd38      	pop	{r3, r4, r5, pc}
	...

000d46fc <_ZN15Adafruit_BME2806write8Ehh>:
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d46fc:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
    if (_cs == -1) {
   d46fe:	f990 3010 	ldrsb.w	r3, [r0, #16]
   d4702:	3301      	adds	r3, #1
    @brief  Writes an 8 bit value over I2C or SPI
    @param reg the register address to write to
    @param value the value to write to the register
*/
/**************************************************************************/
void Adafruit_BME280::write8(byte reg, byte value) {
   d4704:	4604      	mov	r4, r0
   d4706:	460e      	mov	r6, r1
   d4708:	4615      	mov	r5, r2
    if (_cs == -1) {
   d470a:	d111      	bne.n	d4730 <_ZN15Adafruit_BME2806write8Ehh+0x34>
        _wire -> beginTransmission((uint8_t)_i2caddr);
   d470c:	7901      	ldrb	r1, [r0, #4]
   d470e:	6800      	ldr	r0, [r0, #0]
   d4710:	f000 ff83 	bl	d561a <_ZN7TwoWire17beginTransmissionEh>
        _wire -> write((uint8_t)reg);
   d4714:	6820      	ldr	r0, [r4, #0]
   d4716:	6803      	ldr	r3, [r0, #0]
   d4718:	4631      	mov	r1, r6
   d471a:	689b      	ldr	r3, [r3, #8]
   d471c:	4798      	blx	r3
        _wire -> write((uint8_t)value);
   d471e:	6820      	ldr	r0, [r4, #0]
   d4720:	6803      	ldr	r3, [r0, #0]
   d4722:	4629      	mov	r1, r5
   d4724:	689b      	ldr	r3, [r3, #8]
   d4726:	4798      	blx	r3
        _wire -> endTransmission();
   d4728:	6820      	ldr	r0, [r4, #0]
   d472a:	f000 ff81 	bl	d5630 <_ZN7TwoWire15endTransmissionEv>
   d472e:	e02d      	b.n	d478c <_ZN15Adafruit_BME2806write8Ehh+0x90>
    } else {
        if (_sck == -1)
   d4730:	f990 3013 	ldrsb.w	r3, [r0, #19]
   d4734:	3301      	adds	r3, #1
   d4736:	d10e      	bne.n	d4756 <_ZN15Adafruit_BME2806write8Ehh+0x5a>
   d4738:	4b15      	ldr	r3, [pc, #84]	; (d4790 <_ZN15Adafruit_BME2806write8Ehh+0x94>)
   d473a:	4a16      	ldr	r2, [pc, #88]	; (d4794 <_ZN15Adafruit_BME2806write8Ehh+0x98>)
   d473c:	9300      	str	r3, [sp, #0]
   d473e:	9202      	str	r2, [sp, #8]
   d4740:	2300      	movs	r3, #0
   d4742:	2201      	movs	r2, #1
            SPI.beginTransaction(SPISettings(500000, MSBFIRST, SPI_MODE0));
   d4744:	4668      	mov	r0, sp
   d4746:	f88d 3004 	strb.w	r3, [sp, #4]
   d474a:	f88d 200c 	strb.w	r2, [sp, #12]
   d474e:	f88d 300d 	strb.w	r3, [sp, #13]
   d4752:	f7ff fe91 	bl	d4478 <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE16beginTransactionERKNS_13__SPISettingsE.isra.3.constprop.9>
        digitalWrite(_cs, LOW);
   d4756:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d475a:	2100      	movs	r1, #0
   d475c:	b280      	uxth	r0, r0
   d475e:	f001 f954 	bl	d5a0a <digitalWrite>
        spixfer(reg & ~0x80); // write, bit 7 low
   d4762:	f006 017f 	and.w	r1, r6, #127	; 0x7f
   d4766:	4620      	mov	r0, r4
   d4768:	f7ff fe48 	bl	d43fc <_ZN15Adafruit_BME2807spixferEh>
        spixfer(value);
   d476c:	4629      	mov	r1, r5
   d476e:	4620      	mov	r0, r4
   d4770:	f7ff fe44 	bl	d43fc <_ZN15Adafruit_BME2807spixferEh>
        digitalWrite(_cs, HIGH);
   d4774:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4778:	2101      	movs	r1, #1
   d477a:	b280      	uxth	r0, r0
   d477c:	f001 f945 	bl	d5a0a <digitalWrite>
    if (_sck == -1)
   d4780:	f994 3013 	ldrsb.w	r3, [r4, #19]
   d4784:	3301      	adds	r3, #1
   d4786:	d101      	bne.n	d478c <_ZN15Adafruit_BME2806write8Ehh+0x90>
        SPI.endTransaction(); // release the SPI bus
   d4788:	f7ff fe6f 	bl	d446a <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE14endTransactionEv.isra.4>
    }
}
   d478c:	b004      	add	sp, #16
   d478e:	bd70      	pop	{r4, r5, r6, pc}
   d4790:	000d6ab4 	.word	0x000d6ab4
   d4794:	0007a120 	.word	0x0007a120

000d4798 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>:
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d4798:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
    _measReg.mode     = mode;
   d479a:	f890 503c 	ldrb.w	r5, [r0, #60]	; 0x3c
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d479e:	f89d 6018 	ldrb.w	r6, [sp, #24]
   d47a2:	f89d e01c 	ldrb.w	lr, [sp, #28]
   d47a6:	f89d 7020 	ldrb.w	r7, [sp, #32]
    _measReg.mode     = mode;
   d47aa:	f361 1587 	bfi	r5, r1, #6, #2
    _measReg.osrs_t   = tempSampling;
   d47ae:	f362 0502 	bfi	r5, r2, #0, #3
    _measReg.osrs_p   = pressSampling;
   d47b2:	f363 05c5 	bfi	r5, r3, #3, #3
        
    
    _humReg.osrs_h    = humSampling;
   d47b6:	f890 3040 	ldrb.w	r3, [r0, #64]	; 0x40
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
    _measReg.mode     = mode;
    _measReg.osrs_t   = tempSampling;
    _measReg.osrs_p   = pressSampling;
   d47ba:	f880 503c 	strb.w	r5, [r0, #60]	; 0x3c
        
    
    _humReg.osrs_h    = humSampling;
   d47be:	f366 1347 	bfi	r3, r6, #5, #3
   d47c2:	f880 3040 	strb.w	r3, [r0, #64]	; 0x40
    _configReg.filter = filter;
   d47c6:	f890 3038 	ldrb.w	r3, [r0, #56]	; 0x38
   d47ca:	f36e 03c5 	bfi	r3, lr, #3, #3
void Adafruit_BME280::setSampling(sensor_mode       mode,
		 sensor_sampling   tempSampling,
		 sensor_sampling   pressSampling,
		 sensor_sampling   humSampling,
		 sensor_filter     filter,
		 standby_duration  duration) {
   d47ce:	4604      	mov	r4, r0
    _measReg.osrs_p   = pressSampling;
        
    
    _humReg.osrs_h    = humSampling;
    _configReg.filter = filter;
    _configReg.t_sb   = duration;
   d47d0:	f367 0302 	bfi	r3, r7, #0, #3
   d47d4:	f880 3038 	strb.w	r3, [r0, #56]	; 0x38

    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
   d47d8:	f006 0207 	and.w	r2, r6, #7
   d47dc:	21f2      	movs	r1, #242	; 0xf2
   d47de:	f7ff ff8d 	bl	d46fc <_ZN15Adafruit_BME2806write8Ehh>
            unsigned int none : 1;  ///< unused - don't set
            unsigned int spi3w_en : 1; ///< unused - don't set

            /// @return combined config register
            unsigned int get() {
                return (t_sb << 5) | (filter << 2) | spi3w_en;
   d47e2:	f894 2038 	ldrb.w	r2, [r4, #56]	; 0x38
    write8(BME280_REGISTER_CONFIG, _configReg.get());
   d47e6:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d47ea:	f002 0107 	and.w	r1, r2, #7
   d47ee:	009b      	lsls	r3, r3, #2
   d47f0:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d47f4:	ea43 12d2 	orr.w	r2, r3, r2, lsr #7
   d47f8:	4620      	mov	r0, r4
   d47fa:	21f5      	movs	r1, #245	; 0xf5
   d47fc:	f7ff ff7e 	bl	d46fc <_ZN15Adafruit_BME2806write8Ehh>
            // 11       = normal
            unsigned int mode : 2; ///< device mode

            /// @return combined ctrl register
            unsigned int get() {
                return (osrs_t << 5) | (osrs_p << 2) | mode;
   d4800:	f894 203c 	ldrb.w	r2, [r4, #60]	; 0x3c
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d4804:	f3c2 03c2 	ubfx	r3, r2, #3, #3
   d4808:	f002 0107 	and.w	r1, r2, #7
   d480c:	009b      	lsls	r3, r3, #2
   d480e:	ea43 1341 	orr.w	r3, r3, r1, lsl #5
   d4812:	ea43 1292 	orr.w	r2, r3, r2, lsr #6
   d4816:	4620      	mov	r0, r4
   d4818:	21f4      	movs	r1, #244	; 0xf4
}
   d481a:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
    
    // you must make sure to also set REGISTER_CONTROL after setting the
    // CONTROLHUMID register, otherwise the values won't be applied (see DS 5.4.3)
    write8(BME280_REGISTER_CONTROLHUMID, _humReg.get());
    write8(BME280_REGISTER_CONFIG, _configReg.get());
    write8(BME280_REGISTER_CONTROL, _measReg.get());
   d481e:	f7ff bf6d 	b.w	d46fc <_ZN15Adafruit_BME2806write8Ehh>

000d4822 <_ZN15Adafruit_BME2804initEv>:
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d4822:	b530      	push	{r4, r5, lr}
   d4824:	4604      	mov	r4, r0
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d4826:	f990 0010 	ldrsb.w	r0, [r0, #16]
   d482a:	1c42      	adds	r2, r0, #1
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::init()
{
   d482c:	b085      	sub	sp, #20
    // init I2C or SPI sensor interface
    if (_cs == -1) {
   d482e:	d103      	bne.n	d4838 <_ZN15Adafruit_BME2804initEv+0x16>
        // I2C
        _wire -> begin();
   d4830:	6820      	ldr	r0, [r4, #0]
   d4832:	f000 febb 	bl	d55ac <_ZN7TwoWire5beginEv>
   d4836:	e022      	b.n	d487e <_ZN15Adafruit_BME2804initEv+0x5c>
    } else {
        digitalWrite(_cs, HIGH);
   d4838:	2101      	movs	r1, #1
   d483a:	b280      	uxth	r0, r0
   d483c:	f001 f8e5 	bl	d5a0a <digitalWrite>
        pinMode(_cs, OUTPUT);
   d4840:	f994 0010 	ldrsb.w	r0, [r4, #16]
   d4844:	2101      	movs	r1, #1
   d4846:	b280      	uxth	r0, r0
   d4848:	f001 f8ce 	bl	d59e8 <pinMode>
        if (_sck == -1) {
   d484c:	f994 0013 	ldrsb.w	r0, [r4, #19]
   d4850:	1c43      	adds	r3, r0, #1
   d4852:	d104      	bne.n	d485e <_ZN15Adafruit_BME2804initEv+0x3c>
        static SPIClass instance(Interface);
        return instance;
    }

    void begin() {
        instance().begin();
   d4854:	f7ff fdba 	bl	d43cc <_ZN8particle8SpiProxyIL17HAL_SPI_Interface0EE8instanceEv>
   d4858:	f000 fac6 	bl	d4de8 <_ZN8SPIClass5beginEv>
   d485c:	e00f      	b.n	d487e <_ZN15Adafruit_BME2804initEv+0x5c>
            // hardware SPI
            SPI.begin();
        } else {
            // software SPI
            pinMode(_sck, OUTPUT);
   d485e:	2101      	movs	r1, #1
   d4860:	b280      	uxth	r0, r0
   d4862:	f001 f8c1 	bl	d59e8 <pinMode>
            pinMode(_mosi, OUTPUT);
   d4866:	f994 0011 	ldrsb.w	r0, [r4, #17]
   d486a:	2101      	movs	r1, #1
   d486c:	b280      	uxth	r0, r0
   d486e:	f001 f8bb 	bl	d59e8 <pinMode>
            pinMode(_miso, INPUT);
   d4872:	f994 0012 	ldrsb.w	r0, [r4, #18]
   d4876:	2100      	movs	r1, #0
   d4878:	b280      	uxth	r0, r0
   d487a:	f001 f8b5 	bl	d59e8 <pinMode>
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d487e:	21d0      	movs	r1, #208	; 0xd0
   d4880:	4620      	mov	r0, r4
   d4882:	f7ff fe6d 	bl	d4560 <_ZN15Adafruit_BME2805read8Eh>
    if (_sensorID != 0x60)
   d4886:	2860      	cmp	r0, #96	; 0x60
            pinMode(_miso, INPUT);
        }
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
   d4888:	60a0      	str	r0, [r4, #8]
    if (_sensorID != 0x60)
   d488a:	d120      	bne.n	d48ce <_ZN15Adafruit_BME2804initEv+0xac>
        return false;

    // reset the device using soft-reset
    // this makes sure the IIR is off, etc.
    write8(BME280_REGISTER_SOFTRESET, 0xB6);
   d488c:	4620      	mov	r0, r4
   d488e:	22b6      	movs	r2, #182	; 0xb6
   d4890:	21e0      	movs	r1, #224	; 0xe0
   d4892:	f7ff ff33 	bl	d46fc <_ZN15Adafruit_BME2806write8Ehh>

    // wait for chip to wake up.
    delay(300);
   d4896:	f44f 7096 	mov.w	r0, #300	; 0x12c
   d489a:	f000 fc25 	bl	d50e8 <delay>

    // if chip is still reading calibration, delay
    while (isReadingCalibration())
   d489e:	4620      	mov	r0, r4
   d48a0:	f7ff feb4 	bl	d460c <_ZN15Adafruit_BME28020isReadingCalibrationEv>
   d48a4:	4605      	mov	r5, r0
   d48a6:	b108      	cbz	r0, d48ac <_ZN15Adafruit_BME2804initEv+0x8a>
          delay(100);
   d48a8:	2064      	movs	r0, #100	; 0x64
   d48aa:	e7f6      	b.n	d489a <_ZN15Adafruit_BME2804initEv+0x78>

    readCoefficients(); // read trimming parameters, see DS 4.2.2
   d48ac:	4620      	mov	r0, r4
   d48ae:	f7ff feb4 	bl	d461a <_ZN15Adafruit_BME28016readCoefficientsEv>

    setSampling(); // use defaults
   d48b2:	2305      	movs	r3, #5
   d48b4:	9300      	str	r3, [sp, #0]
   d48b6:	461a      	mov	r2, r3
   d48b8:	2103      	movs	r1, #3
   d48ba:	4620      	mov	r0, r4
   d48bc:	9502      	str	r5, [sp, #8]
   d48be:	9501      	str	r5, [sp, #4]
   d48c0:	f7ff ff6a 	bl	d4798 <_ZN15Adafruit_BME28011setSamplingENS_11sensor_modeENS_15sensor_samplingES1_S1_NS_13sensor_filterENS_16standby_durationE>

    delay(100);
   d48c4:	2064      	movs	r0, #100	; 0x64
   d48c6:	f000 fc0f 	bl	d50e8 <delay>
   d48ca:	2001      	movs	r0, #1
   d48cc:	e000      	b.n	d48d0 <_ZN15Adafruit_BME2804initEv+0xae>
    }

    // check if sensor, i.e. the chip ID is correct
    _sensorID = read8(BME280_REGISTER_CHIPID);
    if (_sensorID != 0x60)
        return false;
   d48ce:	2000      	movs	r0, #0
    setSampling(); // use defaults

    delay(100);

    return true;
}
   d48d0:	b005      	add	sp, #20
   d48d2:	bd30      	pop	{r4, r5, pc}

000d48d4 <_ZN15Adafruit_BME2805beginEv>:
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d48d4:	2377      	movs	r3, #119	; 0x77
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d48d6:	b510      	push	{r4, lr}
    bool status = false;
    _i2caddr = BME280_ADDRESS;
   d48d8:	7103      	strb	r3, [r0, #4]
    @brief  Initialise sensor with given parameters / settings
    @returns true on success, false otherwise
*/
/**************************************************************************/
bool Adafruit_BME280::begin(void)
{
   d48da:	4604      	mov	r4, r0
    bool status = false;
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
   d48dc:	f001 f8dc 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d48e0:	6020      	str	r0, [r4, #0]
	status = init();
   d48e2:	4620      	mov	r0, r4
   d48e4:	f7ff ff9d 	bl	d4822 <_ZN15Adafruit_BME2804initEv>
 	if(!status){
   d48e8:	b930      	cbnz	r0, d48f8 <_ZN15Adafruit_BME2805beginEv+0x24>
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
   d48ea:	2376      	movs	r3, #118	; 0x76
   d48ec:	7123      	strb	r3, [r4, #4]
 		status = init();
   d48ee:	4620      	mov	r0, r4
 		}
	return status;
}
   d48f0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    _i2caddr = BME280_ADDRESS;
	_wire = &Wire;
	status = init();
 	if(!status){
 		_i2caddr = BME280_ADDRESS_ALTERNATE;
 		status = init();
   d48f4:	f7ff bf95 	b.w	d4822 <_ZN15Adafruit_BME2804initEv>
 		}
	return status;
}
   d48f8:	bd10      	pop	{r4, pc}

000d48fa <_GLOBAL__sub_I__ZN15Adafruit_BME280C2Ev>:
   d48fa:	f000 b813 	b.w	d4924 <HAL_Pin_Map>

000d48fe <_GLOBAL__sub_I__ZN7TinyGPSC2Ev>:
   d48fe:	f000 b811 	b.w	d4924 <HAL_Pin_Map>
	...

000d4904 <netdb_freeaddrinfo>:

DYNALIB_BEGIN(hal_netdb)

DYNALIB_FN(0, hal_netdb, netdb_gethostbyname, struct hostent*(const char*))
DYNALIB_FN(1, hal_netdb, netdb_gethostbyname_r, int(const char*, struct hostent*, char*, size_t, struct hostent**, int*))
DYNALIB_FN(2, hal_netdb, netdb_freeaddrinfo, void(struct addrinfo*))
   d4904:	b508      	push	{r3, lr}
   d4906:	4b02      	ldr	r3, [pc, #8]	; (d4910 <netdb_freeaddrinfo+0xc>)
   d4908:	681b      	ldr	r3, [r3, #0]
   d490a:	689b      	ldr	r3, [r3, #8]
   d490c:	9301      	str	r3, [sp, #4]
   d490e:	bd08      	pop	{r3, pc}
   d4910:	00030268 	.word	0x00030268

000d4914 <netdb_getaddrinfo>:
DYNALIB_FN(3, hal_netdb, netdb_getaddrinfo, int(const char*, const char*, const struct addrinfo*, struct addrinfo**))
   d4914:	b508      	push	{r3, lr}
   d4916:	4b02      	ldr	r3, [pc, #8]	; (d4920 <netdb_getaddrinfo+0xc>)
   d4918:	681b      	ldr	r3, [r3, #0]
   d491a:	68db      	ldr	r3, [r3, #12]
   d491c:	9301      	str	r3, [sp, #4]
   d491e:	bd08      	pop	{r3, pc}
   d4920:	00030268 	.word	0x00030268

000d4924 <HAL_Pin_Map>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_gpio)

DYNALIB_FN(0, hal_gpio, HAL_Pin_Map, Hal_Pin_Info*(void))
   d4924:	b508      	push	{r3, lr}
   d4926:	4b02      	ldr	r3, [pc, #8]	; (d4930 <HAL_Pin_Map+0xc>)
   d4928:	681b      	ldr	r3, [r3, #0]
   d492a:	681b      	ldr	r3, [r3, #0]
   d492c:	9301      	str	r3, [sp, #4]
   d492e:	bd08      	pop	{r3, pc}
   d4930:	0003022c 	.word	0x0003022c

000d4934 <HAL_Pin_Mode>:
DYNALIB_FN(1, hal_gpio, HAL_Validate_Pin_Function, PinFunction(pin_t, PinFunction))
DYNALIB_FN(2, hal_gpio, HAL_Pin_Mode, void(pin_t, PinMode))
   d4934:	b508      	push	{r3, lr}
   d4936:	4b02      	ldr	r3, [pc, #8]	; (d4940 <HAL_Pin_Mode+0xc>)
   d4938:	681b      	ldr	r3, [r3, #0]
   d493a:	689b      	ldr	r3, [r3, #8]
   d493c:	9301      	str	r3, [sp, #4]
   d493e:	bd08      	pop	{r3, pc}
   d4940:	0003022c 	.word	0x0003022c

000d4944 <HAL_Get_Pin_Mode>:
DYNALIB_FN(3, hal_gpio, HAL_Get_Pin_Mode, PinMode(pin_t))
   d4944:	b508      	push	{r3, lr}
   d4946:	4b02      	ldr	r3, [pc, #8]	; (d4950 <HAL_Get_Pin_Mode+0xc>)
   d4948:	681b      	ldr	r3, [r3, #0]
   d494a:	68db      	ldr	r3, [r3, #12]
   d494c:	9301      	str	r3, [sp, #4]
   d494e:	bd08      	pop	{r3, pc}
   d4950:	0003022c 	.word	0x0003022c

000d4954 <HAL_GPIO_Write>:
DYNALIB_FN(4, hal_gpio, HAL_GPIO_Write, void(pin_t, uint8_t))
   d4954:	b508      	push	{r3, lr}
   d4956:	4b02      	ldr	r3, [pc, #8]	; (d4960 <HAL_GPIO_Write+0xc>)
   d4958:	681b      	ldr	r3, [r3, #0]
   d495a:	691b      	ldr	r3, [r3, #16]
   d495c:	9301      	str	r3, [sp, #4]
   d495e:	bd08      	pop	{r3, pc}
   d4960:	0003022c 	.word	0x0003022c

000d4964 <HAL_GPIO_Read>:
DYNALIB_FN(5, hal_gpio, HAL_GPIO_Read, int32_t(pin_t))
   d4964:	b508      	push	{r3, lr}
   d4966:	4b02      	ldr	r3, [pc, #8]	; (d4970 <HAL_GPIO_Read+0xc>)
   d4968:	681b      	ldr	r3, [r3, #0]
   d496a:	695b      	ldr	r3, [r3, #20]
   d496c:	9301      	str	r3, [sp, #4]
   d496e:	bd08      	pop	{r3, pc}
   d4970:	0003022c 	.word	0x0003022c

000d4974 <HAL_SPI_Begin>:
// New HAL functions must be added to the end of this list.
// GNINRAW

DYNALIB_BEGIN(hal_spi)

DYNALIB_FN(0, hal_spi, HAL_SPI_Begin, void(HAL_SPI_Interface, uint16_t))
   d4974:	b508      	push	{r3, lr}
   d4976:	4b02      	ldr	r3, [pc, #8]	; (d4980 <HAL_SPI_Begin+0xc>)
   d4978:	681b      	ldr	r3, [r3, #0]
   d497a:	681b      	ldr	r3, [r3, #0]
   d497c:	9301      	str	r3, [sp, #4]
   d497e:	bd08      	pop	{r3, pc}
   d4980:	00030230 	.word	0x00030230

000d4984 <HAL_SPI_Send_Receive_Data>:
DYNALIB_FN(1, hal_spi, HAL_SPI_End, void(HAL_SPI_Interface))
DYNALIB_FN(2, hal_spi, HAL_SPI_Set_Bit_Order, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(3, hal_spi, HAL_SPI_Set_Data_Mode, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(4, hal_spi, HAL_SPI_Set_Clock_Divider, void(HAL_SPI_Interface, uint8_t))
DYNALIB_FN(5, hal_spi, HAL_SPI_Send_Receive_Data, uint16_t(HAL_SPI_Interface, uint16_t))
   d4984:	b508      	push	{r3, lr}
   d4986:	4b02      	ldr	r3, [pc, #8]	; (d4990 <HAL_SPI_Send_Receive_Data+0xc>)
   d4988:	681b      	ldr	r3, [r3, #0]
   d498a:	695b      	ldr	r3, [r3, #20]
   d498c:	9301      	str	r3, [sp, #4]
   d498e:	bd08      	pop	{r3, pc}
   d4990:	00030230 	.word	0x00030230

000d4994 <HAL_SPI_Init>:
DYNALIB_FN(6, hal_spi, HAL_SPI_Is_Enabled_Old, bool(void))
DYNALIB_FN(7, hal_spi, HAL_SPI_Init, void(HAL_SPI_Interface))
   d4994:	b508      	push	{r3, lr}
   d4996:	4b02      	ldr	r3, [pc, #8]	; (d49a0 <HAL_SPI_Init+0xc>)
   d4998:	681b      	ldr	r3, [r3, #0]
   d499a:	69db      	ldr	r3, [r3, #28]
   d499c:	9301      	str	r3, [sp, #4]
   d499e:	bd08      	pop	{r3, pc}
   d49a0:	00030230 	.word	0x00030230

000d49a4 <HAL_SPI_Is_Enabled>:
DYNALIB_FN(8, hal_spi, HAL_SPI_Is_Enabled, bool(HAL_SPI_Interface))
   d49a4:	b508      	push	{r3, lr}
   d49a6:	4b02      	ldr	r3, [pc, #8]	; (d49b0 <HAL_SPI_Is_Enabled+0xc>)
   d49a8:	681b      	ldr	r3, [r3, #0]
   d49aa:	6a1b      	ldr	r3, [r3, #32]
   d49ac:	9301      	str	r3, [sp, #4]
   d49ae:	bd08      	pop	{r3, pc}
   d49b0:	00030230 	.word	0x00030230

000d49b4 <HAL_SPI_Info>:
DYNALIB_FN(9, hal_spi, HAL_SPI_Info, void(HAL_SPI_Interface, hal_spi_info_t*, void*))
   d49b4:	b508      	push	{r3, lr}
   d49b6:	4b02      	ldr	r3, [pc, #8]	; (d49c0 <HAL_SPI_Info+0xc>)
   d49b8:	681b      	ldr	r3, [r3, #0]
   d49ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d49bc:	9301      	str	r3, [sp, #4]
   d49be:	bd08      	pop	{r3, pc}
   d49c0:	00030230 	.word	0x00030230

000d49c4 <HAL_SPI_Set_Settings>:
DYNALIB_FN(10, hal_spi, HAL_SPI_DMA_Transfer, void(HAL_SPI_Interface, void*, void*, uint32_t, HAL_SPI_DMA_UserCallback))
DYNALIB_FN(11, hal_spi, HAL_SPI_Begin_Ext, void(HAL_SPI_Interface, SPI_Mode, uint16_t, void*))
DYNALIB_FN(12, hal_spi, HAL_SPI_Set_Callback_On_Select, void(HAL_SPI_Interface, HAL_SPI_Select_UserCallback, void*))
DYNALIB_FN(13, hal_spi, HAL_SPI_DMA_Transfer_Cancel, void(HAL_SPI_Interface))
DYNALIB_FN(14, hal_spi, HAL_SPI_DMA_Transfer_Status, int32_t(HAL_SPI_Interface, HAL_SPI_TransferStatus*))
DYNALIB_FN(15, hal_spi, HAL_SPI_Set_Settings, int32_t(HAL_SPI_Interface, uint8_t, uint8_t, uint8_t, uint8_t, void*))
   d49c4:	b508      	push	{r3, lr}
   d49c6:	4b02      	ldr	r3, [pc, #8]	; (d49d0 <HAL_SPI_Set_Settings+0xc>)
   d49c8:	681b      	ldr	r3, [r3, #0]
   d49ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d49cc:	9301      	str	r3, [sp, #4]
   d49ce:	bd08      	pop	{r3, pc}
   d49d0:	00030230 	.word	0x00030230

000d49d4 <HAL_SPI_Acquire>:
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
DYNALIB_FN(16, hal_spi, HAL_SPI_Acquire, int32_t(HAL_SPI_Interface, const HAL_SPI_AcquireConfig*))
   d49d4:	b508      	push	{r3, lr}
   d49d6:	4b02      	ldr	r3, [pc, #8]	; (d49e0 <HAL_SPI_Acquire+0xc>)
   d49d8:	681b      	ldr	r3, [r3, #0]
   d49da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d49dc:	9301      	str	r3, [sp, #4]
   d49de:	bd08      	pop	{r3, pc}
   d49e0:	00030230 	.word	0x00030230

000d49e4 <HAL_SPI_Release>:
DYNALIB_FN(17, hal_spi, HAL_SPI_Release, int32_t(HAL_SPI_Interface, void*))
   d49e4:	b508      	push	{r3, lr}
   d49e6:	4b02      	ldr	r3, [pc, #8]	; (d49f0 <HAL_SPI_Release+0xc>)
   d49e8:	681b      	ldr	r3, [r3, #0]
   d49ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d49ec:	9301      	str	r3, [sp, #4]
   d49ee:	bd08      	pop	{r3, pc}
   d49f0:	00030230 	.word	0x00030230

000d49f4 <HAL_RNG_GetRandomNumber>:

DYNALIB_BEGIN(hal)

#if PLATFORM_ID > 3
DYNALIB_FN(0, hal, HAL_RNG_Configuration, void(void))
DYNALIB_FN(1, hal, HAL_RNG_GetRandomNumber, uint32_t(void))
   d49f4:	b508      	push	{r3, lr}
   d49f6:	4b02      	ldr	r3, [pc, #8]	; (d4a00 <HAL_RNG_GetRandomNumber+0xc>)
   d49f8:	681b      	ldr	r3, [r3, #0]
   d49fa:	685b      	ldr	r3, [r3, #4]
   d49fc:	9301      	str	r3, [sp, #4]
   d49fe:	bd08      	pop	{r3, pc}
   d4a00:	00030218 	.word	0x00030218

000d4a04 <HAL_Timer_Get_Milli_Seconds>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal, HAL_Delay_Milliseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 1, hal, HAL_Delay_Microseconds, void(uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal, HAL_Timer_Get_Micro_Seconds, system_tick_t(void))
DYNALIB_FN(BASE_IDX + 3, hal, HAL_Timer_Get_Milli_Seconds, system_tick_t(void))
   d4a04:	b508      	push	{r3, lr}
   d4a06:	4b02      	ldr	r3, [pc, #8]	; (d4a10 <HAL_Timer_Get_Milli_Seconds+0xc>)
   d4a08:	681b      	ldr	r3, [r3, #0]
   d4a0a:	695b      	ldr	r3, [r3, #20]
   d4a0c:	9301      	str	r3, [sp, #4]
   d4a0e:	bd08      	pop	{r3, pc}
   d4a10:	00030218 	.word	0x00030218

000d4a14 <os_thread_is_current>:
DYNALIB_BEGIN(hal_concurrent)

#if PLATFORM_THREADING
DYNALIB_FN(0, hal_concurrent, __gthread_equal, bool(__gthread_t, __gthread_t))
DYNALIB_FN(1, hal_concurrent, os_thread_create, os_result_t(os_thread_t*, const char*, os_thread_prio_t, os_thread_fn_t, void*, size_t))
DYNALIB_FN(2, hal_concurrent, os_thread_is_current, bool(os_thread_t))
   d4a14:	b508      	push	{r3, lr}
   d4a16:	4b02      	ldr	r3, [pc, #8]	; (d4a20 <os_thread_is_current+0xc>)
   d4a18:	681b      	ldr	r3, [r3, #0]
   d4a1a:	689b      	ldr	r3, [r3, #8]
   d4a1c:	9301      	str	r3, [sp, #4]
   d4a1e:	bd08      	pop	{r3, pc}
   d4a20:	00030248 	.word	0x00030248

000d4a24 <os_thread_join>:
DYNALIB_FN(3, hal_concurrent, os_thread_yield, os_result_t(void))
DYNALIB_FN(4, hal_concurrent, os_thread_join, os_result_t(os_thread_t))
   d4a24:	b508      	push	{r3, lr}
   d4a26:	4b02      	ldr	r3, [pc, #8]	; (d4a30 <os_thread_join+0xc>)
   d4a28:	681b      	ldr	r3, [r3, #0]
   d4a2a:	691b      	ldr	r3, [r3, #16]
   d4a2c:	9301      	str	r3, [sp, #4]
   d4a2e:	bd08      	pop	{r3, pc}
   d4a30:	00030248 	.word	0x00030248

000d4a34 <os_thread_cleanup>:
DYNALIB_FN(5, hal_concurrent, os_thread_cleanup, os_result_t(os_thread_t))
   d4a34:	b508      	push	{r3, lr}
   d4a36:	4b02      	ldr	r3, [pc, #8]	; (d4a40 <os_thread_cleanup+0xc>)
   d4a38:	681b      	ldr	r3, [r3, #0]
   d4a3a:	695b      	ldr	r3, [r3, #20]
   d4a3c:	9301      	str	r3, [sp, #4]
   d4a3e:	bd08      	pop	{r3, pc}
   d4a40:	00030248 	.word	0x00030248

000d4a44 <os_mutex_recursive_create>:
DYNALIB_FN(13, hal_concurrent, os_mutex_destroy, int(os_mutex_t))
DYNALIB_FN(14, hal_concurrent, os_mutex_lock, int(os_mutex_t))
DYNALIB_FN(15, hal_concurrent, os_mutex_trylock, int(os_mutex_t))
DYNALIB_FN(16, hal_concurrent, os_mutex_unlock, int(os_mutex_t))

DYNALIB_FN(17, hal_concurrent, os_mutex_recursive_create, int(os_mutex_recursive_t*))
   d4a44:	b508      	push	{r3, lr}
   d4a46:	4b02      	ldr	r3, [pc, #8]	; (d4a50 <os_mutex_recursive_create+0xc>)
   d4a48:	681b      	ldr	r3, [r3, #0]
   d4a4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
   d4a4c:	9301      	str	r3, [sp, #4]
   d4a4e:	bd08      	pop	{r3, pc}
   d4a50:	00030248 	.word	0x00030248

000d4a54 <os_mutex_recursive_destroy>:
DYNALIB_FN(18, hal_concurrent, os_mutex_recursive_destroy, int(os_mutex_recursive_t))
   d4a54:	b508      	push	{r3, lr}
   d4a56:	4b02      	ldr	r3, [pc, #8]	; (d4a60 <os_mutex_recursive_destroy+0xc>)
   d4a58:	681b      	ldr	r3, [r3, #0]
   d4a5a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
   d4a5c:	9301      	str	r3, [sp, #4]
   d4a5e:	bd08      	pop	{r3, pc}
   d4a60:	00030248 	.word	0x00030248

000d4a64 <inet_inet_ntop>:
DYNALIB_FN(0, hal_inet, inet_inet_addr, in_addr_t(const char*))
DYNALIB_FN(1, hal_inet, inet_inet_aton, int(const char*, struct in_addr*))
DYNALIB_FN(2, hal_inet, inet_inet_network, in_addr_t(const char*))
DYNALIB_FN(3, hal_inet, inet_inet_ntoa, char*(struct in_addr))
DYNALIB_FN(4, hal_inet, inet_inet_ntoa_r, char*(struct in_addr, char*, socklen_t))
DYNALIB_FN(5, hal_inet, inet_inet_ntop, const char*(int, const void*, char*, socklen_t))
   d4a64:	b508      	push	{r3, lr}
   d4a66:	4b02      	ldr	r3, [pc, #8]	; (d4a70 <inet_inet_ntop+0xc>)
   d4a68:	681b      	ldr	r3, [r3, #0]
   d4a6a:	695b      	ldr	r3, [r3, #20]
   d4a6c:	9301      	str	r3, [sp, #4]
   d4a6e:	bd08      	pop	{r3, pc}
   d4a70:	00030264 	.word	0x00030264

000d4a74 <HAL_USART_Init>:
#define BASE_IDX 6 // Base index for all subsequent functions
#else
#define BASE_IDX 0
#endif

DYNALIB_FN(BASE_IDX + 0, hal_usart, HAL_USART_Init, void(HAL_USART_Serial, Ring_Buffer*, Ring_Buffer*))
   d4a74:	b508      	push	{r3, lr}
   d4a76:	4b02      	ldr	r3, [pc, #8]	; (d4a80 <HAL_USART_Init+0xc>)
   d4a78:	681b      	ldr	r3, [r3, #0]
   d4a7a:	681b      	ldr	r3, [r3, #0]
   d4a7c:	9301      	str	r3, [sp, #4]
   d4a7e:	bd08      	pop	{r3, pc}
   d4a80:	0003023c 	.word	0x0003023c

000d4a84 <HAL_USART_Write_Data>:
DYNALIB_FN(BASE_IDX + 1, hal_usart, HAL_USART_Begin, void(HAL_USART_Serial, uint32_t))
DYNALIB_FN(BASE_IDX + 2, hal_usart, HAL_USART_End, void(HAL_USART_Serial))
DYNALIB_FN(BASE_IDX + 3, hal_usart, HAL_USART_Write_Data, uint32_t(HAL_USART_Serial, uint8_t))
   d4a84:	b508      	push	{r3, lr}
   d4a86:	4b02      	ldr	r3, [pc, #8]	; (d4a90 <HAL_USART_Write_Data+0xc>)
   d4a88:	681b      	ldr	r3, [r3, #0]
   d4a8a:	68db      	ldr	r3, [r3, #12]
   d4a8c:	9301      	str	r3, [sp, #4]
   d4a8e:	bd08      	pop	{r3, pc}
   d4a90:	0003023c 	.word	0x0003023c

000d4a94 <HAL_USART_Available_Data>:
DYNALIB_FN(BASE_IDX + 4, hal_usart, HAL_USART_Available_Data, int32_t(HAL_USART_Serial))
   d4a94:	b508      	push	{r3, lr}
   d4a96:	4b02      	ldr	r3, [pc, #8]	; (d4aa0 <HAL_USART_Available_Data+0xc>)
   d4a98:	681b      	ldr	r3, [r3, #0]
   d4a9a:	691b      	ldr	r3, [r3, #16]
   d4a9c:	9301      	str	r3, [sp, #4]
   d4a9e:	bd08      	pop	{r3, pc}
   d4aa0:	0003023c 	.word	0x0003023c

000d4aa4 <HAL_USART_Read_Data>:
DYNALIB_FN(BASE_IDX + 5, hal_usart, HAL_USART_Read_Data, int32_t(HAL_USART_Serial))
   d4aa4:	b508      	push	{r3, lr}
   d4aa6:	4b02      	ldr	r3, [pc, #8]	; (d4ab0 <HAL_USART_Read_Data+0xc>)
   d4aa8:	681b      	ldr	r3, [r3, #0]
   d4aaa:	695b      	ldr	r3, [r3, #20]
   d4aac:	9301      	str	r3, [sp, #4]
   d4aae:	bd08      	pop	{r3, pc}
   d4ab0:	0003023c 	.word	0x0003023c

000d4ab4 <HAL_USART_Peek_Data>:
DYNALIB_FN(BASE_IDX + 6, hal_usart, HAL_USART_Peek_Data, int32_t(HAL_USART_Serial))
   d4ab4:	b508      	push	{r3, lr}
   d4ab6:	4b02      	ldr	r3, [pc, #8]	; (d4ac0 <HAL_USART_Peek_Data+0xc>)
   d4ab8:	681b      	ldr	r3, [r3, #0]
   d4aba:	699b      	ldr	r3, [r3, #24]
   d4abc:	9301      	str	r3, [sp, #4]
   d4abe:	bd08      	pop	{r3, pc}
   d4ac0:	0003023c 	.word	0x0003023c

000d4ac4 <HAL_USART_Flush_Data>:
DYNALIB_FN(BASE_IDX + 7, hal_usart, HAL_USART_Flush_Data, void(HAL_USART_Serial))
   d4ac4:	b508      	push	{r3, lr}
   d4ac6:	4b02      	ldr	r3, [pc, #8]	; (d4ad0 <HAL_USART_Flush_Data+0xc>)
   d4ac8:	681b      	ldr	r3, [r3, #0]
   d4aca:	69db      	ldr	r3, [r3, #28]
   d4acc:	9301      	str	r3, [sp, #4]
   d4ace:	bd08      	pop	{r3, pc}
   d4ad0:	0003023c 	.word	0x0003023c

000d4ad4 <HAL_USART_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 8, hal_usart, HAL_USART_Is_Enabled, bool(HAL_USART_Serial))
   d4ad4:	b508      	push	{r3, lr}
   d4ad6:	4b02      	ldr	r3, [pc, #8]	; (d4ae0 <HAL_USART_Is_Enabled+0xc>)
   d4ad8:	681b      	ldr	r3, [r3, #0]
   d4ada:	6a1b      	ldr	r3, [r3, #32]
   d4adc:	9301      	str	r3, [sp, #4]
   d4ade:	bd08      	pop	{r3, pc}
   d4ae0:	0003023c 	.word	0x0003023c

000d4ae4 <HAL_USART_Available_Data_For_Write>:
DYNALIB_FN(BASE_IDX + 9, hal_usart, HAL_USART_Half_Duplex, void(HAL_USART_Serial, bool))
DYNALIB_FN(BASE_IDX + 10, hal_usart, HAL_USART_Available_Data_For_Write, int32_t(HAL_USART_Serial))
   d4ae4:	b508      	push	{r3, lr}
   d4ae6:	4b02      	ldr	r3, [pc, #8]	; (d4af0 <HAL_USART_Available_Data_For_Write+0xc>)
   d4ae8:	681b      	ldr	r3, [r3, #0]
   d4aea:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4aec:	9301      	str	r3, [sp, #4]
   d4aee:	bd08      	pop	{r3, pc}
   d4af0:	0003023c 	.word	0x0003023c

000d4af4 <HAL_I2C_Begin>:
#endif

DYNALIB_FN(BASE_IDX + 0, hal_i2c, HAL_I2C_Set_Speed, void(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 1, hal_i2c, HAL_I2C_Enable_DMA_Mode, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 2, hal_i2c, HAL_I2C_Stretch_Clock, void(HAL_I2C_Interface, bool, void*))
DYNALIB_FN(BASE_IDX + 3, hal_i2c, HAL_I2C_Begin, void(HAL_I2C_Interface, I2C_Mode, uint8_t, void*))
   d4af4:	b508      	push	{r3, lr}
   d4af6:	4b02      	ldr	r3, [pc, #8]	; (d4b00 <HAL_I2C_Begin+0xc>)
   d4af8:	681b      	ldr	r3, [r3, #0]
   d4afa:	68db      	ldr	r3, [r3, #12]
   d4afc:	9301      	str	r3, [sp, #4]
   d4afe:	bd08      	pop	{r3, pc}
   d4b00:	00030228 	.word	0x00030228

000d4b04 <HAL_I2C_Begin_Transmission>:
DYNALIB_FN(BASE_IDX + 4, hal_i2c, HAL_I2C_End, void(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 5, hal_i2c, HAL_I2C_Request_Data, uint32_t(HAL_I2C_Interface, uint8_t, uint8_t, uint8_t, void*))
DYNALIB_FN(BASE_IDX + 6, hal_i2c, HAL_I2C_Begin_Transmission, void(HAL_I2C_Interface, uint8_t, const HAL_I2C_Transmission_Config*))
   d4b04:	b508      	push	{r3, lr}
   d4b06:	4b02      	ldr	r3, [pc, #8]	; (d4b10 <HAL_I2C_Begin_Transmission+0xc>)
   d4b08:	681b      	ldr	r3, [r3, #0]
   d4b0a:	699b      	ldr	r3, [r3, #24]
   d4b0c:	9301      	str	r3, [sp, #4]
   d4b0e:	bd08      	pop	{r3, pc}
   d4b10:	00030228 	.word	0x00030228

000d4b14 <HAL_I2C_End_Transmission>:
DYNALIB_FN(BASE_IDX + 7, hal_i2c, HAL_I2C_End_Transmission, uint8_t(HAL_I2C_Interface, uint8_t, void*))
   d4b14:	b508      	push	{r3, lr}
   d4b16:	4b02      	ldr	r3, [pc, #8]	; (d4b20 <HAL_I2C_End_Transmission+0xc>)
   d4b18:	681b      	ldr	r3, [r3, #0]
   d4b1a:	69db      	ldr	r3, [r3, #28]
   d4b1c:	9301      	str	r3, [sp, #4]
   d4b1e:	bd08      	pop	{r3, pc}
   d4b20:	00030228 	.word	0x00030228

000d4b24 <HAL_I2C_Write_Data>:
DYNALIB_FN(BASE_IDX + 8, hal_i2c, HAL_I2C_Write_Data, uint32_t(HAL_I2C_Interface, uint8_t, void*))
   d4b24:	b508      	push	{r3, lr}
   d4b26:	4b02      	ldr	r3, [pc, #8]	; (d4b30 <HAL_I2C_Write_Data+0xc>)
   d4b28:	681b      	ldr	r3, [r3, #0]
   d4b2a:	6a1b      	ldr	r3, [r3, #32]
   d4b2c:	9301      	str	r3, [sp, #4]
   d4b2e:	bd08      	pop	{r3, pc}
   d4b30:	00030228 	.word	0x00030228

000d4b34 <HAL_I2C_Available_Data>:
DYNALIB_FN(BASE_IDX + 9, hal_i2c, HAL_I2C_Available_Data, int32_t(HAL_I2C_Interface, void*))
   d4b34:	b508      	push	{r3, lr}
   d4b36:	4b02      	ldr	r3, [pc, #8]	; (d4b40 <HAL_I2C_Available_Data+0xc>)
   d4b38:	681b      	ldr	r3, [r3, #0]
   d4b3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4b3c:	9301      	str	r3, [sp, #4]
   d4b3e:	bd08      	pop	{r3, pc}
   d4b40:	00030228 	.word	0x00030228

000d4b44 <HAL_I2C_Read_Data>:
DYNALIB_FN(BASE_IDX + 10, hal_i2c, HAL_I2C_Read_Data, int32_t(HAL_I2C_Interface, void*))
   d4b44:	b508      	push	{r3, lr}
   d4b46:	4b02      	ldr	r3, [pc, #8]	; (d4b50 <HAL_I2C_Read_Data+0xc>)
   d4b48:	681b      	ldr	r3, [r3, #0]
   d4b4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
   d4b4c:	9301      	str	r3, [sp, #4]
   d4b4e:	bd08      	pop	{r3, pc}
   d4b50:	00030228 	.word	0x00030228

000d4b54 <HAL_I2C_Peek_Data>:
DYNALIB_FN(BASE_IDX + 11, hal_i2c, HAL_I2C_Peek_Data, int32_t(HAL_I2C_Interface, void*))
   d4b54:	b508      	push	{r3, lr}
   d4b56:	4b02      	ldr	r3, [pc, #8]	; (d4b60 <HAL_I2C_Peek_Data+0xc>)
   d4b58:	681b      	ldr	r3, [r3, #0]
   d4b5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   d4b5c:	9301      	str	r3, [sp, #4]
   d4b5e:	bd08      	pop	{r3, pc}
   d4b60:	00030228 	.word	0x00030228

000d4b64 <HAL_I2C_Flush_Data>:
DYNALIB_FN(BASE_IDX + 12, hal_i2c, HAL_I2C_Flush_Data, void(HAL_I2C_Interface, void*))
   d4b64:	b508      	push	{r3, lr}
   d4b66:	4b02      	ldr	r3, [pc, #8]	; (d4b70 <HAL_I2C_Flush_Data+0xc>)
   d4b68:	681b      	ldr	r3, [r3, #0]
   d4b6a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4b6c:	9301      	str	r3, [sp, #4]
   d4b6e:	bd08      	pop	{r3, pc}
   d4b70:	00030228 	.word	0x00030228

000d4b74 <HAL_I2C_Is_Enabled>:
DYNALIB_FN(BASE_IDX + 13, hal_i2c, HAL_I2C_Is_Enabled, bool(HAL_I2C_Interface, void*))
   d4b74:	b508      	push	{r3, lr}
   d4b76:	4b02      	ldr	r3, [pc, #8]	; (d4b80 <HAL_I2C_Is_Enabled+0xc>)
   d4b78:	681b      	ldr	r3, [r3, #0]
   d4b7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4b7c:	9301      	str	r3, [sp, #4]
   d4b7e:	bd08      	pop	{r3, pc}
   d4b80:	00030228 	.word	0x00030228

000d4b84 <HAL_I2C_Init>:
DYNALIB_FN(BASE_IDX + 14, hal_i2c, HAL_I2C_Set_Callback_On_Receive, void(HAL_I2C_Interface, void(*)(int), void*))
DYNALIB_FN(BASE_IDX + 15, hal_i2c, HAL_I2C_Set_Callback_On_Request, void(HAL_I2C_Interface, void(*)(void), void*))
DYNALIB_FN(BASE_IDX + 16, hal_i2c, HAL_I2C_Init, int(HAL_I2C_Interface, const HAL_I2C_Config*))
   d4b84:	b508      	push	{r3, lr}
   d4b86:	4b02      	ldr	r3, [pc, #8]	; (d4b90 <HAL_I2C_Init+0xc>)
   d4b88:	681b      	ldr	r3, [r3, #0]
   d4b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
   d4b8c:	9301      	str	r3, [sp, #4]
   d4b8e:	bd08      	pop	{r3, pc}
   d4b90:	00030228 	.word	0x00030228

000d4b94 <HAL_I2C_Request_Data_Ex>:
DYNALIB_FN(BASE_IDX + 17, hal_i2c, HAL_I2C_Reset, uint8_t(HAL_I2C_Interface, uint32_t, void*))
DYNALIB_FN(BASE_IDX + 18, hal_i2c, HAL_I2C_Acquire, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 19, hal_i2c, HAL_I2C_Release, int32_t(HAL_I2C_Interface, void*))
DYNALIB_FN(BASE_IDX + 20, hal_i2c, HAL_I2C_Request_Data_Ex, int32_t(HAL_I2C_Interface, const HAL_I2C_Transmission_Config*, void*))
   d4b94:	b508      	push	{r3, lr}
   d4b96:	4b02      	ldr	r3, [pc, #8]	; (d4ba0 <HAL_I2C_Request_Data_Ex+0xc>)
   d4b98:	681b      	ldr	r3, [r3, #0]
   d4b9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
   d4b9c:	9301      	str	r3, [sp, #4]
   d4b9e:	bd08      	pop	{r3, pc}
   d4ba0:	00030228 	.word	0x00030228

000d4ba4 <HAL_USB_USART_Init>:
#endif

DYNALIB_BEGIN(hal_usb)

#ifdef USB_CDC_ENABLE
DYNALIB_FN(0, hal_usb, HAL_USB_USART_Init, void(HAL_USB_USART_Serial, const HAL_USB_USART_Config*))
   d4ba4:	b508      	push	{r3, lr}
   d4ba6:	4b02      	ldr	r3, [pc, #8]	; (d4bb0 <HAL_USB_USART_Init+0xc>)
   d4ba8:	681b      	ldr	r3, [r3, #0]
   d4baa:	681b      	ldr	r3, [r3, #0]
   d4bac:	9301      	str	r3, [sp, #4]
   d4bae:	bd08      	pop	{r3, pc}
   d4bb0:	0003024c 	.word	0x0003024c

000d4bb4 <HAL_USB_USART_Begin>:
DYNALIB_FN(1, hal_usb, HAL_USB_USART_Begin, void(HAL_USB_USART_Serial, uint32_t, void *))
   d4bb4:	b508      	push	{r3, lr}
   d4bb6:	4b02      	ldr	r3, [pc, #8]	; (d4bc0 <HAL_USB_USART_Begin+0xc>)
   d4bb8:	681b      	ldr	r3, [r3, #0]
   d4bba:	685b      	ldr	r3, [r3, #4]
   d4bbc:	9301      	str	r3, [sp, #4]
   d4bbe:	bd08      	pop	{r3, pc}
   d4bc0:	0003024c 	.word	0x0003024c

000d4bc4 <HAL_USB_USART_Available_Data>:
DYNALIB_FN(2, hal_usb, HAL_USB_USART_End, void(HAL_USB_USART_Serial))
DYNALIB_FN(3, hal_usb, HAL_USB_USART_Baud_Rate, unsigned int(HAL_USB_USART_Serial))
DYNALIB_FN(4, hal_usb, HAL_USB_USART_Available_Data, int32_t(HAL_USB_USART_Serial))
   d4bc4:	b508      	push	{r3, lr}
   d4bc6:	4b02      	ldr	r3, [pc, #8]	; (d4bd0 <HAL_USB_USART_Available_Data+0xc>)
   d4bc8:	681b      	ldr	r3, [r3, #0]
   d4bca:	691b      	ldr	r3, [r3, #16]
   d4bcc:	9301      	str	r3, [sp, #4]
   d4bce:	bd08      	pop	{r3, pc}
   d4bd0:	0003024c 	.word	0x0003024c

000d4bd4 <HAL_USB_USART_Available_Data_For_Write>:
DYNALIB_FN(5, hal_usb, HAL_USB_USART_Available_Data_For_Write, int32_t(HAL_USB_USART_Serial))
   d4bd4:	b508      	push	{r3, lr}
   d4bd6:	4b02      	ldr	r3, [pc, #8]	; (d4be0 <HAL_USB_USART_Available_Data_For_Write+0xc>)
   d4bd8:	681b      	ldr	r3, [r3, #0]
   d4bda:	695b      	ldr	r3, [r3, #20]
   d4bdc:	9301      	str	r3, [sp, #4]
   d4bde:	bd08      	pop	{r3, pc}
   d4be0:	0003024c 	.word	0x0003024c

000d4be4 <HAL_USB_USART_Receive_Data>:
DYNALIB_FN(6, hal_usb, HAL_USB_USART_Receive_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4be4:	b508      	push	{r3, lr}
   d4be6:	4b02      	ldr	r3, [pc, #8]	; (d4bf0 <HAL_USB_USART_Receive_Data+0xc>)
   d4be8:	681b      	ldr	r3, [r3, #0]
   d4bea:	699b      	ldr	r3, [r3, #24]
   d4bec:	9301      	str	r3, [sp, #4]
   d4bee:	bd08      	pop	{r3, pc}
   d4bf0:	0003024c 	.word	0x0003024c

000d4bf4 <HAL_USB_USART_Send_Data>:
DYNALIB_FN(7, hal_usb, HAL_USB_USART_Send_Data, int32_t(HAL_USB_USART_Serial, uint8_t))
   d4bf4:	b508      	push	{r3, lr}
   d4bf6:	4b02      	ldr	r3, [pc, #8]	; (d4c00 <HAL_USB_USART_Send_Data+0xc>)
   d4bf8:	681b      	ldr	r3, [r3, #0]
   d4bfa:	69db      	ldr	r3, [r3, #28]
   d4bfc:	9301      	str	r3, [sp, #4]
   d4bfe:	bd08      	pop	{r3, pc}
   d4c00:	0003024c 	.word	0x0003024c

000d4c04 <HAL_USB_USART_Flush_Data>:
DYNALIB_FN(8, hal_usb, HAL_USB_USART_Flush_Data, void(HAL_USB_USART_Serial))
   d4c04:	b508      	push	{r3, lr}
   d4c06:	4b02      	ldr	r3, [pc, #8]	; (d4c10 <HAL_USB_USART_Flush_Data+0xc>)
   d4c08:	681b      	ldr	r3, [r3, #0]
   d4c0a:	6a1b      	ldr	r3, [r3, #32]
   d4c0c:	9301      	str	r3, [sp, #4]
   d4c0e:	bd08      	pop	{r3, pc}
   d4c10:	0003024c 	.word	0x0003024c

000d4c14 <set_system_mode>:
#endif

DYNALIB_BEGIN(system)

DYNALIB_FN(0, system, system_mode, System_Mode_TypeDef(void))
DYNALIB_FN(1, system, set_system_mode, void(System_Mode_TypeDef))
   d4c14:	b508      	push	{r3, lr}
   d4c16:	4b02      	ldr	r3, [pc, #8]	; (d4c20 <set_system_mode+0xc>)
   d4c18:	681b      	ldr	r3, [r3, #0]
   d4c1a:	685b      	ldr	r3, [r3, #4]
   d4c1c:	9301      	str	r3, [sp, #4]
   d4c1e:	bd08      	pop	{r3, pc}
   d4c20:	00030220 	.word	0x00030220

000d4c24 <system_delay_ms>:

DYNALIB_FN(2, system, set_ymodem_serial_flash_update_handler, void(ymodem_serial_flash_update_handler))
DYNALIB_FN(3, system, system_firmwareUpdate, bool(Stream*, void*))
DYNALIB_FN(4, system, system_fileTransfer, bool(system_file_transfer_t*, void*))

DYNALIB_FN(5, system, system_delay_ms, void(unsigned long, bool))
   d4c24:	b508      	push	{r3, lr}
   d4c26:	4b02      	ldr	r3, [pc, #8]	; (d4c30 <system_delay_ms+0xc>)
   d4c28:	681b      	ldr	r3, [r3, #0]
   d4c2a:	695b      	ldr	r3, [r3, #20]
   d4c2c:	9301      	str	r3, [sp, #4]
   d4c2e:	bd08      	pop	{r3, pc}
   d4c30:	00030220 	.word	0x00030220

000d4c34 <system_ctrl_set_app_request_handler>:
DYNALIB_FN(BASE_IDX + 6, system, led_pattern_period, uint16_t(int, int, void*))
DYNALIB_FN(BASE_IDX + 7, system, system_set_tester_handlers, int(system_tester_handlers_t*, void*))
DYNALIB_FN(BASE_IDX + 8, system, system_format_diag_data, int(const uint16_t*, size_t, unsigned, appender_fn, void*, void*))

// Control requests
DYNALIB_FN(BASE_IDX + 9, system, system_ctrl_set_app_request_handler, int(ctrl_request_handler_fn, void*))
   d4c34:	b508      	push	{r3, lr}
   d4c36:	4b03      	ldr	r3, [pc, #12]	; (d4c44 <system_ctrl_set_app_request_handler+0x10>)
   d4c38:	681b      	ldr	r3, [r3, #0]
   d4c3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
   d4c3e:	9301      	str	r3, [sp, #4]
   d4c40:	bd08      	pop	{r3, pc}
   d4c42:	0000      	.short	0x0000
   d4c44:	00030220 	.word	0x00030220

000d4c48 <system_ctrl_set_result>:
DYNALIB_FN(BASE_IDX + 10, system, system_ctrl_alloc_reply_data, int(ctrl_request*, size_t, void*))
DYNALIB_FN(BASE_IDX + 11, system, system_ctrl_free_request_data, void(ctrl_request*, void*))
DYNALIB_FN(BASE_IDX + 12, system, system_ctrl_set_result, void(ctrl_request*, int, ctrl_completion_handler_fn, void*, void*))
   d4c48:	b508      	push	{r3, lr}
   d4c4a:	4b03      	ldr	r3, [pc, #12]	; (d4c58 <system_ctrl_set_result+0x10>)
   d4c4c:	681b      	ldr	r3, [r3, #0]
   d4c4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
   d4c52:	9301      	str	r3, [sp, #4]
   d4c54:	bd08      	pop	{r3, pc}
   d4c56:	0000      	.short	0x0000
   d4c58:	00030220 	.word	0x00030220

000d4c5c <network_connect>:
#endif

DYNALIB_BEGIN(system_net)

DYNALIB_FN(0, system_net, network_config, const void*(network_handle_t, uint32_t, void*))
DYNALIB_FN(1, system_net, network_connect, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c5c:	b508      	push	{r3, lr}
   d4c5e:	4b02      	ldr	r3, [pc, #8]	; (d4c68 <network_connect+0xc>)
   d4c60:	681b      	ldr	r3, [r3, #0]
   d4c62:	685b      	ldr	r3, [r3, #4]
   d4c64:	9301      	str	r3, [sp, #4]
   d4c66:	bd08      	pop	{r3, pc}
   d4c68:	00030240 	.word	0x00030240

000d4c6c <network_connecting>:
DYNALIB_FN(2, system_net, network_connecting, bool(network_handle_t, uint32_t, void*))
   d4c6c:	b508      	push	{r3, lr}
   d4c6e:	4b02      	ldr	r3, [pc, #8]	; (d4c78 <network_connecting+0xc>)
   d4c70:	681b      	ldr	r3, [r3, #0]
   d4c72:	689b      	ldr	r3, [r3, #8]
   d4c74:	9301      	str	r3, [sp, #4]
   d4c76:	bd08      	pop	{r3, pc}
   d4c78:	00030240 	.word	0x00030240

000d4c7c <network_disconnect>:
DYNALIB_FN(3, system_net, network_disconnect, void(network_handle_t, uint32_t, void*))
   d4c7c:	b508      	push	{r3, lr}
   d4c7e:	4b02      	ldr	r3, [pc, #8]	; (d4c88 <network_disconnect+0xc>)
   d4c80:	681b      	ldr	r3, [r3, #0]
   d4c82:	68db      	ldr	r3, [r3, #12]
   d4c84:	9301      	str	r3, [sp, #4]
   d4c86:	bd08      	pop	{r3, pc}
   d4c88:	00030240 	.word	0x00030240

000d4c8c <network_ready>:
DYNALIB_FN(4, system_net, network_ready, bool(network_handle_t, uint32_t, void*))
   d4c8c:	b508      	push	{r3, lr}
   d4c8e:	4b02      	ldr	r3, [pc, #8]	; (d4c98 <network_ready+0xc>)
   d4c90:	681b      	ldr	r3, [r3, #0]
   d4c92:	691b      	ldr	r3, [r3, #16]
   d4c94:	9301      	str	r3, [sp, #4]
   d4c96:	bd08      	pop	{r3, pc}
   d4c98:	00030240 	.word	0x00030240

000d4c9c <network_on>:
DYNALIB_FN(5, system_net, network_on, void(network_handle_t, uint32_t, uint32_t, void*))
   d4c9c:	b508      	push	{r3, lr}
   d4c9e:	4b02      	ldr	r3, [pc, #8]	; (d4ca8 <network_on+0xc>)
   d4ca0:	681b      	ldr	r3, [r3, #0]
   d4ca2:	695b      	ldr	r3, [r3, #20]
   d4ca4:	9301      	str	r3, [sp, #4]
   d4ca6:	bd08      	pop	{r3, pc}
   d4ca8:	00030240 	.word	0x00030240

000d4cac <network_off>:
DYNALIB_FN(6, system_net, network_off, void(network_handle_t, uint32_t, uint32_t, void*))
   d4cac:	b508      	push	{r3, lr}
   d4cae:	4b02      	ldr	r3, [pc, #8]	; (d4cb8 <network_off+0xc>)
   d4cb0:	681b      	ldr	r3, [r3, #0]
   d4cb2:	699b      	ldr	r3, [r3, #24]
   d4cb4:	9301      	str	r3, [sp, #4]
   d4cb6:	bd08      	pop	{r3, pc}
   d4cb8:	00030240 	.word	0x00030240

000d4cbc <network_listen>:
DYNALIB_FN(7, system_net, network_listen, void(network_handle_t, uint32_t, void*))
   d4cbc:	b508      	push	{r3, lr}
   d4cbe:	4b02      	ldr	r3, [pc, #8]	; (d4cc8 <network_listen+0xc>)
   d4cc0:	681b      	ldr	r3, [r3, #0]
   d4cc2:	69db      	ldr	r3, [r3, #28]
   d4cc4:	9301      	str	r3, [sp, #4]
   d4cc6:	bd08      	pop	{r3, pc}
   d4cc8:	00030240 	.word	0x00030240

000d4ccc <network_listening>:
DYNALIB_FN(8, system_net, network_listening, bool(network_handle_t, uint32_t, void*))
   d4ccc:	b508      	push	{r3, lr}
   d4cce:	4b02      	ldr	r3, [pc, #8]	; (d4cd8 <network_listening+0xc>)
   d4cd0:	681b      	ldr	r3, [r3, #0]
   d4cd2:	6a1b      	ldr	r3, [r3, #32]
   d4cd4:	9301      	str	r3, [sp, #4]
   d4cd6:	bd08      	pop	{r3, pc}
   d4cd8:	00030240 	.word	0x00030240

000d4cdc <network_set_listen_timeout>:
DYNALIB_FN(9, system_net, network_has_credentials, bool(network_handle_t, uint32_t, void*))
DYNALIB_FN(10, system_net, network_set_credentials, int(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(11, system_net, network_clear_credentials, bool(network_handle_t, uint32_t, NetworkCredentials*, void*))
DYNALIB_FN(12, system_net, network_set_listen_timeout, void(network_handle_t, uint16_t, void*))
   d4cdc:	b508      	push	{r3, lr}
   d4cde:	4b02      	ldr	r3, [pc, #8]	; (d4ce8 <network_set_listen_timeout+0xc>)
   d4ce0:	681b      	ldr	r3, [r3, #0]
   d4ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   d4ce4:	9301      	str	r3, [sp, #4]
   d4ce6:	bd08      	pop	{r3, pc}
   d4ce8:	00030240 	.word	0x00030240

000d4cec <network_get_listen_timeout>:
DYNALIB_FN(13, system_net, network_get_listen_timeout, uint16_t(network_handle_t, uint32_t, void*))
   d4cec:	b508      	push	{r3, lr}
   d4cee:	4b02      	ldr	r3, [pc, #8]	; (d4cf8 <network_get_listen_timeout+0xc>)
   d4cf0:	681b      	ldr	r3, [r3, #0]
   d4cf2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
   d4cf4:	9301      	str	r3, [sp, #4]
   d4cf6:	bd08      	pop	{r3, pc}
   d4cf8:	00030240 	.word	0x00030240

000d4cfc <spark_set_random_seed_from_cloud_handler>:
DYNALIB_FN(10, system_cloud, spark_unsubscribe, void(void*))
DYNALIB_FN(11, system_cloud, spark_sync_time, bool(void*))
DYNALIB_FN(12, system_cloud, spark_sync_time_pending, bool(void*))
DYNALIB_FN(13, system_cloud, spark_sync_time_last, system_tick_t(time_t*, void*))
DYNALIB_FN(14, system_cloud, spark_set_connection_property, int(unsigned, unsigned, particle::protocol::connection_properties_t*, void*))
DYNALIB_FN(15, system_cloud, spark_set_random_seed_from_cloud_handler, int(void (*handler)(unsigned int), void*))
   d4cfc:	b508      	push	{r3, lr}
   d4cfe:	4b02      	ldr	r3, [pc, #8]	; (d4d08 <spark_set_random_seed_from_cloud_handler+0xc>)
   d4d00:	681b      	ldr	r3, [r3, #0]
   d4d02:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d04:	9301      	str	r3, [sp, #4]
   d4d06:	bd08      	pop	{r3, pc}
   d4d08:	00030244 	.word	0x00030244

000d4d0c <malloc>:
#include <assert.h>
#endif

DYNALIB_BEGIN(rt)

DYNALIB_FN(0, rt, malloc, void*(size_t))
   d4d0c:	b508      	push	{r3, lr}
   d4d0e:	4b02      	ldr	r3, [pc, #8]	; (d4d18 <malloc+0xc>)
   d4d10:	681b      	ldr	r3, [r3, #0]
   d4d12:	681b      	ldr	r3, [r3, #0]
   d4d14:	9301      	str	r3, [sp, #4]
   d4d16:	bd08      	pop	{r3, pc}
   d4d18:	0003021c 	.word	0x0003021c

000d4d1c <free>:
DYNALIB_FN(1, rt, free, void(void*))
   d4d1c:	b508      	push	{r3, lr}
   d4d1e:	4b02      	ldr	r3, [pc, #8]	; (d4d28 <free+0xc>)
   d4d20:	681b      	ldr	r3, [r3, #0]
   d4d22:	685b      	ldr	r3, [r3, #4]
   d4d24:	9301      	str	r3, [sp, #4]
   d4d26:	bd08      	pop	{r3, pc}
   d4d28:	0003021c 	.word	0x0003021c

000d4d2c <vsnprintf>:
DYNALIB_FN(4, rt, siprintf, int(char*, const char*, ...))
DYNALIB_FN(5, rt, sscanf, int(const char*, const char*, ...))
DYNALIB_FN(6, rt, siscanf, int(const char*, const char*, ...))
DYNALIB_FN(7, rt, snprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(8, rt, sniprintf, int(char*, size_t, const char*, ...))
DYNALIB_FN(9, rt, vsnprintf, int(char*, size_t, const char*, va_list))
   d4d2c:	b508      	push	{r3, lr}
   d4d2e:	4b02      	ldr	r3, [pc, #8]	; (d4d38 <vsnprintf+0xc>)
   d4d30:	681b      	ldr	r3, [r3, #0]
   d4d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
   d4d34:	9301      	str	r3, [sp, #4]
   d4d36:	bd08      	pop	{r3, pc}
   d4d38:	0003021c 	.word	0x0003021c

000d4d3c <__errno>:
DYNALIB_FN(10, rt, vsniprintf, int(char*, size_t, const char*, va_list))
DYNALIB_FN(11, rt, abort, void(void))
DYNALIB_FN(12, rt, _malloc_r, void*(struct _reent*, size_t))
DYNALIB_FN(13, rt, _free_r, void(struct _reent*, void*))
DYNALIB_FN(14, rt, _realloc_r, void*(struct _reent*, void*, size_t))
DYNALIB_FN(15, rt, __errno, int*())
   d4d3c:	b508      	push	{r3, lr}
   d4d3e:	4b02      	ldr	r3, [pc, #8]	; (d4d48 <__errno+0xc>)
   d4d40:	681b      	ldr	r3, [r3, #0]
   d4d42:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
   d4d44:	9301      	str	r3, [sp, #4]
   d4d46:	bd08      	pop	{r3, pc}
   d4d48:	0003021c 	.word	0x0003021c

000d4d4c <_ZN5spark13EthernetClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d4d4c:	2200      	movs	r2, #0
   d4d4e:	4611      	mov	r1, r2
   d4d50:	6840      	ldr	r0, [r0, #4]
   d4d52:	f7ff bfbb 	b.w	d4ccc <network_listening>

000d4d56 <_ZN5spark13EthernetClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d4d56:	2200      	movs	r2, #0
   d4d58:	4611      	mov	r1, r2
   d4d5a:	6840      	ldr	r0, [r0, #4]
   d4d5c:	f7ff bfc6 	b.w	d4cec <network_get_listen_timeout>

000d4d60 <_ZN5spark13EthernetClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d4d60:	2200      	movs	r2, #0
   d4d62:	6840      	ldr	r0, [r0, #4]
   d4d64:	f7ff bfba 	b.w	d4cdc <network_set_listen_timeout>

000d4d68 <_ZN5spark13EthernetClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d4d68:	2200      	movs	r2, #0
   d4d6a:	f081 0101 	eor.w	r1, r1, #1
   d4d6e:	6840      	ldr	r0, [r0, #4]
   d4d70:	f7ff bfa4 	b.w	d4cbc <network_listen>

000d4d74 <_ZN5spark13EthernetClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 0, 0, NULL);
   d4d74:	2300      	movs	r3, #0
   d4d76:	461a      	mov	r2, r3
   d4d78:	4619      	mov	r1, r3
   d4d7a:	6840      	ldr	r0, [r0, #4]
   d4d7c:	f7ff bf96 	b.w	d4cac <network_off>

000d4d80 <_ZN5spark13EthernetClass2onEv>:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d4d80:	2300      	movs	r3, #0
   d4d82:	461a      	mov	r2, r3
   d4d84:	4619      	mov	r1, r3
   d4d86:	6840      	ldr	r0, [r0, #4]
   d4d88:	f7ff bf88 	b.w	d4c9c <network_on>

000d4d8c <_ZN5spark13EthernetClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d4d8c:	2200      	movs	r2, #0
   d4d8e:	4611      	mov	r1, r2
   d4d90:	6840      	ldr	r0, [r0, #4]
   d4d92:	f7ff bf7b 	b.w	d4c8c <network_ready>

000d4d96 <_ZN5spark13EthernetClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d4d96:	2200      	movs	r2, #0
   d4d98:	4611      	mov	r1, r2
   d4d9a:	6840      	ldr	r0, [r0, #4]
   d4d9c:	f7ff bf66 	b.w	d4c6c <network_connecting>

000d4da0 <_ZN5spark13EthernetClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d4da0:	2200      	movs	r2, #0
   d4da2:	2102      	movs	r1, #2
   d4da4:	6840      	ldr	r0, [r0, #4]
   d4da6:	f7ff bf69 	b.w	d4c7c <network_disconnect>

000d4daa <_ZN5spark13EthernetClass7connectEj>:
    void off() {
        network_off(*this, 0, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d4daa:	2300      	movs	r3, #0
   d4dac:	461a      	mov	r2, r3
   d4dae:	6840      	ldr	r0, [r0, #4]
   d4db0:	f7ff bf54 	b.w	d4c5c <network_connect>

000d4db4 <_GLOBAL__sub_I__ZN5spark8EthernetE>:
    static NetworkClass& from(network_interface_t nif);

    virtual IPAddress resolve(const char* name);

    explicit NetworkClass(network_interface_t iface)
            : iface_(iface) {
   d4db4:	4b02      	ldr	r3, [pc, #8]	; (d4dc0 <_GLOBAL__sub_I__ZN5spark8EthernetE+0xc>)
   d4db6:	2203      	movs	r2, #3
   d4db8:	605a      	str	r2, [r3, #4]
    }

class EthernetClass : public NetworkClass {
public:
    EthernetClass() :
            NetworkClass(NETWORK_INTERFACE_ETHERNET) {
   d4dba:	4a02      	ldr	r2, [pc, #8]	; (d4dc4 <_GLOBAL__sub_I__ZN5spark8EthernetE+0x10>)
   d4dbc:	601a      	str	r2, [r3, #0]
   d4dbe:	4770      	bx	lr
   d4dc0:	2003e3dc 	.word	0x2003e3dc
   d4dc4:	000d6b08 	.word	0x000d6b08

000d4dc8 <_ZN8SPIClass4lockEv.isra.0>:
  }

  int lock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    return HAL_SPI_Acquire(_spi, nullptr);
   d4dc8:	2100      	movs	r1, #0
   d4dca:	f7ff be03 	b.w	d49d4 <HAL_SPI_Acquire>

000d4dce <_ZN8SPIClass6unlockEv.isra.1>:
  }

  void unlock()
  {
#if HAL_PLATFORM_SPI_HAL_THREAD_SAFETY
    HAL_SPI_Release(_spi, nullptr);
   d4dce:	2100      	movs	r1, #0
   d4dd0:	f7ff be08 	b.w	d49e4 <HAL_SPI_Release>

000d4dd4 <_ZN8SPIClassC1E17HAL_SPI_Interface>:
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
}
} // namespace

SPIClass::SPIClass(HAL_SPI_Interface spi)
   d4dd4:	b510      	push	{r4, lr}
   d4dd6:	4604      	mov	r4, r0
{
    _spi = spi;
   d4dd8:	7001      	strb	r1, [r0, #0]
    HAL_SPI_Init(_spi);
   d4dda:	4608      	mov	r0, r1
   d4ddc:	f7ff fdda 	bl	d4994 <HAL_SPI_Init>
    _dividerReference = SPI_CLK_SYSTEM; // 0 indicates the system clock
   d4de0:	2300      	movs	r3, #0
   d4de2:	6063      	str	r3, [r4, #4]
}
   d4de4:	4620      	mov	r0, r4
   d4de6:	bd10      	pop	{r4, pc}

000d4de8 <_ZN8SPIClass5beginEv>:

void SPIClass::begin()
{
   d4de8:	b510      	push	{r4, lr}
   d4dea:	4604      	mov	r4, r0
    // TODO: Fetch default pin from HAL
    if (!lock())
   d4dec:	7800      	ldrb	r0, [r0, #0]
   d4dee:	f7ff ffeb 	bl	d4dc8 <_ZN8SPIClass4lockEv.isra.0>
   d4df2:	b948      	cbnz	r0, d4e08 <_ZN8SPIClass5beginEv+0x20>
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
   d4df4:	7820      	ldrb	r0, [r4, #0]
   d4df6:	f64f 71ff 	movw	r1, #65535	; 0xffff
   d4dfa:	f7ff fdbb 	bl	d4974 <HAL_SPI_Begin>
        unlock();
   d4dfe:	7820      	ldrb	r0, [r4, #0]
    }
}
   d4e00:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
{
    // TODO: Fetch default pin from HAL
    if (!lock())
    {
        HAL_SPI_Begin(_spi, SPI_DEFAULT_SS);
        unlock();
   d4e04:	f7ff bfe3 	b.w	d4dce <_ZN8SPIClass6unlockEv.isra.1>
   d4e08:	bd10      	pop	{r4, pc}

000d4e0a <_ZN8SPIClass14endTransactionEv>:
}

void SPIClass::endTransaction()
{
    // Release peripheral
    unlock();
   d4e0a:	7800      	ldrb	r0, [r0, #0]
   d4e0c:	f7ff bfdf 	b.w	d4dce <_ZN8SPIClass6unlockEv.isra.1>

000d4e10 <_ZN8SPIClass19computeClockDividerEjjRhRj>:
void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d4e10:	0840      	lsrs	r0, r0, #1
    }
}

void SPIClass::computeClockDivider(unsigned reference, unsigned targetSpeed, uint8_t& divider,
                                   unsigned& clock)
{
   d4e12:	b530      	push	{r4, r5, lr}
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
   d4e14:	6018      	str	r0, [r3, #0]
   d4e16:	2400      	movs	r4, #0
    while (clock > targetSpeed && scale < 7)
   d4e18:	6818      	ldr	r0, [r3, #0]
   d4e1a:	4288      	cmp	r0, r1
   d4e1c:	b2e5      	uxtb	r5, r4
   d4e1e:	d906      	bls.n	d4e2e <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1e>
   d4e20:	3401      	adds	r4, #1
   d4e22:	2c08      	cmp	r4, #8
   d4e24:	d002      	beq.n	d4e2c <_ZN8SPIClass19computeClockDividerEjjRhRj+0x1c>
    {
        clock >>= 1;
   d4e26:	0840      	lsrs	r0, r0, #1
   d4e28:	6018      	str	r0, [r3, #0]
                                   unsigned& clock)
{
    clock = reference;
    uint8_t scale = 0;
    clock >>= 1; // div2 is the first
    while (clock > targetSpeed && scale < 7)
   d4e2a:	e7f5      	b.n	d4e18 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x8>
   d4e2c:	2507      	movs	r5, #7
    {
        clock >>= 1;
        scale++;
    }
    divider = clock_divisors[scale];
   d4e2e:	4b02      	ldr	r3, [pc, #8]	; (d4e38 <_ZN8SPIClass19computeClockDividerEjjRhRj+0x28>)
   d4e30:	5d5b      	ldrb	r3, [r3, r5]
   d4e32:	7013      	strb	r3, [r2, #0]
   d4e34:	bd30      	pop	{r4, r5, pc}
   d4e36:	bf00      	nop
   d4e38:	000d6b34 	.word	0x000d6b34

000d4e3c <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE>:
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d4e3c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d4e40:	4607      	mov	r7, r0
   d4e42:	b08f      	sub	sp, #60	; 0x3c
    // Lock peripheral
    CHECK(lock());
   d4e44:	7800      	ldrb	r0, [r0, #0]
{
    return lock();
}

int32_t SPIClass::beginTransaction(const particle::__SPISettings& settings)
{
   d4e46:	460e      	mov	r6, r1
    // Lock peripheral
    CHECK(lock());
   d4e48:	f7ff ffbe 	bl	d4dc8 <_ZN8SPIClass4lockEv.isra.0>
   d4e4c:	2800      	cmp	r0, #0
   d4e4e:	db62      	blt.n	d4f16 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>

    // Collect existing SPI info
    hal_spi_info_t spi_info;
    querySpiInfo(_spi, &spi_info);
   d4e50:	783c      	ldrb	r4, [r7, #0]
 * \warning This method is NOT THREADSAFE and callers will need to utilize
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
   d4e52:	2214      	movs	r2, #20
   d4e54:	2100      	movs	r1, #0
   d4e56:	a809      	add	r0, sp, #36	; 0x24
   d4e58:	f001 fdb1 	bl	d69be <memset>
    info->version = HAL_SPI_INFO_VERSION_1;
   d4e5c:	230b      	movs	r3, #11
    HAL_SPI_Info(spi, info, nullptr);
   d4e5e:	4620      	mov	r0, r4
   d4e60:	2200      	movs	r2, #0
   d4e62:	a909      	add	r1, sp, #36	; 0x24
 *          HAL synchronization primatives.
 */
static void querySpiInfo(HAL_SPI_Interface spi, hal_spi_info_t* info)
{
    memset(info, 0, sizeof(hal_spi_info_t));
    info->version = HAL_SPI_INFO_VERSION_1;
   d4e64:	f8ad 3024 	strh.w	r3, [sp, #36]	; 0x24
    HAL_SPI_Info(spi, info, nullptr);
   d4e68:	f7ff fda4 	bl	d49b4 <HAL_SPI_Info>
/**
 * \brief Extract SPI Settings from SPI Info Structure
 */
static particle::__SPISettings spiSettingsFromSpiInfo(hal_spi_info_t* info)
{
    if (!info || !info->enabled || info->default_settings)
   d4e6c:	f89d 402d 	ldrb.w	r4, [sp, #45]	; 0x2d
   d4e70:	b154      	cbz	r4, d4e88 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4c>
   d4e72:	f89d 502c 	ldrb.w	r5, [sp, #44]	; 0x2c
   d4e76:	b935      	cbnz	r5, d4e86 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x4a>
    {
        return particle::__SPISettings();
    }
    return particle::__SPISettings(info->clock, info->bit_order, info->data_mode);
   d4e78:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   d4e7c:	f89d 9034 	ldrb.w	r9, [sp, #52]	; 0x34
   d4e80:	f89d 4035 	ldrb.w	r4, [sp, #53]	; 0x35
   d4e84:	e003      	b.n	d4e8e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x52>
      dataMode_{dataMode}
  {
  }

  __SPISettings()
  {
   d4e86:	2400      	movs	r4, #0
   d4e88:	46a1      	mov	r9, r4
   d4e8a:	46a0      	mov	r8, r4
   d4e8c:	2501      	movs	r5, #1
   d4e8e:	7933      	ldrb	r3, [r6, #4]
  }

  bool operator==(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d4e90:	b105      	cbz	r5, d4e94 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x58>
   d4e92:	b9bb      	cbnz	r3, d4ec4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
      return true;

    if (default_ == other.default_ &&
   d4e94:	429d      	cmp	r5, r3
   d4e96:	d10b      	bne.n	d4eb0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
   d4e98:	68b2      	ldr	r2, [r6, #8]
   d4e9a:	4542      	cmp	r2, r8
   d4e9c:	d108      	bne.n	d4eb0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x74>
        clock_ == other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d4e9e:	f88d 9020 	strb.w	r9, [sp, #32]
   d4ea2:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d4ea6:	f8bd 1020 	ldrh.w	r1, [sp, #32]
   d4eaa:	89b2      	ldrh	r2, [r6, #12]
   d4eac:	4291      	cmp	r1, r2
   d4eae:	d009      	beq.n	d4ec4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
    particle::__SPISettings spi_settings = spiSettingsFromSpiInfo(&spi_info);

    // Reconfigure SPI peripheral (if necessary)
    if (settings != spi_settings)
    {
        if (settings.default_)
   d4eb0:	b153      	cbz	r3, d4ec8 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x8c>
        {
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
   d4eb2:	2400      	movs	r4, #0
   d4eb4:	7838      	ldrb	r0, [r7, #0]
   d4eb6:	9401      	str	r4, [sp, #4]
   d4eb8:	9400      	str	r4, [sp, #0]
   d4eba:	4623      	mov	r3, r4
   d4ebc:	4622      	mov	r2, r4
   d4ebe:	2101      	movs	r1, #1

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d4ec0:	f7ff fd80 	bl	d49c4 <HAL_SPI_Set_Settings>
            }
        }
    }

    return 0;
   d4ec4:	2000      	movs	r0, #0
   d4ec6:	e026      	b.n	d4f16 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xda>
            HAL_SPI_Set_Settings(_spi, settings.default_, 0, 0, 0, nullptr);
        }
        else
        {
            // Compute valid clock value and clock divider from supplied clock value
            uint8_t divisor = 0;
   d4ec8:	f88d 300f 	strb.w	r3, [sp, #15]
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);
   d4ecc:	68b1      	ldr	r1, [r6, #8]
   d4ece:	980a      	ldr	r0, [sp, #40]	; 0x28
   d4ed0:	ab04      	add	r3, sp, #16
   d4ed2:	f10d 020f 	add.w	r2, sp, #15
   d4ed6:	f7ff ff9b 	bl	d4e10 <_ZN8SPIClass19computeClockDividerEjjRhRj>
   d4eda:	7931      	ldrb	r1, [r6, #4]
    return false;
  }

  bool operator<=(const __SPISettings& other) const
  {
    if (default_ && other.default_)
   d4edc:	b105      	cbz	r5, d4ee0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa4>
   d4ede:	b9b1      	cbnz	r1, d4f0e <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xd2>
      return true;

    if (default_ == other.default_ &&
   d4ee0:	42a9      	cmp	r1, r5
   d4ee2:	d008      	beq.n	d4ef6 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xba>

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
            {
                HAL_SPI_Set_Settings(_spi, settings.default_, divisor, settings.bitOrder_,
                                     settings.dataMode_, nullptr);
   d4ee4:	2400      	movs	r4, #0
   d4ee6:	7838      	ldrb	r0, [r7, #0]
   d4ee8:	9401      	str	r4, [sp, #4]
   d4eea:	7b74      	ldrb	r4, [r6, #13]
   d4eec:	7b33      	ldrb	r3, [r6, #12]
   d4eee:	f89d 200f 	ldrb.w	r2, [sp, #15]
   d4ef2:	9400      	str	r4, [sp, #0]
   d4ef4:	e7e4      	b.n	d4ec0 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x84>
   d4ef6:	68b3      	ldr	r3, [r6, #8]
   d4ef8:	4543      	cmp	r3, r8
   d4efa:	d3f3      	bcc.n	d4ee4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
        clock_ <= other.clock_ &&
        bitOrder_ == other.bitOrder_ &&
   d4efc:	f88d 9020 	strb.w	r9, [sp, #32]
   d4f00:	f88d 4021 	strb.w	r4, [sp, #33]	; 0x21
   d4f04:	f8bd 2020 	ldrh.w	r2, [sp, #32]
   d4f08:	89b3      	ldrh	r3, [r6, #12]
   d4f0a:	429a      	cmp	r2, r3
   d4f0c:	d1ea      	bne.n	d4ee4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
            unsigned int clock; // intentionally left uninitialized
            computeClockDivider((unsigned int)spi_info.system_clock, settings.clock_, divisor,
                                clock);

            // Ensure inequality aside from computed clock value
            if (!(spi_settings <= settings && clock == spi_settings.clock_))
   d4f0e:	9b04      	ldr	r3, [sp, #16]
   d4f10:	4543      	cmp	r3, r8
   d4f12:	d1e7      	bne.n	d4ee4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0xa8>
   d4f14:	e7d6      	b.n	d4ec4 <_ZN8SPIClass16beginTransactionERKN8particle13__SPISettingsE+0x88>
            }
        }
    }

    return 0;
}
   d4f16:	b00f      	add	sp, #60	; 0x3c
   d4f18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d4f1c <_ZN8SPIClass8transferEh>:

    return clock;
}

byte SPIClass::transfer(byte _data)
{
   d4f1c:	b508      	push	{r3, lr}
    return static_cast<byte>(HAL_SPI_Send_Receive_Data(_spi, _data));
   d4f1e:	7800      	ldrb	r0, [r0, #0]
   d4f20:	f7ff fd30 	bl	d4984 <HAL_SPI_Send_Receive_Data>
}
   d4f24:	b2c0      	uxtb	r0, r0
   d4f26:	bd08      	pop	{r3, pc}

000d4f28 <_ZN8SPIClass9isEnabledEv>:
bool SPIClass::isEnabled()
{
    // XXX: pinAvailable() will call this method potentially even from
    // interrupt context. `enabled` flag in HAL is usually just a volatile
    // variable, so it's fine not to acquire the lock here.
    return HAL_SPI_Is_Enabled(_spi);
   d4f28:	7800      	ldrb	r0, [r0, #0]
   d4f2a:	f7ff bd3b 	b.w	d49a4 <HAL_SPI_Is_Enabled>
	...

000d4f30 <_GLOBAL__sub_I_System>:
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4f30:	b510      	push	{r4, lr}

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4f32:	4c09      	ldr	r4, [pc, #36]	; (d4f58 <_GLOBAL__sub_I_System+0x28>)
   d4f34:	2000      	movs	r0, #0
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4f36:	f64f 73ff 	movw	r3, #65535	; 0xffff

class SystemSleepResult {
public:
    SystemSleepResult()
            : wakeupSource_(nullptr),
              error_(SYSTEM_ERROR_NONE) {
   d4f3a:	6020      	str	r0, [r4, #0]
   d4f3c:	80a0      	strh	r0, [r4, #4]
    WAKEUP_REASON_PIN_OR_RTC = 3,
    WAKEUP_REASON_UNKNOWN = 4
};

struct SleepResult {
    SleepResult() {}
   d4f3e:	71a0      	strb	r0, [r4, #6]
   d4f40:	8120      	strh	r0, [r4, #8]
   d4f42:	8163      	strh	r3, [r4, #10]

class SystemClass {
public:

    SystemClass(System_Mode_TypeDef mode = DEFAULT) {
        set_system_mode(mode);
   d4f44:	f7ff fe66 	bl	d4c14 <set_system_mode>

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4f48:	4620      	mov	r0, r4
   d4f4a:	4a04      	ldr	r2, [pc, #16]	; (d4f5c <_GLOBAL__sub_I_System+0x2c>)
   d4f4c:	4904      	ldr	r1, [pc, #16]	; (d4f60 <_GLOBAL__sub_I_System+0x30>)
    return wokenUpByRtc();
}

system_error_t SleepResult::error() const {
    return err_;
   d4f4e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}

#if Wiring_LogConfig
extern void(*log_process_ctrl_request_callback)(ctrl_request* req);
#endif

SystemClass System;
   d4f52:	f000 bdc7 	b.w	d5ae4 <__aeabi_atexit>
   d4f56:	bf00      	nop
   d4f58:	2003e3e4 	.word	0x2003e3e4
   d4f5c:	2003e374 	.word	0x2003e374
   d4f60:	000d40af 	.word	0x000d40af

000d4f64 <_ZN14RecursiveMutexD1Ev>:
    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
   d4f64:	b510      	push	{r4, lr}
   d4f66:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d4f68:	6800      	ldr	r0, [r0, #0]
   d4f6a:	b108      	cbz	r0, d4f70 <_ZN14RecursiveMutexD1Ev+0xc>
            os_mutex_recursive_destroy(handle_);
   d4f6c:	f7ff fd72 	bl	d4a54 <os_mutex_recursive_destroy>
        os_mutex_recursive_create(&handle_);
    }

    ~RecursiveMutex() {
        dispose();
    }
   d4f70:	4620      	mov	r0, r4
   d4f72:	bd10      	pop	{r4, pc}

000d4f74 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E>:
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4f74:	b510      	push	{r4, lr}
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f76:	4c06      	ldr	r4, [pc, #24]	; (d4f90 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x1c>)
   d4f78:	2300      	movs	r3, #0
    {
        os_mutex_recursive_create(&handle_);
   d4f7a:	4620      	mov	r0, r4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d4f7c:	6023      	str	r3, [r4, #0]
    {
        os_mutex_recursive_create(&handle_);
   d4f7e:	f7ff fd61 	bl	d4a44 <os_mutex_recursive_create>
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4f82:	4620      	mov	r0, r4
   d4f84:	4a03      	ldr	r2, [pc, #12]	; (d4f94 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x20>)
   d4f86:	4904      	ldr	r1, [pc, #16]	; (d4f98 <_GLOBAL__sub_I__ZN8particle3ble13WiringBleLock6mutex_E+0x24>)
BleCharacteristic BleLocalDevice::addCharacteristic(const String& desc, EnumFlags<BleCharacteristicProperty> properties, BleOnDataReceivedCallback callback, void* context) {
    WiringBleLock lk;
    return addCharacteristic(desc.c_str(), properties, callback, context);
}

} /* namespace particle */
   d4f88:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
private:
    bool locked_;
    static RecursiveMutex mutex_;
};

RecursiveMutex WiringBleLock::mutex_;
   d4f8c:	f000 bdaa 	b.w	d5ae4 <__aeabi_atexit>
   d4f90:	2003e3f0 	.word	0x2003e3f0
   d4f94:	2003e374 	.word	0x2003e374
   d4f98:	000d4f65 	.word	0x000d4f65

000d4f9c <_ZN5Print5writeEPKhj>:

// Public Methods //////////////////////////////////////////////////////////////

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
   d4f9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d4f9e:	4606      	mov	r6, r0
   d4fa0:	460d      	mov	r5, r1
   d4fa2:	188f      	adds	r7, r1, r2
  size_t n = 0;
   d4fa4:	2400      	movs	r4, #0
  while (size--) {
   d4fa6:	42bd      	cmp	r5, r7
   d4fa8:	d00c      	beq.n	d4fc4 <_ZN5Print5writeEPKhj+0x28>
     int chunk = write(*buffer++);
   d4faa:	6833      	ldr	r3, [r6, #0]
   d4fac:	f815 1b01 	ldrb.w	r1, [r5], #1
   d4fb0:	689b      	ldr	r3, [r3, #8]
   d4fb2:	4630      	mov	r0, r6
   d4fb4:	4798      	blx	r3
     if (chunk>=0)
   d4fb6:	2800      	cmp	r0, #0
   d4fb8:	db01      	blt.n	d4fbe <_ZN5Print5writeEPKhj+0x22>
         n += chunk;
   d4fba:	4404      	add	r4, r0

/* default implementation: may be overridden */
size_t Print::write(const uint8_t *buffer, size_t size)
{
  size_t n = 0;
  while (size--) {
   d4fbc:	e7f3      	b.n	d4fa6 <_ZN5Print5writeEPKhj+0xa>
     int chunk = write(*buffer++);
   d4fbe:	2c00      	cmp	r4, #0
   d4fc0:	bf08      	it	eq
   d4fc2:	4604      	moveq	r4, r0
             n = chunk;
         break;
     }
  }
  return n;
}
   d4fc4:	4620      	mov	r0, r4
   d4fc6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d4fc8 <_ZN5Print5writeEPKc>:

    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
   d4fc8:	b570      	push	{r4, r5, r6, lr}
   d4fca:	4605      	mov	r5, r0
      if (str == NULL) return 0;
   d4fcc:	460c      	mov	r4, r1
      return write((const uint8_t *)str, strlen(str));
    }
   d4fce:	4608      	mov	r0, r1
    int getWriteError() { return write_error; }
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
   d4fd0:	b149      	cbz	r1, d4fe6 <_ZN5Print5writeEPKc+0x1e>
      return write((const uint8_t *)str, strlen(str));
   d4fd2:	f001 fd25 	bl	d6a20 <strlen>
   d4fd6:	682b      	ldr	r3, [r5, #0]
   d4fd8:	4602      	mov	r2, r0
   d4fda:	4621      	mov	r1, r4
   d4fdc:	4628      	mov	r0, r5
   d4fde:	68db      	ldr	r3, [r3, #12]
    }
   d4fe0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d4fe4:	4718      	bx	r3
    }
   d4fe6:	bd70      	pop	{r4, r5, r6, pc}

000d4fe8 <_ZN5Print5printEPKc>:
   d4fe8:	b508      	push	{r3, lr}
   d4fea:	f7ff ffed 	bl	d4fc8 <_ZN5Print5writeEPKc>
   d4fee:	bd08      	pop	{r3, pc}

000d4ff0 <_ZN5Print5printEc>:
  return write(str);
}

size_t Print::print(char c)
{
  return write(c);
   d4ff0:	6803      	ldr	r3, [r0, #0]
   d4ff2:	689b      	ldr	r3, [r3, #8]
   d4ff4:	4718      	bx	r3

000d4ff6 <_ZN5Print7printlnEv>:
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4ff6:	b538      	push	{r3, r4, r5, lr}
  size_t n = print('\r');
   d4ff8:	210d      	movs	r1, #13
{
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
   d4ffa:	4605      	mov	r5, r0
  size_t n = print('\r');
   d4ffc:	f7ff fff8 	bl	d4ff0 <_ZN5Print5printEc>
  n += print('\n');
   d5000:	210a      	movs	r1, #10
  return print(reinterpret_cast<const char*>(str));
}

size_t Print::println(void)
{
  size_t n = print('\r');
   d5002:	4604      	mov	r4, r0
  n += print('\n');
   d5004:	4628      	mov	r0, r5
   d5006:	f7ff fff3 	bl	d4ff0 <_ZN5Print5printEc>
  return n;
}
   d500a:	4420      	add	r0, r4
   d500c:	bd38      	pop	{r3, r4, r5, pc}

000d500e <_ZN5Print11printNumberEmh>:
  return println(reinterpret_cast<const char*>(str));
}

// Private Methods /////////////////////////////////////////////////////////////

size_t Print::printNumber(unsigned long n, uint8_t base) {
   d500e:	b530      	push	{r4, r5, lr}
   d5010:	b08b      	sub	sp, #44	; 0x2c
   d5012:	460b      	mov	r3, r1
  char buf[8 * sizeof(n) + 1]; // Assumes 8-bit chars plus zero byte.
  char *str = &buf[sizeof(buf) - 1];

  *str = '\0';
   d5014:	2100      	movs	r1, #0
   d5016:	f88d 1024 	strb.w	r1, [sp, #36]	; 0x24

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
   d501a:	2a01      	cmp	r2, #1
   d501c:	bf98      	it	ls
   d501e:	220a      	movls	r2, #10
   d5020:	f10d 0423 	add.w	r4, sp, #35	; 0x23

  do {
   decltype(n) m = n;
   n /= base;
   d5024:	fbb3 f5f2 	udiv	r5, r3, r2
   char c = m - base * n;
   d5028:	fb05 3312 	mls	r3, r5, r2, r3
   d502c:	f003 03ff 	and.w	r3, r3, #255	; 0xff
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
   d5030:	2b09      	cmp	r3, #9
   d5032:	bf94      	ite	ls
   d5034:	3330      	addls	r3, #48	; 0x30
   d5036:	3337      	addhi	r3, #55	; 0x37
   d5038:	b2db      	uxtb	r3, r3
   d503a:	4621      	mov	r1, r4
   d503c:	f804 3901 	strb.w	r3, [r4], #-1
   d5040:	462b      	mov	r3, r5
  *str = '\0';

  // prevent crash if called with base == 1
  if (base < 2) base = 10;

  do {
   d5042:	2d00      	cmp	r5, #0
   d5044:	d1ee      	bne.n	d5024 <_ZN5Print11printNumberEmh+0x16>
   n /= base;
   char c = m - base * n;
   *--str = c < 10 ? c + '0' : c + 'A' - 10;
  } while(n);

  return write(str);
   d5046:	f7ff ffbf 	bl	d4fc8 <_ZN5Print5writeEPKc>
}
   d504a:	b00b      	add	sp, #44	; 0x2c
   d504c:	bd30      	pop	{r4, r5, pc}

000d504e <_ZN5Print11printf_implEbPKcz>:

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d504e:	b40c      	push	{r2, r3}
   d5050:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5054:	b087      	sub	sp, #28
   d5056:	af00      	add	r7, sp, #0
   d5058:	f107 0438 	add.w	r4, r7, #56	; 0x38
   d505c:	4605      	mov	r5, r0
   d505e:	f854 9b04 	ldr.w	r9, [r4], #4
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
   d5062:	603c      	str	r4, [r7, #0]

  return n;
}

size_t Print::printf_impl(bool newline, const char* format, ...)
{
   d5064:	460e      	mov	r6, r1
    const int bufsize = 20;
    char test[bufsize];
    va_list marker;
    va_start(marker, format);
    size_t n = vsnprintf(test, bufsize, format, marker);
   d5066:	4623      	mov	r3, r4
   d5068:	464a      	mov	r2, r9
   d506a:	2114      	movs	r1, #20
   d506c:	1d38      	adds	r0, r7, #4
   d506e:	f7ff fe5d 	bl	d4d2c <vsnprintf>
    va_end(marker);

    if (n<bufsize)
   d5072:	2813      	cmp	r0, #19
   d5074:	d805      	bhi.n	d5082 <_ZN5Print11printf_implEbPKcz+0x34>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d5076:	1d39      	adds	r1, r7, #4
   d5078:	4628      	mov	r0, r5
   d507a:	f7ff ffa5 	bl	d4fc8 <_ZN5Print5writeEPKc>
   d507e:	4604      	mov	r4, r0
   d5080:	e013      	b.n	d50aa <_ZN5Print11printf_implEbPKcz+0x5c>
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d5082:	f100 0308 	add.w	r3, r0, #8
   d5086:	f023 0307 	bic.w	r3, r3, #7
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
   d508a:	46e8      	mov	r8, sp
    {
        n = print(test);
    }
    else
    {
        char bigger[n+1];
   d508c:	ebad 0d03 	sub.w	sp, sp, r3
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
   d5090:	1c41      	adds	r1, r0, #1
   d5092:	4623      	mov	r3, r4
   d5094:	464a      	mov	r2, r9
   d5096:	4668      	mov	r0, sp
        n = print(test);
    }
    else
    {
        char bigger[n+1];
        va_start(marker, format);
   d5098:	603c      	str	r4, [r7, #0]
        n = vsnprintf(bigger, n+1, format, marker);
   d509a:	f7ff fe47 	bl	d4d2c <vsnprintf>
  return n;
}

size_t Print::print(const char str[])
{
  return write(str);
   d509e:	4669      	mov	r1, sp
   d50a0:	4628      	mov	r0, r5
   d50a2:	f7ff ff91 	bl	d4fc8 <_ZN5Print5writeEPKc>
   d50a6:	4604      	mov	r4, r0
   d50a8:	46c5      	mov	sp, r8
        va_start(marker, format);
        n = vsnprintf(bigger, n+1, format, marker);
        va_end(marker);
        n = print(bigger);
    }
    if (newline)
   d50aa:	b11e      	cbz	r6, d50b4 <_ZN5Print11printf_implEbPKcz+0x66>
        n += println();
   d50ac:	4628      	mov	r0, r5
   d50ae:	f7ff ffa2 	bl	d4ff6 <_ZN5Print7printlnEv>
   d50b2:	4404      	add	r4, r0
    return n;
}
   d50b4:	4620      	mov	r0, r4
   d50b6:	371c      	adds	r7, #28
   d50b8:	46bd      	mov	sp, r7
   d50ba:	e8bd 43f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d50be:	b002      	add	sp, #8
   d50c0:	4770      	bx	lr
	...

000d50c4 <_GLOBAL__sub_I__ZN5spark3LogE>:
    // This handler doesn't support direct logging
}

// spark::Logger
inline spark::Logger::Logger(const char *name) :
        name_(name) {
   d50c4:	4b01      	ldr	r3, [pc, #4]	; (d50cc <_GLOBAL__sub_I__ZN5spark3LogE+0x8>)
   d50c6:	4a02      	ldr	r2, [pc, #8]	; (d50d0 <_GLOBAL__sub_I__ZN5spark3LogE+0xc>)
   d50c8:	601a      	str	r2, [r3, #0]
   d50ca:	4770      	bx	lr
   d50cc:	2003e3f4 	.word	0x2003e3f4
   d50d0:	000d6baf 	.word	0x000d6baf

000d50d4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT>:
            calendar_time_cache = Convert_UnixTime_To_CalendarTime(unix_time);
            unix_time_cache = unix_time;
    }
}

const char* TimeClass::format_spec = TIME_FORMAT_DEFAULT;
   d50d4:	4b02      	ldr	r3, [pc, #8]	; (d50e0 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0xc>)
   d50d6:	681a      	ldr	r2, [r3, #0]
   d50d8:	4b02      	ldr	r3, [pc, #8]	; (d50e4 <_GLOBAL__sub_I_TIME_FORMAT_DEFAULT+0x10>)
   d50da:	601a      	str	r2, [r3, #0]
   d50dc:	4770      	bx	lr
   d50de:	bf00      	nop
   d50e0:	2003e308 	.word	0x2003e308
   d50e4:	2003e3f8 	.word	0x2003e3f8

000d50e8 <delay>:
    return (value - fromStart) * (toEnd - toStart) / (fromEnd - fromStart) + toStart;
}

void delay(unsigned long ms)
{
    system_delay_ms(ms, false);
   d50e8:	2100      	movs	r1, #0
   d50ea:	f7ff bd9b 	b.w	d4c24 <system_delay_ms>

000d50ee <_ZNSt14_Function_baseD1Ev>:
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d50ee:	b510      	push	{r4, lr}
    {
      if (_M_manager)
   d50f0:	6883      	ldr	r3, [r0, #8]
	}
      };

    _Function_base() : _M_manager(nullptr) { }

    ~_Function_base()
   d50f2:	4604      	mov	r4, r0
    {
      if (_M_manager)
   d50f4:	b113      	cbz	r3, d50fc <_ZNSt14_Function_baseD1Ev+0xe>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d50f6:	2203      	movs	r2, #3
   d50f8:	4601      	mov	r1, r0
   d50fa:	4798      	blx	r3
    }
   d50fc:	4620      	mov	r0, r4
   d50fe:	bd10      	pop	{r4, pc}

000d5100 <_ZN8RGBClassD1Ev>:
#include "rgbled.h"

typedef void (raw_rgb_change_handler_t)(uint8_t, uint8_t, uint8_t);
typedef std::function<raw_rgb_change_handler_t> wiring_rgb_change_handler_t;

class RGBClass {
   d5100:	b510      	push	{r4, lr}
   d5102:	4604      	mov	r4, r0
   *  @ingroup functors
   *
   *  Polymorphic function wrapper.
   */
  template<typename _Res, typename... _ArgTypes>
    class function<_Res(_ArgTypes...)>
   d5104:	f7ff fff3 	bl	d50ee <_ZNSt14_Function_baseD1Ev>
   d5108:	4620      	mov	r0, r4
   d510a:	bd10      	pop	{r4, pc}

000d510c <_GLOBAL__sub_I_RGB>:
	{
	  _Base::_M_init_functor(__functor, std::__addressof(__f.get()));
	}
      };

    _Function_base() : _M_manager(nullptr) { }
   d510c:	4803      	ldr	r0, [pc, #12]	; (d511c <_GLOBAL__sub_I_RGB+0x10>)
#include "spark_wiring_rgb.h"
#include "spark_wiring_interrupts.h"

#include "core_hal.h"

RGBClass RGB;
   d510e:	4a04      	ldr	r2, [pc, #16]	; (d5120 <_GLOBAL__sub_I_RGB+0x14>)
   d5110:	4904      	ldr	r1, [pc, #16]	; (d5124 <_GLOBAL__sub_I_RGB+0x18>)
   d5112:	2300      	movs	r3, #0
   d5114:	6083      	str	r3, [r0, #8]
   d5116:	f000 bce5 	b.w	d5ae4 <__aeabi_atexit>
   d511a:	bf00      	nop
   d511c:	2003e3fc 	.word	0x2003e3fc
   d5120:	2003e374 	.word	0x2003e374
   d5124:	000d5101 	.word	0x000d5101

000d5128 <serialEventRun>:

/**
 * Provides background processing of serial data.
 */
void serialEventRun()
{
   d5128:	b508      	push	{r3, lr}
    if (serialEvent && Serial.available()>0)
   d512a:	4b0c      	ldr	r3, [pc, #48]	; (d515c <serialEventRun+0x34>)
   d512c:	b133      	cbz	r3, d513c <serialEventRun+0x14>
   d512e:	f000 f957 	bl	d53e0 <_Z16_fetch_usbserialv>
   d5132:	6803      	ldr	r3, [r0, #0]
   d5134:	691b      	ldr	r3, [r3, #16]
   d5136:	4798      	blx	r3
   d5138:	2800      	cmp	r0, #0
   d513a:	dc09      	bgt.n	d5150 <serialEventRun+0x28>
        serialEvent();

    if (serialEvent1 && Serial1.available()>0)
   d513c:	4b08      	ldr	r3, [pc, #32]	; (d5160 <serialEventRun+0x38>)
   d513e:	b163      	cbz	r3, d515a <serialEventRun+0x32>
   d5140:	f000 f9d0 	bl	d54e4 <_Z22__fetch_global_Serial1v>
   d5144:	6803      	ldr	r3, [r0, #0]
   d5146:	691b      	ldr	r3, [r3, #16]
   d5148:	4798      	blx	r3
   d514a:	2800      	cmp	r0, #0
   d514c:	dc03      	bgt.n	d5156 <serialEventRun+0x2e>
   d514e:	bd08      	pop	{r3, pc}
 * Provides background processing of serial data.
 */
void serialEventRun()
{
    if (serialEvent && Serial.available()>0)
        serialEvent();
   d5150:	f3af 8000 	nop.w
   d5154:	e7f2      	b.n	d513c <serialEventRun+0x14>

    if (serialEvent1 && Serial1.available()>0)
        serialEvent1();
   d5156:	f3af 8000 	nop.w
   d515a:	bd08      	pop	{r3, pc}
	...

000d5164 <_post_loop>:
#if Wiring_Serial5
void serialEvent5() __attribute__((weak));
#endif

void _post_loop()
{
   d5164:	b508      	push	{r3, lr}
	serialEventRun();
   d5166:	f7ff ffdf 	bl	d5128 <serialEventRun>
		return !timeout_fn;
	}

	static inline system_tick_t current_time()
	{
		return HAL_Timer_Get_Milli_Seconds();
   d516a:	f7ff fc4b 	bl	d4a04 <HAL_Timer_Get_Milli_Seconds>
	/**
	 * Lifesign that the application is still working normally.
	 */
	static void checkin()
	{
		last_checkin = current_time();
   d516e:	4b01      	ldr	r3, [pc, #4]	; (d5174 <_post_loop+0x10>)
   d5170:	6018      	str	r0, [r3, #0]
   d5172:	bd08      	pop	{r3, pc}
   d5174:	2003e730 	.word	0x2003e730

000d5178 <_Z33system_initialize_user_backup_ramv>:
 * the dynamically linked application module.
 */
void system_initialize_user_backup_ram()
{
    size_t len = &link_global_retained_end-&link_global_retained_start;
    memcpy(&link_global_retained_start, &link_global_retained_initial_values, len);
   d5178:	4802      	ldr	r0, [pc, #8]	; (d5184 <_Z33system_initialize_user_backup_ramv+0xc>)
   d517a:	4a03      	ldr	r2, [pc, #12]	; (d5188 <_Z33system_initialize_user_backup_ramv+0x10>)
   d517c:	4903      	ldr	r1, [pc, #12]	; (d518c <_Z33system_initialize_user_backup_ramv+0x14>)
   d517e:	1a12      	subs	r2, r2, r0
   d5180:	f001 bc12 	b.w	d69a8 <memcpy>
   d5184:	2003f400 	.word	0x2003f400
   d5188:	2003f404 	.word	0x2003f404
   d518c:	000d6e30 	.word	0x000d6e30

000d5190 <_Z27ctrl_request_custom_handlerP12ctrl_request>:
bool __backup_ram_was_valid() { return false; }

#endif

// Default handler for CTRL_REQUEST_APP_CUSTOM requests
void __attribute((weak)) ctrl_request_custom_handler(ctrl_request* req) {
   d5190:	b507      	push	{r0, r1, r2, lr}
    system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d5192:	2300      	movs	r3, #0
   d5194:	9300      	str	r3, [sp, #0]
   d5196:	461a      	mov	r2, r3
   d5198:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d519c:	f7ff fd54 	bl	d4c48 <system_ctrl_set_result>
}
   d51a0:	b003      	add	sp, #12
   d51a2:	f85d fb04 	ldr.w	pc, [sp], #4
	...

000d51a8 <_ZL20ctrl_request_handlerP12ctrl_request>:
// Callback invoked to process a logging configuration request
void(*log_process_ctrl_request_callback)(ctrl_request* req) = nullptr;
#endif

// Application handler for control requests
static void ctrl_request_handler(ctrl_request* req) {
   d51a8:	b507      	push	{r0, r1, r2, lr}
    switch (req->type) {
   d51aa:	8843      	ldrh	r3, [r0, #2]
   d51ac:	2b0a      	cmp	r3, #10
   d51ae:	d008      	beq.n	d51c2 <_ZL20ctrl_request_handlerP12ctrl_request+0x1a>
   d51b0:	2b50      	cmp	r3, #80	; 0x50
   d51b2:	d109      	bne.n	d51c8 <_ZL20ctrl_request_handlerP12ctrl_request+0x20>
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
   d51b4:	4b09      	ldr	r3, [pc, #36]	; (d51dc <_ZL20ctrl_request_handlerP12ctrl_request+0x34>)
   d51b6:	681b      	ldr	r3, [r3, #0]
   d51b8:	b13b      	cbz	r3, d51ca <_ZL20ctrl_request_handlerP12ctrl_request+0x22>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
        break;
    }
}
   d51ba:	b003      	add	sp, #12
   d51bc:	f85d eb04 	ldr.w	lr, [sp], #4
static void ctrl_request_handler(ctrl_request* req) {
    switch (req->type) {
#if Wiring_LogConfig
    case CTRL_REQUEST_LOG_CONFIG: {
        if (log_process_ctrl_request_callback) {
            log_process_ctrl_request_callback(req);
   d51c0:	4718      	bx	r3
        }
        break;
    }
#endif
    case CTRL_REQUEST_APP_CUSTOM: {
        ctrl_request_custom_handler(req);
   d51c2:	f7ff ffe5 	bl	d5190 <_Z27ctrl_request_custom_handlerP12ctrl_request>
        break;
   d51c6:	e006      	b.n	d51d6 <_ZL20ctrl_request_handlerP12ctrl_request+0x2e>
    }
    default:
        system_ctrl_set_result(req, SYSTEM_ERROR_NOT_SUPPORTED, nullptr, nullptr, nullptr);
   d51c8:	2300      	movs	r3, #0
   d51ca:	9300      	str	r3, [sp, #0]
   d51cc:	461a      	mov	r2, r3
   d51ce:	f06f 0177 	mvn.w	r1, #119	; 0x77
   d51d2:	f7ff fd39 	bl	d4c48 <system_ctrl_set_result>
        break;
    }
}
   d51d6:	b003      	add	sp, #12
   d51d8:	f85d fb04 	ldr.w	pc, [sp], #4
   d51dc:	2003e40c 	.word	0x2003e40c

000d51e0 <module_user_init_hook>:

void module_user_init_hook()
{
   d51e0:	b538      	push	{r3, r4, r5, lr}
#if HAL_PLATFORM_BACKUP_RAM
    backup_ram_was_valid_ =  __backup_sram_signature==signature;
   d51e2:	4c10      	ldr	r4, [pc, #64]	; (d5224 <module_user_init_hook+0x44>)
   d51e4:	4d10      	ldr	r5, [pc, #64]	; (d5228 <module_user_init_hook+0x48>)
   d51e6:	6823      	ldr	r3, [r4, #0]
   d51e8:	42ab      	cmp	r3, r5
   d51ea:	4b10      	ldr	r3, [pc, #64]	; (d522c <module_user_init_hook+0x4c>)
   d51ec:	bf0c      	ite	eq
   d51ee:	2201      	moveq	r2, #1
   d51f0:	2200      	movne	r2, #0
   d51f2:	701a      	strb	r2, [r3, #0]
    if (!backup_ram_was_valid_) {
   d51f4:	d002      	beq.n	d51fc <module_user_init_hook+0x1c>
        system_initialize_user_backup_ram();
   d51f6:	f7ff ffbf 	bl	d5178 <_Z33system_initialize_user_backup_ramv>
        __backup_sram_signature = signature;
   d51fa:	6025      	str	r5, [r4, #0]
    }
#endif

#if HAL_PLATFORM_RNG
    // Initialize the default stdlib PRNG using hardware RNG as a seed
    const uint32_t seed = HAL_RNG_GetRandomNumber();
   d51fc:	f7ff fbfa 	bl	d49f4 <HAL_RNG_GetRandomNumber>
   d5200:	4604      	mov	r4, r0
    srand(seed);
   d5202:	f001 fbe5 	bl	d69d0 <srand>

    // If the user defines random_seed_from_cloud, call it with a seed value
    // generated by a hardware RNG as well.
    if (random_seed_from_cloud) {
   d5206:	4b0a      	ldr	r3, [pc, #40]	; (d5230 <module_user_init_hook+0x50>)
   d5208:	b113      	cbz	r3, d5210 <module_user_init_hook+0x30>
        random_seed_from_cloud(seed);
   d520a:	4620      	mov	r0, r4
   d520c:	f3af 8000 	nop.w
    }
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);
   d5210:	2100      	movs	r1, #0
   d5212:	4807      	ldr	r0, [pc, #28]	; (d5230 <module_user_init_hook+0x50>)
   d5214:	f7ff fd72 	bl	d4cfc <spark_set_random_seed_from_cloud_handler>

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5218:	2100      	movs	r1, #0
   d521a:	4806      	ldr	r0, [pc, #24]	; (d5234 <module_user_init_hook+0x54>)
}
   d521c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
#endif
    // Register the random_seed_from_cloud handler
    spark_set_random_seed_from_cloud_handler(&random_seed_from_cloud, nullptr);

    // Register application handler for the control requests
    system_ctrl_set_app_request_handler(ctrl_request_handler, nullptr);
   d5220:	f7ff bd08 	b.w	d4c34 <system_ctrl_set_app_request_handler>
   d5224:	2003f400 	.word	0x2003f400
   d5228:	9a271c1e 	.word	0x9a271c1e
   d522c:	2003e410 	.word	0x2003e410
   d5230:	00000000 	.word	0x00000000
   d5234:	000d51a9 	.word	0x000d51a9

000d5238 <_ZN9IPAddressD1Ev>:
    IPAddress(uint8_t first_octet, uint8_t second_octet, uint8_t third_octet, uint8_t fourth_octet);
    IPAddress(uint32_t address);
    IPAddress(const uint8_t* address);
    IPAddress(const HAL_IPAddress& address);

    virtual ~IPAddress() {}
   d5238:	4770      	bx	lr

000d523a <_ZN9IPAddressD0Ev>:
   d523a:	b510      	push	{r4, lr}
   d523c:	2118      	movs	r1, #24
   d523e:	4604      	mov	r4, r0
   d5240:	f000 fc5e 	bl	d5b00 <_ZdlPvj>
   d5244:	4620      	mov	r0, r4
   d5246:	bd10      	pop	{r4, pc}

000d5248 <_ZNK9IPAddress7printToER5Print>:
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d5248:	b5f0      	push	{r4, r5, r6, r7, lr}
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d524a:	7d03      	ldrb	r3, [r0, #20]
   d524c:	2b06      	cmp	r3, #6
#endif // Wiring_IPv6
	return address.ipv4==that.address.ipv4;
}

size_t IPAddress::printTo(Print& p) const
{
   d524e:	b08d      	sub	sp, #52	; 0x34
   d5250:	460e      	mov	r6, r1
   d5252:	f100 0704 	add.w	r7, r0, #4
   d5256:	f04f 0400 	mov.w	r4, #0
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
   d525a:	d002      	beq.n	d5262 <_ZNK9IPAddress7printToER5Print+0x1a>
   d525c:	f100 0508 	add.w	r5, r0, #8
   d5260:	e018      	b.n	d5294 <_ZNK9IPAddress7printToER5Print+0x4c>
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5262:	ad0c      	add	r5, sp, #48	; 0x30
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d5264:	4639      	mov	r1, r7
{
#if Wiring_IPv6
#if HAL_USE_INET_HAL_POSIX
	if (address.v==6) {
		char buf[INET6_ADDRSTRLEN+1];
		buf[0] = 0;
   d5266:	f805 4d30 	strb.w	r4, [r5, #-48]!
		inet_inet_ntop(AF_INET6, address.ipv6, buf, sizeof(buf));
   d526a:	232f      	movs	r3, #47	; 0x2f
   d526c:	462a      	mov	r2, r5
   d526e:	200a      	movs	r0, #10
   d5270:	f7ff fbf8 	bl	d4a64 <inet_inet_ntop>
    void clearWriteError() { setWriteError(0); }

    virtual size_t write(uint8_t) = 0;
    size_t write(const char *str) {
      if (str == NULL) return 0;
      return write((const uint8_t *)str, strlen(str));
   d5274:	4628      	mov	r0, r5
   d5276:	f001 fbd3 	bl	d6a20 <strlen>
   d527a:	6833      	ldr	r3, [r6, #0]
   d527c:	4602      	mov	r2, r0
   d527e:	68db      	ldr	r3, [r3, #12]
   d5280:	4629      	mov	r1, r5
   d5282:	4630      	mov	r0, r6
   d5284:	4798      	blx	r3
   d5286:	e00f      	b.n	d52a8 <_ZNK9IPAddress7printToER5Print+0x60>
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
    {
        if (n)
   d5288:	b124      	cbz	r4, d5294 <_ZNK9IPAddress7printToER5Print+0x4c>
            n += p.print('.');
   d528a:	212e      	movs	r1, #46	; 0x2e
   d528c:	4630      	mov	r0, r6
   d528e:	f7ff feaf 	bl	d4ff0 <_ZN5Print5printEc>
   d5292:	4404      	add	r4, r0
            t = print('-');
            val = -n;
        } else {
            val = n;
        }
        return printNumber(val, base) + t;
   d5294:	f815 1d01 	ldrb.w	r1, [r5, #-1]!
   d5298:	220a      	movs	r2, #10
   d529a:	4630      	mov	r0, r6
   d529c:	f7ff feb7 	bl	d500e <_ZN5Print11printNumberEmh>
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d52a0:	42bd      	cmp	r5, r7
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d52a2:	4404      	add	r4, r0
#else
#pragma message "HAL_USE_INET_HAL_POSIX is required for IPv6 support in IPAddress::printTo()"
#endif // HAL_USE_INET_HAL_POSIX
#endif // Wiring_IPv6
    size_t n = 0;
    for (int i = 0; i < 4; i++)
   d52a4:	d1f0      	bne.n	d5288 <_ZNK9IPAddress7printToER5Print+0x40>
    {
        if (n)
            n += p.print('.');
        n += p.print((*this)[i], DEC);
   d52a6:	4620      	mov	r0, r4
    }
    return n;
}
   d52a8:	b00d      	add	sp, #52	; 0x34
   d52aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

000d52ac <_ZN9IPAddressC1Ev>:

#if HAL_USE_INET_HAL_POSIX
#include <arpa/inet.h>
#endif // HAL_USE_INET_HAL_POSIX

IPAddress::IPAddress()
   d52ac:	b510      	push	{r4, lr}
   d52ae:	4b05      	ldr	r3, [pc, #20]	; (d52c4 <_ZN9IPAddressC1Ev+0x18>)
   d52b0:	4604      	mov	r4, r0
        return address;
    }

    virtual size_t printTo(Print& p) const;

    void clear() { memset(&address, 0, sizeof (address)); }
   d52b2:	2211      	movs	r2, #17
   d52b4:	f840 3b04 	str.w	r3, [r0], #4
   d52b8:	2100      	movs	r1, #0
   d52ba:	f001 fb80 	bl	d69be <memset>
{
    clear();
}
   d52be:	4620      	mov	r0, r4
   d52c0:	bd10      	pop	{r4, pc}
   d52c2:	bf00      	nop
   d52c4:	000d6c4c 	.word	0x000d6c4c

000d52c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>:

IPAddress::IPAddress(const HAL_IPAddress& address)
   d52c8:	4603      	mov	r3, r0
   d52ca:	4a07      	ldr	r2, [pc, #28]	; (d52e8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0x20>)
   d52cc:	b510      	push	{r4, lr}
   d52ce:	f843 2b04 	str.w	r2, [r3], #4
{
    memcpy(&this->address, &address, sizeof(address));
   d52d2:	f101 0210 	add.w	r2, r1, #16
   d52d6:	f851 4b04 	ldr.w	r4, [r1], #4
   d52da:	f843 4b04 	str.w	r4, [r3], #4
   d52de:	4291      	cmp	r1, r2
   d52e0:	d1f9      	bne.n	d52d6 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t+0xe>
   d52e2:	780a      	ldrb	r2, [r1, #0]
   d52e4:	701a      	strb	r2, [r3, #0]
}
   d52e6:	bd10      	pop	{r4, pc}
   d52e8:	000d6c4c 	.word	0x000d6c4c

000d52ec <_ZN9IPAddress8set_ipv4Ehhhh>:
    return address.ipv4!=0;
#endif
}

void IPAddress::set_ipv4(uint8_t b0, uint8_t b1, uint8_t b2, uint8_t b3)
{
   d52ec:	b510      	push	{r4, lr}
    address.ipv4 = b0<<24 | b1 << 16 | b2 << 8 | b3;
   d52ee:	f89d 4008 	ldrb.w	r4, [sp, #8]
   d52f2:	ea44 2303 	orr.w	r3, r4, r3, lsl #8
   d52f6:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   d52fa:	ea42 6101 	orr.w	r1, r2, r1, lsl #24
        return &address;
    }

    inline void setVersion(uint8_t version) {
#if HAL_IPv6
        address.v = version;
   d52fe:	2304      	movs	r3, #4
   d5300:	6041      	str	r1, [r0, #4]
   d5302:	7503      	strb	r3, [r0, #20]
   d5304:	bd10      	pop	{r4, pc}

000d5306 <_ZN9IPAddressaSEPKh>:
    setVersion(4);
}

IPAddress& IPAddress::operator=(const uint8_t* address)
{
   d5306:	b537      	push	{r0, r1, r2, r4, r5, lr}
    set_ipv4(address[0], address[1], address[2], address[3]);
   d5308:	780d      	ldrb	r5, [r1, #0]
   d530a:	788b      	ldrb	r3, [r1, #2]
   d530c:	784a      	ldrb	r2, [r1, #1]
   d530e:	78c9      	ldrb	r1, [r1, #3]
   d5310:	9100      	str	r1, [sp, #0]
   d5312:	4629      	mov	r1, r5
   d5314:	f7ff ffea 	bl	d52ec <_ZN9IPAddress8set_ipv4Ehhhh>
    return *this;
}
   d5318:	b003      	add	sp, #12
   d531a:	bd30      	pop	{r4, r5, pc}

000d531c <_ZN9USBSerial14blockOnOverrunEb>:
  HAL_USB_USART_Flush_Data(_serial);
}

void USBSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d531c:	7441      	strb	r1, [r0, #17]
   d531e:	4770      	bx	lr

000d5320 <_ZN9USBSerialD1Ev>:
#include "usb_hal.h"
#include "system_task.h"
#include "spark_wiring_startup.h"
#include "concurrent_hal.h"

class USBSerial : public Stream
   d5320:	4770      	bx	lr

000d5322 <_ZN9USBSerial4readEv>:
}


// Read data from buffer
int USBSerial::read()
{
   d5322:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
   d5324:	2100      	movs	r1, #0
   d5326:	7c00      	ldrb	r0, [r0, #16]
   d5328:	f7ff fc5c 	bl	d4be4 <HAL_USB_USART_Receive_Data>
}
   d532c:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5330:	bf28      	it	cs
   d5332:	f04f 30ff 	movcs.w	r0, #4294967295
   d5336:	bd08      	pop	{r3, pc}

000d5338 <_ZN9USBSerial4peekEv>:
{
  _blocking = block;
}

int USBSerial::peek()
{
   d5338:	b508      	push	{r3, lr}
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, true));
   d533a:	2101      	movs	r1, #1
   d533c:	7c00      	ldrb	r0, [r0, #16]
   d533e:	f7ff fc51 	bl	d4be4 <HAL_USB_USART_Receive_Data>
}
   d5342:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d5346:	bf28      	it	cs
   d5348:	f04f 30ff 	movcs.w	r0, #4294967295
   d534c:	bd08      	pop	{r3, pc}

000d534e <_ZN9USBSerial17availableForWriteEv>:
{
	return std::max(-1, (int)HAL_USB_USART_Receive_Data(_serial, false));
}

int USBSerial::availableForWrite()
{
   d534e:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USB_USART_Available_Data_For_Write(_serial));
   d5350:	7c00      	ldrb	r0, [r0, #16]
   d5352:	f7ff fc3f 	bl	d4bd4 <HAL_USB_USART_Available_Data_For_Write>
}
   d5356:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d535a:	bd08      	pop	{r3, pc}

000d535c <_ZN9USBSerial9availableEv>:

int USBSerial::available()
{
   d535c:	b508      	push	{r3, lr}
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
   d535e:	7c00      	ldrb	r0, [r0, #16]
   d5360:	f7ff fc30 	bl	d4bc4 <HAL_USB_USART_Available_Data>
}
   d5364:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d5368:	bd08      	pop	{r3, pc}

000d536a <_ZN9USBSerial5flushEv>:
  return 0;
}

void USBSerial::flush()
{
  HAL_USB_USART_Flush_Data(_serial);
   d536a:	7c00      	ldrb	r0, [r0, #16]
   d536c:	f7ff bc4a 	b.w	d4c04 <HAL_USB_USART_Flush_Data>

000d5370 <_ZN9USBSerialD0Ev>:
   d5370:	b510      	push	{r4, lr}
   d5372:	2114      	movs	r1, #20
   d5374:	4604      	mov	r4, r0
   d5376:	f000 fbc3 	bl	d5b00 <_ZdlPvj>
   d537a:	4620      	mov	r0, r4
   d537c:	bd10      	pop	{r4, pc}

000d537e <_ZN9USBSerial5writeEh>:
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d537e:	b538      	push	{r3, r4, r5, lr}
   d5380:	4604      	mov	r4, r0
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5382:	7c00      	ldrb	r0, [r0, #16]
{
	return std::max(0, (int)HAL_USB_USART_Available_Data(_serial));
}

size_t USBSerial::write(uint8_t byte)
{
   d5384:	460d      	mov	r5, r1
  if (HAL_USB_USART_Available_Data_For_Write(_serial) > 0 || _blocking) {
   d5386:	f7ff fc25 	bl	d4bd4 <HAL_USB_USART_Available_Data_For_Write>
   d538a:	2800      	cmp	r0, #0
   d538c:	dc01      	bgt.n	d5392 <_ZN9USBSerial5writeEh+0x14>
   d538e:	7c60      	ldrb	r0, [r4, #17]
   d5390:	b128      	cbz	r0, d539e <_ZN9USBSerial5writeEh+0x20>
    return std::max(0, (int)HAL_USB_USART_Send_Data(_serial, byte));
   d5392:	4629      	mov	r1, r5
   d5394:	7c20      	ldrb	r0, [r4, #16]
   d5396:	f7ff fc2d 	bl	d4bf4 <HAL_USB_USART_Send_Data>
   d539a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
  }
  return 0;
}
   d539e:	bd38      	pop	{r3, r4, r5, pc}

000d53a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>:

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d53a0:	b510      	push	{r4, lr}
   d53a2:	4604      	mov	r4, r0
  protected:
    void setWriteError(int err = 1) { write_error = err; }
    size_t printf_impl(bool newline, const char* format, ...);

  public:
    Print() : write_error(0) {}
   d53a4:	2300      	movs	r3, #0
   d53a6:	6063      	str	r3, [r4, #4]
    virtual int available() = 0;
    virtual int read() = 0;
    virtual int peek() = 0;
    virtual void flush() = 0;

    Stream() {_timeout=1000;}
   d53a8:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d53ac:	60a3      	str	r3, [r4, #8]
   d53ae:	4b05      	ldr	r3, [pc, #20]	; (d53c4 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config+0x24>)
   d53b0:	6023      	str	r3, [r4, #0]
{
  _serial = serial;
  _blocking = true;
   d53b2:	2301      	movs	r3, #1

  HAL_USB_USART_Config conf = acquireSerialBuffer();
  HAL_USB_USART_Init(_serial, &conf);
}

USBSerial::USBSerial(HAL_USB_USART_Serial serial, const HAL_USB_USART_Config& conf)
   d53b4:	4608      	mov	r0, r1
{
  _serial = serial;
   d53b6:	7421      	strb	r1, [r4, #16]
  _blocking = true;
   d53b8:	7463      	strb	r3, [r4, #17]

  HAL_USB_USART_Init(_serial, &conf);
   d53ba:	4611      	mov	r1, r2
   d53bc:	f7ff fbf2 	bl	d4ba4 <HAL_USB_USART_Init>
}
   d53c0:	4620      	mov	r0, r4
   d53c2:	bd10      	pop	{r4, pc}
   d53c4:	000d6c60 	.word	0x000d6c60

000d53c8 <_ZN9USBSerial5beginEl>:
// Public methods
//

void USBSerial::begin(long speed)
{
    HAL_USB_USART_Begin(_serial, speed, NULL);
   d53c8:	2200      	movs	r2, #0
   d53ca:	7c00      	ldrb	r0, [r0, #16]
   d53cc:	f7ff bbf2 	b.w	d4bb4 <HAL_USB_USART_Begin>

000d53d0 <_Z19acquireSerialBufferv>:

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d53d0:	b510      	push	{r4, lr}
  HAL_USB_USART_Config conf = {0};
   d53d2:	2214      	movs	r2, #20

// Preinstantiate Objects //////////////////////////////////////////////////////
#ifdef SPARK_USB_SERIAL

HAL_USB_USART_Config __attribute__((weak)) acquireSerialBuffer()
{
   d53d4:	4604      	mov	r4, r0
  HAL_USB_USART_Config conf = {0};
   d53d6:	2100      	movs	r1, #0
   d53d8:	f001 faf1 	bl	d69be <memset>
  conf.rx_buffer_size = USB_RX_BUFFER_SIZE;
  conf.tx_buffer_size = USB_TX_BUFFER_SIZE;
#endif

  return conf;
}
   d53dc:	4620      	mov	r0, r4
   d53de:	bd10      	pop	{r4, pc}

000d53e0 <_Z16_fetch_usbserialv>:

USBSerial& _fetch_usbserial()
{
   d53e0:	b530      	push	{r4, r5, lr}
  HAL_USB_USART_Config conf = acquireSerialBuffer();
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53e2:	4d0e      	ldr	r5, [pc, #56]	; (d541c <_Z16_fetch_usbserialv+0x3c>)

  return conf;
}

USBSerial& _fetch_usbserial()
{
   d53e4:	b087      	sub	sp, #28
  HAL_USB_USART_Config conf = acquireSerialBuffer();
   d53e6:	a801      	add	r0, sp, #4
   d53e8:	f7ff fff2 	bl	d53d0 <_Z19acquireSerialBufferv>
	static USBSerial _usbserial(HAL_USB_USART_SERIAL, conf);
   d53ec:	6829      	ldr	r1, [r5, #0]
   d53ee:	f011 0401 	ands.w	r4, r1, #1
   d53f2:	d110      	bne.n	d5416 <_Z16_fetch_usbserialv+0x36>
   d53f4:	4628      	mov	r0, r5
   d53f6:	f7fe fe52 	bl	d409e <__cxa_guard_acquire>
   d53fa:	b160      	cbz	r0, d5416 <_Z16_fetch_usbserialv+0x36>
   d53fc:	aa01      	add	r2, sp, #4
   d53fe:	4621      	mov	r1, r4
   d5400:	4807      	ldr	r0, [pc, #28]	; (d5420 <_Z16_fetch_usbserialv+0x40>)
   d5402:	f7ff ffcd 	bl	d53a0 <_ZN9USBSerialC1E20HAL_USB_USART_SerialRK20HAL_USB_USART_Config>
   d5406:	4628      	mov	r0, r5
   d5408:	f7fe fe4e 	bl	d40a8 <__cxa_guard_release>
   d540c:	4a05      	ldr	r2, [pc, #20]	; (d5424 <_Z16_fetch_usbserialv+0x44>)
   d540e:	4906      	ldr	r1, [pc, #24]	; (d5428 <_Z16_fetch_usbserialv+0x48>)
   d5410:	4803      	ldr	r0, [pc, #12]	; (d5420 <_Z16_fetch_usbserialv+0x40>)
   d5412:	f000 fb67 	bl	d5ae4 <__aeabi_atexit>
	return _usbserial;
}
   d5416:	4802      	ldr	r0, [pc, #8]	; (d5420 <_Z16_fetch_usbserialv+0x40>)
   d5418:	b007      	add	sp, #28
   d541a:	bd30      	pop	{r4, r5, pc}
   d541c:	2003e414 	.word	0x2003e414
   d5420:	2003e418 	.word	0x2003e418
   d5424:	2003e374 	.word	0x2003e374
   d5428:	000d5321 	.word	0x000d5321

000d542c <_ZN11USARTSerialD1Ev>:
private:
  HAL_USART_Serial _serial;
  bool _blocking;
public:
  USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer);
  virtual ~USARTSerial() {};
   d542c:	4770      	bx	lr

000d542e <_ZN11USARTSerial14blockOnOverrunEb>:
    HAL_USART_Half_Duplex(_serial, Enable);
}

void USARTSerial::blockOnOverrun(bool block)
{
  _blocking = block;
   d542e:	7441      	strb	r1, [r0, #17]
   d5430:	4770      	bx	lr

000d5432 <_ZN11USARTSerial17availableForWriteEv>:
}


int USARTSerial::availableForWrite(void)
{
   d5432:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data_For_Write(_serial));
   d5434:	7c00      	ldrb	r0, [r0, #16]
   d5436:	f7ff fb55 	bl	d4ae4 <HAL_USART_Available_Data_For_Write>
}
   d543a:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d543e:	bd08      	pop	{r3, pc}

000d5440 <_ZN11USARTSerial9availableEv>:

int USARTSerial::available(void)
{
   d5440:	b508      	push	{r3, lr}
  return std::max(0, (int)HAL_USART_Available_Data(_serial));
   d5442:	7c00      	ldrb	r0, [r0, #16]
   d5444:	f7ff fb26 	bl	d4a94 <HAL_USART_Available_Data>
}
   d5448:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
   d544c:	bd08      	pop	{r3, pc}

000d544e <_ZN11USARTSerial4peekEv>:

int USARTSerial::peek(void)
{
   d544e:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Peek_Data(_serial));
   d5450:	7c00      	ldrb	r0, [r0, #16]
   d5452:	f7ff fb2f 	bl	d4ab4 <HAL_USART_Peek_Data>
}
   d5456:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d545a:	bf28      	it	cs
   d545c:	f04f 30ff 	movcs.w	r0, #4294967295
   d5460:	bd08      	pop	{r3, pc}

000d5462 <_ZN11USARTSerial4readEv>:

int USARTSerial::read(void)
{
   d5462:	b508      	push	{r3, lr}
  return std::max(-1, (int)HAL_USART_Read_Data(_serial));
   d5464:	7c00      	ldrb	r0, [r0, #16]
   d5466:	f7ff fb1d 	bl	d4aa4 <HAL_USART_Read_Data>
}
   d546a:	ea30 0020 	bics.w	r0, r0, r0, asr #32
   d546e:	bf28      	it	cs
   d5470:	f04f 30ff 	movcs.w	r0, #4294967295
   d5474:	bd08      	pop	{r3, pc}

000d5476 <_ZN11USARTSerial5flushEv>:

void USARTSerial::flush()
{
  HAL_USART_Flush_Data(_serial);
   d5476:	7c00      	ldrb	r0, [r0, #16]
   d5478:	f7ff bb24 	b.w	d4ac4 <HAL_USART_Flush_Data>

000d547c <_ZN11USARTSerialD0Ev>:
   d547c:	b510      	push	{r4, lr}
   d547e:	2114      	movs	r1, #20
   d5480:	4604      	mov	r4, r0
   d5482:	f000 fb3d 	bl	d5b00 <_ZdlPvj>
   d5486:	4620      	mov	r0, r4
   d5488:	bd10      	pop	{r4, pc}

000d548a <_ZN11USARTSerial5writeEh>:
}

size_t USARTSerial::write(uint8_t c)
{
   d548a:	b570      	push	{r4, r5, r6, lr}
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d548c:	7c45      	ldrb	r5, [r0, #17]
{
  HAL_USART_Flush_Data(_serial);
}

size_t USARTSerial::write(uint8_t c)
{
   d548e:	4604      	mov	r4, r0
   d5490:	460e      	mov	r6, r1
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
   d5492:	b925      	cbnz	r5, d549e <_ZN11USARTSerial5writeEh+0x14>
   d5494:	7c00      	ldrb	r0, [r0, #16]
   d5496:	f7ff fb25 	bl	d4ae4 <HAL_USART_Available_Data_For_Write>
   d549a:	2800      	cmp	r0, #0
   d549c:	dd05      	ble.n	d54aa <_ZN11USARTSerial5writeEh+0x20>
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d549e:	4631      	mov	r1, r6
   d54a0:	7c20      	ldrb	r0, [r4, #16]
  }
  return 0;
}
   d54a2:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
size_t USARTSerial::write(uint8_t c)
{
  // attempt a write if blocking, or for non-blocking if there is room.
  if (_blocking || HAL_USART_Available_Data_For_Write(_serial) > 0) {
    // the HAL always blocks.
	  return HAL_USART_Write_Data(_serial, c);
   d54a6:	f7ff baed 	b.w	d4a84 <HAL_USART_Write_Data>
  }
  return 0;
}
   d54aa:	4628      	mov	r0, r5
   d54ac:	bd70      	pop	{r4, r5, r6, pc}
	...

000d54b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>:
#include "spark_wiring_constants.h"
#include "module_info.h"

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
   d54b0:	b510      	push	{r4, lr}
   d54b2:	4604      	mov	r4, r0
   d54b4:	4608      	mov	r0, r1
   d54b6:	4611      	mov	r1, r2
   d54b8:	2200      	movs	r2, #0
   d54ba:	6062      	str	r2, [r4, #4]
   d54bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
   d54c0:	60a2      	str	r2, [r4, #8]
   d54c2:	4a05      	ldr	r2, [pc, #20]	; (d54d8 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_+0x28>)
   d54c4:	6022      	str	r2, [r4, #0]
{
  _serial = serial;
  // Default is blocking mode
  _blocking = true;
   d54c6:	2201      	movs	r2, #1

// Constructors ////////////////////////////////////////////////////////////////

USARTSerial::USARTSerial(HAL_USART_Serial serial, Ring_Buffer *rx_buffer, Ring_Buffer *tx_buffer)
{
  _serial = serial;
   d54c8:	7420      	strb	r0, [r4, #16]
  // Default is blocking mode
  _blocking = true;
   d54ca:	7462      	strb	r2, [r4, #17]
  HAL_USART_Init(serial, rx_buffer, tx_buffer);
   d54cc:	461a      	mov	r2, r3
   d54ce:	f7ff fad1 	bl	d4a74 <HAL_USART_Init>
}
   d54d2:	4620      	mov	r0, r4
   d54d4:	bd10      	pop	{r4, pc}
   d54d6:	bf00      	nop
   d54d8:	000d6c90 	.word	0x000d6c90

000d54dc <_ZN11USARTSerial9isEnabledEv>:
USARTSerial::operator bool() {
  return true;
}

bool USARTSerial::isEnabled() {
  return HAL_USART_Is_Enabled(_serial);
   d54dc:	7c00      	ldrb	r0, [r0, #16]
   d54de:	f7ff baf9 	b.w	d4ad4 <HAL_USART_Is_Enabled>
	...

000d54e4 <_Z22__fetch_global_Serial1v>:
static Ring_Buffer* serial1_rx_buffer = NULL;
static Ring_Buffer* serial1_tx_buffer = NULL;
#endif

USARTSerial& __fetch_global_Serial1()
{
   d54e4:	b538      	push	{r3, r4, r5, lr}
#if ((MODULE_FUNCTION == MOD_FUNC_USER_PART) || (MODULE_FUNCTION == MOD_FUNC_MONO_FIRMWARE))
	static USARTSerial serial1(HAL_USART_SERIAL1, &serial1_rx_buffer, &serial1_tx_buffer);
   d54e6:	4d0c      	ldr	r5, [pc, #48]	; (d5518 <_Z22__fetch_global_Serial1v+0x34>)
   d54e8:	6829      	ldr	r1, [r5, #0]
   d54ea:	f011 0401 	ands.w	r4, r1, #1
   d54ee:	d111      	bne.n	d5514 <_Z22__fetch_global_Serial1v+0x30>
   d54f0:	4628      	mov	r0, r5
   d54f2:	f7fe fdd4 	bl	d409e <__cxa_guard_acquire>
   d54f6:	b168      	cbz	r0, d5514 <_Z22__fetch_global_Serial1v+0x30>
   d54f8:	4a08      	ldr	r2, [pc, #32]	; (d551c <_Z22__fetch_global_Serial1v+0x38>)
   d54fa:	4b09      	ldr	r3, [pc, #36]	; (d5520 <_Z22__fetch_global_Serial1v+0x3c>)
   d54fc:	4809      	ldr	r0, [pc, #36]	; (d5524 <_Z22__fetch_global_Serial1v+0x40>)
   d54fe:	4621      	mov	r1, r4
   d5500:	f7ff ffd6 	bl	d54b0 <_ZN11USARTSerialC1E16HAL_USART_SerialP11Ring_BufferS2_>
   d5504:	4628      	mov	r0, r5
   d5506:	f7fe fdcf 	bl	d40a8 <__cxa_guard_release>
   d550a:	4a07      	ldr	r2, [pc, #28]	; (d5528 <_Z22__fetch_global_Serial1v+0x44>)
   d550c:	4907      	ldr	r1, [pc, #28]	; (d552c <_Z22__fetch_global_Serial1v+0x48>)
   d550e:	4805      	ldr	r0, [pc, #20]	; (d5524 <_Z22__fetch_global_Serial1v+0x40>)
   d5510:	f000 fae8 	bl	d5ae4 <__aeabi_atexit>
    serial1_tx_buffer = new Ring_Buffer();
  }
  static USARTSerial serial1(HAL_USART_SERIAL1, serial1_rx_buffer, serial1_tx_buffer);
#endif
	return serial1;
}
   d5514:	4803      	ldr	r0, [pc, #12]	; (d5524 <_Z22__fetch_global_Serial1v+0x40>)
   d5516:	bd38      	pop	{r3, r4, r5, pc}
   d5518:	2003e4c4 	.word	0x2003e4c4
   d551c:	2003e4c8 	.word	0x2003e4c8
   d5520:	2003e440 	.word	0x2003e440
   d5524:	2003e42c 	.word	0x2003e42c
   d5528:	2003e374 	.word	0x2003e374
   d552c:	000d542d 	.word	0x000d542d

000d5530 <_ZN7TwoWireD1Ev>:
private:
  HAL_I2C_Interface _i2c;

public:
  TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& config);
  virtual ~TwoWire() {};
   d5530:	4770      	bx	lr

000d5532 <_ZN7TwoWire5writeEPKhj>:

// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
   d5532:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   d5534:	4606      	mov	r6, r0
   d5536:	4615      	mov	r5, r2
   d5538:	460c      	mov	r4, r1
   d553a:	188f      	adds	r7, r1, r2
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d553c:	42bc      	cmp	r4, r7
   d553e:	d006      	beq.n	d554e <_ZN7TwoWire5writeEPKhj+0x1c>
  {
    write(data[i]);
   d5540:	6833      	ldr	r3, [r6, #0]
   d5542:	f814 1b01 	ldrb.w	r1, [r4], #1
   d5546:	689b      	ldr	r3, [r3, #8]
   d5548:	4630      	mov	r0, r6
   d554a:	4798      	blx	r3
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(const uint8_t *data, size_t quantity)
{
  // in master/slave transmitter mode
  for(size_t i = 0; i < quantity; ++i)
   d554c:	e7f6      	b.n	d553c <_ZN7TwoWire5writeEPKhj+0xa>
  {
    write(data[i]);
  }

  return quantity;
}
   d554e:	4628      	mov	r0, r5
   d5550:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

000d5552 <_ZN7TwoWire5writeEh>:
// must be called in:
// slave tx event callback
// or after beginTransmission(address)
size_t TwoWire::write(uint8_t data)
{
  return HAL_I2C_Write_Data(_i2c, data, NULL);
   d5552:	2200      	movs	r2, #0
   d5554:	7c00      	ldrb	r0, [r0, #16]
   d5556:	f7ff bae5 	b.w	d4b24 <HAL_I2C_Write_Data>

000d555a <_ZN7TwoWire9availableEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::available(void)
{
  return HAL_I2C_Available_Data(_i2c, NULL);
   d555a:	2100      	movs	r1, #0
   d555c:	7c00      	ldrb	r0, [r0, #16]
   d555e:	f7ff bae9 	b.w	d4b34 <HAL_I2C_Available_Data>

000d5562 <_ZN7TwoWire4readEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::read(void)
{
  return HAL_I2C_Read_Data(_i2c, NULL);
   d5562:	2100      	movs	r1, #0
   d5564:	7c00      	ldrb	r0, [r0, #16]
   d5566:	f7ff baed 	b.w	d4b44 <HAL_I2C_Read_Data>

000d556a <_ZN7TwoWire4peekEv>:
// must be called in:
// slave rx event callback
// or after requestFrom(address, numBytes)
int TwoWire::peek(void)
{
  return HAL_I2C_Peek_Data(_i2c, NULL);
   d556a:	2100      	movs	r1, #0
   d556c:	7c00      	ldrb	r0, [r0, #16]
   d556e:	f7ff baf1 	b.w	d4b54 <HAL_I2C_Peek_Data>

000d5572 <_ZN7TwoWire5flushEv>:
}

void TwoWire::flush(void)
{
  HAL_I2C_Flush_Data(_i2c, NULL);
   d5572:	2100      	movs	r1, #0
   d5574:	7c00      	ldrb	r0, [r0, #16]
   d5576:	f7ff baf5 	b.w	d4b64 <HAL_I2C_Flush_Data>

000d557a <_ZN7TwoWireD0Ev>:
   d557a:	b510      	push	{r4, lr}
   d557c:	2114      	movs	r1, #20
   d557e:	4604      	mov	r4, r0
   d5580:	f000 fabe 	bl	d5b00 <_ZdlPvj>
   d5584:	4620      	mov	r0, r4
   d5586:	bd10      	pop	{r4, pc}

000d5588 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>:
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d5588:	b510      	push	{r4, lr}
   d558a:	4604      	mov	r4, r0
   d558c:	2300      	movs	r3, #0
   d558e:	6063      	str	r3, [r4, #4]
   d5590:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
   d5594:	60a3      	str	r3, [r4, #8]
   d5596:	4b04      	ldr	r3, [pc, #16]	; (d55a8 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config+0x20>)
{
  _i2c = i2c;
   d5598:	7421      	strb	r1, [r4, #16]
#include "i2c_hal.h"
#include "spark_wiring_thread.h"

// Constructors ////////////////////////////////////////////////////////////////

TwoWire::TwoWire(HAL_I2C_Interface i2c, const HAL_I2C_Config& conf)
   d559a:	4608      	mov	r0, r1
   d559c:	6023      	str	r3, [r4, #0]
{
  _i2c = i2c;
  HAL_I2C_Init(_i2c, &conf);
   d559e:	4611      	mov	r1, r2
   d55a0:	f7ff faf0 	bl	d4b84 <HAL_I2C_Init>
}
   d55a4:	4620      	mov	r0, r4
   d55a6:	bd10      	pop	{r4, pc}
   d55a8:	000d6cc0 	.word	0x000d6cc0

000d55ac <_ZN7TwoWire5beginEv>:
  HAL_I2C_Stretch_Clock(_i2c, stretch, NULL);
}

void TwoWire::begin(void)
{
	HAL_I2C_Begin(_i2c, I2C_MODE_MASTER, 0x00, NULL);
   d55ac:	2300      	movs	r3, #0
   d55ae:	461a      	mov	r2, r3
   d55b0:	4619      	mov	r1, r3
   d55b2:	7c00      	ldrb	r0, [r0, #16]
   d55b4:	f7ff ba9e 	b.w	d4af4 <HAL_I2C_Begin>

000d55b8 <_ZN7TwoWire11requestFromERK16WireTransmission>:
size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
}

size_t TwoWire::requestFrom(const WireTransmission& transfer) {
   d55b8:	b570      	push	{r4, r5, r6, lr}
   d55ba:	460c      	mov	r4, r1
   d55bc:	b086      	sub	sp, #24
      .address = address_,
      .reserved = {0},
      .quantity = (uint32_t)size_,
      .timeout_ms = timeout_,
      .flags = (uint32_t)(stop_ ? HAL_I2C_TRANSMISSION_FLAG_STOP : 0)
    };
   d55be:	2514      	movs	r5, #20
   d55c0:	4606      	mov	r6, r0
   d55c2:	462a      	mov	r2, r5
   d55c4:	2100      	movs	r1, #0
   d55c6:	a801      	add	r0, sp, #4
   d55c8:	f001 f9f9 	bl	d69be <memset>
   d55cc:	7823      	ldrb	r3, [r4, #0]
   d55ce:	f88d 3008 	strb.w	r3, [sp, #8]
   d55d2:	6863      	ldr	r3, [r4, #4]
   d55d4:	9303      	str	r3, [sp, #12]
   d55d6:	68e3      	ldr	r3, [r4, #12]
   d55d8:	9304      	str	r3, [sp, #16]
  auto conf = transfer.halConfig();
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
   d55da:	2200      	movs	r2, #0
   d55dc:	7a23      	ldrb	r3, [r4, #8]
   d55de:	7c30      	ldrb	r0, [r6, #16]
   d55e0:	f8ad 5004 	strh.w	r5, [sp, #4]
   d55e4:	a901      	add	r1, sp, #4
   d55e6:	9305      	str	r3, [sp, #20]
   d55e8:	f7ff fad4 	bl	d4b94 <HAL_I2C_Request_Data_Ex>
}
   d55ec:	b006      	add	sp, #24
   d55ee:	bd70      	pop	{r4, r5, r6, pc}

000d55f0 <_ZN7TwoWire11requestFromEhjh>:
{
	HAL_I2C_End(_i2c, NULL);
}

size_t TwoWire::requestFrom(uint8_t address, size_t quantity, uint8_t sendStop)
{
   d55f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d55f2:	3300      	adds	r3, #0
public:
  WireTransmission(uint8_t address)
      : address_{address},
        size_{0},
        stop_{true},
        timeout_{HAL_I2C_DEFAULT_TIMEOUT_MS} {
   d55f4:	f88d 1000 	strb.w	r1, [sp]
   d55f8:	f04f 0164 	mov.w	r1, #100	; 0x64
   d55fc:	9103      	str	r1, [sp, #12]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d55fe:	bf18      	it	ne
   d5600:	2301      	movne	r3, #1
  return requestFrom(WireTransmission(address).quantity(quantity).stop(sendStop));
   d5602:	4669      	mov	r1, sp
  }

  WireTransmission() = delete;

  WireTransmission& quantity(size_t size) {
    size_ = size;
   d5604:	9201      	str	r2, [sp, #4]
  WireTransmission& timeout(std::chrono::milliseconds ms) {
    return timeout((system_tick_t)ms.count());
  }

  WireTransmission& stop(bool stop) {
    stop_ = stop;
   d5606:	f88d 3008 	strb.w	r3, [sp, #8]
   d560a:	f7ff ffd5 	bl	d55b8 <_ZN7TwoWire11requestFromERK16WireTransmission>
}
   d560e:	b005      	add	sp, #20
   d5610:	f85d fb04 	ldr.w	pc, [sp], #4

000d5614 <_ZN7TwoWire11requestFromEhj>:

size_t TwoWire::requestFrom(uint8_t address, size_t quantity)
{
  return requestFrom(address, quantity, (uint8_t)true);
   d5614:	2301      	movs	r3, #1
   d5616:	f7ff bfeb 	b.w	d55f0 <_ZN7TwoWire11requestFromEhjh>

000d561a <_ZN7TwoWire17beginTransmissionEh>:
  return HAL_I2C_Request_Data_Ex(_i2c, &conf, nullptr);
}

void TwoWire::beginTransmission(uint8_t address)
{
	HAL_I2C_Begin_Transmission(_i2c, address, NULL);
   d561a:	2200      	movs	r2, #0
   d561c:	7c00      	ldrb	r0, [r0, #16]
   d561e:	f7ff ba71 	b.w	d4b04 <HAL_I2C_Begin_Transmission>

000d5622 <_ZN7TwoWire17beginTransmissionEi>:
}

void TwoWire::beginTransmission(int address)
{
  beginTransmission((uint8_t)address);
   d5622:	b2c9      	uxtb	r1, r1
   d5624:	f7ff bff9 	b.w	d561a <_ZN7TwoWire17beginTransmissionEh>

000d5628 <_ZN7TwoWire15endTransmissionEh>:
//	no call to endTransmission(true) is made. Some I2C
//	devices will behave oddly if they do not see a STOP.
//
uint8_t TwoWire::endTransmission(uint8_t sendStop)
{
	return HAL_I2C_End_Transmission(_i2c, sendStop, NULL);
   d5628:	2200      	movs	r2, #0
   d562a:	7c00      	ldrb	r0, [r0, #16]
   d562c:	f7ff ba72 	b.w	d4b14 <HAL_I2C_End_Transmission>

000d5630 <_ZN7TwoWire15endTransmissionEv>:
//	This provides backwards compatibility with the original
//	definition, and expected behaviour, of endTransmission
//
uint8_t TwoWire::endTransmission(void)
{
  return endTransmission(true);
   d5630:	2101      	movs	r1, #1
   d5632:	f7ff bff9 	b.w	d5628 <_ZN7TwoWire15endTransmissionEh>

000d5636 <_ZN7TwoWire9isEnabledEv>:
  HAL_I2C_Set_Callback_On_Request(_i2c, function, NULL);
}

bool TwoWire::isEnabled()
{
  return HAL_I2C_Is_Enabled(_i2c, NULL);
   d5636:	2100      	movs	r1, #0
   d5638:	7c00      	ldrb	r0, [r0, #16]
   d563a:	f7ff ba9b 	b.w	d4b74 <HAL_I2C_Is_Enabled>

000d563e <_ZN5spark9MeshClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d563e:	2200      	movs	r2, #0
   d5640:	4611      	mov	r1, r2
   d5642:	6840      	ldr	r0, [r0, #4]
   d5644:	f7ff bb42 	b.w	d4ccc <network_listening>

000d5648 <_ZN5spark9MeshClass16getListenTimeoutEv>:
    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
    }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d5648:	2200      	movs	r2, #0
   d564a:	4611      	mov	r1, r2
   d564c:	6840      	ldr	r0, [r0, #4]
   d564e:	f7ff bb4d 	b.w	d4cec <network_get_listen_timeout>

000d5652 <_ZN5spark9MeshClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d5652:	2200      	movs	r2, #0
   d5654:	6840      	ldr	r0, [r0, #4]
   d5656:	f7ff bb41 	b.w	d4cdc <network_set_listen_timeout>

000d565a <_ZN5spark9MeshClass6listenEb>:
    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d565a:	2200      	movs	r2, #0
   d565c:	f081 0101 	eor.w	r1, r1, #1
   d5660:	6840      	ldr	r0, [r0, #4]
   d5662:	f7ff bb2b 	b.w	d4cbc <network_listen>

000d5666 <_ZN5spark9MeshClass3offEv>:
    void on() {
        network_on(*this, 0, 0, NULL);
    }

    void off() {
        network_off(*this, 1, 0, NULL);
   d5666:	2300      	movs	r3, #0
   d5668:	461a      	mov	r2, r3
   d566a:	2101      	movs	r1, #1
   d566c:	6840      	ldr	r0, [r0, #4]
   d566e:	f7ff bb1d 	b.w	d4cac <network_off>

000d5672 <_ZN5spark9MeshClass2onEv>:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
    }

    void on() {
        network_on(*this, 0, 0, NULL);
   d5672:	2300      	movs	r3, #0
   d5674:	461a      	mov	r2, r3
   d5676:	4619      	mov	r1, r3
   d5678:	6840      	ldr	r0, [r0, #4]
   d567a:	f7ff bb0f 	b.w	d4c9c <network_on>

000d567e <_ZN5spark9MeshClass5readyEv>:
    bool listening(void) {
        return network_listening(*this, 0, NULL);
    }

    bool ready() {
        return network_ready(*this, 0,  NULL);
   d567e:	2200      	movs	r2, #0
   d5680:	4611      	mov	r1, r2
   d5682:	6840      	ldr	r0, [r0, #4]
   d5684:	f7ff bb02 	b.w	d4c8c <network_ready>

000d5688 <_ZN5spark9MeshClass10connectingEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5688:	2200      	movs	r2, #0
   d568a:	4611      	mov	r1, r2
   d568c:	6840      	ldr	r0, [r0, #4]
   d568e:	f7ff baed 	b.w	d4c6c <network_connecting>

000d5692 <_ZN5spark9MeshClass10disconnectEv>:
    }

    void disconnect() {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d5692:	2200      	movs	r2, #0
   d5694:	2102      	movs	r1, #2
   d5696:	6840      	ldr	r0, [r0, #4]
   d5698:	f7ff baf0 	b.w	d4c7c <network_disconnect>

000d569c <_ZN5spark9MeshClass7connectEj>:
    void off() {
        network_off(*this, 1, 0, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d569c:	2300      	movs	r3, #0
   d569e:	461a      	mov	r2, r3
   d56a0:	6840      	ldr	r0, [r0, #4]
   d56a2:	f7ff badb 	b.w	d4c5c <network_connect>

000d56a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>:
	       enable_if<is_convertible<_Up*, _Tp*>::value>::type>
        default_delete(const default_delete<_Up>&) noexcept { }

      /// Calls @c delete @p __ptr
      void
      operator()(_Tp* __ptr) const
   d56a6:	b538      	push	{r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56a8:	4605      	mov	r5, r0
   d56aa:	b188      	cbz	r0, d56d0 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x2a>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d56ac:	6804      	ldr	r4, [r0, #0]
   d56ae:	b14c      	cbz	r4, d56c4 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x1e>

    ~_Function_base()
    {
      if (_M_manager)
   d56b0:	68a3      	ldr	r3, [r4, #8]
   d56b2:	b11b      	cbz	r3, d56bc <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6+0x16>
	_M_manager(_M_functor, _M_functor, __destroy_functor);
   d56b4:	2203      	movs	r2, #3
   d56b6:	4621      	mov	r1, r4
   d56b8:	4620      	mov	r0, r4
   d56ba:	4798      	blx	r3
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56bc:	2110      	movs	r1, #16
   d56be:	4620      	mov	r0, r4
   d56c0:	f000 fa1e 	bl	d5b00 <_ZdlPvj>
   d56c4:	4628      	mov	r0, r5
   d56c6:	2114      	movs	r1, #20
      }
   d56c8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d56cc:	f000 ba18 	b.w	d5b00 <_ZdlPvj>
   d56d0:	bd38      	pop	{r3, r4, r5, pc}

000d56d2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>:
   d56d2:	b110      	cbz	r0, d56da <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13+0x8>
   d56d4:	6803      	ldr	r3, [r0, #0]
   d56d6:	685b      	ldr	r3, [r3, #4]
   d56d8:	4718      	bx	r3
   d56da:	4770      	bx	lr

000d56dc <_ZN6ThreadD1Ev>:
    Thread(Thread&& thread)
        : d_(std::move(thread.d_))
    {
    }

    ~Thread()
   d56dc:	b510      	push	{r4, lr}
      }

      /// Return the stored pointer.
      pointer
      get() const noexcept
      { return std::get<0>(_M_t); }
   d56de:	6803      	ldr	r3, [r0, #0]
   d56e0:	4604      	mov	r4, r0
        dispose();
    }

    void dispose()
    {
        if (!isValid())
   d56e2:	b1bb      	cbz	r3, d5714 <_ZN6ThreadD1Ev+0x38>
        return isCurrent();
    }

    bool isCurrent() const
    {
        return isValid() && os_thread_is_current(d_->handle);
   d56e4:	6858      	ldr	r0, [r3, #4]
   d56e6:	f7ff f995 	bl	d4a14 <os_thread_is_current>
   d56ea:	b978      	cbnz	r0, d570c <_ZN6ThreadD1Ev+0x30>
   d56ec:	6823      	ldr	r3, [r4, #0]

        // We shouldn't dispose of current thread
        if (isCurrent())
            return;

        if (!d_->exited) {
   d56ee:	7c5a      	ldrb	r2, [r3, #17]
   d56f0:	b912      	cbnz	r2, d56f8 <_ZN6ThreadD1Ev+0x1c>
        d_.reset();
    }

    bool join()
    {
        return isValid() && os_thread_join(d_->handle)==0;
   d56f2:	6858      	ldr	r0, [r3, #4]
   d56f4:	f7ff f996 	bl	d4a24 <os_thread_join>

        if (!d_->exited) {
            join();
        }

        os_thread_cleanup(d_->handle);
   d56f8:	6823      	ldr	r3, [r4, #0]
   d56fa:	6858      	ldr	r0, [r3, #4]
   d56fc:	f7ff f99a 	bl	d4a34 <os_thread_cleanup>
#endif
    {
      // concept requirements
      __glibcxx_function_requires(_SGIAssignableConcept<_Tp>)

      _Tp __tmp = _GLIBCXX_MOVE(__a);
   d5700:	6820      	ldr	r0, [r4, #0]
      __a = _GLIBCXX_MOVE(__b);
   d5702:	2300      	movs	r3, #0
   d5704:	6023      	str	r3, [r4, #0]
      void
      reset(pointer __p = pointer()) noexcept
      {
	using std::swap;
	swap(std::get<0>(_M_t), __p);
	if (__p != pointer())
   d5706:	b128      	cbz	r0, d5714 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__p);
   d5708:	f7ff ffcd 	bl	d56a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d570c:	6820      	ldr	r0, [r4, #0]
   d570e:	b108      	cbz	r0, d5714 <_ZN6ThreadD1Ev+0x38>
	  get_deleter()(__ptr);
   d5710:	f7ff ffc9 	bl	d56a6 <_ZNKSt14default_deleteIN6Thread4DataEEclEPS1_.isra.6>
    }

    ~Thread()
    {
        dispose();
    }
   d5714:	4620      	mov	r0, r4
   d5716:	bd10      	pop	{r4, pc}

000d5718 <_ZN5spark11MeshPublishD1Ev>:
    virtual float getQualityValue() const {
        return 0.0f;
    }
};

class MeshPublish {
   d5718:	b538      	push	{r3, r4, r5, lr}
   d571a:	4604      	mov	r4, r0

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr()
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d571c:	f8d0 01c4 	ldr.w	r0, [r0, #452]	; 0x1c4
   d5720:	b108      	cbz	r0, d5726 <_ZN5spark11MeshPublishD1Ev+0xe>
      void
      operator()(_Tp* __ptr) const
      {
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete [] __ptr;
   d5722:	f7fe fcba 	bl	d409a <_ZdaPv>
        dispose();
    }

    void dispose()
    {
        if (handle_) {
   d5726:	f8d4 01c0 	ldr.w	r0, [r4, #448]	; 0x1c0
   d572a:	b108      	cbz	r0, d5730 <_ZN5spark11MeshPublishD1Ev+0x18>
            os_mutex_recursive_destroy(handle_);
   d572c:	f7ff f992 	bl	d4a54 <os_mutex_recursive_destroy>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5730:	f8d4 51bc 	ldr.w	r5, [r4, #444]	; 0x1bc
   d5734:	b135      	cbz	r5, d5744 <_ZN5spark11MeshPublishD1Ev+0x2c>
      {
	static_assert(!is_void<_Tp>::value,
		      "can't delete pointer to incomplete type");
	static_assert(sizeof(_Tp)>0,
		      "can't delete pointer to incomplete type");
	delete __ptr;
   d5736:	4628      	mov	r0, r5
   d5738:	f7ff ffd0 	bl	d56dc <_ZN6ThreadD1Ev>
   d573c:	2104      	movs	r1, #4
   d573e:	4628      	mov	r0, r5
   d5740:	f000 f9de 	bl	d5b00 <_ZdlPvj>

      /// Destructor, invokes the deleter if the stored pointer is not null.
      ~unique_ptr() noexcept
      {
	auto& __ptr = std::get<0>(_M_t);
	if (__ptr != nullptr)
   d5744:	6820      	ldr	r0, [r4, #0]
   d5746:	b108      	cbz	r0, d574c <_ZN5spark11MeshPublishD1Ev+0x34>
	  get_deleter()(__ptr);
   d5748:	f7ff ffc3 	bl	d56d2 <_ZNKSt14default_deleteI3UDPEclEPS0_.isra.8.constprop.13>
   d574c:	4620      	mov	r0, r4
   d574e:	bd38      	pop	{r3, r4, r5, pc}

000d5750 <_ZN5spark9MeshClassD1Ev>:
    RecursiveMutex mutex_;
    std::unique_ptr<uint8_t[]> buffer_;
    std::atomic_bool exit_;
};

class MeshClass : public NetworkClass, public MeshPublish {
   d5750:	b510      	push	{r4, lr}
   d5752:	4b04      	ldr	r3, [pc, #16]	; (d5764 <_ZN5spark9MeshClassD1Ev+0x14>)
   d5754:	4604      	mov	r4, r0
   d5756:	f840 3b08 	str.w	r3, [r0], #8
   d575a:	f7ff ffdd 	bl	d5718 <_ZN5spark11MeshPublishD1Ev>
   d575e:	4620      	mov	r0, r4
   d5760:	bd10      	pop	{r4, pc}
   d5762:	bf00      	nop
   d5764:	000d6ce8 	.word	0x000d6ce8

000d5768 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_>:

    return addr;
}

MeshClass Mesh;
} // namespace spark
   d5768:	b538      	push	{r3, r4, r5, lr}
   d576a:	4c0e      	ldr	r4, [pc, #56]	; (d57a4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x3c>)
   d576c:	4b0e      	ldr	r3, [pc, #56]	; (d57a8 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x40>)
   d576e:	6023      	str	r3, [r4, #0]

  template<std::size_t _Idx, typename _Head>
    struct _Head_base<_Idx, _Head, false>
    {
      constexpr _Head_base()
      : _M_head_impl() { }
   d5770:	2500      	movs	r5, #0
   d5772:	2302      	movs	r3, #2
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
    {
        os_mutex_recursive_create(&handle_);
   d5774:	f504 70e4 	add.w	r0, r4, #456	; 0x1c8
   d5778:	6063      	str	r3, [r4, #4]
   d577a:	60a5      	str	r5, [r4, #8]
   d577c:	f8c4 51c4 	str.w	r5, [r4, #452]	; 0x1c4
    /**
     * Creates a shared mutex.
     */
    RecursiveMutex(os_mutex_recursive_t handle) : handle_(handle) {}

    RecursiveMutex() : handle_(nullptr)
   d5780:	f8c4 51c8 	str.w	r5, [r4, #456]	; 0x1c8
    {
        os_mutex_recursive_create(&handle_);
   d5784:	f7ff f95e 	bl	d4a44 <os_mutex_recursive_create>
public:
    MeshClass() :
            NetworkClass(NETWORK_INTERFACE_MESH) {
   d5788:	4b08      	ldr	r3, [pc, #32]	; (d57ac <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x44>)
   d578a:	f8c4 51cc 	str.w	r5, [r4, #460]	; 0x1cc
      __atomic_base(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) = delete;
      __atomic_base& operator=(const __atomic_base&) volatile = delete;

      // Requires __int_type convertible to _M_i.
      constexpr __atomic_base(__int_type __i) noexcept : _M_i (__i) { }
   d578e:	f884 51d0 	strb.w	r5, [r4, #464]	; 0x1d0
   d5792:	6023      	str	r3, [r4, #0]
    }

    return addr;
}

MeshClass Mesh;
   d5794:	4620      	mov	r0, r4
   d5796:	4a06      	ldr	r2, [pc, #24]	; (d57b0 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x48>)
   d5798:	4906      	ldr	r1, [pc, #24]	; (d57b4 <_GLOBAL__sub_I__ZN5spark11MeshPublish13Subscriptions20event_handler_existsEPKcPFvS3_S3_EPvN17SubscriptionScope4EnumES3_+0x4c>)
} // namespace spark
   d579a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
    }

    return addr;
}

MeshClass Mesh;
   d579e:	f000 b9a1 	b.w	d5ae4 <__aeabi_atexit>
   d57a2:	bf00      	nop
   d57a4:	2003e54c 	.word	0x2003e54c
   d57a8:	000d6d50 	.word	0x000d6d50
   d57ac:	000d6ce8 	.word	0x000d6ce8
   d57b0:	2003e374 	.word	0x2003e374
   d57b4:	000d5751 	.word	0x000d5751

000d57b8 <_ZN5spark9WiFiClass5readyEv>:
    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
    }

    bool ready(void) {
        return network_ready(*this, 0, NULL);
   d57b8:	2200      	movs	r2, #0
   d57ba:	4611      	mov	r1, r2
   d57bc:	6840      	ldr	r0, [r0, #4]
   d57be:	f7ff ba65 	b.w	d4c8c <network_ready>

000d57c2 <_ZN5spark9WiFiClass9listeningEv>:
    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
    }

    bool listening(void) {
        return network_listening(*this, 0, NULL);
   d57c2:	2200      	movs	r2, #0
   d57c4:	4611      	mov	r1, r2
   d57c6:	6840      	ldr	r0, [r0, #4]
   d57c8:	f7ff ba80 	b.w	d4ccc <network_listening>

000d57cc <_ZN5spark9WiFiClass16getListenTimeoutEv>:
        network_set_listen_timeout(*this, timeout, NULL);
    }
    inline void setListenTimeout(std::chrono::seconds s) { setListenTimeout(s.count()); }

    uint16_t getListenTimeout(void) {
        return network_get_listen_timeout(*this, 0, NULL);
   d57cc:	2200      	movs	r2, #0
   d57ce:	4611      	mov	r1, r2
   d57d0:	6840      	ldr	r0, [r0, #4]
   d57d2:	f7ff ba8b 	b.w	d4cec <network_get_listen_timeout>

000d57d6 <_ZN5spark9WiFiClass16setListenTimeoutEt>:
    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
    }

    void setListenTimeout(uint16_t timeout) {
        network_set_listen_timeout(*this, timeout, NULL);
   d57d6:	2200      	movs	r2, #0
   d57d8:	6840      	ldr	r0, [r0, #4]
   d57da:	f7ff ba7f 	b.w	d4cdc <network_set_listen_timeout>

000d57de <_ZN5spark9WiFiClass6listenEb>:
    void off(void) {
        network_off(*this, 0, 0, NULL);
    }

    void listen(bool begin=true) {
        network_listen(*this, begin ? 0 : 1, NULL);
   d57de:	2200      	movs	r2, #0
   d57e0:	f081 0101 	eor.w	r1, r1, #1
   d57e4:	6840      	ldr	r0, [r0, #4]
   d57e6:	f7ff ba69 	b.w	d4cbc <network_listen>

000d57ea <_ZN5spark9WiFiClass3offEv>:
    void on(void) {
        network_on(*this, 0, 0, NULL);
    }

    void off(void) {
        network_off(*this, 0, 0, NULL);
   d57ea:	2300      	movs	r3, #0
   d57ec:	461a      	mov	r2, r3
   d57ee:	4619      	mov	r1, r3
   d57f0:	6840      	ldr	r0, [r0, #4]
   d57f2:	f7ff ba5b 	b.w	d4cac <network_off>

000d57f6 <_ZN5spark9WiFiClass2onEv>:
    bool ready(void) {
        return network_ready(*this, 0, NULL);
    }

    void on(void) {
        network_on(*this, 0, 0, NULL);
   d57f6:	2300      	movs	r3, #0
   d57f8:	461a      	mov	r2, r3
   d57fa:	4619      	mov	r1, r3
   d57fc:	6840      	ldr	r0, [r0, #4]
   d57fe:	f7ff ba4d 	b.w	d4c9c <network_on>

000d5802 <_ZN5spark9WiFiClass10connectingEv>:
    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
    }

    bool connecting(void) {
        return network_connecting(*this, 0, NULL);
   d5802:	2200      	movs	r2, #0
   d5804:	4611      	mov	r1, r2
   d5806:	6840      	ldr	r0, [r0, #4]
   d5808:	f7ff ba30 	b.w	d4c6c <network_connecting>

000d580c <_ZN5spark9WiFiClass10disconnectEv>:
    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
    }

    void disconnect(void) {
        network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, NULL);
   d580c:	2200      	movs	r2, #0
   d580e:	2102      	movs	r1, #2
   d5810:	6840      	ldr	r0, [r0, #4]
   d5812:	f7ff ba33 	b.w	d4c7c <network_disconnect>

000d5816 <_ZN5spark9WiFiClass7connectEj>:
    uint32_t ping(IPAddress remoteIP, uint8_t nTries) {
        return inet_ping(&remoteIP.raw(), *this, nTries, NULL);
    }

    void connect(unsigned flags=0) {
        network_connect(*this, flags, 0, NULL);
   d5816:	2300      	movs	r3, #0
   d5818:	461a      	mov	r2, r3
   d581a:	6840      	ldr	r0, [r0, #4]
   d581c:	f7ff ba1e 	b.w	d4c5c <network_connect>

000d5820 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t>:
   d5820:	4b02      	ldr	r3, [pc, #8]	; (d582c <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0xc>)
   d5822:	2204      	movs	r2, #4
   d5824:	605a      	str	r2, [r3, #4]
        wlan_set_ipaddress_source(source, true, NULL);
    }

public:
    WiFiClass() :
            NetworkClass(NETWORK_INTERFACE_WIFI_STA) {
   d5826:	4a02      	ldr	r2, [pc, #8]	; (d5830 <_GLOBAL__sub_I__ZN10WiFiSignalC2ERK21wlan_connected_info_t+0x10>)
   d5828:	601a      	str	r2, [r3, #0]
   d582a:	4770      	bx	lr
   d582c:	2003e720 	.word	0x2003e720
   d5830:	000d6d1c 	.word	0x000d6d1c

000d5834 <_ZN5spark12NetworkClass7connectEj>:
        return Network;
    }
}

void NetworkClass::connect(unsigned flags) {
    network_connect(*this, flags, 0, nullptr);
   d5834:	2300      	movs	r3, #0
   d5836:	461a      	mov	r2, r3
   d5838:	6840      	ldr	r0, [r0, #4]
   d583a:	f7ff ba0f 	b.w	d4c5c <network_connect>

000d583e <_ZN5spark12NetworkClass10disconnectEv>:
}

void NetworkClass::disconnect() {
    network_disconnect(*this, NETWORK_DISCONNECT_REASON_USER, nullptr);
   d583e:	2200      	movs	r2, #0
   d5840:	2102      	movs	r1, #2
   d5842:	6840      	ldr	r0, [r0, #4]
   d5844:	f7ff ba1a 	b.w	d4c7c <network_disconnect>

000d5848 <_ZN5spark12NetworkClass10connectingEv>:
}

bool NetworkClass::connecting() {
    return network_connecting(*this, 0, nullptr);
   d5848:	2200      	movs	r2, #0
   d584a:	4611      	mov	r1, r2
   d584c:	6840      	ldr	r0, [r0, #4]
   d584e:	f7ff ba0d 	b.w	d4c6c <network_connecting>

000d5852 <_ZN5spark12NetworkClass5readyEv>:
}

bool NetworkClass::ready() {
    return network_ready(*this, 0, nullptr);
   d5852:	2200      	movs	r2, #0
   d5854:	4611      	mov	r1, r2
   d5856:	6840      	ldr	r0, [r0, #4]
   d5858:	f7ff ba18 	b.w	d4c8c <network_ready>

000d585c <_ZN5spark12NetworkClass2onEv>:
}

void NetworkClass::on() {
    network_on(*this, 0, 0, nullptr);
   d585c:	2300      	movs	r3, #0
   d585e:	461a      	mov	r2, r3
   d5860:	4619      	mov	r1, r3
   d5862:	6840      	ldr	r0, [r0, #4]
   d5864:	f7ff ba1a 	b.w	d4c9c <network_on>

000d5868 <_ZN5spark12NetworkClass3offEv>:
}

void NetworkClass::off() {
    network_off(*this, 0, 0, nullptr);
   d5868:	2300      	movs	r3, #0
   d586a:	461a      	mov	r2, r3
   d586c:	4619      	mov	r1, r3
   d586e:	6840      	ldr	r0, [r0, #4]
   d5870:	f7ff ba1c 	b.w	d4cac <network_off>

000d5874 <_ZN5spark12NetworkClass6listenEb>:
}

void NetworkClass::listen(bool begin) {
    network_listen(*this, begin ? 0 : 1, nullptr);
   d5874:	2200      	movs	r2, #0
   d5876:	f081 0101 	eor.w	r1, r1, #1
   d587a:	6840      	ldr	r0, [r0, #4]
   d587c:	f7ff ba1e 	b.w	d4cbc <network_listen>

000d5880 <_ZN5spark12NetworkClass16setListenTimeoutEt>:
}

void NetworkClass::setListenTimeout(uint16_t timeout) {
    network_set_listen_timeout(*this, timeout, nullptr);
   d5880:	2200      	movs	r2, #0
   d5882:	6840      	ldr	r0, [r0, #4]
   d5884:	f7ff ba2a 	b.w	d4cdc <network_set_listen_timeout>

000d5888 <_ZN5spark12NetworkClass16getListenTimeoutEv>:
}

uint16_t NetworkClass::getListenTimeout() {
    return network_get_listen_timeout(*this, 0, nullptr);
   d5888:	2200      	movs	r2, #0
   d588a:	4611      	mov	r1, r2
   d588c:	6840      	ldr	r0, [r0, #4]
   d588e:	f7ff ba2d 	b.w	d4cec <network_get_listen_timeout>

000d5892 <_ZN5spark12NetworkClass9listeningEv>:
}

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
   d5892:	2200      	movs	r2, #0
   d5894:	4611      	mov	r1, r2
   d5896:	6840      	ldr	r0, [r0, #4]
   d5898:	f7ff ba18 	b.w	d4ccc <network_listening>

000d589c <_ZN5spark12NetworkClass7resolveEPKc>:
}

IPAddress NetworkClass::resolve(const char* name) {
   d589c:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d58a0:	2400      	movs	r4, #0

bool NetworkClass::listening() {
    return network_listening(*this, 0, nullptr);
}

IPAddress NetworkClass::resolve(const char* name) {
   d58a2:	b095      	sub	sp, #84	; 0x54
   d58a4:	4616      	mov	r6, r2
   d58a6:	460d      	mov	r5, r1
   d58a8:	4607      	mov	r7, r0
    IPAddress addr;
   d58aa:	f7ff fcff 	bl	d52ac <_ZN9IPAddressC1Ev>
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
    struct addrinfo hints = {};
   d58ae:	4621      	mov	r1, r4
   d58b0:	2220      	movs	r2, #32
   d58b2:	a80c      	add	r0, sp, #48	; 0x30
}

IPAddress NetworkClass::resolve(const char* name) {
    IPAddress addr;
#if HAL_USE_INET_HAL_POSIX
    struct addrinfo *ai = nullptr;
   d58b4:	9400      	str	r4, [sp, #0]
    struct addrinfo hints = {};
   d58b6:	f001 f882 	bl	d69be <memset>
    hints.ai_flags = AI_ADDRCONFIG;
   d58ba:	2340      	movs	r3, #64	; 0x40
   d58bc:	930c      	str	r3, [sp, #48]	; 0x30
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
   d58be:	4621      	mov	r1, r4
   d58c0:	466b      	mov	r3, sp
   d58c2:	aa0c      	add	r2, sp, #48	; 0x30
   d58c4:	4630      	mov	r0, r6
   d58c6:	f7ff f825 	bl	d4914 <netdb_getaddrinfo>
    if (!r) {
   d58ca:	4604      	mov	r4, r0
   d58cc:	2800      	cmp	r0, #0
   d58ce:	d144      	bne.n	d595a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d58d0:	4602      	mov	r2, r0
   d58d2:	2101      	movs	r1, #1
   d58d4:	6868      	ldr	r0, [r5, #4]
   d58d6:	f7ff f9d9 	bl	d4c8c <network_ready>
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58da:	2102      	movs	r1, #2
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
   d58dc:	4680      	mov	r8, r0
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58de:	4622      	mov	r2, r4
   d58e0:	6868      	ldr	r0, [r5, #4]
   d58e2:	f7ff f9d3 	bl	d4c8c <network_ready>
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58e6:	9e00      	ldr	r6, [sp, #0]
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
   d58e8:	4681      	mov	r9, r0
    struct addrinfo hints = {};
    hints.ai_flags = AI_ADDRCONFIG;
    hints.ai_family = AF_UNSPEC;
    const int r = getaddrinfo(name, nullptr, &hints, &ai);
    if (!r) {
        bool ok = false;
   d58ea:	4621      	mov	r1, r4
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d58ec:	2e00      	cmp	r6, #0
   d58ee:	d034      	beq.n	d595a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
   d58f0:	2900      	cmp	r1, #0
   d58f2:	d132      	bne.n	d595a <_ZN5spark12NetworkClass7resolveEPKc+0xbe>
            // NOTE: using only the first entry that matches the current state of IPv4/IPv6 connectivity
            switch (cur->ai_family) {
   d58f4:	6873      	ldr	r3, [r6, #4]
   d58f6:	2b02      	cmp	r3, #2
   d58f8:	d002      	beq.n	d5900 <_ZN5spark12NetworkClass7resolveEPKc+0x64>
   d58fa:	2b0a      	cmp	r3, #10
   d58fc:	d009      	beq.n	d5912 <_ZN5spark12NetworkClass7resolveEPKc+0x76>
   d58fe:	e02a      	b.n	d5956 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                case AF_INET: {
                    if (!ipv4) {
   d5900:	f1b8 0f00 	cmp.w	r8, #0
   d5904:	d027      	beq.n	d5956 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    // NOTE: HAL_IPAddress is little-endian
                    auto in = (struct sockaddr_in*)cur->ai_addr;
                    addr = (const uint8_t*)(&in->sin_addr.s_addr);
   d5906:	6971      	ldr	r1, [r6, #20]
   d5908:	4638      	mov	r0, r7
   d590a:	3104      	adds	r1, #4
   d590c:	f7ff fcfb 	bl	d5306 <_ZN9IPAddressaSEPKh>
   d5910:	e020      	b.n	d5954 <_ZN5spark12NetworkClass7resolveEPKc+0xb8>
                    ok = true;
                    break;
                }
                case AF_INET6: {
                    if (!ipv6) {
   d5912:	f1b9 0f00 	cmp.w	r9, #0
   d5916:	d01e      	beq.n	d5956 <_ZN5spark12NetworkClass7resolveEPKc+0xba>
                        continue;
                    }
                    auto in6 = (struct sockaddr_in6*)cur->ai_addr;
   d5918:	6974      	ldr	r4, [r6, #20]
                    HAL_IPAddress a = {};
   d591a:	2211      	movs	r2, #17
   d591c:	a801      	add	r0, sp, #4
   d591e:	f001 f84e 	bl	d69be <memset>
                    a.v = 6;
   d5922:	2306      	movs	r3, #6
   d5924:	f88d 3014 	strb.w	r3, [sp, #20]
                    memcpy(a.ipv6, in6->sin6_addr.s6_addr, sizeof(a.ipv6));
   d5928:	ad01      	add	r5, sp, #4
   d592a:	f104 0308 	add.w	r3, r4, #8
   d592e:	3418      	adds	r4, #24
   d5930:	6818      	ldr	r0, [r3, #0]
   d5932:	6859      	ldr	r1, [r3, #4]
   d5934:	462a      	mov	r2, r5
   d5936:	c203      	stmia	r2!, {r0, r1}
   d5938:	3308      	adds	r3, #8
   d593a:	42a3      	cmp	r3, r4
   d593c:	4615      	mov	r5, r2
   d593e:	d1f7      	bne.n	d5930 <_ZN5spark12NetworkClass7resolveEPKc+0x94>
                    addr = IPAddress(a);
   d5940:	a901      	add	r1, sp, #4
   d5942:	a806      	add	r0, sp, #24

/**
 * The IP address stored in host order.
 *
 */
class IPAddress : public Printable {
   d5944:	ad07      	add	r5, sp, #28
   d5946:	f7ff fcbf 	bl	d52c8 <_ZN9IPAddressC1ERK16_HAL_IPAddress_t>
   d594a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
   d594c:	1d3c      	adds	r4, r7, #4
   d594e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
   d5950:	682b      	ldr	r3, [r5, #0]
   d5952:	7023      	strb	r3, [r4, #0]
                    ok = true;
   d5954:	2101      	movs	r1, #1
    if (!r) {
        bool ok = false;
        // This is not really needed if AI_ADDRCONFIG is properly supported
        bool ipv4 = network_ready(*this, NETWORK_READY_TYPE_IPV4, nullptr);
        bool ipv6 = network_ready(*this, NETWORK_READY_TYPE_IPV6, nullptr);
        for (auto cur = ai; cur != nullptr && !ok; cur = cur->ai_next) {
   d5956:	69f6      	ldr	r6, [r6, #28]
   d5958:	e7c8      	b.n	d58ec <_ZN5spark12NetworkClass7resolveEPKc+0x50>
                    break;
                }
            }
        }
    }
    freeaddrinfo(ai);
   d595a:	9800      	ldr	r0, [sp, #0]
   d595c:	f7fe ffd2 	bl	d4904 <netdb_freeaddrinfo>
    return Cellular.resolve(name);
#endif // Wiring_Cellular

#endif // HAL_USE_INET_HAL_POSIX
    return addr;
}
   d5960:	4638      	mov	r0, r7
   d5962:	b015      	add	sp, #84	; 0x54
   d5964:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}

000d5968 <_GLOBAL__sub_I__ZN5spark7NetworkE>:
   d5968:	4b02      	ldr	r3, [pc, #8]	; (d5974 <_GLOBAL__sub_I__ZN5spark7NetworkE+0xc>)
   d596a:	4a03      	ldr	r2, [pc, #12]	; (d5978 <_GLOBAL__sub_I__ZN5spark7NetworkE+0x10>)
   d596c:	601a      	str	r2, [r3, #0]
   d596e:	2200      	movs	r2, #0
   d5970:	605a      	str	r2, [r3, #4]
   d5972:	4770      	bx	lr
   d5974:	2003e728 	.word	0x2003e728
   d5978:	000d6d50 	.word	0x000d6d50

000d597c <pinAvailable>:

/*
 * @brief Perform safety check on desired pin to see if it's already
 * being used.  Return 0 if used, otherwise return 1 if available.
 */
bool pinAvailable(uint16_t pin) {
   d597c:	b570      	push	{r4, r5, r6, lr}

template <HAL_SPI_Interface Interface>
class SpiProxy {
public:
    static SPIClass& instance() {
        static SPIClass instance(Interface);
   d597e:	4e18      	ldr	r6, [pc, #96]	; (d59e0 <pinAvailable+0x64>)
   d5980:	6831      	ldr	r1, [r6, #0]
   d5982:	f011 0501 	ands.w	r5, r1, #1
   d5986:	4604      	mov	r4, r0
   d5988:	d10a      	bne.n	d59a0 <pinAvailable+0x24>
   d598a:	4630      	mov	r0, r6
   d598c:	f7fe fb87 	bl	d409e <__cxa_guard_acquire>
   d5990:	b130      	cbz	r0, d59a0 <pinAvailable+0x24>
   d5992:	4629      	mov	r1, r5
   d5994:	4813      	ldr	r0, [pc, #76]	; (d59e4 <pinAvailable+0x68>)
   d5996:	f7ff fa1d 	bl	d4dd4 <_ZN8SPIClassC1E17HAL_SPI_Interface>
   d599a:	4630      	mov	r0, r6
   d599c:	f7fe fb84 	bl	d40a8 <__cxa_guard_release>
    }
    void detachInterrupt() {
        instance().detachInterrupt();
    }
    bool isEnabled(void) {
        return instance().isEnabled();
   d59a0:	4810      	ldr	r0, [pc, #64]	; (d59e4 <pinAvailable+0x68>)
   d59a2:	f7ff fac1 	bl	d4f28 <_ZN8SPIClass9isEnabledEv>

  // SPI safety check
#ifndef SPARK_WIRING_NO_SPI
  if(SPI.isEnabled() == true && (pin == SCK || pin == MOSI || pin == MISO))
   d59a6:	b128      	cbz	r0, d59b4 <pinAvailable+0x38>
   d59a8:	f1a4 030b 	sub.w	r3, r4, #11
   d59ac:	2b02      	cmp	r3, #2
   d59ae:	d801      	bhi.n	d59b4 <pinAvailable+0x38>
  {
    return 0; // 'pin' is used
   d59b0:	2000      	movs	r0, #0
   d59b2:	bd70      	pop	{r4, r5, r6, pc}
  }
#endif
  // I2C safety check
#ifndef SPARK_WIRING_NO_I2C
  if(Wire.isEnabled() == true && (pin == SCL || pin == SDA))
   d59b4:	f000 f870 	bl	d5a98 <_Z19__fetch_global_Wirev>
   d59b8:	f7ff fe3d 	bl	d5636 <_ZN7TwoWire9isEnabledEv>
   d59bc:	b108      	cbz	r0, d59c2 <pinAvailable+0x46>
   d59be:	2c01      	cmp	r4, #1
   d59c0:	d9f6      	bls.n	d59b0 <pinAvailable+0x34>
    return 0; // 'pin' is used
  }
#endif
#ifndef SPARK_WIRING_NO_USART_SERIAL
  // Serial1 safety check
  if(Serial1.isEnabled() == true && (pin == RX || pin == TX))
   d59c2:	f7ff fd8f 	bl	d54e4 <_Z22__fetch_global_Serial1v>
   d59c6:	f7ff fd89 	bl	d54dc <_ZN11USARTSerial9isEnabledEv>
   d59ca:	b118      	cbz	r0, d59d4 <pinAvailable+0x58>
   d59cc:	f1a4 0309 	sub.w	r3, r4, #9
   d59d0:	2b01      	cmp	r3, #1
   d59d2:	d9ed      	bls.n	d59b0 <pinAvailable+0x34>
  {
    return 0; // 'pin' is used
  }
#endif

  if (pin >= TOTAL_PINS)
   d59d4:	2c23      	cmp	r4, #35	; 0x23
   d59d6:	bf8c      	ite	hi
   d59d8:	2000      	movhi	r0, #0
   d59da:	2001      	movls	r0, #1
    return 0;
  else
    return 1; // 'pin' is available
}
   d59dc:	bd70      	pop	{r4, r5, r6, pc}
   d59de:	bf00      	nop
   d59e0:	2003e3d0 	.word	0x2003e3d0
   d59e4:	2003e3d4 	.word	0x2003e3d4

000d59e8 <pinMode>:
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d59e8:	2823      	cmp	r0, #35	; 0x23
/*
 * @brief Set the mode of the pin to OUTPUT, INPUT, INPUT_PULLUP,
 * or INPUT_PULLDOWN
 */
void pinMode(uint16_t pin, PinMode setMode)
{
   d59ea:	b538      	push	{r3, r4, r5, lr}
   d59ec:	4604      	mov	r4, r0
   d59ee:	460d      	mov	r5, r1

  if(pin >= TOTAL_PINS || setMode == PIN_MODE_NONE )
   d59f0:	d80a      	bhi.n	d5a08 <pinMode+0x20>
   d59f2:	29ff      	cmp	r1, #255	; 0xff
   d59f4:	d008      	beq.n	d5a08 <pinMode+0x20>
  {
    return;
  }

  // Safety check
  if( !pinAvailable(pin) ) {
   d59f6:	f7ff ffc1 	bl	d597c <pinAvailable>
   d59fa:	b128      	cbz	r0, d5a08 <pinMode+0x20>
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d59fc:	4629      	mov	r1, r5
   d59fe:	4620      	mov	r0, r4
}
   d5a00:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_Pin_Mode(pin, setMode);
   d5a04:	f7fe bf96 	b.w	d4934 <HAL_Pin_Mode>
   d5a08:	bd38      	pop	{r3, r4, r5, pc}

000d5a0a <digitalWrite>:

/*
 * @brief Sets a GPIO pin to HIGH or LOW.
 */
void digitalWrite(pin_t pin, uint8_t value)
{
   d5a0a:	b538      	push	{r3, r4, r5, lr}
   d5a0c:	4604      	mov	r4, r0
   d5a0e:	460d      	mov	r5, r1
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5a10:	f7fe ff98 	bl	d4944 <HAL_Get_Pin_Mode>
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
   d5a14:	28ff      	cmp	r0, #255	; 0xff
   d5a16:	d010      	beq.n	d5a3a <digitalWrite+0x30>
}

inline bool is_input_mode(PinMode mode) {
    return  mode == INPUT ||
            mode == INPUT_PULLUP ||
            mode == INPUT_PULLDOWN ||
   d5a18:	2806      	cmp	r0, #6
   d5a1a:	d804      	bhi.n	d5a26 <digitalWrite+0x1c>
   d5a1c:	234d      	movs	r3, #77	; 0x4d
   d5a1e:	fa23 f000 	lsr.w	r0, r3, r0
   d5a22:	07c3      	lsls	r3, r0, #31
   d5a24:	d409      	bmi.n	d5a3a <digitalWrite+0x30>
{
    PinMode mode = HAL_Get_Pin_Mode(pin);
    if (mode==PIN_MODE_NONE || is_input_mode(mode))
        return;
  // Safety check
  if( !pinAvailable(pin) ) {
   d5a26:	4620      	mov	r0, r4
   d5a28:	f7ff ffa8 	bl	d597c <pinAvailable>
   d5a2c:	b128      	cbz	r0, d5a3a <digitalWrite+0x30>
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5a2e:	4629      	mov	r1, r5
   d5a30:	4620      	mov	r0, r4
}
   d5a32:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
  // Safety check
  if( !pinAvailable(pin) ) {
    return;
  }

  HAL_GPIO_Write(pin, value);
   d5a36:	f7fe bf8d 	b.w	d4954 <HAL_GPIO_Write>
   d5a3a:	bd38      	pop	{r3, r4, r5, pc}

000d5a3c <digitalRead>:

/*
 * @brief Reads the value of a GPIO pin. Should return either 1 (HIGH) or 0 (LOW).
 */
int32_t digitalRead(pin_t pin)
{
   d5a3c:	b510      	push	{r4, lr}
   d5a3e:	4604      	mov	r4, r0
    PinMode mode = HAL_Get_Pin_Mode(pin);
   d5a40:	f7fe ff80 	bl	d4944 <HAL_Get_Pin_Mode>
    if (is_af_output_mode(mode))
   d5a44:	3804      	subs	r0, #4
   d5a46:	b2c0      	uxtb	r0, r0
   d5a48:	2801      	cmp	r0, #1
   d5a4a:	d908      	bls.n	d5a5e <digitalRead+0x22>
        return LOW;

    // Safety check
    if( !pinAvailable(pin) ) {
   d5a4c:	4620      	mov	r0, r4
   d5a4e:	f7ff ff95 	bl	d597c <pinAvailable>
   d5a52:	b120      	cbz	r0, d5a5e <digitalRead+0x22>
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5a54:	4620      	mov	r0, r4
}
   d5a56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
    // Safety check
    if( !pinAvailable(pin) ) {
      return LOW;
    }

    return HAL_GPIO_Read(pin);
   d5a5a:	f7fe bf83 	b.w	d4964 <HAL_GPIO_Read>
}
   d5a5e:	2000      	movs	r0, #0
   d5a60:	bd10      	pop	{r4, pc}
	...

000d5a64 <_Z17acquireWireBufferv>:
   d5a64:	b570      	push	{r4, r5, r6, lr}
   d5a66:	4604      	mov	r4, r0
   d5a68:	2514      	movs	r5, #20
   d5a6a:	462a      	mov	r2, r5
   d5a6c:	4e09      	ldr	r6, [pc, #36]	; (d5a94 <_Z17acquireWireBufferv+0x30>)
   d5a6e:	2100      	movs	r1, #0
   d5a70:	f000 ffa5 	bl	d69be <memset>
   d5a74:	8025      	strh	r5, [r4, #0]
   d5a76:	2520      	movs	r5, #32
   d5a78:	4631      	mov	r1, r6
   d5a7a:	60a5      	str	r5, [r4, #8]
   d5a7c:	6125      	str	r5, [r4, #16]
   d5a7e:	4628      	mov	r0, r5
   d5a80:	f000 f840 	bl	d5b04 <_ZnajRKSt9nothrow_t>
   d5a84:	4631      	mov	r1, r6
   d5a86:	6060      	str	r0, [r4, #4]
   d5a88:	4628      	mov	r0, r5
   d5a8a:	f000 f83b 	bl	d5b04 <_ZnajRKSt9nothrow_t>
   d5a8e:	60e0      	str	r0, [r4, #12]
   d5a90:	4620      	mov	r0, r4
   d5a92:	bd70      	pop	{r4, r5, r6, pc}
   d5a94:	000d6d7c 	.word	0x000d6d7c

000d5a98 <_Z19__fetch_global_Wirev>:
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5a98:	b530      	push	{r4, r5, lr}
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5a9a:	4d0e      	ldr	r5, [pc, #56]	; (d5ad4 <_Z19__fetch_global_Wirev+0x3c>)
   d5a9c:	6829      	ldr	r1, [r5, #0]
   d5a9e:	f011 0401 	ands.w	r4, r1, #1
	return defaultWireConfig();
}
#endif

TwoWire& __fetch_global_Wire()
{
   d5aa2:	b087      	sub	sp, #28
	static TwoWire wire(HAL_I2C_INTERFACE1, acquireWireBuffer());
   d5aa4:	d113      	bne.n	d5ace <_Z19__fetch_global_Wirev+0x36>
   d5aa6:	4628      	mov	r0, r5
   d5aa8:	f7fe faf9 	bl	d409e <__cxa_guard_acquire>
   d5aac:	b178      	cbz	r0, d5ace <_Z19__fetch_global_Wirev+0x36>
   d5aae:	a801      	add	r0, sp, #4
   d5ab0:	f7ff ffd8 	bl	d5a64 <_Z17acquireWireBufferv>
   d5ab4:	aa01      	add	r2, sp, #4
   d5ab6:	4621      	mov	r1, r4
   d5ab8:	4807      	ldr	r0, [pc, #28]	; (d5ad8 <_Z19__fetch_global_Wirev+0x40>)
   d5aba:	f7ff fd65 	bl	d5588 <_ZN7TwoWireC1E17HAL_I2C_InterfaceRK14HAL_I2C_Config>
   d5abe:	4628      	mov	r0, r5
   d5ac0:	f7fe faf2 	bl	d40a8 <__cxa_guard_release>
   d5ac4:	4a05      	ldr	r2, [pc, #20]	; (d5adc <_Z19__fetch_global_Wirev+0x44>)
   d5ac6:	4906      	ldr	r1, [pc, #24]	; (d5ae0 <_Z19__fetch_global_Wirev+0x48>)
   d5ac8:	4803      	ldr	r0, [pc, #12]	; (d5ad8 <_Z19__fetch_global_Wirev+0x40>)
   d5aca:	f000 f80b 	bl	d5ae4 <__aeabi_atexit>
	return wire;
}
   d5ace:	4802      	ldr	r0, [pc, #8]	; (d5ad8 <_Z19__fetch_global_Wirev+0x40>)
   d5ad0:	b007      	add	sp, #28
   d5ad2:	bd30      	pop	{r4, r5, pc}
   d5ad4:	2003e734 	.word	0x2003e734
   d5ad8:	2003e738 	.word	0x2003e738
   d5adc:	2003e374 	.word	0x2003e374
   d5ae0:	000d5531 	.word	0x000d5531

000d5ae4 <__aeabi_atexit>:
   d5ae4:	460b      	mov	r3, r1
   d5ae6:	4601      	mov	r1, r0
   d5ae8:	4618      	mov	r0, r3
   d5aea:	f000 bf4f 	b.w	d698c <__cxa_atexit>
	...

000d5af0 <_ZSt15get_new_handlerv>:
   d5af0:	4b02      	ldr	r3, [pc, #8]	; (d5afc <_ZSt15get_new_handlerv+0xc>)
   d5af2:	6818      	ldr	r0, [r3, #0]
   d5af4:	f3bf 8f5f 	dmb	sy
   d5af8:	4770      	bx	lr
   d5afa:	bf00      	nop
   d5afc:	2003e74c 	.word	0x2003e74c

000d5b00 <_ZdlPvj>:
   d5b00:	f7fe bac9 	b.w	d4096 <_ZdlPv>

000d5b04 <_ZnajRKSt9nothrow_t>:
   d5b04:	f000 b800 	b.w	d5b08 <_ZnwjRKSt9nothrow_t>

000d5b08 <_ZnwjRKSt9nothrow_t>:
   d5b08:	b510      	push	{r4, lr}
   d5b0a:	2800      	cmp	r0, #0
   d5b0c:	bf14      	ite	ne
   d5b0e:	4604      	movne	r4, r0
   d5b10:	2401      	moveq	r4, #1
   d5b12:	4620      	mov	r0, r4
   d5b14:	f7ff f8fa 	bl	d4d0c <malloc>
   d5b18:	b920      	cbnz	r0, d5b24 <_ZnwjRKSt9nothrow_t+0x1c>
   d5b1a:	f7ff ffe9 	bl	d5af0 <_ZSt15get_new_handlerv>
   d5b1e:	b108      	cbz	r0, d5b24 <_ZnwjRKSt9nothrow_t+0x1c>
   d5b20:	4780      	blx	r0
   d5b22:	e7f6      	b.n	d5b12 <_ZnwjRKSt9nothrow_t+0xa>
   d5b24:	bd10      	pop	{r4, pc}
	...

000d5b28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5b28:	4b18      	ldr	r3, [pc, #96]	; (d5b8c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5b2a:	681a      	ldr	r2, [r3, #0]
   d5b2c:	07d1      	lsls	r1, r2, #31
   d5b2e:	bf5c      	itt	pl
   d5b30:	2201      	movpl	r2, #1
   d5b32:	601a      	strpl	r2, [r3, #0]
   d5b34:	4b16      	ldr	r3, [pc, #88]	; (d5b90 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5b36:	681a      	ldr	r2, [r3, #0]
   d5b38:	07d2      	lsls	r2, r2, #31
   d5b3a:	bf5c      	itt	pl
   d5b3c:	2201      	movpl	r2, #1
   d5b3e:	601a      	strpl	r2, [r3, #0]
   d5b40:	4b14      	ldr	r3, [pc, #80]	; (d5b94 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5b42:	681a      	ldr	r2, [r3, #0]
   d5b44:	07d0      	lsls	r0, r2, #31
   d5b46:	bf5c      	itt	pl
   d5b48:	2201      	movpl	r2, #1
   d5b4a:	601a      	strpl	r2, [r3, #0]
   d5b4c:	4b12      	ldr	r3, [pc, #72]	; (d5b98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5b4e:	681a      	ldr	r2, [r3, #0]
   d5b50:	07d1      	lsls	r1, r2, #31
   d5b52:	bf5c      	itt	pl
   d5b54:	2201      	movpl	r2, #1
   d5b56:	601a      	strpl	r2, [r3, #0]
   d5b58:	4b10      	ldr	r3, [pc, #64]	; (d5b9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5b5a:	681a      	ldr	r2, [r3, #0]
   d5b5c:	07d2      	lsls	r2, r2, #31
   d5b5e:	bf5c      	itt	pl
   d5b60:	2201      	movpl	r2, #1
   d5b62:	601a      	strpl	r2, [r3, #0]
   d5b64:	4b0e      	ldr	r3, [pc, #56]	; (d5ba0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5b66:	681a      	ldr	r2, [r3, #0]
   d5b68:	07d0      	lsls	r0, r2, #31
   d5b6a:	bf5c      	itt	pl
   d5b6c:	2201      	movpl	r2, #1
   d5b6e:	601a      	strpl	r2, [r3, #0]
   d5b70:	4b0c      	ldr	r3, [pc, #48]	; (d5ba4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5b72:	681a      	ldr	r2, [r3, #0]
   d5b74:	07d1      	lsls	r1, r2, #31
   d5b76:	bf5c      	itt	pl
   d5b78:	2201      	movpl	r2, #1
   d5b7a:	601a      	strpl	r2, [r3, #0]
   d5b7c:	4b0a      	ldr	r3, [pc, #40]	; (d5ba8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5b7e:	681a      	ldr	r2, [r3, #0]
   d5b80:	07d2      	lsls	r2, r2, #31
   d5b82:	bf5c      	itt	pl
   d5b84:	2201      	movpl	r2, #1
   d5b86:	601a      	strpl	r2, [r3, #0]
   d5b88:	4770      	bx	lr
   d5b8a:	bf00      	nop
   d5b8c:	2003e76c 	.word	0x2003e76c
   d5b90:	2003e768 	.word	0x2003e768
   d5b94:	2003e764 	.word	0x2003e764
   d5b98:	2003e760 	.word	0x2003e760
   d5b9c:	2003e75c 	.word	0x2003e75c
   d5ba0:	2003e758 	.word	0x2003e758
   d5ba4:	2003e754 	.word	0x2003e754
   d5ba8:	2003e750 	.word	0x2003e750

000d5bac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj>:
   d5bac:	4b24      	ldr	r3, [pc, #144]	; (d5c40 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x94>)
   d5bae:	681a      	ldr	r2, [r3, #0]
   d5bb0:	07d0      	lsls	r0, r2, #31
   d5bb2:	bf5c      	itt	pl
   d5bb4:	2201      	movpl	r2, #1
   d5bb6:	601a      	strpl	r2, [r3, #0]
   d5bb8:	4b22      	ldr	r3, [pc, #136]	; (d5c44 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x98>)
   d5bba:	681a      	ldr	r2, [r3, #0]
   d5bbc:	07d1      	lsls	r1, r2, #31
   d5bbe:	bf5c      	itt	pl
   d5bc0:	2201      	movpl	r2, #1
   d5bc2:	601a      	strpl	r2, [r3, #0]
   d5bc4:	4b20      	ldr	r3, [pc, #128]	; (d5c48 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0x9c>)
   d5bc6:	681a      	ldr	r2, [r3, #0]
   d5bc8:	07d2      	lsls	r2, r2, #31
   d5bca:	bf5c      	itt	pl
   d5bcc:	2201      	movpl	r2, #1
   d5bce:	601a      	strpl	r2, [r3, #0]
   d5bd0:	4b1e      	ldr	r3, [pc, #120]	; (d5c4c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa0>)
   d5bd2:	681a      	ldr	r2, [r3, #0]
   d5bd4:	07d0      	lsls	r0, r2, #31
   d5bd6:	bf5c      	itt	pl
   d5bd8:	2201      	movpl	r2, #1
   d5bda:	601a      	strpl	r2, [r3, #0]
   d5bdc:	4b1c      	ldr	r3, [pc, #112]	; (d5c50 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa4>)
   d5bde:	681a      	ldr	r2, [r3, #0]
   d5be0:	07d1      	lsls	r1, r2, #31
   d5be2:	bf5c      	itt	pl
   d5be4:	2201      	movpl	r2, #1
   d5be6:	601a      	strpl	r2, [r3, #0]
   d5be8:	4b1a      	ldr	r3, [pc, #104]	; (d5c54 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xa8>)
   d5bea:	681a      	ldr	r2, [r3, #0]
   d5bec:	07d2      	lsls	r2, r2, #31
   d5bee:	bf5c      	itt	pl
   d5bf0:	2201      	movpl	r2, #1
   d5bf2:	601a      	strpl	r2, [r3, #0]
   d5bf4:	4b18      	ldr	r3, [pc, #96]	; (d5c58 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xac>)
   d5bf6:	681a      	ldr	r2, [r3, #0]
   d5bf8:	07d0      	lsls	r0, r2, #31
   d5bfa:	bf5c      	itt	pl
   d5bfc:	2201      	movpl	r2, #1
   d5bfe:	601a      	strpl	r2, [r3, #0]
   d5c00:	4b16      	ldr	r3, [pc, #88]	; (d5c5c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb0>)
   d5c02:	681a      	ldr	r2, [r3, #0]
   d5c04:	07d1      	lsls	r1, r2, #31
   d5c06:	bf5c      	itt	pl
   d5c08:	2201      	movpl	r2, #1
   d5c0a:	601a      	strpl	r2, [r3, #0]
   d5c0c:	4b14      	ldr	r3, [pc, #80]	; (d5c60 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb4>)
   d5c0e:	681a      	ldr	r2, [r3, #0]
   d5c10:	07d2      	lsls	r2, r2, #31
   d5c12:	bf5c      	itt	pl
   d5c14:	2201      	movpl	r2, #1
   d5c16:	601a      	strpl	r2, [r3, #0]
   d5c18:	4b12      	ldr	r3, [pc, #72]	; (d5c64 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xb8>)
   d5c1a:	681a      	ldr	r2, [r3, #0]
   d5c1c:	07d0      	lsls	r0, r2, #31
   d5c1e:	bf5c      	itt	pl
   d5c20:	2201      	movpl	r2, #1
   d5c22:	601a      	strpl	r2, [r3, #0]
   d5c24:	4b10      	ldr	r3, [pc, #64]	; (d5c68 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xbc>)
   d5c26:	681a      	ldr	r2, [r3, #0]
   d5c28:	07d1      	lsls	r1, r2, #31
   d5c2a:	bf5c      	itt	pl
   d5c2c:	2201      	movpl	r2, #1
   d5c2e:	601a      	strpl	r2, [r3, #0]
   d5c30:	4b0e      	ldr	r3, [pc, #56]	; (d5c6c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKSsj+0xc0>)
   d5c32:	681a      	ldr	r2, [r3, #0]
   d5c34:	07d2      	lsls	r2, r2, #31
   d5c36:	bf5c      	itt	pl
   d5c38:	2201      	movpl	r2, #1
   d5c3a:	601a      	strpl	r2, [r3, #0]
   d5c3c:	4770      	bx	lr
   d5c3e:	bf00      	nop
   d5c40:	2003e79c 	.word	0x2003e79c
   d5c44:	2003e798 	.word	0x2003e798
   d5c48:	2003e794 	.word	0x2003e794
   d5c4c:	2003e790 	.word	0x2003e790
   d5c50:	2003e78c 	.word	0x2003e78c
   d5c54:	2003e788 	.word	0x2003e788
   d5c58:	2003e784 	.word	0x2003e784
   d5c5c:	2003e780 	.word	0x2003e780
   d5c60:	2003e77c 	.word	0x2003e77c
   d5c64:	2003e778 	.word	0x2003e778
   d5c68:	2003e774 	.word	0x2003e774
   d5c6c:	2003e770 	.word	0x2003e770

000d5c70 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj>:
   d5c70:	4b24      	ldr	r3, [pc, #144]	; (d5d04 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x94>)
   d5c72:	681a      	ldr	r2, [r3, #0]
   d5c74:	07d0      	lsls	r0, r2, #31
   d5c76:	bf5c      	itt	pl
   d5c78:	2201      	movpl	r2, #1
   d5c7a:	601a      	strpl	r2, [r3, #0]
   d5c7c:	4b22      	ldr	r3, [pc, #136]	; (d5d08 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x98>)
   d5c7e:	681a      	ldr	r2, [r3, #0]
   d5c80:	07d1      	lsls	r1, r2, #31
   d5c82:	bf5c      	itt	pl
   d5c84:	2201      	movpl	r2, #1
   d5c86:	601a      	strpl	r2, [r3, #0]
   d5c88:	4b20      	ldr	r3, [pc, #128]	; (d5d0c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0x9c>)
   d5c8a:	681a      	ldr	r2, [r3, #0]
   d5c8c:	07d2      	lsls	r2, r2, #31
   d5c8e:	bf5c      	itt	pl
   d5c90:	2201      	movpl	r2, #1
   d5c92:	601a      	strpl	r2, [r3, #0]
   d5c94:	4b1e      	ldr	r3, [pc, #120]	; (d5d10 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa0>)
   d5c96:	681a      	ldr	r2, [r3, #0]
   d5c98:	07d0      	lsls	r0, r2, #31
   d5c9a:	bf5c      	itt	pl
   d5c9c:	2201      	movpl	r2, #1
   d5c9e:	601a      	strpl	r2, [r3, #0]
   d5ca0:	4b1c      	ldr	r3, [pc, #112]	; (d5d14 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa4>)
   d5ca2:	681a      	ldr	r2, [r3, #0]
   d5ca4:	07d1      	lsls	r1, r2, #31
   d5ca6:	bf5c      	itt	pl
   d5ca8:	2201      	movpl	r2, #1
   d5caa:	601a      	strpl	r2, [r3, #0]
   d5cac:	4b1a      	ldr	r3, [pc, #104]	; (d5d18 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xa8>)
   d5cae:	681a      	ldr	r2, [r3, #0]
   d5cb0:	07d2      	lsls	r2, r2, #31
   d5cb2:	bf5c      	itt	pl
   d5cb4:	2201      	movpl	r2, #1
   d5cb6:	601a      	strpl	r2, [r3, #0]
   d5cb8:	4b18      	ldr	r3, [pc, #96]	; (d5d1c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xac>)
   d5cba:	681a      	ldr	r2, [r3, #0]
   d5cbc:	07d0      	lsls	r0, r2, #31
   d5cbe:	bf5c      	itt	pl
   d5cc0:	2201      	movpl	r2, #1
   d5cc2:	601a      	strpl	r2, [r3, #0]
   d5cc4:	4b16      	ldr	r3, [pc, #88]	; (d5d20 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb0>)
   d5cc6:	681a      	ldr	r2, [r3, #0]
   d5cc8:	07d1      	lsls	r1, r2, #31
   d5cca:	bf5c      	itt	pl
   d5ccc:	2201      	movpl	r2, #1
   d5cce:	601a      	strpl	r2, [r3, #0]
   d5cd0:	4b14      	ldr	r3, [pc, #80]	; (d5d24 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb4>)
   d5cd2:	681a      	ldr	r2, [r3, #0]
   d5cd4:	07d2      	lsls	r2, r2, #31
   d5cd6:	bf5c      	itt	pl
   d5cd8:	2201      	movpl	r2, #1
   d5cda:	601a      	strpl	r2, [r3, #0]
   d5cdc:	4b12      	ldr	r3, [pc, #72]	; (d5d28 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xb8>)
   d5cde:	681a      	ldr	r2, [r3, #0]
   d5ce0:	07d0      	lsls	r0, r2, #31
   d5ce2:	bf5c      	itt	pl
   d5ce4:	2201      	movpl	r2, #1
   d5ce6:	601a      	strpl	r2, [r3, #0]
   d5ce8:	4b10      	ldr	r3, [pc, #64]	; (d5d2c <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xbc>)
   d5cea:	681a      	ldr	r2, [r3, #0]
   d5cec:	07d1      	lsls	r1, r2, #31
   d5cee:	bf5c      	itt	pl
   d5cf0:	2201      	movpl	r2, #1
   d5cf2:	601a      	strpl	r2, [r3, #0]
   d5cf4:	4b0e      	ldr	r3, [pc, #56]	; (d5d30 <_GLOBAL__sub_I__ZNSt12ctype_bynameIcEC2ERKSsj+0xc0>)
   d5cf6:	681a      	ldr	r2, [r3, #0]
   d5cf8:	07d2      	lsls	r2, r2, #31
   d5cfa:	bf5c      	itt	pl
   d5cfc:	2201      	movpl	r2, #1
   d5cfe:	601a      	strpl	r2, [r3, #0]
   d5d00:	4770      	bx	lr
   d5d02:	bf00      	nop
   d5d04:	2003e7cc 	.word	0x2003e7cc
   d5d08:	2003e7c8 	.word	0x2003e7c8
   d5d0c:	2003e7c4 	.word	0x2003e7c4
   d5d10:	2003e7c0 	.word	0x2003e7c0
   d5d14:	2003e7bc 	.word	0x2003e7bc
   d5d18:	2003e7b8 	.word	0x2003e7b8
   d5d1c:	2003e7b4 	.word	0x2003e7b4
   d5d20:	2003e7b0 	.word	0x2003e7b0
   d5d24:	2003e7ac 	.word	0x2003e7ac
   d5d28:	2003e7a8 	.word	0x2003e7a8
   d5d2c:	2003e7a4 	.word	0x2003e7a4
   d5d30:	2003e7a0 	.word	0x2003e7a0

000d5d34 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj>:
   d5d34:	4b18      	ldr	r3, [pc, #96]	; (d5d98 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x64>)
   d5d36:	681a      	ldr	r2, [r3, #0]
   d5d38:	07d1      	lsls	r1, r2, #31
   d5d3a:	bf5c      	itt	pl
   d5d3c:	2201      	movpl	r2, #1
   d5d3e:	601a      	strpl	r2, [r3, #0]
   d5d40:	4b16      	ldr	r3, [pc, #88]	; (d5d9c <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x68>)
   d5d42:	681a      	ldr	r2, [r3, #0]
   d5d44:	07d2      	lsls	r2, r2, #31
   d5d46:	bf5c      	itt	pl
   d5d48:	2201      	movpl	r2, #1
   d5d4a:	601a      	strpl	r2, [r3, #0]
   d5d4c:	4b14      	ldr	r3, [pc, #80]	; (d5da0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x6c>)
   d5d4e:	681a      	ldr	r2, [r3, #0]
   d5d50:	07d0      	lsls	r0, r2, #31
   d5d52:	bf5c      	itt	pl
   d5d54:	2201      	movpl	r2, #1
   d5d56:	601a      	strpl	r2, [r3, #0]
   d5d58:	4b12      	ldr	r3, [pc, #72]	; (d5da4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x70>)
   d5d5a:	681a      	ldr	r2, [r3, #0]
   d5d5c:	07d1      	lsls	r1, r2, #31
   d5d5e:	bf5c      	itt	pl
   d5d60:	2201      	movpl	r2, #1
   d5d62:	601a      	strpl	r2, [r3, #0]
   d5d64:	4b10      	ldr	r3, [pc, #64]	; (d5da8 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x74>)
   d5d66:	681a      	ldr	r2, [r3, #0]
   d5d68:	07d2      	lsls	r2, r2, #31
   d5d6a:	bf5c      	itt	pl
   d5d6c:	2201      	movpl	r2, #1
   d5d6e:	601a      	strpl	r2, [r3, #0]
   d5d70:	4b0e      	ldr	r3, [pc, #56]	; (d5dac <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x78>)
   d5d72:	681a      	ldr	r2, [r3, #0]
   d5d74:	07d0      	lsls	r0, r2, #31
   d5d76:	bf5c      	itt	pl
   d5d78:	2201      	movpl	r2, #1
   d5d7a:	601a      	strpl	r2, [r3, #0]
   d5d7c:	4b0c      	ldr	r3, [pc, #48]	; (d5db0 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x7c>)
   d5d7e:	681a      	ldr	r2, [r3, #0]
   d5d80:	07d1      	lsls	r1, r2, #31
   d5d82:	bf5c      	itt	pl
   d5d84:	2201      	movpl	r2, #1
   d5d86:	601a      	strpl	r2, [r3, #0]
   d5d88:	4b0a      	ldr	r3, [pc, #40]	; (d5db4 <_GLOBAL__sub_I__ZNSt12ctype_bynameIwEC2ERKNSt7__cxx1112basic_stringIcSt11char_traitsIcESaIcEEEj+0x80>)
   d5d8a:	681a      	ldr	r2, [r3, #0]
   d5d8c:	07d2      	lsls	r2, r2, #31
   d5d8e:	bf5c      	itt	pl
   d5d90:	2201      	movpl	r2, #1
   d5d92:	601a      	strpl	r2, [r3, #0]
   d5d94:	4770      	bx	lr
   d5d96:	bf00      	nop
   d5d98:	2003e7ec 	.word	0x2003e7ec
   d5d9c:	2003e7e8 	.word	0x2003e7e8
   d5da0:	2003e7e4 	.word	0x2003e7e4
   d5da4:	2003e7e0 	.word	0x2003e7e0
   d5da8:	2003e7dc 	.word	0x2003e7dc
   d5dac:	2003e7d8 	.word	0x2003e7d8
   d5db0:	2003e7d4 	.word	0x2003e7d4
   d5db4:	2003e7d0 	.word	0x2003e7d0

000d5db8 <sqrt>:
   d5db8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   d5dbc:	ed2d 8b02 	vpush	{d8}
   d5dc0:	b08b      	sub	sp, #44	; 0x2c
   d5dc2:	ec55 4b10 	vmov	r4, r5, d0
   d5dc6:	f000 f857 	bl	d5e78 <__ieee754_sqrt>
   d5dca:	4b29      	ldr	r3, [pc, #164]	; (d5e70 <sqrt+0xb8>)
   d5dcc:	eeb0 8a40 	vmov.f32	s16, s0
   d5dd0:	eef0 8a60 	vmov.f32	s17, s1
   d5dd4:	f993 6000 	ldrsb.w	r6, [r3]
   d5dd8:	1c73      	adds	r3, r6, #1
   d5dda:	d012      	beq.n	d5e02 <sqrt+0x4a>
   d5ddc:	4622      	mov	r2, r4
   d5dde:	462b      	mov	r3, r5
   d5de0:	4620      	mov	r0, r4
   d5de2:	4629      	mov	r1, r5
   d5de4:	f000 fd6c 	bl	d68c0 <__aeabi_dcmpun>
   d5de8:	4607      	mov	r7, r0
   d5dea:	b950      	cbnz	r0, d5e02 <sqrt+0x4a>
   d5dec:	f04f 0800 	mov.w	r8, #0
   d5df0:	f04f 0900 	mov.w	r9, #0
   d5df4:	4620      	mov	r0, r4
   d5df6:	4629      	mov	r1, r5
   d5df8:	4642      	mov	r2, r8
   d5dfa:	464b      	mov	r3, r9
   d5dfc:	f000 fd38 	bl	d6870 <__aeabi_dcmplt>
   d5e00:	b940      	cbnz	r0, d5e14 <sqrt+0x5c>
   d5e02:	eeb0 0a48 	vmov.f32	s0, s16
   d5e06:	eef0 0a68 	vmov.f32	s1, s17
   d5e0a:	b00b      	add	sp, #44	; 0x2c
   d5e0c:	ecbd 8b02 	vpop	{d8}
   d5e10:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5e14:	4b17      	ldr	r3, [pc, #92]	; (d5e74 <sqrt+0xbc>)
   d5e16:	9708      	str	r7, [sp, #32]
   d5e18:	2201      	movs	r2, #1
   d5e1a:	e9cd 4504 	strd	r4, r5, [sp, #16]
   d5e1e:	e9cd 4502 	strd	r4, r5, [sp, #8]
   d5e22:	e88d 000c 	stmia.w	sp, {r2, r3}
   d5e26:	b1b6      	cbz	r6, d5e56 <sqrt+0x9e>
   d5e28:	4642      	mov	r2, r8
   d5e2a:	464b      	mov	r3, r9
   d5e2c:	4640      	mov	r0, r8
   d5e2e:	4649      	mov	r1, r9
   d5e30:	f000 fbd6 	bl	d65e0 <__aeabi_ddiv>
   d5e34:	2e02      	cmp	r6, #2
   d5e36:	e9cd 0106 	strd	r0, r1, [sp, #24]
   d5e3a:	d10e      	bne.n	d5e5a <sqrt+0xa2>
   d5e3c:	f7fe ff7e 	bl	d4d3c <__errno>
   d5e40:	2321      	movs	r3, #33	; 0x21
   d5e42:	6003      	str	r3, [r0, #0]
   d5e44:	9b08      	ldr	r3, [sp, #32]
   d5e46:	b973      	cbnz	r3, d5e66 <sqrt+0xae>
   d5e48:	ed9d 0b06 	vldr	d0, [sp, #24]
   d5e4c:	b00b      	add	sp, #44	; 0x2c
   d5e4e:	ecbd 8b02 	vpop	{d8}
   d5e52:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   d5e56:	e9cd 8906 	strd	r8, r9, [sp, #24]
   d5e5a:	4668      	mov	r0, sp
   d5e5c:	f000 f8dc 	bl	d6018 <matherr>
   d5e60:	2800      	cmp	r0, #0
   d5e62:	d1ef      	bne.n	d5e44 <sqrt+0x8c>
   d5e64:	e7ea      	b.n	d5e3c <sqrt+0x84>
   d5e66:	f7fe ff69 	bl	d4d3c <__errno>
   d5e6a:	9b08      	ldr	r3, [sp, #32]
   d5e6c:	6003      	str	r3, [r0, #0]
   d5e6e:	e7eb      	b.n	d5e48 <sqrt+0x90>
   d5e70:	2003e30c 	.word	0x2003e30c
   d5e74:	000d6d80 	.word	0x000d6d80

000d5e78 <__ieee754_sqrt>:
   d5e78:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   d5e7c:	4965      	ldr	r1, [pc, #404]	; (d6014 <__ieee754_sqrt+0x19c>)
   d5e7e:	ec55 4b10 	vmov	r4, r5, d0
   d5e82:	460e      	mov	r6, r1
   d5e84:	4029      	ands	r1, r5
   d5e86:	42b1      	cmp	r1, r6
   d5e88:	f000 8097 	beq.w	d5fba <__ieee754_sqrt+0x142>
   d5e8c:	2d00      	cmp	r5, #0
   d5e8e:	462b      	mov	r3, r5
   d5e90:	ee10 2a10 	vmov	r2, s0
   d5e94:	dd74      	ble.n	d5f80 <__ieee754_sqrt+0x108>
   d5e96:	152f      	asrs	r7, r5, #20
   d5e98:	d07f      	beq.n	d5f9a <__ieee754_sqrt+0x122>
   d5e9a:	f2a7 37ff 	subw	r7, r7, #1023	; 0x3ff
   d5e9e:	f3c3 0313 	ubfx	r3, r3, #0, #20
   d5ea2:	07f9      	lsls	r1, r7, #31
   d5ea4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d5ea8:	d465      	bmi.n	d5f76 <__ieee754_sqrt+0xfe>
   d5eaa:	eb03 71d2 	add.w	r1, r3, r2, lsr #31
   d5eae:	2600      	movs	r6, #0
   d5eb0:	440b      	add	r3, r1
   d5eb2:	107f      	asrs	r7, r7, #1
   d5eb4:	0052      	lsls	r2, r2, #1
   d5eb6:	46b6      	mov	lr, r6
   d5eb8:	2016      	movs	r0, #22
   d5eba:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
   d5ebe:	eb0e 0401 	add.w	r4, lr, r1
   d5ec2:	429c      	cmp	r4, r3
   d5ec4:	ea4f 75d2 	mov.w	r5, r2, lsr #31
   d5ec8:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d5ecc:	dc03      	bgt.n	d5ed6 <__ieee754_sqrt+0x5e>
   d5ece:	1b1b      	subs	r3, r3, r4
   d5ed0:	eb04 0e01 	add.w	lr, r4, r1
   d5ed4:	440e      	add	r6, r1
   d5ed6:	3801      	subs	r0, #1
   d5ed8:	eb05 0343 	add.w	r3, r5, r3, lsl #1
   d5edc:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d5ee0:	d1ed      	bne.n	d5ebe <__ieee754_sqrt+0x46>
   d5ee2:	4684      	mov	ip, r0
   d5ee4:	2420      	movs	r4, #32
   d5ee6:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
   d5eea:	e009      	b.n	d5f00 <__ieee754_sqrt+0x88>
   d5eec:	d020      	beq.n	d5f30 <__ieee754_sqrt+0xb8>
   d5eee:	eb03 75d2 	add.w	r5, r3, r2, lsr #31
   d5ef2:	3c01      	subs	r4, #1
   d5ef4:	ea4f 0151 	mov.w	r1, r1, lsr #1
   d5ef8:	442b      	add	r3, r5
   d5efa:	ea4f 0242 	mov.w	r2, r2, lsl #1
   d5efe:	d020      	beq.n	d5f42 <__ieee754_sqrt+0xca>
   d5f00:	459e      	cmp	lr, r3
   d5f02:	eb01 050c 	add.w	r5, r1, ip
   d5f06:	daf1      	bge.n	d5eec <__ieee754_sqrt+0x74>
   d5f08:	2d00      	cmp	r5, #0
   d5f0a:	eb05 0c01 	add.w	ip, r5, r1
   d5f0e:	db09      	blt.n	d5f24 <__ieee754_sqrt+0xac>
   d5f10:	46f0      	mov	r8, lr
   d5f12:	4295      	cmp	r5, r2
   d5f14:	ebce 0303 	rsb	r3, lr, r3
   d5f18:	d900      	bls.n	d5f1c <__ieee754_sqrt+0xa4>
   d5f1a:	3b01      	subs	r3, #1
   d5f1c:	1b52      	subs	r2, r2, r5
   d5f1e:	4408      	add	r0, r1
   d5f20:	46c6      	mov	lr, r8
   d5f22:	e7e4      	b.n	d5eee <__ieee754_sqrt+0x76>
   d5f24:	f1bc 0f00 	cmp.w	ip, #0
   d5f28:	dbf2      	blt.n	d5f10 <__ieee754_sqrt+0x98>
   d5f2a:	f10e 0801 	add.w	r8, lr, #1
   d5f2e:	e7f0      	b.n	d5f12 <__ieee754_sqrt+0x9a>
   d5f30:	4295      	cmp	r5, r2
   d5f32:	d81e      	bhi.n	d5f72 <__ieee754_sqrt+0xfa>
   d5f34:	2d00      	cmp	r5, #0
   d5f36:	eb05 0c01 	add.w	ip, r5, r1
   d5f3a:	db50      	blt.n	d5fde <__ieee754_sqrt+0x166>
   d5f3c:	4698      	mov	r8, r3
   d5f3e:	2300      	movs	r3, #0
   d5f40:	e7ec      	b.n	d5f1c <__ieee754_sqrt+0xa4>
   d5f42:	4313      	orrs	r3, r2
   d5f44:	d004      	beq.n	d5f50 <__ieee754_sqrt+0xd8>
   d5f46:	1c42      	adds	r2, r0, #1
   d5f48:	d04d      	beq.n	d5fe6 <__ieee754_sqrt+0x16e>
   d5f4a:	f000 0301 	and.w	r3, r0, #1
   d5f4e:	4418      	add	r0, r3
   d5f50:	0840      	lsrs	r0, r0, #1
   d5f52:	1071      	asrs	r1, r6, #1
   d5f54:	07f3      	lsls	r3, r6, #31
   d5f56:	f101 517f 	add.w	r1, r1, #1069547520	; 0x3fc00000
   d5f5a:	f501 1100 	add.w	r1, r1, #2097152	; 0x200000
   d5f5e:	bf48      	it	mi
   d5f60:	f040 4000 	orrmi.w	r0, r0, #2147483648	; 0x80000000
   d5f64:	eb01 5307 	add.w	r3, r1, r7, lsl #20
   d5f68:	4602      	mov	r2, r0
   d5f6a:	ec43 2b10 	vmov	d0, r2, r3
   d5f6e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5f72:	4673      	mov	r3, lr
   d5f74:	e7bb      	b.n	d5eee <__ieee754_sqrt+0x76>
   d5f76:	005b      	lsls	r3, r3, #1
   d5f78:	eb03 73d2 	add.w	r3, r3, r2, lsr #31
   d5f7c:	0052      	lsls	r2, r2, #1
   d5f7e:	e794      	b.n	d5eaa <__ieee754_sqrt+0x32>
   d5f80:	f025 4100 	bic.w	r1, r5, #2147483648	; 0x80000000
   d5f84:	4321      	orrs	r1, r4
   d5f86:	d028      	beq.n	d5fda <__ieee754_sqrt+0x162>
   d5f88:	bbad      	cbnz	r5, d5ff6 <__ieee754_sqrt+0x17e>
   d5f8a:	462f      	mov	r7, r5
   d5f8c:	0ad3      	lsrs	r3, r2, #11
   d5f8e:	3f15      	subs	r7, #21
   d5f90:	0552      	lsls	r2, r2, #21
   d5f92:	2b00      	cmp	r3, #0
   d5f94:	d0fa      	beq.n	d5f8c <__ieee754_sqrt+0x114>
   d5f96:	02dd      	lsls	r5, r3, #11
   d5f98:	d428      	bmi.n	d5fec <__ieee754_sqrt+0x174>
   d5f9a:	2100      	movs	r1, #0
   d5f9c:	e000      	b.n	d5fa0 <__ieee754_sqrt+0x128>
   d5f9e:	4601      	mov	r1, r0
   d5fa0:	005b      	lsls	r3, r3, #1
   d5fa2:	02dc      	lsls	r4, r3, #11
   d5fa4:	f101 0001 	add.w	r0, r1, #1
   d5fa8:	d5f9      	bpl.n	d5f9e <__ieee754_sqrt+0x126>
   d5faa:	f1c0 0420 	rsb	r4, r0, #32
   d5fae:	fa22 f404 	lsr.w	r4, r2, r4
   d5fb2:	4323      	orrs	r3, r4
   d5fb4:	1a7f      	subs	r7, r7, r1
   d5fb6:	4082      	lsls	r2, r0
   d5fb8:	e76f      	b.n	d5e9a <__ieee754_sqrt+0x22>
   d5fba:	ee10 2a10 	vmov	r2, s0
   d5fbe:	462b      	mov	r3, r5
   d5fc0:	ee10 0a10 	vmov	r0, s0
   d5fc4:	4629      	mov	r1, r5
   d5fc6:	f000 f9e1 	bl	d638c <__aeabi_dmul>
   d5fca:	4622      	mov	r2, r4
   d5fcc:	462b      	mov	r3, r5
   d5fce:	f000 f82b 	bl	d6028 <__adddf3>
   d5fd2:	ec41 0b10 	vmov	d0, r0, r1
   d5fd6:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5fda:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d5fde:	f1bc 0f00 	cmp.w	ip, #0
   d5fe2:	daa2      	bge.n	d5f2a <__ieee754_sqrt+0xb2>
   d5fe4:	e7aa      	b.n	d5f3c <__ieee754_sqrt+0xc4>
   d5fe6:	3601      	adds	r6, #1
   d5fe8:	4620      	mov	r0, r4
   d5fea:	e7b2      	b.n	d5f52 <__ieee754_sqrt+0xda>
   d5fec:	2420      	movs	r4, #32
   d5fee:	f04f 31ff 	mov.w	r1, #4294967295
   d5ff2:	2000      	movs	r0, #0
   d5ff4:	e7db      	b.n	d5fae <__ieee754_sqrt+0x136>
   d5ff6:	ee10 2a10 	vmov	r2, s0
   d5ffa:	462b      	mov	r3, r5
   d5ffc:	4620      	mov	r0, r4
   d5ffe:	4629      	mov	r1, r5
   d6000:	f000 f810 	bl	d6024 <__aeabi_dsub>
   d6004:	4602      	mov	r2, r0
   d6006:	460b      	mov	r3, r1
   d6008:	f000 faea 	bl	d65e0 <__aeabi_ddiv>
   d600c:	ec41 0b10 	vmov	d0, r0, r1
   d6010:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   d6014:	7ff00000 	.word	0x7ff00000

000d6018 <matherr>:
   d6018:	2000      	movs	r0, #0
   d601a:	4770      	bx	lr

000d601c <__aeabi_drsub>:
   d601c:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   d6020:	e002      	b.n	d6028 <__adddf3>
   d6022:	bf00      	nop

000d6024 <__aeabi_dsub>:
   d6024:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

000d6028 <__adddf3>:
   d6028:	b530      	push	{r4, r5, lr}
   d602a:	ea4f 0441 	mov.w	r4, r1, lsl #1
   d602e:	ea4f 0543 	mov.w	r5, r3, lsl #1
   d6032:	ea94 0f05 	teq	r4, r5
   d6036:	bf08      	it	eq
   d6038:	ea90 0f02 	teqeq	r0, r2
   d603c:	bf1f      	itttt	ne
   d603e:	ea54 0c00 	orrsne.w	ip, r4, r0
   d6042:	ea55 0c02 	orrsne.w	ip, r5, r2
   d6046:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   d604a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d604e:	f000 80e2 	beq.w	d6216 <__adddf3+0x1ee>
   d6052:	ea4f 5454 	mov.w	r4, r4, lsr #21
   d6056:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   d605a:	bfb8      	it	lt
   d605c:	426d      	neglt	r5, r5
   d605e:	dd0c      	ble.n	d607a <__adddf3+0x52>
   d6060:	442c      	add	r4, r5
   d6062:	ea80 0202 	eor.w	r2, r0, r2
   d6066:	ea81 0303 	eor.w	r3, r1, r3
   d606a:	ea82 0000 	eor.w	r0, r2, r0
   d606e:	ea83 0101 	eor.w	r1, r3, r1
   d6072:	ea80 0202 	eor.w	r2, r0, r2
   d6076:	ea81 0303 	eor.w	r3, r1, r3
   d607a:	2d36      	cmp	r5, #54	; 0x36
   d607c:	bf88      	it	hi
   d607e:	bd30      	pophi	{r4, r5, pc}
   d6080:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   d6084:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6088:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   d608c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   d6090:	d002      	beq.n	d6098 <__adddf3+0x70>
   d6092:	4240      	negs	r0, r0
   d6094:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6098:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   d609c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d60a0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   d60a4:	d002      	beq.n	d60ac <__adddf3+0x84>
   d60a6:	4252      	negs	r2, r2
   d60a8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   d60ac:	ea94 0f05 	teq	r4, r5
   d60b0:	f000 80a7 	beq.w	d6202 <__adddf3+0x1da>
   d60b4:	f1a4 0401 	sub.w	r4, r4, #1
   d60b8:	f1d5 0e20 	rsbs	lr, r5, #32
   d60bc:	db0d      	blt.n	d60da <__adddf3+0xb2>
   d60be:	fa02 fc0e 	lsl.w	ip, r2, lr
   d60c2:	fa22 f205 	lsr.w	r2, r2, r5
   d60c6:	1880      	adds	r0, r0, r2
   d60c8:	f141 0100 	adc.w	r1, r1, #0
   d60cc:	fa03 f20e 	lsl.w	r2, r3, lr
   d60d0:	1880      	adds	r0, r0, r2
   d60d2:	fa43 f305 	asr.w	r3, r3, r5
   d60d6:	4159      	adcs	r1, r3
   d60d8:	e00e      	b.n	d60f8 <__adddf3+0xd0>
   d60da:	f1a5 0520 	sub.w	r5, r5, #32
   d60de:	f10e 0e20 	add.w	lr, lr, #32
   d60e2:	2a01      	cmp	r2, #1
   d60e4:	fa03 fc0e 	lsl.w	ip, r3, lr
   d60e8:	bf28      	it	cs
   d60ea:	f04c 0c02 	orrcs.w	ip, ip, #2
   d60ee:	fa43 f305 	asr.w	r3, r3, r5
   d60f2:	18c0      	adds	r0, r0, r3
   d60f4:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   d60f8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d60fc:	d507      	bpl.n	d610e <__adddf3+0xe6>
   d60fe:	f04f 0e00 	mov.w	lr, #0
   d6102:	f1dc 0c00 	rsbs	ip, ip, #0
   d6106:	eb7e 0000 	sbcs.w	r0, lr, r0
   d610a:	eb6e 0101 	sbc.w	r1, lr, r1
   d610e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   d6112:	d31b      	bcc.n	d614c <__adddf3+0x124>
   d6114:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   d6118:	d30c      	bcc.n	d6134 <__adddf3+0x10c>
   d611a:	0849      	lsrs	r1, r1, #1
   d611c:	ea5f 0030 	movs.w	r0, r0, rrx
   d6120:	ea4f 0c3c 	mov.w	ip, ip, rrx
   d6124:	f104 0401 	add.w	r4, r4, #1
   d6128:	ea4f 5244 	mov.w	r2, r4, lsl #21
   d612c:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   d6130:	f080 809a 	bcs.w	d6268 <__adddf3+0x240>
   d6134:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   d6138:	bf08      	it	eq
   d613a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d613e:	f150 0000 	adcs.w	r0, r0, #0
   d6142:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6146:	ea41 0105 	orr.w	r1, r1, r5
   d614a:	bd30      	pop	{r4, r5, pc}
   d614c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   d6150:	4140      	adcs	r0, r0
   d6152:	eb41 0101 	adc.w	r1, r1, r1
   d6156:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d615a:	f1a4 0401 	sub.w	r4, r4, #1
   d615e:	d1e9      	bne.n	d6134 <__adddf3+0x10c>
   d6160:	f091 0f00 	teq	r1, #0
   d6164:	bf04      	itt	eq
   d6166:	4601      	moveq	r1, r0
   d6168:	2000      	moveq	r0, #0
   d616a:	fab1 f381 	clz	r3, r1
   d616e:	bf08      	it	eq
   d6170:	3320      	addeq	r3, #32
   d6172:	f1a3 030b 	sub.w	r3, r3, #11
   d6176:	f1b3 0220 	subs.w	r2, r3, #32
   d617a:	da0c      	bge.n	d6196 <__adddf3+0x16e>
   d617c:	320c      	adds	r2, #12
   d617e:	dd08      	ble.n	d6192 <__adddf3+0x16a>
   d6180:	f102 0c14 	add.w	ip, r2, #20
   d6184:	f1c2 020c 	rsb	r2, r2, #12
   d6188:	fa01 f00c 	lsl.w	r0, r1, ip
   d618c:	fa21 f102 	lsr.w	r1, r1, r2
   d6190:	e00c      	b.n	d61ac <__adddf3+0x184>
   d6192:	f102 0214 	add.w	r2, r2, #20
   d6196:	bfd8      	it	le
   d6198:	f1c2 0c20 	rsble	ip, r2, #32
   d619c:	fa01 f102 	lsl.w	r1, r1, r2
   d61a0:	fa20 fc0c 	lsr.w	ip, r0, ip
   d61a4:	bfdc      	itt	le
   d61a6:	ea41 010c 	orrle.w	r1, r1, ip
   d61aa:	4090      	lslle	r0, r2
   d61ac:	1ae4      	subs	r4, r4, r3
   d61ae:	bfa2      	ittt	ge
   d61b0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   d61b4:	4329      	orrge	r1, r5
   d61b6:	bd30      	popge	{r4, r5, pc}
   d61b8:	ea6f 0404 	mvn.w	r4, r4
   d61bc:	3c1f      	subs	r4, #31
   d61be:	da1c      	bge.n	d61fa <__adddf3+0x1d2>
   d61c0:	340c      	adds	r4, #12
   d61c2:	dc0e      	bgt.n	d61e2 <__adddf3+0x1ba>
   d61c4:	f104 0414 	add.w	r4, r4, #20
   d61c8:	f1c4 0220 	rsb	r2, r4, #32
   d61cc:	fa20 f004 	lsr.w	r0, r0, r4
   d61d0:	fa01 f302 	lsl.w	r3, r1, r2
   d61d4:	ea40 0003 	orr.w	r0, r0, r3
   d61d8:	fa21 f304 	lsr.w	r3, r1, r4
   d61dc:	ea45 0103 	orr.w	r1, r5, r3
   d61e0:	bd30      	pop	{r4, r5, pc}
   d61e2:	f1c4 040c 	rsb	r4, r4, #12
   d61e6:	f1c4 0220 	rsb	r2, r4, #32
   d61ea:	fa20 f002 	lsr.w	r0, r0, r2
   d61ee:	fa01 f304 	lsl.w	r3, r1, r4
   d61f2:	ea40 0003 	orr.w	r0, r0, r3
   d61f6:	4629      	mov	r1, r5
   d61f8:	bd30      	pop	{r4, r5, pc}
   d61fa:	fa21 f004 	lsr.w	r0, r1, r4
   d61fe:	4629      	mov	r1, r5
   d6200:	bd30      	pop	{r4, r5, pc}
   d6202:	f094 0f00 	teq	r4, #0
   d6206:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   d620a:	bf06      	itte	eq
   d620c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   d6210:	3401      	addeq	r4, #1
   d6212:	3d01      	subne	r5, #1
   d6214:	e74e      	b.n	d60b4 <__adddf3+0x8c>
   d6216:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d621a:	bf18      	it	ne
   d621c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   d6220:	d029      	beq.n	d6276 <__adddf3+0x24e>
   d6222:	ea94 0f05 	teq	r4, r5
   d6226:	bf08      	it	eq
   d6228:	ea90 0f02 	teqeq	r0, r2
   d622c:	d005      	beq.n	d623a <__adddf3+0x212>
   d622e:	ea54 0c00 	orrs.w	ip, r4, r0
   d6232:	bf04      	itt	eq
   d6234:	4619      	moveq	r1, r3
   d6236:	4610      	moveq	r0, r2
   d6238:	bd30      	pop	{r4, r5, pc}
   d623a:	ea91 0f03 	teq	r1, r3
   d623e:	bf1e      	ittt	ne
   d6240:	2100      	movne	r1, #0
   d6242:	2000      	movne	r0, #0
   d6244:	bd30      	popne	{r4, r5, pc}
   d6246:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   d624a:	d105      	bne.n	d6258 <__adddf3+0x230>
   d624c:	0040      	lsls	r0, r0, #1
   d624e:	4149      	adcs	r1, r1
   d6250:	bf28      	it	cs
   d6252:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   d6256:	bd30      	pop	{r4, r5, pc}
   d6258:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   d625c:	bf3c      	itt	cc
   d625e:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   d6262:	bd30      	popcc	{r4, r5, pc}
   d6264:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6268:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   d626c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d6270:	f04f 0000 	mov.w	r0, #0
   d6274:	bd30      	pop	{r4, r5, pc}
   d6276:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   d627a:	bf1a      	itte	ne
   d627c:	4619      	movne	r1, r3
   d627e:	4610      	movne	r0, r2
   d6280:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   d6284:	bf1c      	itt	ne
   d6286:	460b      	movne	r3, r1
   d6288:	4602      	movne	r2, r0
   d628a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d628e:	bf06      	itte	eq
   d6290:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   d6294:	ea91 0f03 	teqeq	r1, r3
   d6298:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   d629c:	bd30      	pop	{r4, r5, pc}
   d629e:	bf00      	nop

000d62a0 <__aeabi_ui2d>:
   d62a0:	f090 0f00 	teq	r0, #0
   d62a4:	bf04      	itt	eq
   d62a6:	2100      	moveq	r1, #0
   d62a8:	4770      	bxeq	lr
   d62aa:	b530      	push	{r4, r5, lr}
   d62ac:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d62b0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d62b4:	f04f 0500 	mov.w	r5, #0
   d62b8:	f04f 0100 	mov.w	r1, #0
   d62bc:	e750      	b.n	d6160 <__adddf3+0x138>
   d62be:	bf00      	nop

000d62c0 <__aeabi_i2d>:
   d62c0:	f090 0f00 	teq	r0, #0
   d62c4:	bf04      	itt	eq
   d62c6:	2100      	moveq	r1, #0
   d62c8:	4770      	bxeq	lr
   d62ca:	b530      	push	{r4, r5, lr}
   d62cc:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d62d0:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d62d4:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   d62d8:	bf48      	it	mi
   d62da:	4240      	negmi	r0, r0
   d62dc:	f04f 0100 	mov.w	r1, #0
   d62e0:	e73e      	b.n	d6160 <__adddf3+0x138>
   d62e2:	bf00      	nop

000d62e4 <__aeabi_f2d>:
   d62e4:	0042      	lsls	r2, r0, #1
   d62e6:	ea4f 01e2 	mov.w	r1, r2, asr #3
   d62ea:	ea4f 0131 	mov.w	r1, r1, rrx
   d62ee:	ea4f 7002 	mov.w	r0, r2, lsl #28
   d62f2:	bf1f      	itttt	ne
   d62f4:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   d62f8:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d62fc:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   d6300:	4770      	bxne	lr
   d6302:	f092 0f00 	teq	r2, #0
   d6306:	bf14      	ite	ne
   d6308:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   d630c:	4770      	bxeq	lr
   d630e:	b530      	push	{r4, r5, lr}
   d6310:	f44f 7460 	mov.w	r4, #896	; 0x380
   d6314:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   d6318:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d631c:	e720      	b.n	d6160 <__adddf3+0x138>
   d631e:	bf00      	nop

000d6320 <__aeabi_ul2d>:
   d6320:	ea50 0201 	orrs.w	r2, r0, r1
   d6324:	bf08      	it	eq
   d6326:	4770      	bxeq	lr
   d6328:	b530      	push	{r4, r5, lr}
   d632a:	f04f 0500 	mov.w	r5, #0
   d632e:	e00a      	b.n	d6346 <__aeabi_l2d+0x16>

000d6330 <__aeabi_l2d>:
   d6330:	ea50 0201 	orrs.w	r2, r0, r1
   d6334:	bf08      	it	eq
   d6336:	4770      	bxeq	lr
   d6338:	b530      	push	{r4, r5, lr}
   d633a:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   d633e:	d502      	bpl.n	d6346 <__aeabi_l2d+0x16>
   d6340:	4240      	negs	r0, r0
   d6342:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   d6346:	f44f 6480 	mov.w	r4, #1024	; 0x400
   d634a:	f104 0432 	add.w	r4, r4, #50	; 0x32
   d634e:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   d6352:	f43f aedc 	beq.w	d610e <__adddf3+0xe6>
   d6356:	f04f 0203 	mov.w	r2, #3
   d635a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d635e:	bf18      	it	ne
   d6360:	3203      	addne	r2, #3
   d6362:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   d6366:	bf18      	it	ne
   d6368:	3203      	addne	r2, #3
   d636a:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   d636e:	f1c2 0320 	rsb	r3, r2, #32
   d6372:	fa00 fc03 	lsl.w	ip, r0, r3
   d6376:	fa20 f002 	lsr.w	r0, r0, r2
   d637a:	fa01 fe03 	lsl.w	lr, r1, r3
   d637e:	ea40 000e 	orr.w	r0, r0, lr
   d6382:	fa21 f102 	lsr.w	r1, r1, r2
   d6386:	4414      	add	r4, r2
   d6388:	e6c1      	b.n	d610e <__adddf3+0xe6>
   d638a:	bf00      	nop

000d638c <__aeabi_dmul>:
   d638c:	b570      	push	{r4, r5, r6, lr}
   d638e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d6392:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d6396:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d639a:	bf1d      	ittte	ne
   d639c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d63a0:	ea94 0f0c 	teqne	r4, ip
   d63a4:	ea95 0f0c 	teqne	r5, ip
   d63a8:	f000 f8de 	bleq	d6568 <__aeabi_dmul+0x1dc>
   d63ac:	442c      	add	r4, r5
   d63ae:	ea81 0603 	eor.w	r6, r1, r3
   d63b2:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   d63b6:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   d63ba:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   d63be:	bf18      	it	ne
   d63c0:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   d63c4:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d63c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   d63cc:	d038      	beq.n	d6440 <__aeabi_dmul+0xb4>
   d63ce:	fba0 ce02 	umull	ip, lr, r0, r2
   d63d2:	f04f 0500 	mov.w	r5, #0
   d63d6:	fbe1 e502 	umlal	lr, r5, r1, r2
   d63da:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   d63de:	fbe0 e503 	umlal	lr, r5, r0, r3
   d63e2:	f04f 0600 	mov.w	r6, #0
   d63e6:	fbe1 5603 	umlal	r5, r6, r1, r3
   d63ea:	f09c 0f00 	teq	ip, #0
   d63ee:	bf18      	it	ne
   d63f0:	f04e 0e01 	orrne.w	lr, lr, #1
   d63f4:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   d63f8:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   d63fc:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   d6400:	d204      	bcs.n	d640c <__aeabi_dmul+0x80>
   d6402:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   d6406:	416d      	adcs	r5, r5
   d6408:	eb46 0606 	adc.w	r6, r6, r6
   d640c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   d6410:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   d6414:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   d6418:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   d641c:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   d6420:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6424:	bf88      	it	hi
   d6426:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d642a:	d81e      	bhi.n	d646a <__aeabi_dmul+0xde>
   d642c:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   d6430:	bf08      	it	eq
   d6432:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   d6436:	f150 0000 	adcs.w	r0, r0, #0
   d643a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d643e:	bd70      	pop	{r4, r5, r6, pc}
   d6440:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   d6444:	ea46 0101 	orr.w	r1, r6, r1
   d6448:	ea40 0002 	orr.w	r0, r0, r2
   d644c:	ea81 0103 	eor.w	r1, r1, r3
   d6450:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   d6454:	bfc2      	ittt	gt
   d6456:	ebd4 050c 	rsbsgt	r5, r4, ip
   d645a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d645e:	bd70      	popgt	{r4, r5, r6, pc}
   d6460:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6464:	f04f 0e00 	mov.w	lr, #0
   d6468:	3c01      	subs	r4, #1
   d646a:	f300 80ab 	bgt.w	d65c4 <__aeabi_dmul+0x238>
   d646e:	f114 0f36 	cmn.w	r4, #54	; 0x36
   d6472:	bfde      	ittt	le
   d6474:	2000      	movle	r0, #0
   d6476:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   d647a:	bd70      	pople	{r4, r5, r6, pc}
   d647c:	f1c4 0400 	rsb	r4, r4, #0
   d6480:	3c20      	subs	r4, #32
   d6482:	da35      	bge.n	d64f0 <__aeabi_dmul+0x164>
   d6484:	340c      	adds	r4, #12
   d6486:	dc1b      	bgt.n	d64c0 <__aeabi_dmul+0x134>
   d6488:	f104 0414 	add.w	r4, r4, #20
   d648c:	f1c4 0520 	rsb	r5, r4, #32
   d6490:	fa00 f305 	lsl.w	r3, r0, r5
   d6494:	fa20 f004 	lsr.w	r0, r0, r4
   d6498:	fa01 f205 	lsl.w	r2, r1, r5
   d649c:	ea40 0002 	orr.w	r0, r0, r2
   d64a0:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   d64a4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   d64a8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d64ac:	fa21 f604 	lsr.w	r6, r1, r4
   d64b0:	eb42 0106 	adc.w	r1, r2, r6
   d64b4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d64b8:	bf08      	it	eq
   d64ba:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d64be:	bd70      	pop	{r4, r5, r6, pc}
   d64c0:	f1c4 040c 	rsb	r4, r4, #12
   d64c4:	f1c4 0520 	rsb	r5, r4, #32
   d64c8:	fa00 f304 	lsl.w	r3, r0, r4
   d64cc:	fa20 f005 	lsr.w	r0, r0, r5
   d64d0:	fa01 f204 	lsl.w	r2, r1, r4
   d64d4:	ea40 0002 	orr.w	r0, r0, r2
   d64d8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d64dc:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   d64e0:	f141 0100 	adc.w	r1, r1, #0
   d64e4:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d64e8:	bf08      	it	eq
   d64ea:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d64ee:	bd70      	pop	{r4, r5, r6, pc}
   d64f0:	f1c4 0520 	rsb	r5, r4, #32
   d64f4:	fa00 f205 	lsl.w	r2, r0, r5
   d64f8:	ea4e 0e02 	orr.w	lr, lr, r2
   d64fc:	fa20 f304 	lsr.w	r3, r0, r4
   d6500:	fa01 f205 	lsl.w	r2, r1, r5
   d6504:	ea43 0302 	orr.w	r3, r3, r2
   d6508:	fa21 f004 	lsr.w	r0, r1, r4
   d650c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d6510:	fa21 f204 	lsr.w	r2, r1, r4
   d6514:	ea20 0002 	bic.w	r0, r0, r2
   d6518:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   d651c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   d6520:	bf08      	it	eq
   d6522:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   d6526:	bd70      	pop	{r4, r5, r6, pc}
   d6528:	f094 0f00 	teq	r4, #0
   d652c:	d10f      	bne.n	d654e <__aeabi_dmul+0x1c2>
   d652e:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   d6532:	0040      	lsls	r0, r0, #1
   d6534:	eb41 0101 	adc.w	r1, r1, r1
   d6538:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d653c:	bf08      	it	eq
   d653e:	3c01      	subeq	r4, #1
   d6540:	d0f7      	beq.n	d6532 <__aeabi_dmul+0x1a6>
   d6542:	ea41 0106 	orr.w	r1, r1, r6
   d6546:	f095 0f00 	teq	r5, #0
   d654a:	bf18      	it	ne
   d654c:	4770      	bxne	lr
   d654e:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   d6552:	0052      	lsls	r2, r2, #1
   d6554:	eb43 0303 	adc.w	r3, r3, r3
   d6558:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   d655c:	bf08      	it	eq
   d655e:	3d01      	subeq	r5, #1
   d6560:	d0f7      	beq.n	d6552 <__aeabi_dmul+0x1c6>
   d6562:	ea43 0306 	orr.w	r3, r3, r6
   d6566:	4770      	bx	lr
   d6568:	ea94 0f0c 	teq	r4, ip
   d656c:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6570:	bf18      	it	ne
   d6572:	ea95 0f0c 	teqne	r5, ip
   d6576:	d00c      	beq.n	d6592 <__aeabi_dmul+0x206>
   d6578:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d657c:	bf18      	it	ne
   d657e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d6582:	d1d1      	bne.n	d6528 <__aeabi_dmul+0x19c>
   d6584:	ea81 0103 	eor.w	r1, r1, r3
   d6588:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d658c:	f04f 0000 	mov.w	r0, #0
   d6590:	bd70      	pop	{r4, r5, r6, pc}
   d6592:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6596:	bf06      	itte	eq
   d6598:	4610      	moveq	r0, r2
   d659a:	4619      	moveq	r1, r3
   d659c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d65a0:	d019      	beq.n	d65d6 <__aeabi_dmul+0x24a>
   d65a2:	ea94 0f0c 	teq	r4, ip
   d65a6:	d102      	bne.n	d65ae <__aeabi_dmul+0x222>
   d65a8:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   d65ac:	d113      	bne.n	d65d6 <__aeabi_dmul+0x24a>
   d65ae:	ea95 0f0c 	teq	r5, ip
   d65b2:	d105      	bne.n	d65c0 <__aeabi_dmul+0x234>
   d65b4:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   d65b8:	bf1c      	itt	ne
   d65ba:	4610      	movne	r0, r2
   d65bc:	4619      	movne	r1, r3
   d65be:	d10a      	bne.n	d65d6 <__aeabi_dmul+0x24a>
   d65c0:	ea81 0103 	eor.w	r1, r1, r3
   d65c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   d65c8:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d65cc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   d65d0:	f04f 0000 	mov.w	r0, #0
   d65d4:	bd70      	pop	{r4, r5, r6, pc}
   d65d6:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   d65da:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   d65de:	bd70      	pop	{r4, r5, r6, pc}

000d65e0 <__aeabi_ddiv>:
   d65e0:	b570      	push	{r4, r5, r6, lr}
   d65e2:	f04f 0cff 	mov.w	ip, #255	; 0xff
   d65e6:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   d65ea:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   d65ee:	bf1d      	ittte	ne
   d65f0:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   d65f4:	ea94 0f0c 	teqne	r4, ip
   d65f8:	ea95 0f0c 	teqne	r5, ip
   d65fc:	f000 f8a7 	bleq	d674e <__aeabi_ddiv+0x16e>
   d6600:	eba4 0405 	sub.w	r4, r4, r5
   d6604:	ea81 0e03 	eor.w	lr, r1, r3
   d6608:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d660c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   d6610:	f000 8088 	beq.w	d6724 <__aeabi_ddiv+0x144>
   d6614:	ea4f 3303 	mov.w	r3, r3, lsl #12
   d6618:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   d661c:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   d6620:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   d6624:	ea4f 2202 	mov.w	r2, r2, lsl #8
   d6628:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   d662c:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   d6630:	ea4f 2600 	mov.w	r6, r0, lsl #8
   d6634:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   d6638:	429d      	cmp	r5, r3
   d663a:	bf08      	it	eq
   d663c:	4296      	cmpeq	r6, r2
   d663e:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   d6642:	f504 7440 	add.w	r4, r4, #768	; 0x300
   d6646:	d202      	bcs.n	d664e <__aeabi_ddiv+0x6e>
   d6648:	085b      	lsrs	r3, r3, #1
   d664a:	ea4f 0232 	mov.w	r2, r2, rrx
   d664e:	1ab6      	subs	r6, r6, r2
   d6650:	eb65 0503 	sbc.w	r5, r5, r3
   d6654:	085b      	lsrs	r3, r3, #1
   d6656:	ea4f 0232 	mov.w	r2, r2, rrx
   d665a:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   d665e:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   d6662:	ebb6 0e02 	subs.w	lr, r6, r2
   d6666:	eb75 0e03 	sbcs.w	lr, r5, r3
   d666a:	bf22      	ittt	cs
   d666c:	1ab6      	subcs	r6, r6, r2
   d666e:	4675      	movcs	r5, lr
   d6670:	ea40 000c 	orrcs.w	r0, r0, ip
   d6674:	085b      	lsrs	r3, r3, #1
   d6676:	ea4f 0232 	mov.w	r2, r2, rrx
   d667a:	ebb6 0e02 	subs.w	lr, r6, r2
   d667e:	eb75 0e03 	sbcs.w	lr, r5, r3
   d6682:	bf22      	ittt	cs
   d6684:	1ab6      	subcs	r6, r6, r2
   d6686:	4675      	movcs	r5, lr
   d6688:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   d668c:	085b      	lsrs	r3, r3, #1
   d668e:	ea4f 0232 	mov.w	r2, r2, rrx
   d6692:	ebb6 0e02 	subs.w	lr, r6, r2
   d6696:	eb75 0e03 	sbcs.w	lr, r5, r3
   d669a:	bf22      	ittt	cs
   d669c:	1ab6      	subcs	r6, r6, r2
   d669e:	4675      	movcs	r5, lr
   d66a0:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   d66a4:	085b      	lsrs	r3, r3, #1
   d66a6:	ea4f 0232 	mov.w	r2, r2, rrx
   d66aa:	ebb6 0e02 	subs.w	lr, r6, r2
   d66ae:	eb75 0e03 	sbcs.w	lr, r5, r3
   d66b2:	bf22      	ittt	cs
   d66b4:	1ab6      	subcs	r6, r6, r2
   d66b6:	4675      	movcs	r5, lr
   d66b8:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   d66bc:	ea55 0e06 	orrs.w	lr, r5, r6
   d66c0:	d018      	beq.n	d66f4 <__aeabi_ddiv+0x114>
   d66c2:	ea4f 1505 	mov.w	r5, r5, lsl #4
   d66c6:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   d66ca:	ea4f 1606 	mov.w	r6, r6, lsl #4
   d66ce:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   d66d2:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   d66d6:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   d66da:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   d66de:	d1c0      	bne.n	d6662 <__aeabi_ddiv+0x82>
   d66e0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d66e4:	d10b      	bne.n	d66fe <__aeabi_ddiv+0x11e>
   d66e6:	ea41 0100 	orr.w	r1, r1, r0
   d66ea:	f04f 0000 	mov.w	r0, #0
   d66ee:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   d66f2:	e7b6      	b.n	d6662 <__aeabi_ddiv+0x82>
   d66f4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   d66f8:	bf04      	itt	eq
   d66fa:	4301      	orreq	r1, r0
   d66fc:	2000      	moveq	r0, #0
   d66fe:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   d6702:	bf88      	it	hi
   d6704:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   d6708:	f63f aeaf 	bhi.w	d646a <__aeabi_dmul+0xde>
   d670c:	ebb5 0c03 	subs.w	ip, r5, r3
   d6710:	bf04      	itt	eq
   d6712:	ebb6 0c02 	subseq.w	ip, r6, r2
   d6716:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   d671a:	f150 0000 	adcs.w	r0, r0, #0
   d671e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   d6722:	bd70      	pop	{r4, r5, r6, pc}
   d6724:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   d6728:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   d672c:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   d6730:	bfc2      	ittt	gt
   d6732:	ebd4 050c 	rsbsgt	r5, r4, ip
   d6736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   d673a:	bd70      	popgt	{r4, r5, r6, pc}
   d673c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6740:	f04f 0e00 	mov.w	lr, #0
   d6744:	3c01      	subs	r4, #1
   d6746:	e690      	b.n	d646a <__aeabi_dmul+0xde>
   d6748:	ea45 0e06 	orr.w	lr, r5, r6
   d674c:	e68d      	b.n	d646a <__aeabi_dmul+0xde>
   d674e:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   d6752:	ea94 0f0c 	teq	r4, ip
   d6756:	bf08      	it	eq
   d6758:	ea95 0f0c 	teqeq	r5, ip
   d675c:	f43f af3b 	beq.w	d65d6 <__aeabi_dmul+0x24a>
   d6760:	ea94 0f0c 	teq	r4, ip
   d6764:	d10a      	bne.n	d677c <__aeabi_ddiv+0x19c>
   d6766:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   d676a:	f47f af34 	bne.w	d65d6 <__aeabi_dmul+0x24a>
   d676e:	ea95 0f0c 	teq	r5, ip
   d6772:	f47f af25 	bne.w	d65c0 <__aeabi_dmul+0x234>
   d6776:	4610      	mov	r0, r2
   d6778:	4619      	mov	r1, r3
   d677a:	e72c      	b.n	d65d6 <__aeabi_dmul+0x24a>
   d677c:	ea95 0f0c 	teq	r5, ip
   d6780:	d106      	bne.n	d6790 <__aeabi_ddiv+0x1b0>
   d6782:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   d6786:	f43f aefd 	beq.w	d6584 <__aeabi_dmul+0x1f8>
   d678a:	4610      	mov	r0, r2
   d678c:	4619      	mov	r1, r3
   d678e:	e722      	b.n	d65d6 <__aeabi_dmul+0x24a>
   d6790:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   d6794:	bf18      	it	ne
   d6796:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   d679a:	f47f aec5 	bne.w	d6528 <__aeabi_dmul+0x19c>
   d679e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   d67a2:	f47f af0d 	bne.w	d65c0 <__aeabi_dmul+0x234>
   d67a6:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   d67aa:	f47f aeeb 	bne.w	d6584 <__aeabi_dmul+0x1f8>
   d67ae:	e712      	b.n	d65d6 <__aeabi_dmul+0x24a>

000d67b0 <__gedf2>:
   d67b0:	f04f 3cff 	mov.w	ip, #4294967295
   d67b4:	e006      	b.n	d67c4 <__cmpdf2+0x4>
   d67b6:	bf00      	nop

000d67b8 <__ledf2>:
   d67b8:	f04f 0c01 	mov.w	ip, #1
   d67bc:	e002      	b.n	d67c4 <__cmpdf2+0x4>
   d67be:	bf00      	nop

000d67c0 <__cmpdf2>:
   d67c0:	f04f 0c01 	mov.w	ip, #1
   d67c4:	f84d cd04 	str.w	ip, [sp, #-4]!
   d67c8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d67cc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d67d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d67d4:	bf18      	it	ne
   d67d6:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   d67da:	d01b      	beq.n	d6814 <__cmpdf2+0x54>
   d67dc:	b001      	add	sp, #4
   d67de:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   d67e2:	bf0c      	ite	eq
   d67e4:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   d67e8:	ea91 0f03 	teqne	r1, r3
   d67ec:	bf02      	ittt	eq
   d67ee:	ea90 0f02 	teqeq	r0, r2
   d67f2:	2000      	moveq	r0, #0
   d67f4:	4770      	bxeq	lr
   d67f6:	f110 0f00 	cmn.w	r0, #0
   d67fa:	ea91 0f03 	teq	r1, r3
   d67fe:	bf58      	it	pl
   d6800:	4299      	cmppl	r1, r3
   d6802:	bf08      	it	eq
   d6804:	4290      	cmpeq	r0, r2
   d6806:	bf2c      	ite	cs
   d6808:	17d8      	asrcs	r0, r3, #31
   d680a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   d680e:	f040 0001 	orr.w	r0, r0, #1
   d6812:	4770      	bx	lr
   d6814:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d6818:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d681c:	d102      	bne.n	d6824 <__cmpdf2+0x64>
   d681e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d6822:	d107      	bne.n	d6834 <__cmpdf2+0x74>
   d6824:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d6828:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d682c:	d1d6      	bne.n	d67dc <__cmpdf2+0x1c>
   d682e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d6832:	d0d3      	beq.n	d67dc <__cmpdf2+0x1c>
   d6834:	f85d 0b04 	ldr.w	r0, [sp], #4
   d6838:	4770      	bx	lr
   d683a:	bf00      	nop

000d683c <__aeabi_cdrcmple>:
   d683c:	4684      	mov	ip, r0
   d683e:	4610      	mov	r0, r2
   d6840:	4662      	mov	r2, ip
   d6842:	468c      	mov	ip, r1
   d6844:	4619      	mov	r1, r3
   d6846:	4663      	mov	r3, ip
   d6848:	e000      	b.n	d684c <__aeabi_cdcmpeq>
   d684a:	bf00      	nop

000d684c <__aeabi_cdcmpeq>:
   d684c:	b501      	push	{r0, lr}
   d684e:	f7ff ffb7 	bl	d67c0 <__cmpdf2>
   d6852:	2800      	cmp	r0, #0
   d6854:	bf48      	it	mi
   d6856:	f110 0f00 	cmnmi.w	r0, #0
   d685a:	bd01      	pop	{r0, pc}

000d685c <__aeabi_dcmpeq>:
   d685c:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6860:	f7ff fff4 	bl	d684c <__aeabi_cdcmpeq>
   d6864:	bf0c      	ite	eq
   d6866:	2001      	moveq	r0, #1
   d6868:	2000      	movne	r0, #0
   d686a:	f85d fb08 	ldr.w	pc, [sp], #8
   d686e:	bf00      	nop

000d6870 <__aeabi_dcmplt>:
   d6870:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6874:	f7ff ffea 	bl	d684c <__aeabi_cdcmpeq>
   d6878:	bf34      	ite	cc
   d687a:	2001      	movcc	r0, #1
   d687c:	2000      	movcs	r0, #0
   d687e:	f85d fb08 	ldr.w	pc, [sp], #8
   d6882:	bf00      	nop

000d6884 <__aeabi_dcmple>:
   d6884:	f84d ed08 	str.w	lr, [sp, #-8]!
   d6888:	f7ff ffe0 	bl	d684c <__aeabi_cdcmpeq>
   d688c:	bf94      	ite	ls
   d688e:	2001      	movls	r0, #1
   d6890:	2000      	movhi	r0, #0
   d6892:	f85d fb08 	ldr.w	pc, [sp], #8
   d6896:	bf00      	nop

000d6898 <__aeabi_dcmpge>:
   d6898:	f84d ed08 	str.w	lr, [sp, #-8]!
   d689c:	f7ff ffce 	bl	d683c <__aeabi_cdrcmple>
   d68a0:	bf94      	ite	ls
   d68a2:	2001      	movls	r0, #1
   d68a4:	2000      	movhi	r0, #0
   d68a6:	f85d fb08 	ldr.w	pc, [sp], #8
   d68aa:	bf00      	nop

000d68ac <__aeabi_dcmpgt>:
   d68ac:	f84d ed08 	str.w	lr, [sp, #-8]!
   d68b0:	f7ff ffc4 	bl	d683c <__aeabi_cdrcmple>
   d68b4:	bf34      	ite	cc
   d68b6:	2001      	movcc	r0, #1
   d68b8:	2000      	movcs	r0, #0
   d68ba:	f85d fb08 	ldr.w	pc, [sp], #8
   d68be:	bf00      	nop

000d68c0 <__aeabi_dcmpun>:
   d68c0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   d68c4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d68c8:	d102      	bne.n	d68d0 <__aeabi_dcmpun+0x10>
   d68ca:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   d68ce:	d10a      	bne.n	d68e6 <__aeabi_dcmpun+0x26>
   d68d0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   d68d4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   d68d8:	d102      	bne.n	d68e0 <__aeabi_dcmpun+0x20>
   d68da:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   d68de:	d102      	bne.n	d68e6 <__aeabi_dcmpun+0x26>
   d68e0:	f04f 0000 	mov.w	r0, #0
   d68e4:	4770      	bx	lr
   d68e6:	f04f 0001 	mov.w	r0, #1
   d68ea:	4770      	bx	lr

000d68ec <__aeabi_d2f>:
   d68ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
   d68f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
   d68f4:	bf24      	itt	cs
   d68f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
   d68fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
   d68fe:	d90d      	bls.n	d691c <__aeabi_d2f+0x30>
   d6900:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
   d6904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
   d6908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
   d690c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
   d6910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
   d6914:	bf08      	it	eq
   d6916:	f020 0001 	biceq.w	r0, r0, #1
   d691a:	4770      	bx	lr
   d691c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
   d6920:	d121      	bne.n	d6966 <__aeabi_d2f+0x7a>
   d6922:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
   d6926:	bfbc      	itt	lt
   d6928:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
   d692c:	4770      	bxlt	lr
   d692e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   d6932:	ea4f 5252 	mov.w	r2, r2, lsr #21
   d6936:	f1c2 0218 	rsb	r2, r2, #24
   d693a:	f1c2 0c20 	rsb	ip, r2, #32
   d693e:	fa10 f30c 	lsls.w	r3, r0, ip
   d6942:	fa20 f002 	lsr.w	r0, r0, r2
   d6946:	bf18      	it	ne
   d6948:	f040 0001 	orrne.w	r0, r0, #1
   d694c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   d6950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
   d6954:	fa03 fc0c 	lsl.w	ip, r3, ip
   d6958:	ea40 000c 	orr.w	r0, r0, ip
   d695c:	fa23 f302 	lsr.w	r3, r3, r2
   d6960:	ea4f 0343 	mov.w	r3, r3, lsl #1
   d6964:	e7cc      	b.n	d6900 <__aeabi_d2f+0x14>
   d6966:	ea7f 5362 	mvns.w	r3, r2, asr #21
   d696a:	d107      	bne.n	d697c <__aeabi_d2f+0x90>
   d696c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
   d6970:	bf1e      	ittt	ne
   d6972:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
   d6976:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
   d697a:	4770      	bxne	lr
   d697c:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
   d6980:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
   d6984:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
   d6988:	4770      	bx	lr
   d698a:	bf00      	nop

000d698c <__cxa_atexit>:
   d698c:	b510      	push	{r4, lr}
   d698e:	4c05      	ldr	r4, [pc, #20]	; (d69a4 <__cxa_atexit+0x18>)
   d6990:	4613      	mov	r3, r2
   d6992:	b12c      	cbz	r4, d69a0 <__cxa_atexit+0x14>
   d6994:	460a      	mov	r2, r1
   d6996:	4601      	mov	r1, r0
   d6998:	2002      	movs	r0, #2
   d699a:	f3af 8000 	nop.w
   d699e:	bd10      	pop	{r4, pc}
   d69a0:	4620      	mov	r0, r4
   d69a2:	bd10      	pop	{r4, pc}
   d69a4:	00000000 	.word	0x00000000

000d69a8 <memcpy>:
   d69a8:	b510      	push	{r4, lr}
   d69aa:	1e43      	subs	r3, r0, #1
   d69ac:	440a      	add	r2, r1
   d69ae:	4291      	cmp	r1, r2
   d69b0:	d004      	beq.n	d69bc <memcpy+0x14>
   d69b2:	f811 4b01 	ldrb.w	r4, [r1], #1
   d69b6:	f803 4f01 	strb.w	r4, [r3, #1]!
   d69ba:	e7f8      	b.n	d69ae <memcpy+0x6>
   d69bc:	bd10      	pop	{r4, pc}

000d69be <memset>:
   d69be:	4402      	add	r2, r0
   d69c0:	4603      	mov	r3, r0
   d69c2:	4293      	cmp	r3, r2
   d69c4:	d002      	beq.n	d69cc <memset+0xe>
   d69c6:	f803 1b01 	strb.w	r1, [r3], #1
   d69ca:	e7fa      	b.n	d69c2 <memset+0x4>
   d69cc:	4770      	bx	lr
	...

000d69d0 <srand>:
   d69d0:	b538      	push	{r3, r4, r5, lr}
   d69d2:	4b12      	ldr	r3, [pc, #72]	; (d6a1c <srand+0x4c>)
   d69d4:	681c      	ldr	r4, [r3, #0]
   d69d6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d69d8:	4605      	mov	r5, r0
   d69da:	b9d3      	cbnz	r3, d6a12 <srand+0x42>
   d69dc:	2018      	movs	r0, #24
   d69de:	f7fe f995 	bl	d4d0c <malloc>
   d69e2:	f243 330e 	movw	r3, #13070	; 0x330e
   d69e6:	63a0      	str	r0, [r4, #56]	; 0x38
   d69e8:	8003      	strh	r3, [r0, #0]
   d69ea:	f64a 33cd 	movw	r3, #43981	; 0xabcd
   d69ee:	8043      	strh	r3, [r0, #2]
   d69f0:	f241 2334 	movw	r3, #4660	; 0x1234
   d69f4:	8083      	strh	r3, [r0, #4]
   d69f6:	f24e 636d 	movw	r3, #58989	; 0xe66d
   d69fa:	80c3      	strh	r3, [r0, #6]
   d69fc:	f64d 63ec 	movw	r3, #57068	; 0xdeec
   d6a00:	8103      	strh	r3, [r0, #8]
   d6a02:	2305      	movs	r3, #5
   d6a04:	8143      	strh	r3, [r0, #10]
   d6a06:	230b      	movs	r3, #11
   d6a08:	8183      	strh	r3, [r0, #12]
   d6a0a:	2201      	movs	r2, #1
   d6a0c:	2300      	movs	r3, #0
   d6a0e:	e9c0 2304 	strd	r2, r3, [r0, #16]
   d6a12:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   d6a14:	2200      	movs	r2, #0
   d6a16:	611d      	str	r5, [r3, #16]
   d6a18:	615a      	str	r2, [r3, #20]
   d6a1a:	bd38      	pop	{r3, r4, r5, pc}
   d6a1c:	2003e370 	.word	0x2003e370

000d6a20 <strlen>:
   d6a20:	4603      	mov	r3, r0
   d6a22:	f813 2b01 	ldrb.w	r2, [r3], #1
   d6a26:	2a00      	cmp	r2, #0
   d6a28:	d1fb      	bne.n	d6a22 <strlen+0x2>
   d6a2a:	1a18      	subs	r0, r3, r0
   d6a2c:	3801      	subs	r0, #1
   d6a2e:	4770      	bx	lr

000d6a30 <dynalib_user>:
   d6a30:	401d 000d 4059 000d 4085 000d 4089 000d     .@..Y@...@...@..
   d6a40:	0000 0000 6c41 6974 7574 6564 203a 3025     ....Altitude: %0
   d6a50:	322e 2066 096d 5000 6572 7373 7275 3a65     .2f m..Pressure:
   d6a60:	2520 2e30 6632 6820 6150 0009 6554 706d      %0.2f hPa..Temp
   d6a70:	7265 7461 7275 3a65 2520 2e30 6632 2a20     erature: %0.2f *
   d6a80:	0946 4800 6d75 6469 7469 3a79 2520 2e30     F..Humidity: %0.
   d6a90:	6632 2525 0a0a 4100 6363 6c65 7265 7461     2f%%...Accelerat
   d6aa0:	6f69 3a6e 2520 2e30 6632 0000               ion: %0.2f..

000d6aac <_ZTVN8particle13__SPISettingsE>:
	...
   d6ab4:	4369 000d 6564 6166 6c75 2074 4d00 4253     iC..default .MSB
   d6ac4:	4c00 4253 3c00 5053 5349 7465 6974 676e     .LSB.<SPISetting
   d6ad4:	2073 6564 6166 6c75 3e74 3c00 5053 5349     s default>.<SPIS
   d6ae4:	7465 6974 676e 2073 7325 6c25 2075 7325     ettings %s%lu %s
   d6af4:	4d20 444f 2545 3e64 0000 0000                MODE%d>....

000d6b00 <_ZTVN5spark13EthernetClassE>:
	...
   d6b08:	4dab 000d 4da1 000d 4d97 000d 4d8d 000d     .M...M...M...M..
   d6b18:	4d81 000d 4d75 000d 4d69 000d 4d61 000d     .M..uM..iM..aM..
   d6b28:	4d57 000d 4d4d 000d 589d 000d               WM..MM...X..

000d6b34 <_ZN12_GLOBAL__N_1L14clock_divisorsE>:
   d6b34:	0800 1810 2820 3830 6162 6475 5300 7265     .... (08baud.Ser
   d6b44:	6169 006c 6553 6972 6c61 0031 7974 6570     ial.Serial1.type
   d6b54:	7000 7261 6d61 6300 646d 6900 0064 6e68     .param.cmd.id.hn
   d6b64:	0064 7473 6d72 6600 6c69 0074 766c 006c     d.strm.filt.lvl.
   d6b74:	6461 4864 6e61 6c64 7265 7200 6d65 766f     addHandler.remov
   d6b84:	4865 6e61 6c64 7265 6500 756e 486d 6e61     eHandler.enumHan
   d6b94:	6c64 7265 0073 534a 4e4f 7453 6572 6d61     dlers.JSONStream
   d6ba4:	6f4c 4867 6e61 6c64 7265 6100 7070 2500     LogHandler.app.%
   d6bb4:	3130 7530 0020 205d 2500 0064 202c 2800     010u .] .%d., .(
   d6bc4:	3a29 0020 5b20 6300 646f 2065 203d 2500     ): . [.code = .%
   d6bd4:	0069 6564 6174 6c69 2073 203d 0d00 000a     i.details = ....
   d6be4:	6e6c 6600 006e 6f63 6564 6400 7465 6961     ln.fn.code.detai
   d6bf4:	006c 6f6e 656e 7400 6172 6563 6900 666e     l.none.trace.inf
   d6c04:	006f 6177 6e72 6500 7272 726f 7000 6e61     o.warn.error.pan
   d6c14:	6369 6100 6c6c 5a00 2500 302b 6433 253a     ic.all.Z.%+03d:%
   d6c24:	3230 0075 5925 252d 2d6d 6425 2554 3a48     02u.%Y-%m-%dT%H:
   d6c34:	4d25 253a 2553 007a 7361 7463 6d69 0065     %M:%S%z.asctime.

000d6c44 <_ZTV9IPAddress>:
	...
   d6c4c:	5249 000d 5239 000d 523b 000d               IR..9R..;R..

000d6c58 <_ZTV9USBSerial>:
	...
   d6c60:	5321 000d 5371 000d 537f 000d 4f9d 000d     !S..qS...S...O..
   d6c70:	535d 000d 5323 000d 5339 000d 536b 000d     ]S..#S..9S..kS..
   d6c80:	534f 000d 531d 000d                         OS...S..

000d6c88 <_ZTV11USARTSerial>:
	...
   d6c90:	542d 000d 547d 000d 548b 000d 4f9d 000d     -T..}T...T...O..
   d6ca0:	5441 000d 5463 000d 544f 000d 5477 000d     AT..cT..OT..wT..
   d6cb0:	542f 000d 5433 000d                         /T..3T..

000d6cb8 <_ZTV7TwoWire>:
	...
   d6cc0:	5531 000d 557b 000d 5553 000d 5533 000d     1U..{U..SU..3U..
   d6cd0:	555b 000d 5563 000d 556b 000d 5573 000d     [U..cU..kU..sU..

000d6ce0 <_ZTVN5spark9MeshClassE>:
	...
   d6ce8:	569d 000d 5693 000d 5689 000d 567f 000d     .V...V...V...V..
   d6cf8:	5673 000d 5667 000d 565b 000d 5653 000d     sV..gV..[V..SV..
   d6d08:	5649 000d 563f 000d 589d 000d               IV..?V...X..

000d6d14 <_ZTVN5spark9WiFiClassE>:
	...
   d6d1c:	5817 000d 580d 000d 5803 000d 57b9 000d     .X...X...X...W..
   d6d2c:	57f7 000d 57eb 000d 57df 000d 57d7 000d     .W...W...W...W..
   d6d3c:	57cd 000d 57c3 000d 589d 000d               .W...W...X..

000d6d48 <_ZTVN5spark12NetworkClassE>:
	...
   d6d50:	5835 000d 583f 000d 5849 000d 5853 000d     5X..?X..IX..SX..
   d6d60:	585d 000d 5869 000d 5875 000d 5881 000d     ]X..iX..uX...X..
   d6d70:	5889 000d 5893 000d 589d 000d               .X...X...X..

000d6d7c <_ZSt7nothrow>:
   d6d7c:	0000 0000 7173 7472 0000 0000               ....sqrt....

000d6d88 <__sf_fake_stdin>:
	...

000d6da8 <__sf_fake_stdout>:
	...

000d6dc8 <__sf_fake_stderr>:
	...
   d6de8:	0043                                        C.

000d6dea <link_const_variable_data_end>:
	...

000d6dec <link_constructors_location>:
   d6dec:	000d4325 	.word	0x000d4325
   d6df0:	000d48fb 	.word	0x000d48fb
   d6df4:	000d48ff 	.word	0x000d48ff
   d6df8:	000d4db5 	.word	0x000d4db5
   d6dfc:	000d4f31 	.word	0x000d4f31
   d6e00:	000d4f75 	.word	0x000d4f75
   d6e04:	000d50c5 	.word	0x000d50c5
   d6e08:	000d50d5 	.word	0x000d50d5
   d6e0c:	000d510d 	.word	0x000d510d
   d6e10:	000d5769 	.word	0x000d5769
   d6e14:	000d5821 	.word	0x000d5821
   d6e18:	000d5969 	.word	0x000d5969
   d6e1c:	000d5b29 	.word	0x000d5b29
   d6e20:	000d5bad 	.word	0x000d5bad
   d6e24:	000d5c71 	.word	0x000d5c71
   d6e28:	000d5d35 	.word	0x000d5d35

000d6e2c <link_constructors_end>:
   d6e2c:	00000000 	.word	0x00000000
